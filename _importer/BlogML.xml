<?xml version="1.0" encoding="utf-8"?>
<blog root-url="/blogs/nhibernate/default.aspx" date-created="2014-09-29T10:56:41" xmlns="http://www.blogml.com/2006/09/BlogML" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <title type="text"><![CDATA[NHibernate blog]]></title>
  <sub-title type="text"><![CDATA[]]></sub-title>
  <authors>
    <author id="2123" date-created="2008-08-30T15:08:45" date-modified="2010-01-04T23:29:30" approved="true" email="kailuo.wang@gmail.com">
      <title type="text"><![CDATA[kailuowang]]></title>
    </author>
    <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
      <title type="text"><![CDATA[darioquintana]]></title>
    </author>
    <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
      <title type="text"><![CDATA[fabiomaulo]]></title>
    </author>
  </authors>
  <extended-properties>
    <property name="CommentModeration" value="Disabled" />
    <property name="SendTrackback" value="Yes" />
  </extended-properties>
  <categories>
    <category id="1156" date-created="2010-07-01T05:16:28" date-modified="2010-07-01T05:16:28" approved="true" parentref="0">
      <title type="text"><![CDATA[&quot;Composite Keys&quot;]]></title>
    </category>
    <category id="1095" date-created="2008-10-12T20:35:06" date-modified="2008-10-12T20:35:06" approved="true" parentref="0">
      <title type="text"><![CDATA[AOP]]></title>
    </category>
    <category id="1141" date-created="2009-04-03T00:05:07" date-modified="2009-04-03T00:05:07" approved="true" parentref="0">
      <title type="text"><![CDATA[Asp.Net]]></title>
    </category>
    <category id="1147" date-created="2009-08-11T20:16:19" date-modified="2009-08-11T20:16:19" approved="true" parentref="0">
      <title type="text"><![CDATA[ASP.NET MVC]]></title>
    </category>
    <category id="1142" date-created="2009-04-24T06:23:52" date-modified="2009-04-24T06:23:52" approved="true" parentref="0">
      <title type="text"><![CDATA[ast parser]]></title>
    </category>
    <category id="1101" date-created="2008-10-21T13:14:50" date-modified="2008-10-21T13:14:50" approved="true" parentref="0">
      <title type="text"><![CDATA[auto propeties]]></title>
    </category>
    <category id="1102" date-created="2008-10-21T13:14:50" date-modified="2008-10-21T13:14:50" approved="true" parentref="0">
      <title type="text"><![CDATA[backfield]]></title>
    </category>
    <category id="1108" date-created="2008-11-02T20:14:33" date-modified="2008-11-02T20:14:33" approved="true" parentref="0">
      <title type="text"><![CDATA[batch]]></title>
    </category>
    <category id="1021" date-created="2008-09-01T17:13:44" date-modified="2008-09-01T17:13:44" approved="true" parentref="0">
      <title type="text"><![CDATA[batcher]]></title>
    </category>
    <category id="1001" date-created="2008-08-29T14:39:56" date-modified="2008-08-29T14:39:56" approved="true" description="This category is about blogging" parentref="0">
      <title type="text"><![CDATA[Blogging]]></title>
    </category>
    <category id="1172" date-created="2011-08-30T14:40:48" date-modified="2011-08-30T14:40:48" approved="true" parentref="0">
      <title type="text"><![CDATA[Book]]></title>
    </category>
    <category id="1139" date-created="2009-03-22T14:19:26" date-modified="2009-03-22T14:19:26" approved="true" parentref="0">
      <title type="text"><![CDATA[bugs]]></title>
    </category>
    <category id="1030" date-created="2008-09-05T00:18:57" date-modified="2008-09-05T00:18:57" approved="true" parentref="0">
      <title type="text"><![CDATA[BuildSessionFactory]]></title>
    </category>
    <category id="1105" date-created="2008-11-02T20:14:06" date-modified="2008-11-02T20:14:06" approved="true" parentref="0">
      <title type="text"><![CDATA[bulk]]></title>
    </category>
    <category id="1035" date-created="2008-09-05T04:05:23" date-modified="2008-09-05T04:05:23" approved="true" parentref="0">
      <title type="text"><![CDATA[Burrow]]></title>
    </category>
    <category id="1113" date-created="2008-11-08T20:02:20" date-modified="2008-11-08T20:02:20" approved="true" parentref="0">
      <title type="text"><![CDATA[Burrow Release]]></title>
    </category>
    <category id="1103" date-created="2008-10-21T19:22:06" date-modified="2008-10-21T19:22:06" approved="true" parentref="0">
      <title type="text"><![CDATA[Burrow Release Session]]></title>
    </category>
    <category id="1019" date-created="2008-08-31T21:30:40" date-modified="2008-08-31T21:30:40" approved="true" parentref="0">
      <title type="text"><![CDATA[caches]]></title>
    </category>
    <category id="1091" date-created="2008-10-12T14:06:38" date-modified="2008-10-12T14:06:38" approved="true" parentref="0">
      <title type="text"><![CDATA[Castle]]></title>
    </category>
    <category id="1169" date-created="2011-02-24T04:24:16" date-modified="2011-02-24T04:24:16" approved="true" parentref="0">
      <title type="text"><![CDATA[ClientProfile]]></title>
    </category>
    <category id="1027" date-created="2008-09-03T23:29:45" date-modified="2008-09-03T23:29:45" approved="true" parentref="0">
      <title type="text"><![CDATA[collections]]></title>
    </category>
    <category id="1039" date-created="2008-09-06T20:38:15" date-modified="2008-09-06T20:38:15" approved="true" parentref="0">
      <title type="text"><![CDATA[configuration]]></title>
    </category>
    <category id="1052" date-created="2008-09-19T21:27:23" date-modified="2008-09-19T21:27:23" approved="true" parentref="0">
      <title type="text"><![CDATA[connection]]></title>
    </category>
    <category id="1041" date-created="2008-09-06T20:46:59" date-modified="2008-09-06T20:46:59" approved="true" parentref="0">
      <title type="text"><![CDATA[continuous integration]]></title>
    </category>
    <category id="1123" date-created="2009-01-30T16:08:30" date-modified="2009-01-30T16:08:30" approved="true" parentref="0">
      <title type="text"><![CDATA[Criteria]]></title>
    </category>
    <category id="1040" date-created="2008-09-06T20:46:59" date-modified="2008-09-06T20:46:59" approved="true" parentref="0">
      <title type="text"><![CDATA[database]]></title>
    </category>
    <category id="1131" date-created="2009-03-12T00:41:40" date-modified="2009-03-12T00:41:40" approved="true" parentref="0">
      <title type="text"><![CDATA[Date]]></title>
    </category>
    <category id="1133" date-created="2009-03-12T00:41:40" date-modified="2009-03-12T00:41:40" approved="true" parentref="0">
      <title type="text"><![CDATA[DateTime2]]></title>
    </category>
    <category id="1132" date-created="2009-03-12T00:41:40" date-modified="2009-03-12T00:41:40" approved="true" parentref="0">
      <title type="text"><![CDATA[DateTimeOffset]]></title>
    </category>
    <category id="1090" date-created="2008-10-12T14:06:38" date-modified="2008-10-12T14:06:38" approved="true" parentref="0">
      <title type="text"><![CDATA[Deploy]]></title>
    </category>
    <category id="1135" date-created="2009-03-13T12:57:00" date-modified="2009-03-13T12:57:00" approved="true" parentref="0">
      <title type="text"><![CDATA[Dialect]]></title>
    </category>
    <category id="1109" date-created="2008-11-02T20:14:40" date-modified="2008-11-02T20:14:40" approved="true" parentref="0">
      <title type="text"><![CDATA[DML]]></title>
    </category>
    <category id="1093" date-created="2008-10-12T20:35:06" date-modified="2008-10-12T20:35:06" approved="true" parentref="0">
      <title type="text"><![CDATA[Dynamic Entities]]></title>
    </category>
    <category id="1097" date-created="2008-10-16T17:24:40" date-modified="2008-10-16T17:24:40" approved="true" parentref="0">
      <title type="text"><![CDATA[Dynamic-Map]]></title>
    </category>
    <category id="1099" date-created="2008-10-16T17:24:40" date-modified="2008-10-16T17:24:40" approved="true" parentref="0">
      <title type="text"><![CDATA[EntityMode]]></title>
    </category>
    <category id="1098" date-created="2008-10-16T17:24:40" date-modified="2008-10-16T17:24:40" approved="true" parentref="0">
      <title type="text"><![CDATA[Entity-Name]]></title>
    </category>
    <category id="1044" date-created="2008-09-06T20:55:11" date-modified="2008-09-06T20:55:11" approved="true" parentref="0">
      <title type="text"><![CDATA[equality]]></title>
    </category>
    <category id="1047" date-created="2008-09-10T13:39:16" date-modified="2008-09-10T13:39:16" approved="true" parentref="0">
      <title type="text"><![CDATA[event listener]]></title>
    </category>
    <category id="1143" date-created="2009-05-18T04:37:03" date-modified="2009-05-18T04:37:03" approved="true" parentref="0">
      <title type="text"><![CDATA[examples]]></title>
    </category>
    <category id="1119" date-created="2008-12-16T00:41:12" date-modified="2008-12-16T00:41:12" approved="true" parentref="0">
      <title type="text"><![CDATA[export]]></title>
    </category>
    <category id="1048" date-created="2008-09-11T00:58:39" date-modified="2008-09-11T00:58:39" approved="true" parentref="0">
      <title type="text"><![CDATA[feed]]></title>
    </category>
    <category id="1171" date-created="2011-03-01T05:18:31" date-modified="2011-03-01T05:18:31" approved="true" parentref="0">
      <title type="text"><![CDATA[Flex to dot NET]]></title>
    </category>
    <category id="1128" date-created="2009-02-18T14:58:17" date-modified="2009-02-18T14:58:17" approved="true" parentref="0">
      <title type="text"><![CDATA[fluent configuration]]></title>
    </category>
    <category id="1148" date-created="2009-08-11T20:16:19" date-modified="2009-08-11T20:16:19" approved="true" parentref="0">
      <title type="text"><![CDATA[Fluent NHibernate]]></title>
    </category>
    <category id="1136" date-created="2009-03-13T12:57:00" date-modified="2009-03-13T12:57:00" approved="true" parentref="0">
      <title type="text"><![CDATA[Function]]></title>
    </category>
    <category id="1124" date-created="2009-01-30T16:08:30" date-modified="2009-01-30T16:08:30" approved="true" parentref="0">
      <title type="text"><![CDATA[Future]]></title>
    </category>
    <category id="1116" date-created="2008-11-27T15:22:24" date-modified="2008-11-27T15:22:24" approved="true" parentref="0">
      <title type="text"><![CDATA[GAC]]></title>
    </category>
    <category id="1125" date-created="2009-02-10T00:10:03" date-modified="2009-02-10T00:10:03" approved="true" parentref="0">
      <title type="text"><![CDATA[generators]]></title>
    </category>
    <category id="1077" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[GIS]]></title>
    </category>
    <category id="1153" date-created="2009-10-19T09:15:14" date-modified="2009-10-19T09:15:14" approved="true" parentref="0">
      <title type="text"><![CDATA[hbm2net]]></title>
    </category>
    <category id="1050" date-created="2008-09-12T17:43:36" date-modified="2008-09-12T17:43:36" approved="true" parentref="0">
      <title type="text"><![CDATA[HowTo]]></title>
    </category>
    <category id="1122" date-created="2009-01-30T16:08:30" date-modified="2009-01-30T16:08:30" approved="true" parentref="0">
      <title type="text"><![CDATA[HQL]]></title>
    </category>
    <category id="1138" date-created="2009-03-20T07:47:06" date-modified="2009-03-20T07:47:06" approved="true" parentref="0">
      <title type="text"><![CDATA[identifier]]></title>
    </category>
    <category id="1043" date-created="2008-09-06T20:55:11" date-modified="2008-09-06T20:55:11" approved="true" parentref="0">
      <title type="text"><![CDATA[identity]]></title>
    </category>
    <category id="1046" date-created="2008-09-06T22:05:36" date-modified="2008-09-06T22:05:36" approved="true" parentref="0">
      <title type="text"><![CDATA[introduction]]></title>
    </category>
    <category id="1104" date-created="2008-10-31T22:46:25" date-modified="2008-10-31T22:46:25" approved="true" parentref="0">
      <title type="text"><![CDATA[Inversion of Control]]></title>
    </category>
    <category id="1117" date-created="2008-12-12T11:47:32" date-modified="2008-12-12T11:47:32" approved="true" parentref="0">
      <title type="text"><![CDATA[IoC]]></title>
    </category>
    <category id="1152" date-created="2009-10-15T18:24:53" date-modified="2009-10-15T18:24:53" approved="true" parentref="0">
      <title type="text"><![CDATA[IUserType]]></title>
    </category>
    <category id="1149" date-created="2009-08-11T20:16:19" date-modified="2009-08-11T20:16:19" approved="true" parentref="0">
      <title type="text"><![CDATA[jQuery]]></title>
    </category>
    <category id="1042" date-created="2008-09-06T20:52:18" date-modified="2008-09-06T20:52:18" approved="true" parentref="0">
      <title type="text"><![CDATA[lazy loading]]></title>
    </category>
    <category id="1130" date-created="2009-02-22T20:06:08" date-modified="2009-02-22T20:06:08" approved="true" parentref="0">
      <title type="text"><![CDATA[linq]]></title>
    </category>
    <category id="1157" date-created="2010-07-28T16:29:36" date-modified="2010-07-28T16:29:36" approved="true" parentref="0">
      <title type="text"><![CDATA[linqtoxsdmappings]]></title>
    </category>
    <category id="1045" date-created="2008-09-06T21:05:35" date-modified="2008-09-06T21:05:35" approved="true" parentref="0">
      <title type="text"><![CDATA[logging]]></title>
    </category>
    <category id="1026" date-created="2008-09-01T17:15:59" date-modified="2008-09-01T17:15:59" approved="true" parentref="0">
      <title type="text"><![CDATA[mapping]]></title>
    </category>
    <category id="1173" date-created="2011-09-05T07:24:23" date-modified="2011-09-05T07:24:23" approved="true" parentref="0">
      <title type="text"><![CDATA[mapping by code]]></title>
    </category>
    <category id="1115" date-created="2008-11-17T00:06:29" date-modified="2008-11-17T00:06:29" approved="true" parentref="0">
      <title type="text"><![CDATA[Mapping source]]></title>
    </category>
    <category id="1070" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[MsSqlSpatial]]></title>
    </category>
    <category id="1140" date-created="2009-04-03T00:05:07" date-modified="2009-04-03T00:05:07" approved="true" parentref="0">
      <title type="text"><![CDATA[MVC]]></title>
    </category>
    <category id="1146" date-created="2009-08-11T20:16:19" date-modified="2009-08-11T20:16:19" approved="true" parentref="0">
      <title type="text"><![CDATA[MVCContrib]]></title>
    </category>
    <category id="1088" date-created="2008-10-08T13:40:15" date-modified="2008-10-08T13:40:15" approved="true" parentref="0">
      <title type="text"><![CDATA[MySQL]]></title>
    </category>
    <category id="1032" date-created="2008-09-05T00:18:57" date-modified="2008-09-05T00:18:57" approved="true" parentref="0">
      <title type="text"><![CDATA[Named Query]]></title>
    </category>
    <category id="1036" date-created="2008-09-05T04:05:23" date-modified="2008-09-05T04:05:23" approved="true" parentref="0">
      <title type="text"><![CDATA[News]]></title>
    </category>
    <category id="1092" date-created="2008-10-12T18:52:37" date-modified="2008-10-12T18:52:37" approved="true" parentref="0">
      <title type="text"><![CDATA[NH2.1]]></title>
    </category>
    <category id="1089" date-created="2008-10-12T14:06:38" date-modified="2008-10-12T14:06:38" approved="true" parentref="0">
      <title type="text"><![CDATA[NHibernate]]></title>
    </category>
    <category id="1034" date-created="2008-09-05T04:03:31" date-modified="2008-09-05T04:03:31" approved="true" parentref="0">
      <title type="text"><![CDATA[NHibernate Burrow release &quot;1.0.0 CR1&quot;]]></title>
    </category>
    <category id="1033" date-created="2008-09-05T03:49:25" date-modified="2008-09-05T03:49:25" approved="true" parentref="0">
      <title type="text"><![CDATA[NHibernate Burrow release 1.0.0 CR 1]]></title>
    </category>
    <category id="1018" date-created="2008-08-31T20:52:36" date-modified="2008-08-31T20:52:36" approved="true" parentref="0">
      <title type="text"><![CDATA[nhibernate caches]]></title>
    </category>
    <category id="1145" date-created="2009-06-02T17:31:33" date-modified="2009-06-02T17:31:33" approved="true" parentref="0">
      <title type="text"><![CDATA[NHibernate Documentation]]></title>
    </category>
    <category id="1150" date-created="2009-08-11T20:16:19" date-modified="2009-08-11T20:16:19" approved="true" parentref="0">
      <title type="text"><![CDATA[Ninject]]></title>
    </category>
    <category id="1075" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[NTS]]></title>
    </category>
    <category id="1072" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[OGC]]></title>
    </category>
    <category id="1071" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[OpenGIS]]></title>
    </category>
    <category id="1137" date-created="2009-03-20T07:47:06" date-modified="2009-03-20T07:47:06" approved="true" parentref="0">
      <title type="text"><![CDATA[poid]]></title>
    </category>
    <category id="1074" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[PostGis]]></title>
    </category>
    <category id="1022" date-created="2008-09-01T17:14:44" date-modified="2008-09-01T17:14:44" approved="true" parentref="0">
      <title type="text"><![CDATA[postsharp]]></title>
    </category>
    <category id="1051" date-created="2008-09-19T21:27:23" date-modified="2008-09-19T21:27:23" approved="true" parentref="0">
      <title type="text"><![CDATA[provider]]></title>
    </category>
    <category id="1025" date-created="2008-09-01T17:14:56" date-modified="2008-09-01T17:14:56" approved="true" parentref="0">
      <title type="text"><![CDATA[proxy]]></title>
    </category>
    <category id="1053" date-created="2008-09-23T04:20:22" date-modified="2008-09-23T04:20:22" approved="true" parentref="0">
      <title type="text"><![CDATA[ProxyGenerators]]></title>
    </category>
    <category id="1020" date-created="2008-09-01T17:13:44" date-modified="2008-09-01T17:13:44" approved="true" parentref="0">
      <title type="text"><![CDATA[query]]></title>
    </category>
    <category id="1112" date-created="2008-11-02T20:16:49" date-modified="2008-11-02T20:16:49" approved="true" parentref="0">
      <title type="text"><![CDATA[querying]]></title>
    </category>
    <category id="1144" date-created="2009-05-18T04:37:03" date-modified="2009-05-18T04:37:03" approved="true" parentref="0">
      <title type="text"><![CDATA[quickstart]]></title>
    </category>
    <category id="1038" date-created="2008-09-06T20:32:16" date-modified="2008-09-06T20:32:16" approved="true" parentref="0">
      <title type="text"><![CDATA[relation]]></title>
    </category>
    <category id="1111" date-created="2008-11-02T20:15:48" date-modified="2008-11-02T20:15:48" approved="true" parentref="0">
      <title type="text"><![CDATA[Release]]></title>
    </category>
    <category id="1114" date-created="2008-11-14T22:36:01" date-modified="2008-11-14T22:36:01" approved="true" parentref="0">
      <title type="text"><![CDATA[release Burrow 2.0.1GA 1.0.1GA]]></title>
    </category>
    <category id="1174" date-created="2011-11-12T00:27:52" date-modified="2011-11-12T00:27:52" approved="true" parentref="0">
      <title type="text"><![CDATA[S#arp Lite]]></title>
    </category>
    <category id="1120" date-created="2008-12-16T00:41:12" date-modified="2008-12-16T00:41:12" approved="true" parentref="0">
      <title type="text"><![CDATA[schema action]]></title>
    </category>
    <category id="1107" date-created="2008-11-02T20:14:06" date-modified="2008-11-02T20:14:06" approved="true" parentref="0">
      <title type="text"><![CDATA[Session]]></title>
    </category>
    <category id="1029" date-created="2008-09-05T00:18:57" date-modified="2008-09-05T00:18:57" approved="true" parentref="0">
      <title type="text"><![CDATA[SessionFactory]]></title>
    </category>
    <category id="1078" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[spatial]]></title>
    </category>
    <category id="1076" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[SQL Server]]></title>
    </category>
    <category id="1073" date-created="2008-10-01T02:39:12" date-modified="2008-10-01T02:39:12" approved="true" parentref="0">
      <title type="text"><![CDATA[SQL Server 2008]]></title>
    </category>
    <category id="1106" date-created="2008-11-02T20:14:06" date-modified="2008-11-02T20:14:06" approved="true" parentref="0">
      <title type="text"><![CDATA[Stateless]]></title>
    </category>
    <category id="1110" date-created="2008-11-02T20:14:59" date-modified="2008-11-02T20:14:59" approved="true" parentref="0">
      <title type="text"><![CDATA[statistics]]></title>
    </category>
    <category id="1155" date-created="2009-11-22T22:47:20" date-modified="2009-11-22T22:47:20" approved="true" parentref="0">
      <title type="text"><![CDATA[T4]]></title>
    </category>
    <category id="1100" date-created="2008-10-20T13:43:37" date-modified="2008-10-20T13:43:37" approved="true" parentref="0">
      <title type="text"><![CDATA[Tests]]></title>
    </category>
    <category id="1134" date-created="2009-03-12T00:41:40" date-modified="2009-03-12T00:41:40" approved="true" parentref="0">
      <title type="text"><![CDATA[Time]]></title>
    </category>
    <category id="1158" date-created="2010-07-28T21:55:53" date-modified="2010-07-28T21:55:53" approved="true" parentref="0">
      <title type="text"><![CDATA[Tooling]]></title>
    </category>
    <category id="1094" date-created="2008-10-12T20:35:06" date-modified="2008-10-12T20:35:06" approved="true" parentref="0">
      <title type="text"><![CDATA[Tuplizers]]></title>
    </category>
    <category id="1127" date-created="2009-02-10T12:21:52" date-modified="2009-02-10T12:21:52" approved="true" parentref="0">
      <title type="text"><![CDATA[uNHAddin]]></title>
    </category>
    <category id="1126" date-created="2009-02-10T12:11:47" date-modified="2009-02-10T12:11:47" approved="true" parentref="0">
      <title type="text"><![CDATA[uNHAddins]]></title>
    </category>
    <category id="1121" date-created="2008-12-21T12:27:07" date-modified="2008-12-21T12:27:07" approved="true" parentref="0">
      <title type="text"><![CDATA[Unit of Work]]></title>
    </category>
    <category id="1096" date-created="2008-10-13T06:10:14" date-modified="2008-10-13T06:10:14" approved="true" parentref="0">
      <title type="text"><![CDATA[user-types]]></title>
    </category>
    <category id="1024" date-created="2008-09-01T17:14:44" date-modified="2008-09-01T17:14:44" approved="true" parentref="0">
      <title type="text"><![CDATA[validation]]></title>
    </category>
    <category id="1129" date-created="2009-02-18T14:58:17" date-modified="2009-02-18T14:58:17" approved="true" parentref="0">
      <title type="text"><![CDATA[Validator]]></title>
    </category>
    <category id="1037" date-created="2008-09-06T20:12:11" date-modified="2008-09-06T20:12:11" approved="true" parentref="0">
      <title type="text"><![CDATA[value object]]></title>
    </category>
    <category id="1118" date-created="2008-12-16T00:41:12" date-modified="2008-12-16T00:41:12" approved="true" parentref="0">
      <title type="text"><![CDATA[views]]></title>
    </category>
    <category id="1023" date-created="2008-09-01T17:14:44" date-modified="2008-09-01T17:14:44" approved="true" parentref="0">
      <title type="text"><![CDATA[virtual]]></title>
    </category>
    <category id="1168" date-created="2011-02-07T08:44:55" date-modified="2011-02-07T08:44:55" approved="true" parentref="0">
      <title type="text"><![CDATA[visual nhibernate]]></title>
    </category>
    <category id="1170" date-created="2011-03-01T05:18:31" date-modified="2011-03-01T05:18:31" approved="true" parentref="0">
      <title type="text"><![CDATA[WebORB]]></title>
    </category>
    <category id="1049" date-created="2008-09-12T17:43:36" date-modified="2008-09-12T17:43:36" approved="true" parentref="0">
      <title type="text"><![CDATA[Wiki]]></title>
    </category>
    <category id="1151" date-created="2009-08-16T00:25:11" date-modified="2009-08-16T00:25:11" approved="true" parentref="0">
      <title type="text"><![CDATA[WPF]]></title>
    </category>
    <category id="1028" date-created="2008-09-05T00:18:57" date-modified="2008-09-05T00:18:57" approved="true" parentref="0">
      <title type="text"><![CDATA[Xml]]></title>
    </category>
    <category id="1031" date-created="2008-09-05T00:18:57" date-modified="2008-09-05T00:18:57" approved="true" parentref="0">
      <title type="text"><![CDATA[Xsd]]></title>
    </category>
  </categories>
  <posts>
    <post id="10" date-created="2008-08-30T02:33:00" date-modified="2008-08-30T02:33:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/29/welcome-to-the-nhibernate-blog.aspx" type="normal" hasexcerpt="false" views="2344">
      <title type="text"><![CDATA[Welcome to the NHibernate blog]]></title>
      <content type="text"><![CDATA[<p>Hello community !</p>
<p>This is the NHibernate blog, you will find here a lot of news about this amazing framework. </p>
<p>These are just a few links about useful information: </p>
<p><a href="/wikis/">NHibernate Wiki</a></p>
<p><a href="/media/">NHibernate Downloads</a></p>
<p>and you may suscribe to our NHibernate blog using this <a href="http://feeds.feedburner.com/NHibernateBlog">link</a>. Stay tunned !</p>]]></content>
      <post-name type="text"><![CDATA[welcome to the nhibernate blog]]></post-name>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="11" date-created="2008-08-31T14:51:00" date-modified="2008-08-31T14:51:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/31/posting-some-older-posts.aspx" type="normal" hasexcerpt="false" views="6066">
      <title type="text"><![CDATA[Posting some older posts]]></title>
      <content type="text"><![CDATA[<p>Just wanted to let everyone know that i'll post some of my older NHibernate posts here...Dario asked so nicely, how could i refuse? :P</p>
<p>I'll also post any future NHibernate-related posts here, as well as on my own blog.</p>]]></content>
      <post-name type="text"><![CDATA[posting some older posts]]></post-name>
      <comments>
        <comment id="541" date-created="2009-11-12T19:59:40" date-modified="2009-11-12T19:59:40" approved="true" user-name="VIAGRA Online - Buy Cheap VIAGRA" user-url="http://nhforge.org/members/viagra/default.aspx">
          <title type="text"><![CDATA[re: Posting some older posts]]></title>
          <content type="text"><![CDATA[Very Good!]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="12" date-created="2008-08-31T14:56:00" date-modified="2008-08-31T14:56:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/31/nhibernate-mapping-examples.aspx" type="normal" hasexcerpt="false" views="10816">
      <title type="text"><![CDATA[NHibernate Mapping Examples]]></title>
      <content type="text"><![CDATA[<p>Note: this post was originally posted on <a href="http://davybrion.com/blog/2007/07/nhibernate-mapping-examples/">July 15, 2007</a>
</p>
<p>When you're starting out with NHibernate, it's sometimes hard to find good examples. Most examples online are too simple, or are incomplete (just the mappings, but no code for instance).  It's always easier if you have some examples that are large enough, but still small enough to be easy to grasp. So i created mappings and classes for the Northwind tables. I figured this could be useful reference material for anyone new to NHibernate so i'm making the whole thing available for everyone. You'll find examples of one-to-many, many-to-one and many-to-many associations in there.  I used a couple of different cascade options for the associations, depending on the constraints on the tables.  I've also included about 60 unit tests to verify the mappings are working correctly. These tests should also give you a good idea about how NHibernate deals with certain mappings and options.
I did modify the Northwind database here and there... the zip file contains all the sql create scripts. This is what my version looks like:
</p>
<p><a href="http://davybrion.com/blog/wp-content/uploads/2007/07/tablediagram.png" title="Northwind Table Diagram"><img src="http://davybrion.com/blog/wp-content/uploads/2007/07/tablediagram.png" alt="Northwind Table Diagram" width="886" height="795" /></a>
</p>
<p>&nbsp;</p>
<p>And the class diagram looks like this:
</p>
<p><a href="http://davybrion.com/blog/wp-content/uploads/2007/07/classdiagram.png" title="Northwind Class Diagram"><img src="http://davybrion.com/blog/wp-content/uploads/2007/07/classdiagram.png" alt="Northwind Class Diagram" width="886" height="797" /></a></p>
<p>
I do want to make it clear that this is just an example. I'm not saying that this how you should map your objects and their associations to tables and their relationships.  I pretty much provided every possible association in this example, whereas on a real project i'd only create the associations that i actaully need to implement the required functionality. But for the purpose of this example, i thought it would be a good idea to provide as much as possible.
You can download it <a href="http://www.ralinx.be/NorthwindNHibernateExample.zip">here</a></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping examples]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="48" date-created="2008-09-08T08:25:19" date-modified="2008-09-08T08:25:19" approved="true" user-name="caglar temur" user-url="http://www.nhforge.org/members/caglar-temur/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping Examples]]></title>
          <content type="text"><![CDATA[Thank you for sharing]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="13" date-created="2008-08-31T15:02:00" date-modified="2008-08-31T15:02:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/31/nhibernate-and-virtual-methods-properties.aspx" type="normal" hasexcerpt="false" views="6126">
      <title type="text"><![CDATA[NHibernate and virtual methods/properties]]></title>
      <content type="text"><![CDATA[<p>NOTE: This post was originally published on <a href="http://davybrion.com/blog/2008/05/nhibernate-and-virtual-methodsproperties/">July 4, 2008</a>
</p>
<p>
I love NHibernate but one of the things that bothers the hell out of me is that i keep forgetting to add the virtual keyword to each method or property in my entities.  And since NHibernate needs your classes' properties and methods to be virtual, this causes run-time errors when i run my tests. Since i'm already using <a href="http://davybrion.com/blog/2008/05/creating-sanity-checks/">custom compile time checks</a>, i figured i might as well add another one... from now on, i want my compilation to fail if any of my NHibernate entities have public methods/properties that aren't marked virtual.
Once again, it's PostSharp to the rescue:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">using</span> System;</p>
<p style="margin: 0px;"><span style="color: blue;">using</span> System.Reflection;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;"><span style="color: blue;">using</span> PostSharp.Extensibility;</p>
<p style="margin: 0px;"><span style="color: blue;">using</span> PostSharp.Laos;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;"><span style="color: blue;">namespace</span> Northwind.Aspects</p>
<p style="margin: 0px;">{</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Serializable</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">AttributeUsage</span>(<span style="color: #2b91af;">AttributeTargets</span>.Assembly | <span style="color: #2b91af;">AttributeTargets</span>.Method | <span style="color: #2b91af;">AttributeTargets</span>.Property)]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">MulticastAttributeUsage</span>(<span style="color: #2b91af;">MulticastTargets</span>.Method, TargetMemberAttributes = <span style="color: #2b91af;">MulticastAttributes</span>.Managed | </p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">MulticastAttributes</span>.NonAbstract | <span style="color: #2b91af;">MulticastAttributes</span>.Instance | </p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">MulticastAttributes</span>.Protected | <span style="color: #2b91af;">MulticastAttributes</span>.Public)]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> <span style="color: #2b91af;">RequireVirtualMethodsAndProperties</span> : <span style="color: #2b91af;">OnMethodBoundaryAspect</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">bool</span> CompileTimeValidate(<span style="color: #2b91af;">MethodBase</span> method)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (!method.IsVirtual)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span> methodName = method.DeclaringType.FullName + <span style="color: #a31515;">"."</span> + method.Name;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> message = <span style="color: blue;">new</span> <span style="color: #2b91af;">Message</span>(<span style="color: #2b91af;">SeverityType</span>.Fatal, <span style="color: #a31515;">"MustBeVirtual"</span>,</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span>.Format(<span style="color: #a31515;">"{0} must be virtual"</span>, methodName), GetType().Name);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">MessageSource</span>.MessageSink.Write(message);</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> <span style="color: blue;">false</span>;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> <span style="color: blue;">true</span>;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">}</p>
</div>
<p>

And then we make sure this check is applied to my NHibernate entities:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">#if</span> DEBUG</p>
<p style="margin: 0px;">[<span style="color: blue;">assembly</span>: <span style="color: #2b91af;">RequireVirtualMethodsAndProperties</span>(AttributeTargetTypes = <span style="color: #a31515;">"Northwind.Domain.Entities.*"</span>)]</p>
<p style="margin: 0px;"><span style="color: blue;">#endif</span></p>
</div>
<p>

Now, whenever i forget to mark my properties/methods as virtual, i get this:
<code>
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.RemoveTerritory must be virtual
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.AddTerritory must be virtual
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.get_Territories must be virtual
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.set_Description must be virtual
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.get_Description must be virtual
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.set_Id must be virtual
</code></p>
<p><code>EXEC : error MustBeVirtual: Northwind.Domain.Entities.Region.get_Id must be virtual
</code></p>
<p>&nbsp;</p>
<p><code>...
Done building project "Northwind.csproj" -- FAILED.
</code></p>
<p>&nbsp;</p>
<p>
And there we go :)</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and virtual methods properties]]></post-name>
      <categories>
        <category ref="1022" />
        <category ref="1023" />
        <category ref="1024" />
        <category ref="1025" />
      </categories>
      <comments>
        <comment id="24" date-created="2008-09-01T15:48:49" date-modified="2008-09-01T15:48:49" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NHibernate and virtual methods/properties]]></title>
          <content type="text"><![CDATA[Using NH2.0.0 you have a more deep Proxy validator.
In a soon future, probably, we move the responsibility of "proxy-validator" to IProxyFactoryFactory implementation.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="14" date-created="2008-08-31T15:05:00" date-modified="2008-08-31T15:05:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/31/the-query-batcher.aspx" type="normal" hasexcerpt="false" views="8879">
      <title type="text"><![CDATA[The Query Batcher]]></title>
      <content type="text"><![CDATA[<p>NOTE: this post was originally published on <a href="http://davybrion.com/blog/2008/06/the-query-batcher/">June 14, 2008</a></p>
<p>One of my favorite NHibernate features must be the MultiCriteria/MultiQuery support. This basically allows you to execute a set of queries in one database call. In case you don't know, an ICriteria instance is basically a programmatic query. If you use MultiCriteria, you can batch either ICriteria or DetachedCriteria instances. And if you use MultiQuery, you can batch regular HQL strings, IQuery instances (which are in fact also HQL queries) or references to named queries.
That gives you quite a few options to batch your queries. The only downside to using MultiCriteria and/or MultiQuery is that you have to retrieve the results with an index, based on the order in which you added the criteria or queries. Using index values in your code often reduces readability, so if i can i try to avoid using them.
So i wrote a little QueryBatcher class which allows me to retrieve the results based on a key value.  The class supports MultiCriteria as well as MultiQuery so you can use it to batch all kinds of queries. I didn't find a way to combine the batched criteria and the batched HQL queries in one database call, so if you mix criteria with hql queries, it will use one database call to execute all the criteria, and one database call to execute the hql queries.
</p>
<p>And now i can write code like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> ReturnsProperResultsWhenUsingMultipleQueries()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryBatcher.AddCriteria(<span style="color: #a31515;">"Products"</span>, session.CreateCriteria(<span style="color: blue;">typeof</span>(<span style="color: #2b91af;">Product</span>)));</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryBatcher.AddCriteria(<span style="color: #a31515;">"Suppliers"</span>, <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">Supplier</span>&gt;());</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryBatcher.AddHqlQuery(<span style="color: #a31515;">"ProductCategories"</span>, <span style="color: #a31515;">"from ProductCategory"</span>);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryBatcher.AddHqlQuery(<span style="color: #a31515;">"SomeProducts"</span>, </p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; session.CreateQuery(<span style="color: #a31515;">"from Product where Discontinued = :discontinued"</span>)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetBoolean(<span style="color: #a31515;">"discontinued"</span>, <span style="color: blue;">false</span>));</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.That(queryBatcher.GetEnumerableResult&lt;<span style="color: #2b91af;">Product</span>&gt;(<span style="color: #a31515;">"Products"</span>).Count() &gt; 0);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.That(queryBatcher.GetEnumerableResult&lt;<span style="color: #2b91af;">Supplier</span>&gt;(<span style="color: #a31515;">"Suppliers"</span>).Count() &gt; 0);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.That(queryBatcher.GetEnumerableResult&lt;<span style="color: #2b91af;">ProductCategory</span>&gt;(<span style="color: #a31515;">"ProductCategories"</span>).Count() &gt; 0);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.That(queryBatcher.GetEnumerableResult&lt;<span style="color: #2b91af;">Product</span>&gt;(<span style="color: #a31515;">"SomeProducts"</span>).Count() &gt; 0);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Obviously, this is a very simple example with extremely simple queries... but you can of course batch very complex queries with this as well.  You can also add queries that return scalar values so you could for instance do do something like queryBatcher.GetSingleResult&lt;long&gt;("TotalOutstandingAmount") and it would return that scalar value.
</p>
<p>This is the code of the QueryBatcher class:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> <span style="color: #2b91af;">QueryBatcher</span> : <span style="color: #2b91af;">IQueryBatcher</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">readonly</span> <span style="color: #2b91af;">Dictionary</span>&lt;<span style="color: blue;">string</span>, <span style="color: blue;">int</span>&gt; criteriaResultPositions;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">readonly</span> <span style="color: #2b91af;">List</span>&lt;<span style="color: #2b91af;">ICriteria</span>&gt; criteriaList;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">readonly</span> <span style="color: #2b91af;">List</span>&lt;<span style="color: #2b91af;">IQuery</span>&gt; hqlQueryList;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">readonly</span> <span style="color: #2b91af;">Dictionary</span>&lt;<span style="color: blue;">string</span>, <span style="color: blue;">int</span>&gt; queryResultPositions;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">readonly</span> <span style="color: #2b91af;">ISession</span> session;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: #2b91af;">IList</span> criteriaResults;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: #2b91af;">IList</span> queryResults;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> QueryBatcher(<span style="color: #2b91af;">IActiveSessionManager</span> activeSessionManager)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; session = activeSessionManager.GetActiveSession();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaList = <span style="color: blue;">new</span> <span style="color: #2b91af;">List</span>&lt;<span style="color: #2b91af;">ICriteria</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; hqlQueryList = <span style="color: blue;">new</span> <span style="color: #2b91af;">List</span>&lt;<span style="color: #2b91af;">IQuery</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaResultPositions = <span style="color: blue;">new</span> <span style="color: #2b91af;">Dictionary</span>&lt;<span style="color: blue;">string</span>, <span style="color: blue;">int</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryResultPositions = <span style="color: blue;">new</span> <span style="color: #2b91af;">Dictionary</span>&lt;<span style="color: blue;">string</span>, <span style="color: blue;">int</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> AddCriteria(<span style="color: blue;">string</span> key, <span style="color: #2b91af;">ICriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaList.Add(criteria);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaResultPositions.Add(key, criteriaList.Count - 1);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> AddCriteria(<span style="color: blue;">string</span> key, <span style="color: #2b91af;">DetachedCriteria</span> detachedCriteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; AddCriteria(key, detachedCriteria.GetExecutableCriteria(session));</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">object</span> GetResult(<span style="color: blue;">string</span> key)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ExecuteQueriesIfNecessary();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">object</span> result = GetResultFromList(key, criteriaResults, criteriaResultPositions);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (result != <span style="color: blue;">null</span>) <span style="color: blue;">return</span> result;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; result = GetResultFromList(key, queryResults, queryResultPositions);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (result != <span style="color: blue;">null</span>) <span style="color: blue;">return</span> result;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> <span style="color: blue;">null</span>;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: #2b91af;">IEnumerable</span>&lt;T&gt; GetEnumerableResult&lt;T&gt;(<span style="color: blue;">string</span> key)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> list = GetResult&lt;<span style="color: #2b91af;">IList</span>&gt;(key);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> list.Cast&lt;T&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T GetSingleResult&lt;T&gt;(<span style="color: blue;">string</span> key)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> result = GetResult&lt;<span style="color: #2b91af;">IList</span>&gt;(key);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> (T)result[0];</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> AddHqlQuery(<span style="color: blue;">string</span> key, <span style="color: #2b91af;">IQuery</span> query)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; hqlQueryList.Add(query);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryResultPositions.Add(key, hqlQueryList.Count - 1);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> AddHqlQuery(<span style="color: blue;">string</span> key, <span style="color: blue;">string</span> query)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; AddHqlQuery(key, session.CreateQuery(query));</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> ExecuteQueriesIfNecessary()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ExecuteCriteriaIfNecessary();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ExecuteHqlIfNecessary();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">void</span> ExecuteCriteriaIfNecessary()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (criteriaList.Count &gt; 0 &amp;&amp; criteriaResults == <span style="color: blue;">null</span>)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (criteriaList.Count == 1)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaResults = <span style="color: blue;">new</span> <span style="color: #2b91af;">ArrayList</span> { criteriaList[0].List() };</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> multiCriteria = session.CreateMultiCriteria();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaList.ForEach(c =&gt; multiCriteria.Add(c));</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteriaResults = multiCriteria.List();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">void</span> ExecuteHqlIfNecessary()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (hqlQueryList.Count &gt; 0 &amp;&amp; queryResults == <span style="color: blue;">null</span>)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (hqlQueryList.Count == 1)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryResults = <span style="color: blue;">new</span> <span style="color: #2b91af;">ArrayList</span> { hqlQueryList[0].List() };</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> multiQuery = session.CreateMultiQuery();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; hqlQueryList.ForEach(q =&gt; multiQuery.Add(q));</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; queryResults = multiQuery.List();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> T GetResult&lt;T&gt;(<span style="color: blue;">string</span> key)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> (T)GetResult(key);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">static</span> <span style="color: blue;">object</span> GetResultFromList(<span style="color: blue;">string</span> key, <span style="color: #2b91af;">IList</span> list, <span style="color: #2b91af;">IDictionary</span>&lt;<span style="color: blue;">string</span>, <span style="color: blue;">int</span>&gt; positions)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (positions.ContainsKey(key)) <span style="color: blue;">return</span> list[positions[key]];</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> <span style="color: blue;">null</span>;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; }</p>
</div>]]></content>
      <post-name type="text"><![CDATA[the query batcher]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1021" />
      </categories>
      <comments>
        <comment id="25" date-created="2008-09-01T16:33:44" date-modified="2008-09-01T16:33:44" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: The Query Batcher]]></title>
          <content type="text"><![CDATA[Good mix between MultiCriteria and MultiQuery of NH2.0.0. Perhaps would be useful to have a QueryBatcher to "merge" parameter.
Really nice.]]></content>
        </comment>
        <comment id="32" date-created="2008-09-05T10:24:00" date-modified="2008-09-05T10:24:00" approved="true" user-name="tehlike" user-url="http://www.nhforge.org/members/tehlike/default.aspx">
          <title type="text"><![CDATA[re: The Query Batcher]]></title>
          <content type="text"><![CDATA[Wouldn't it be useful to add it to Contrib/Core, wherever appropriate?]]></content>
        </comment>
        <comment id="33" date-created="2008-09-05T13:33:23" date-modified="2008-09-05T13:33:23" approved="true" user-name="Fabio Maulo" user-url="http://www.nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: The Query Batcher]]></title>
          <content type="text"><![CDATA[Sure. This wk i'm going to create NHibernate.AppBlock well... probably....]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="15" date-created="2008-08-31T15:07:00" date-modified="2008-08-31T15:07:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/31/data-access-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="17323">
      <title type="text"><![CDATA[Data Access With NHibernate]]></title>
      <content type="text"><![CDATA[<p>NOTE: this post was originally published on <a href="http://davybrion.com/blog/2008/06/data-access-with-nhibernate/">June 23rd, 2008</a></p>
<p>&nbsp;</p>
<p>
One thing that keeps amazing me is how many smart developers still feel the urge to write their own data access layer (DAL). They either do it all manually, or they generate parts of it, or they generate the whole thing. Whichever way you go, there are still various alternative paths you can choose from. Some people like to use stored procedures for everything, some people generate sql statements and provide a semi-OO API in front of it, some people still spend time constructing Command objects. I think i've seen most approaches by now, and my personal opinion is that they pretty much all suck.  
</p>
<p>These DAL's usually have at least one big downside to them. Generated DAL's are usually pretty good for productivity but most of the times they don't really offer you that much control over how queries should be executed, whether or not statements should be batched, specify fetching-strategies, etc.  Hand-written DAL's are terrible for productivity but you can fine tune each action to an optimal implementation.  These downsides are pretty big IMHO, and are often underestimated. Sometimes due to semi-religious stances and sometimes it's just due to ignorance.
As you already know, i'm a fan of NHibernate. Well, consider me a fan of decent ORM's in general. NHibernate just happens to be the one i know best and am very happy with. In this post i'd like to take a look at how you can easily offer the most common data access requirements without generating code, while still allowing high developer productivity.  We'll go over the implementation of a generic <a href="http://martinfowler.com/eaaCatalog/repository.html">Repository</a> class, and hopefully you'll see how much NHibernate can improve your way of working.
We're going to look at the implementation piece by piece, so lets just start with the declaration of the class so we can get that out of the way:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> <span style="color: #2b91af;">Repository</span>&lt;T&gt; : <span style="color: #2b91af;">IRepository</span>&lt;T&gt;</p>
</div>
<p>

As you can see, this is just a generic class that takes a type parameter. The type parameter represents the type of the Entity you want this repository to handle. If you have an Entity base class or interface, you probably want to restrict the type of T to inherit from Entity or implement IEntity or whatever. 
This class needs to be able to access the current NHibernate session, which i <a href="http://davybrion.com/blog/2008/06/managing-your-nhibernate-sessions/">discussed</a> yesterday:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">readonly</span> <span style="color: #2b91af;">IActiveSessionManager</span> activeSessionManager;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> Repository(<span style="color: #2b91af;">IActiveSessionManager</span> activeSessionManager)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">this</span>.activeSessionManager = activeSessionManager;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">protected</span> <span style="color: #2b91af;">ISession</span> Session</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> activeSessionManager.GetActiveSession(); }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Right, now we can actually get to the interesting Data Access parts.  Obviously, each DAL needs a way to retrieve a specific entity based on its Primary Key value:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Retrieves the entity with the given id</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="id"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;</span><span style="color: green;">the entity or null if it doesn't exist</span><span style="color: gray;">&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T Get(<span style="color: blue;">object</span> id)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> Session.Get&lt;T&gt;(id);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Very straightforward stuff... this simply uses the current NHibernate session to retrieve an entity of the requested type, with the given primary key value.
Another thing we need is a way to create or update entity instances:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Saves or updates the given entity</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="entity"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> SaveOrUpdate(T entity)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Session.SaveOrUpdate(entity);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

This method simply uses the session's SaveOrUpdate method, which will either perform an Insert (in case of a new entity) or an Update (in case of an existing entity).  NHibernate will perform a check for a new instance depending on how you've configured this in your mapping files.
So far this has been really straightforward, so it's time to get to a more interesting part.  Retrieving entities based on criteria (basically a query):
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns each entity that matches the given criteria</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: #2b91af;">IEnumerable</span>&lt;T&gt; FindAll(<span style="color: #2b91af;">DetachedCriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> criteria.GetExecutableCriteria(Session).List&lt;T&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

This probably needs a bit of explaining. The parameter is an instance of the DetachedCriteria type. A DetachedCriteria is just like a <a href="http://www.hibernate.org/hib_docs/nhibernate/1.2/reference/en/html_single/#querycriteria">Criteria</a> instance, except that it hasn't been associated with a session yet. So you can create the DetachedCriteria without being connected to a session.  This basically represents a query.  I'll show a concrete example of this later on.  The thing to remember is that this is the only code you really need to perform any query you want. You just have to write the query using the Criteria API. This does have a bit of a learning curve, but most people pick it up pretty fast.
You usually also want a way to determine the ordering of the result of the query:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns each entity that maches the given criteria, and orders the results </span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> according to the given Orders</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="orders"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: #2b91af;">IEnumerable</span>&lt;T&gt; FindAll(<span style="color: #2b91af;">DetachedCriteria</span> criteria, <span style="color: blue;">params</span> <span style="color: #2b91af;">Order</span>[] orders)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (orders != <span style="color: blue;">null</span>)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> order <span style="color: blue;">in</span> orders)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteria.AddOrder(order);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> FindAll(criteria);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Each order you provide is applied to the query and then the query is executed. Again, pretty simple stuff right? 
You want to know how you can get paging working? Here it is:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns each entity that matches the given criteria, with support for paging, </span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> and orders the results according to the given Orders</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="firstResult"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="numberOfResults"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="orders"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: #2b91af;">IEnumerable</span>&lt;T&gt; FindAll(<span style="color: #2b91af;">DetachedCriteria</span> criteria, <span style="color: blue;">int</span> firstResult, <span style="color: blue;">int</span> numberOfResults, <span style="color: blue;">params</span> <span style="color: #2b91af;">Order</span>[] orders)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; criteria.SetFirstResult(firstResult).SetMaxResults(numberOfResults);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> FindAll(criteria, orders);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Keep in mind that the executed query only retrieves the results within the paging range. It does not retrieve everything to perform the paging client-side, this happens in the db where it's supposed to happen.
What if you have a query that should only return one instance? That's easy to do as well:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns the one entity that matches the given criteria. Throws an exception if </span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> more than one entity matches the criteria</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T FindOne(<span style="color: #2b91af;">DetachedCriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> criteria.GetExecutableCriteria(Session).UniqueResult&lt;T&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

What if you have a query and you just want the very first result instead of the entire resultset? Again, pretty easy to do:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns the first entity to match the given criteria</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T FindFirst(<span style="color: #2b91af;">DetachedCriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> results = criteria.SetFirstResult(0).SetMaxResults(1)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .GetExecutableCriteria(Session).List&lt;T&gt;();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (results.Count &gt; 0)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> results[0];</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> <span style="color: blue;">default</span>(T);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Again, NHibernate will issue a smart sql statement... that is, it only retrieves the first result instead of the entire resultset.
Obviously, this is also useful if you can define the order of the results to pick the first result:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns the first entity to match the given criteria, ordered by the given order</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="order"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T FindFirst(<span style="color: #2b91af;">DetachedCriteria</span> criteria, <span style="color: #2b91af;">Order</span> order)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> FindFirst(criteria.AddOrder(order));</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

How often have you seen developers execute a query in code, only to use the count of the records without actually needing the returned records? We no longer need to beat the shit out of these developers:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns the total number of entities that match the given criteria</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">long</span> Count(<span style="color: #2b91af;">DetachedCriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> <span style="color: #2b91af;">Convert</span>.ToInt64(criteria.GetExecutableCriteria(Session)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetProjection(<span style="color: #2b91af;">Projections</span>.RowCountInt64()).UniqueResult());</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

In this case, NHibernates issues a simple select count... query based on the criteria you've provided. Nice huh?
We might as well throw in this one as well:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Returns true if at least one entity exists that matches the given criteria</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;returns&gt;&lt;/returns&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">bool</span> Exists(<span style="color: #2b91af;">DetachedCriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> Count(criteria) &gt; 0;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

And last, but certainly not least, you'll also want a way to delete entities from the database. How about this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Deletes the given entity</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="entity"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> Delete(T entity)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Session.Delete(entity);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Deletes every entity that matches the given criteria</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;param name="criteria"&gt;&lt;/param&gt;</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> Delete(<span style="color: #2b91af;">DetachedCriteria</span> criteria)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// a simple DELETE FROM ... WHERE ... would be much better, but i haven't found </span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// a way to do this yet with Criteria. So now it does two roundtrips... one for</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// the query, and one with all the batched delete statements (that is, if you've </span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// enabled CUD statement batching </span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (T entity <span style="color: blue;">in</span> FindAll(criteria))</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Delete(entity);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

The first Delete method simply deletes the given entity.  The second method probably needs to be explained a bit more.  This method receives a query, and it deletes all the items that the query returns. As you can see from the comment, it would be better if it would perform a DELETE FROM ... WHERE instead of fetching the results of the query but i didn't find a way to do that with the criteria API. In a more advanced scenario, this might actually be better than simply issuing a large DELETE statement because you could offer a Delete method which also receives a block of code to execute before or after each delete is executed. Which opens the door to a lot of interesting opportunities. 
And that's it basically... I really haven't shown you that much code right? And what does this code offer us? We get create/update/delete functionality, and we also have some nice options for querying our data.  And since the Criteria API of NHibernate allows you to create powerful and complex queries, you can use it to create your queries and then you simply pass these criteria to the repository to fetch the data. Just so we're clear on this, you're not just limited to specifying which data you want to retrieve, but you can also tell NHibernate how you want to retrieve it because you can define fetching strategies for each association. This is a tremendously powerful feature which offers you a lot of flexibility in choosing the most optimal data fetching approaches, without being limited to what your DAL supports or having to spend a lot of code on it.
Let's wrap up this post with a small example of how you could use this repository class to execute a query you wrote yourself:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> criteria = <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">ProductCategory</span>&gt;()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span style="color: #2b91af;">Expression</span>.Like(<span style="color: #a31515;">"Name"</span>, <span style="color: #a31515;">"Test%"</span>));</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> categories = repository.FindAll(criteria);</p>
</div>
<p>

As you can see, this is really easy. The only effort basically lies within building the query, so as you're queries become more complex, this effort obviously increases.  
If you combine this repository approach with <a href="http://davybrion.com/blog/2008/06/the-query-batcher/">query batching</a>, you end up with an easy-to-use data layer which offers you all the flexibility you could want, while still allowing you to implement specifically tuned solutions to achieve excellent performance.  Also, keep in mind that this is only a very basic repository implementation. The Rhino Commons repository implementation offers even more functionality with a couple of extra options to boost performance.  I really can't think of a single good reason not to use this approach anymore.</p>]]></content>
      <post-name type="text"><![CDATA[data access with nhibernate]]></post-name>
      <trackbacks>
        <trackback id="62" date-created="2008-09-27T14:51:28" date-modified="2008-09-27T14:51:28" approved="true" url="http://rodrigojuarez.com.ar/?p=33">
          <title type="text"><![CDATA[Blog de Rodrigo Juarez sobre TI  &amp;raquo; Blog Archive   &amp;raquo; Acceso a datos con NHibernate (Implementacion de un repositorio y uso de criteria)]]></title>
        </trackback>
        <trackback id="1107" date-created="2014-09-28T07:44:02" date-modified="2014-09-28T07:44:02" approved="true" url="http://www.lcgbangladesh.org/CHT/Reports/Zxc.Php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.blogmetrics.org%2Fcomponent%2Foption%2Ccom_rating%2FItemid%2C229%2Flang%2Cen%2Ftask%2Cthank%2F%3Echeck+out+nordstrom+rack+online+shopping%3C%2Fa%3E">
          <title type="text"><![CDATA[Recommended Resource site]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="22" date-created="2008-08-31T20:21:00" date-modified="2008-08-31T20:21:00" approved="true" post-url="/blogs/nhibernate/archive/2008/08/31/nh-caches-beta1-is-out.aspx" type="normal" hasexcerpt="false" views="2285">
      <title type="text"><![CDATA[NH.Caches Beta1 Is Out!]]></title>
      <content type="text"><![CDATA[<p>The&nbsp;first beta&nbsp;version of NHibernate.Caches is ready to be downloaded from SourceForge! (<a target="_blank" href="/media/p/6.aspx" title="Download">Download</a>)</p>
<p>To be honest, the most used caches haven't major changes, just some&nbsp;bug fixes, and a bit of refactoring. But, there are still some interesting things that make this&nbsp;version "a thing that every developer&nbsp;must-have", let's say:</p>
<p>- Works with NH 2.0.0 GA! Not yet using it ? Check out what are you missing: <a href="http://www.hibernate.org/357.html#A14">http://www.hibernate.org/357.html#A14</a></p>
<p>- Two new providers were added:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - indeXus.net Shared Cache - <a href="http://www.sharedcache.com">http://www.sharedcache.com</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Microsoft Distributed Cache (CodeName "Velocity") - <a href="http://msdn.microsoft.com/en-us/data/cc655792.aspx">http://msdn.microsoft.com/en-us/data/cc655792.aspx</a></p>
<p>&nbsp;</p>
<p>And, really thanks to dabuddhaman for the contributions!</p>]]></content>
      <post-name type="text"><![CDATA[nh caches beta1 is out]]></post-name>
      <categories>
        <category ref="1019" />
      </categories>
      <authors>
        <author id="2129" date-created="2008-08-30T23:07:34" date-modified="2012-03-07T15:05:51" approved="true" email="jancic@gmail.com">
          <title type="text"><![CDATA[diegojancic]]></title>
        </author>
      </authors>
    </post>
    <post id="28" date-created="2008-09-03T23:31:00" date-modified="2008-09-03T23:31:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/03/nhibernate-custom-collections-using-extension-methods.aspx" type="normal" hasexcerpt="false" views="2203">
      <title type="text"><![CDATA[NHibernate Custom Collections using Extension Methods]]></title>
      <content type="text"><![CDATA[<p>Last year, I wrote a series of posts (part <a href="http://devlicio.us/blogs/billy_mccafferty/archive/2007/12/03/custom-collections-with-nhibernate-part-i-the-basics.aspx">I</a>, <a href="http://devlicio.us/blogs/billy_mccafferty/archive/2007/12/06/custom-collections-with-nhibernate-part-ii-ilist-amp-lt-basic-amp-gt.aspx">II</a> and <a href="http://devlicio.us/blogs/billy_mccafferty/archive/2007/12/07/custom-collections-with-nhibernate-part-iii-refactored.aspx">III</a>) concerning the devlopment of custom collections which are compatible with NHibernate.&nbsp; I've written a new post which greatly simplifies this process with the use of (evil) extension methods:&nbsp; <a href="http://devlicio.us/blogs/billy_mccafferty/archive/2008/09/03/custom-collections-with-nhibernate-part-iv-extensions.aspx">http://devlicio.us/blogs/billy_mccafferty/archive/2008/09/03/custom-collections-with-nhibernate-part-iv-extensions.aspx</a>.&nbsp; I believe you'll find this much simpler and more elegant than&nbsp;my previous suggestion.</p>
<p>Billy McCafferty</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate custom collections using extension methods]]></post-name>
      <categories>
        <category ref="1027" />
      </categories>
      <authors>
        <author id="2182" date-created="2008-09-03T16:53:06" date-modified="2011-11-12T00:19:43" approved="true" email="nhforge@emccafferty.com">
          <title type="text"><![CDATA[bmccafferty]]></title>
        </author>
      </authors>
    </post>
    <post id="30" date-created="2008-09-05T00:23:00" date-modified="2008-09-05T00:23:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/04/nhibernate_2D00_isnt_2D00_integrated_2D00_to_2D00_the_2D00_compiler_2D00_so_2D00_what.aspx" type="normal" hasexcerpt="false" views="1836">
      <title type="text"><![CDATA[NHibernate isn't integrated to the compiler, so what?]]></title>
      <content type="text"><![CDATA[<p>I know, this title sounds like: "hmm?" Let me explain it with more detail.</p>
<p>NHibernate is a framework that use natively Xml in order to configure a mapping between objects and tables, is in charged of join these different worlds. </p>
<p>But now, what is going wrong with this? Many people can say that Xml files are evil, because you should write a lot of lines, and when you build your project, the compiler doesn't know if its ok or not, you have none errors. And this is true, you should run your project and see what happen in runtime, and to get an error in runtime is just annoying.</p>
<p>But now, do we have another alternative to this? Yes of course. Lets go to details. NHibernate has a "compiler" too, and you can guess what it is: <em>BuildSessionFactory()</em> method. You don't have to launch the whole application to know if your mapping is working well. A way to know if everything is ok is create a test like this:</p>
<p><img src="http://darioquintana.com.ar/files/CanBuild.png" /></p>
<p>Then you just need to build the project, and run this simple and dummy test, if your code pass though this, your mappings are ok.</p>
<p>We should remember one thing, you can map into Xml not just entities, you can map queries too (and another stuff that isn't part of this matter). To map queries into Xml it calls: <a href="/doc/nh/en/#manipulatingdata-queryinterface">Named Queries</a>, and in <a href="http://darioquintana.com.ar/blogging/?p=7">this post</a> we talk about this matter. But the main point is, mapping the queries you will know if them are well formed when <em>BuildSessionFactory()</em> is raised, besides another beauties discussed in that post.</p>
<p>Another thing you should remember is you MUST use the Xsd to validate the mapping file. This is mandatory if you're using NHibernate and you want to spend time programming instead of dealing with mapping errors (and here they come even with not-well-formed xmls). But this is topic to an How to or another post.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate-isnt-integrated-to-the-compiler-so-what]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1028" />
        <category ref="1029" />
        <category ref="1030" />
        <category ref="1031" />
        <category ref="1032" />
      </categories>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="31" date-created="2008-09-05T03:54:00" date-modified="2008-09-05T03:54:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/04/nhibernate-burrow-1-0-0-cr-1-released.aspx" type="normal" hasexcerpt="false" views="1841">
      <title type="text"><![CDATA[NHibernate.Burrow 1.0.0 CR 1 released]]></title>
      <content type="text"><![CDATA[<p>NHibernate.Burrow is a light weight middleware developed to support
.Net applications using NHibernate (maybe also referred as NH in this
article) as ORM framework by providing advanced and smart
session/transaction management and other facilitates. Documentation and
examples are available at NHForge.net. &nbsp;<br />
Any feedback or issue can be sent to NHibernate user group(<a href="http://groups.google.com/group/nhusers" target="_new">http://groups.google.com/group/nhusers</a>) and will be greatly anticipated. &nbsp;<br />
1.0.0.CR 1 is updated to NHibernate 2.0.0 GA.&nbsp;<br /><a href="http://sourceforge.net/project/showfiles.php?group_id=216446">Here for download.</a></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate burrow 1 0 0 cr 1 released]]></post-name>
      <categories>
        <category ref="1035" />
        <category ref="1036" />
      </categories>
      <authors>
        <author id="2123" date-created="2008-08-30T15:08:45" date-modified="2010-01-04T23:29:30" approved="true" email="kailuo.wang@gmail.com">
          <title type="text"><![CDATA[kailuowang]]></title>
        </author>
      </authors>
    </post>
    <post id="34" date-created="2008-09-05T16:09:00" date-modified="2008-09-05T16:09:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/05/nhforge-article-at-infoq.aspx" type="normal" hasexcerpt="false" views="1254">
      <title type="text"><![CDATA[NHForge article at InfoQ]]></title>
      <content type="text"><![CDATA[<p>For those willing to know how far this initiative is going, you can see the article announcing NHForge at InfoQ!</p>
<p><a href="http://www.infoq.com/news/2008/09/New-NHibernate-Community-Site" target="_blank">http://www.infoq.com/news/2008/09/New-NHibernate-Community-Site</a></p>
<p>Cheers.</p>
<p>&nbsp;</p>
<p>Gustavo Ringel</p>]]></content>
      <post-name type="text"><![CDATA[nhforge article at infoq]]></post-name>
      <trackbacks>
        <trackback id="1085" date-created="2014-09-22T09:49:16" date-modified="2014-09-22T09:49:16" approved="true" url="http://meritshealth.com/01_about/util/phpinfo.php/?a%5B%5D=Video+%28%3Ca+href%3Dhttp%3A%2F%2Fuadmin.isaev.info%2F%3Fa%255B%255D%3Dmore%2Babout%2Bcheap%2Blast%2Bminute%2Bdeals%2Bto%2Beurope%2B%2528%253Ca%2Bhref%253Dhttp%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253DjJCYD5RfS1o%253Ejust%2Bclick%2Bthe%2Bnext%2Bdocument%253C%252Fa%253E%2529%3Eread+this+article%3C%2Fa%3E%29">
          <title type="text"><![CDATA[click here for This Video]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2130" date-created="2008-08-30T23:23:03" date-modified="2009-02-22T10:18:57" approved="true" email="gustavo.ringel@gmail.com">
          <title type="text"><![CDATA[Gustavo]]></title>
        </author>
      </authors>
    </post>
    <post id="35" date-created="2008-09-05T18:07:46" date-modified="2008-09-05T18:07:46" approved="true" post-url="/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx" type="normal" hasexcerpt="false" views="26944">
      <title type="text"><![CDATA[A fluent interface to NHibernate - Part 1]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </p> <p>This is the first of a series of articles on the topic. Other posts will follow</p> <ul> <li>A fluent interface to NHibernate - Part 2 - Value Objects  <li>A fluent interface to NHibernate - Part 3 - Mapping Relations  <li>A fluent interface to NHibernate - Part 4 - Configuration</li></ul> <h2>Introduction</h2> <p>Do you like NHibernate? Do you like XML? My answer would be yes for the former and no for the latter. But if you want to map your entities to the underlying database tables you have no other choice than use XML. Ok, you are right, we still have the possibility to use attributes for the mapping (e.g. by using <a href="http://www.castleproject.org/activerecord/index.html">Castle Active Record</a>) but in this case we are "polluting" our nice domain objects with infrastructure related information which definitely does NOT belong into the domain model.</p> <p>Here comes our salvation. We now have a third player in the field. As first published by <a href="http://codebetter.com/blogs/jeremy.miller/archive/2008/06/18/working-faster-and-fewer-mapping-errors-with-nhibernate.aspx">Jeremy D. Miller</a> and later on by others (<a href="http://blog.jagregory.com/2008/08/08/introducing-fluent-nhibernate/">James Gregory</a>, <a href="http://www.iamnotmyself.com/2008/08/07/SkinningTheCatWithFluentNHibernate.aspx">Bobby Johnson</a>, <a href="http://zachariahyoung.com/zy/post/2008/08/fluent-nhibernate-for-creating-entity-mapping-files.aspx">Zachariah Young</a>, etc. ) we can map our domain objects by using a fluent interface which solves the following possible problems</p> <ul> <li>Changing the property names of a domain model can break the NHibernate mapping  <li>Changing the database fields can break the NHibernate mappings </li></ul> <p>and has the benefit of </p> <ul> <li>we can write the mappings in plain old C#  <li>the mapping is more expressive  <li>the mapping is better testable </li></ul> <p>You can download the source code for the Fluent NHibernate project from <a href="http://code.google.com/p/fluent-nhibernate/">here</a>.</p> <h2>Sample</h2> <p>Let's make a quick sample. You can download it's source <a href="http://hibernatingrhinos.googlecode.com/svn/trunk/FluentMapping">here</a>.</p> <p>In our domain model we have a Product class defined as follows</p> <div> <div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Product</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> long Id { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">string</span> Name { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> Decimal UnitPrice { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">int</span> UnitsOnStock { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">bool</span> Discontinued { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>This class we can now easily map to the underlying database with this code</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ProductMap : ClassMap&lt;Product&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> ProductMap()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Id(x =&gt; x.Id);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Map(x =&gt; x.Name);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Map(x =&gt; x.UnitPrice);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Map(x =&gt; x.UnitsOnStock);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Map(x =&gt; x.Discontinued);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>Now let's write a quick test to see whether we can really e.g. add a new product to the underlying database. In our case the database used for tests is the <strong>SqlLite</strong> database.</p>
<h2>Persistence Model</h2>
<p>I have to declare to the mapping framework where the mapping classes can be found. For this I define a persistence model class which inherits from the base class <strong>PersistenceModel</strong>.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> TestModel : PersistenceModel</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> TestModel()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        addMappingsFromAssembly(<span style="color: #0000ff">typeof</span>(ProductMap).Assembly);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>In the constructor I define that all of my mapping classes can be found in the assembly which also contains the mapping class for the Product entity. If the mapping classes can be found in the current assembly I could also use the method <strong>addMappingsFromThisAssembly()</strong>. To just add a specific mapping I could use <strong>addMapping(new ProductMap()).</strong></p>
<h2>Base class for unit tests</h2>
<p>I now write a base class for all unit test that I'll implement. This base class should be responsible for the (re-)creation of the database schema before each test runs. It should also open a new session object before each test which I can then use in my unit tests. Finally the base class should close an dispose the session after each test. Here is the code</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> FixtureBase</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">protected</span> SessionSource SessionSource { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">protected</span> ISession Session { get; <span style="color: #0000ff">private</span> set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [SetUp]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> SetupContext()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Before_each_test();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [TearDown]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> TearDownContext()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        After_each_test();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">protected</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">void</span> Before_each_test()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        SessionSource = <span style="color: #0000ff">new</span> SessionSource(<span style="color: #0000ff">new</span> TestModel());</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Session = SessionSource.CreateSession();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        SessionSource.BuildSchema(Session);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        CreateInitialData(Session);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Session.Clear();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">protected</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">void</span> After_each_test()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Session.Close();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Session.Dispose();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">protected</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">void</span> CreateInitialData(ISession session)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>Note that the <strong>SetUp</strong> and <strong>TearDown</strong> methods just delegate to protected virtual methods <strong>Before_each_test</strong> and <strong>After_each_test</strong> respectively. The latter two methods can be overridden in any child class. </p>
<h3>Before each test</h3>
<p>In the Before_each_test method I use the session source class to </p>
<ol>
<li>instantiate a new session source. I pass an instance of my persistence model to the constructor 
<li>create a new session instance (the session instance is saved in an instance variable for further reference) 
<li>(re-)build the database schema. 
<li>A call to the virtual method <strong>CreateInitialData</strong> is executed. The <strong>CreateInitialData</strong> method can be used in the child classes to setup the respective context for the unit tests. 
<li>the session is cleared. </li></ol>
<h3>After each test</h3>
<p>The <strong>After_each_test</strong> method just closes and disposes the current session. In our case (we are using SqLite as database) this also means that the database (schema) is destroyed.</p>
<h2>The first unit test</h2>
<p>Finally we can write our first test and verify whether the mapping with the fluent interface really works. First we want to try to add a new Product to the database. With all the prerequisites in place this is now easy. See the code below</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">[TestFixture]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Product_Fixture : FixtureBase</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [Test]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Can_add_product_to_database()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        var product = <span style="color: #0000ff">new</span> Product</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                          {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                              Name = <span style="color: #006080">"Apple"</span>,</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                              UnitPrice = 0.25m,</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                              UnitsOnStock = 1255,</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                              Discontinued = <span style="color: #0000ff">false</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                          };</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Session.Save(product);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #008000">// Assertion</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Session.Flush();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Session.Clear();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        var fromDb = Session.Get&lt;Product&gt;(product.Id);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Assert.AreNotSame(product, fromDb);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Assert.AreEqual(product.Name, fromDb.Name);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Assert.AreEqual(product.UnitPrice, fromDb.UnitPrice);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Assert.AreEqual(product.UnitsOnStock, fromDb.UnitsOnStock);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Assert.AreEqual(product.Discontinued, fromDb.Discontinued);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<div>We define a new test class which inherits from our base class <strong>FixtureBase</strong>. The we define the test which creates a new instance of type Product and populates the various properties with sample data. We then call the Save method of the session and pass the product as a parameter.</div>
<p>Then we flush and clear the session and reload the Product from database. We assert that it has really been loaded from the database and not just taken out of NHibernate's first level cache (to avoid that we have flushed and cleared the session). Then we assert that the values of the properties all match.</p>
<h2>Unit test revisited</h2>
<p>If we have a lot of entities then we potentially have lot's of repetitive code to implement just to unit test all of our entities as above. Hey but wait a minute. There is a "<strong>better</strong>" way provided by the mapping framework. We can use the <strong>PersistenceSpecification</strong> class to eliminate the repetitive work. Let's look how our code will be</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">[Test]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Can_add_product_to_database_revisited()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">new</span> PersistenceSpecification&lt;Product&gt;(Session)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        .CheckProperty(x=&gt;x.Name, <span style="color: #006080">"Apple"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        .CheckProperty(x=&gt;x.UnitPrice, 0.25m)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        .CheckProperty(x=&gt;x.UnitsOnStock, 2345)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        .CheckProperty(x=&gt;x.Discontinued, <span style="color: #0000ff">true</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        .VerifyTheMappings();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>That's a nice reduction in lines of code. No "noise" any more, just the essential is left.</p>
<h2>Summary</h2>
<p>If you want a clean domain model free from pollution by mapping attributes you had to define the mapping between entities and the underlying database with XML documents. XML is not very wrist friendly and also not very readable. Now there is a third alternative to define the mapping of entities to database - the fluent NHibernate API. One can now define the mapping in C# with a nice and very readable code.</p>
<p>As always you can download the code for the sample <a href="http://hibernatingrhinos.googlecode.com/svn/trunk/FluentMapping">here</a>.</p>
<p>Enjoy</p>
<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0"></a> .</p>]]></content>
      <post-name type="text"><![CDATA[a fluent interface to nhibernate part 1]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <trackbacks>
        <trackback id="1038" date-created="2014-09-11T23:03:24" date-modified="2014-09-11T23:03:24" approved="true" url="https://www.diigo.com/item/note/4u8c0/eu3m">
          <title type="text"><![CDATA[please click the up coming post]]></title>
        </trackback>
        <trackback id="1070" date-created="2014-09-18T20:50:27" date-modified="2014-09-18T20:50:27" approved="true" url="http://www.fotostudio-sachsen.de/php.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fclash-of-clans-hack%2F%3Ehttp%3A%2F%2Fconfidencegames.com%2Fclash-of-clans-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[Hack Clash Of Clans]]></title>
        </trackback>
        <trackback id="1073" date-created="2014-09-19T12:48:44" date-modified="2014-09-19T12:48:44" approved="true" url="http://122.116.182.92/info.sphp?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fgame-war-fire-age-hack%2F%3Ehttp%3A%2F%2Fconfidencegames.com%2Fgame-war-fire-age-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[Game Of War Fire Age Redeem Codes]]></title>
        </trackback>
        <trackback id="1089" date-created="2014-09-24T07:58:58" date-modified="2014-09-24T07:58:58" approved="true" url="http://shopatoxonpress.com/MYCWHT/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fclash-of-clans-hack%2F%3EClash+Of+Clans+Hack%3C%2Fa%3E">
          <title type="text"><![CDATA[Clash Of Clans Hack No Survey]]></title>
        </trackback>
        <trackback id="1094" date-created="2014-09-25T18:48:45" date-modified="2014-09-25T18:48:45" approved="true" url="http://www.ictus.co.uk/TESTsmtp/phpshowinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fcall-of-duty-advanced-warfare-hack%2F%3Ehttp%3A%2F%2Fconfidencegames.com%2Fcall-of-duty-advanced-warfare-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[How To Mod Call Of Duty Advanced Warfare]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="36" date-created="2008-09-06T16:18:00" date-modified="2008-09-06T16:18:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-2-value-objects.aspx" type="normal" hasexcerpt="false" views="18599">
      <title type="text"><![CDATA[A fluent interface to NHibernate - Part 2 - Value Objects]]></title>
      <content type="text"><![CDATA[<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0" height="21" /></a> </p>
<p>This is the second of a series of articles on the topic. Other posts will follow</p>
<ul>
<li><a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">A fluent interface to NHibernate - Part 1</a> </li>
<li>A fluent interface to NHibernate - Part 2 - Value Objects  </li>
<li>A fluent interface to NHibernate - Part 3 - Mapping Relations  </li>
<li>A fluent interface to NHibernate - Part 4 - Configuration</li>
</ul>
<p>In my last <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">post</a> I introduced a new <a href="http://code.google.com/p/fluent-nhibernate/">framework</a> which gives you the possibilities to define the mappings of the entities to the underlying database in C# using a fluent interface instead of writing XML mapping files. This has caused some <a href="http://tech.groups.yahoo.com/group/altdotnet/message/13294">discussion</a> in the community on the pros and cons of this approach.</p>
<p>Let me repeat what the goals of this new framework are or should be</p>
<ul>
<li>reduce friction when mapping entities (and value objects) to the underlying database  </li>
<li>mapping should be more expressive than use of plain XML  </li>
<li>mapping should be more testable  </li>
<li>flexible, that is: allow the use of mapping conventions </li>
</ul>
<h2>How to map common scenarios</h2>
<p>Now let's have a look at some common scenarios which you encounter daily in a moderately complex domain model. Let's concentrate on <b>how</b> these scenarios are mapped by using the fluent interface.</p>
<h3>Scenario 1: Value Objects</h3>
<p>In <a href="http://en.wikipedia.org/wiki/Domain-driven_design">DDD</a> you have the notion of <b>entities</b> and <b>value objects</b>. The latter are immutable and have no identity. In NHibernate they are mapped as <b>Component</b> and its fields are embedded in the same table as the containing entity.</p>
<p>A typical value object is <a href="http://martinfowler.com/eaaCatalog/money.html">Money</a> which represents a monetary value. Let's define the following simple domain model</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Account.png" /><br /></a> </p>
<p>We have an account which is an entity and the account contains a property of type Money (called Balance). Balance is now a value object and contains not only the amount but also the currency in which the value is expressed (Note: 100 US$ is different than e.g. 100 &euro;). The code for the money class</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Money</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">private</span> Money()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> Money(<span style="color: #0000ff;">decimal</span> amount, <span style="color: #0000ff;">string</span> currency)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Amount = amount;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Currency = currency;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">decimal</span> Amount { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> Currency { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Note that the properties are <b>read only</b> since any value object is <b>immutable</b> (once set you cannot change it). The private parameter-less constructor is there ONLY to satisfy NHibernate which needs it. But since it is private we cannot accidentally use it.</p>
<p>The code for the Account class is trivial</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Account : Entity</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> Name { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> Money Balance { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Note that <b>Account</b> inherits from the <b>Entity</b> base class which is implemented in the framework. As discussed in my previous <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/08/11/a-fluent-interface-to-nhibernate.aspx">post</a> I regard this as a limitation of the framework. This requirement possibly will be eliminated in future versions of the framework.</p>
<p>How can we map this scenario? Let's have a look at the necessary code</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AccountMap : ClassMap&lt;Account&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> AccountMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Map(x =&gt; x.Name)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .CanNotBeNull()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            .WithLengthOf(50);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Component&lt;Money&gt;(x =&gt; x.Balance, m =&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                             {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                                 m.Map(x =&gt; x.Amount, <span style="color: #006080;">"BalanceAmount"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                                 m.Map(x =&gt; x.Currency, <span style="color: #006080;">"BalanceCurrency"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                             });</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Easy, isn't it? First we map the property <b>Id</b> of our account entity (inherited from the base Entity class). Then we map the <b>Name</b> property. We declare that it cannot be null and that it's maximal length should not exceed 50 characters.</p>
<p>Finally we map the B<b>alance</b> property which is a value object an thus treated by NHibernate as <b>Component</b>. Here I have used the second (optional) parameter of the map function which is the name of the table column to which the respective property should be mapped. When we create the database schema from this mapping it will contain one table called <b>Account</b> which contains the four columns <b>Id, Name, BalanceAmount</b> and <b>BalanceCurrency</b>.</p>
<h3>Scenario 2: Entity with multiple properties of same value object type</h3>
<p>How does this fit for a scenario where I have an entity which has more than one property of the same value object type? Let's have a look at the following simple model. An <b>Employee </b>entity has a <b>HomeAddress</b> and a <b>WorkAddress</b> field. Both fields are of type <b>Address</b>. <b>Address </b>is a value object.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Employee.png" /><br /></a> </p>
<p>Again the code for the <b>Address</b> value object (which is immutable!)</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Address</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> AddressLine1 { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> AddressLine2 { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> PostalCode { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> City { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> Country { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">private</span> Address()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> Address(<span style="color: #0000ff;">string</span> addressLine1, <span style="color: #0000ff;">string</span> addressLine2, <span style="color: #0000ff;">string</span> postalCode, <span style="color: #0000ff;">string</span> city, <span style="color: #0000ff;">string</span> country)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        AddressLine1 = addressLine1;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        AddressLine2 = addressLine2;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        PostalCode = postalCode;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        City = city;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Country = country;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>and the <b>Employee</b> entity</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Employee : Entity</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> FirstName { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> LastName { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> Address HomeAddress { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> Address WorkAddress { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Now let's have a look at the mapping code</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> EmployeeMap : ClassMap&lt;Employee&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> EmployeeMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.FirstName).CanNotBeNull().WithLengthOf(20);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Map(x =&gt; x.LastName).CanNotBeNull().WithLengthOf(20);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Component&lt;Address&gt;(x =&gt; x.HomeAddress,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                           a =&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                               {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                   a.Map(x =&gt; x.AddressLine1, <span style="color: #006080;">"Home_AddressLine1"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                   a.Map(x =&gt; x.AddressLine2, <span style="color: #006080;">"Home_AddressLine2"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                   a.Map(x =&gt; x.PostalCode, <span style="color: #006080;">"Home_PostalCode"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                   a.Map(x =&gt; x.City, <span style="color: #006080;">"Home_City"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                   a.Map(x =&gt; x.Country, <span style="color: #006080;">"Home_Country"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                               });</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Component&lt;Address&gt;(x =&gt; x.WorkAddress,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                           a =&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                               {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                   a.Map(x =&gt; x.AddressLine1, <span style="color: #006080;">"Work_AddressLine1"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                   a.Map(x =&gt; x.AddressLine2, <span style="color: #006080;">"Work_AddressLine2"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                   a.Map(x =&gt; x.PostalCode, <span style="color: #006080;">"Work_PostalCode"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                   a.Map(x =&gt; x.City, <span style="color: #006080;">"Work_City"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                   a.Map(x =&gt; x.Country, <span style="color: #006080;">"Work_Country"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                               });</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Note that we have to explicitly name the underlying columns here (e.g. "<b>Home_City</b>" versus "<b>Work_City</b>") otherwise the schema generation would fail.</p>
<p>Honestly, I don't like the above code since it is not <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>. So let's refactor it...</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> EmployeeMap : ClassMap&lt;Employee&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">private</span> Action&lt;ComponentPart&lt;Address&gt;&gt; MapAddress(<span style="color: #0000ff;">string</span> columnPrefix)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">return</span> a =&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                   {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                       a.Map(x =&gt; x.AddressLine1, columnPrefix + <span style="color: #006080;">"AddressLine1"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                       a.Map(x =&gt; x.AddressLine2, columnPrefix + <span style="color: #006080;">"AddressLine2"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                       a.Map(x =&gt; x.PostalCode, columnPrefix + <span style="color: #006080;">"PostalCode"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                       a.Map(x =&gt; x.City, columnPrefix + <span style="color: #006080;">"City"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                       a.Map(x =&gt; x.Country, columnPrefix + <span style="color: #006080;">"Country"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                   };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> EmployeeMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.FirstName).CanNotBeNull().WithLengthOf(20);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Map(x =&gt; x.LastName).CanNotBeNull().WithLengthOf(20);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Component&lt;Address&gt;(x =&gt; x.HomeAddress, MapAddress(<span style="color: #006080;">"Home_"</span>));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Component&lt;Address&gt;(x =&gt; x.WorkAddress, MapAddress(<span style="color: #006080;">"Work_"</span>));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>I have extracted the mapping of the address into a helper method and can now call it as many times as I have to and just have to provide the table column prefix to be used for all fields of the address. What I still don't like in the above approach is that I need an internal helper method to map my addresses. What if I have another entity (say Customer) which also has one or several properties of type Address?</p>
<p>It would be nice if the framework would provide some component mapper. </p>
<p>Since I cannot rely on the framework at the moment I have found the following more elegant solution, where the mapping of the Address value object is externalized into it's own mapper class</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AddressMap</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> Action&lt;ComponentPart&lt;Address&gt;&gt; WithColumnPrefix(<span style="color: #0000ff;">string</span> columnPrefix)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">return</span> a =&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            a.Map(x =&gt; x.AddressLine1, columnPrefix + <span style="color: #006080;">"AddressLine1"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            a.Map(x =&gt; x.AddressLine2, columnPrefix + <span style="color: #006080;">"AddressLine2"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            a.Map(x =&gt; x.PostalCode, columnPrefix + <span style="color: #006080;">"PostalCode"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            a.Map(x =&gt; x.City, columnPrefix + <span style="color: #006080;">"City"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            a.Map(x =&gt; x.Country, columnPrefix + <span style="color: #006080;">"Country"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>and then the Employee mapper class can be simplified to this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> EmployeeMap : ClassMap&lt;Employee&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> EmployeeMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.FirstName).CanNotBeNull().WithLengthOf(20);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Map(x =&gt; x.LastName).CanNotBeNull().WithLengthOf(20);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Component(x =&gt; x.HomeAddress, AddressMap.WithColumnPrefix(<span style="color: #006080;">"Home_"</span>));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Component(x =&gt; x.WorkAddress, AddressMap.WithColumnPrefix(<span style="color: #006080;">"Work_"</span>));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>Well, I'm now quite happy with my solution.</p>
<h2>Testing the mapping</h2>
<p>Now let's write a test for the mapping. A simple test which verifies that the mapping is correct and that a record can be written to the database is quite easy to implement</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[TestFixture]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Employee_Fixture : FixtureBase</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    [Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Verify_that_employee_saves()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var emp = <span style="color: #0000ff;">new</span> Employee</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                      {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                          FirstName = <span style="color: #006080;">"Gabriel"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                          LastName = <span style="color: #006080;">"Schenker"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                          HomeAddress = <span style="color: #0000ff;">new</span> Address(<span style="color: #006080;">"Castle home"</span>, <span style="color: #0000ff;">null</span>, <span style="color: #006080;">"8888"</span>, <span style="color: #006080;">"Paradise"</span>, <span style="color: #006080;">"Switzerland"</span>),</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                          WorkAddress = <span style="color: #0000ff;">new</span> Address(<span style="color: #006080;">"My work place"</span>, <span style="color: #0000ff;">null</span>, <span style="color: #006080;">"7777"</span>, <span style="color: #006080;">"Atlantis"</span>, <span style="color: #006080;">"Pegasus"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                      };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Save(emp);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Session.Clear();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var fromDb = Session.Get&lt;Employee&gt;(emp.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreNotSame(emp, fromDb);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.AreEqual(emp.FirstName, fromDb.FirstName);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreEqual(emp.LastName, fromDb.LastName);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.AreEqual(emp.HomeAddress.AddressLine1, fromDb.HomeAddress.AddressLine1);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreEqual(emp.HomeAddress.AddressLine2, fromDb.HomeAddress.AddressLine2);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.AreEqual(emp.HomeAddress.PostalCode, fromDb.HomeAddress.PostalCode);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreEqual(emp.HomeAddress.City, fromDb.HomeAddress.City);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.AreEqual(emp.HomeAddress.Country, fromDb.HomeAddress.Country);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreEqual(emp.WorkAddress.AddressLine1, fromDb.WorkAddress.AddressLine1);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.AreEqual(emp.WorkAddress.AddressLine2, fromDb.WorkAddress.AddressLine2);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreEqual(emp.WorkAddress.PostalCode, fromDb.WorkAddress.PostalCode);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.AreEqual(emp.WorkAddress.City, fromDb.WorkAddress.City);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Assert.AreEqual(emp.WorkAddress.Country, fromDb.WorkAddress.Country);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<div>Note that the test fixture inherits from the <b>FixtureBase</b> class which I have described in my previous <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">post</a>. Further note that I use <b>SqlLite</b> as my in-memory database for testing. Let's run the test. Well, it passes as we expected.</div>
<div>But now let's use the framework to help reduce some code. As shown in my previous <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">post</a> we can use the <b>PersistenceSpecification</b> class of the mapping framework for this purpose. A test looks like follows</div>
<div>&nbsp;</div>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Verify_that_employee_saves_revisited()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">new</span> PersistenceSpecification&lt;Employee&gt;(Session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .CheckProperty(x=&gt;x.FirstName, <span style="color: #006080;">"Gabriel"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckProperty(x=&gt;x.LastName, <span style="color: #006080;">"Schenker"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .CheckProperty(x =&gt; x.HomeAddress, <span style="color: #0000ff;">new</span> Address(<span style="color: #006080;">"Castle home"</span>, <span style="color: #0000ff;">null</span>, <span style="color: #006080;">"8888"</span>, <span style="color: #006080;">"Paradise"</span>, <span style="color: #006080;">"Switzerland"</span>))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckProperty(x =&gt; x.WorkAddress, <span style="color: #0000ff;">new</span> Address(<span style="color: #006080;">"My work place"</span>, <span style="color: #0000ff;">null</span>, <span style="color: #006080;">"7777"</span>, <span style="color: #006080;">"Atlantis"</span>, <span style="color: #006080;">"Pegasus"</span>))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .VerifyTheMappings();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<div>Let's run this test. It succeeds as expected.</div>
<h2>Source Code</h2>
<p>You can get the source code of the solution accompanying this post <a href="http://hibernatingrhinos.googlecode.com/svn/trunk/FluentMapping2">here</a>.</p>
<h2>Summary</h2>
<p>In this post I discussed the mapping of complex entities having one to many properties which are value objects. I have shown that a mapping is possible with the current release of the mapping framework.</p>
<p>Enjoy</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0" height="21" /></a> .</p>]]></content>
      <post-name type="text"><![CDATA[a fluent interface to nhibernate part 2 value objects]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1037" />
      </categories>
      <trackbacks>
        <trackback id="116" date-created="2008-11-17T13:24:37" date-modified="2008-11-17T13:24:37" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/17/lazy-loading-blobs-and-the-like-in-nhibernate.aspx">
          <title type="text"><![CDATA[Lazy loading BLOBS and the like in NHibernate]]></title>
        </trackback>
        <trackback id="119" date-created="2008-11-19T11:18:40" date-modified="2008-11-19T11:18:40" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/18/legacy-db-and-one-to-one-relations.aspx">
          <title type="text"><![CDATA[Legacy DB and one-to-one relations]]></title>
        </trackback>
        <trackback id="137" date-created="2008-11-26T18:14:50" date-modified="2008-11-26T18:14:50" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/26/linq-to-nhibernate.aspx">
          <title type="text"><![CDATA[Linq to NHibernate]]></title>
        </trackback>
        <trackback id="515" date-created="2009-09-22T01:18:06" date-modified="2009-09-22T01:18:06" approved="true" url="http://www.cnblogs.com/pursue/archive/2009/09/22/1571552.html">
          <title type="text"><![CDATA[Lazy loading BLOBS and the like in NHibernate(zhuan)]]></title>
        </trackback>
        <trackback id="1046" date-created="2014-09-13T14:00:51" date-modified="2014-09-13T14:00:51" approved="true" url="http://teamenergizer.myorganogold.com">
          <title type="text"><![CDATA[top earner]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="37" date-created="2008-09-06T16:39:00" date-modified="2008-09-06T16:39:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-3-mapping-relations.aspx" type="normal" hasexcerpt="false" views="30462">
      <title type="text"><![CDATA[A fluent interface to NHibernate - Part 3 - Mapping Relations]]></title>
      <content type="text"><![CDATA[<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0" height="21" /></a> </p>
<p>This is the third post in a series of articles where I want to analyze and describe the new upcoming mapping interface providing a fluent interface to NHibernate for the mapping of a domain model to the underlying database. </p>
<ul>
<li><a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">A fluent interface to NHibernate</a>  </li>
<li><a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-2-value-objects.aspx">A fluent interface to NHibernate - Part 2 - Value Objects</a>  </li>
<li>A fluent interface to NHibernate - Part 3 - Mapping Relations  </li>
<li>A fluent interface to NHibernate - Part 4 - Configuration</li>
</ul>
<p>You can get the source code of the solution accompanying this post <a href="http://hibernatingrhinos.googlecode.com/svn/trunk/FluentMapping2">here</a>.</p>
<p>In the time between my last post and today a lot has happened to the mapping framework. The contributors are busily improving the source and are also very responsive to my questions and remarks.</p>
<p>In this post I want to focus on how one can map various relations between entities and value objects of a domain model.</p>
<h2>Scenario 3</h2>
<h3>Domain Model</h3>
<p>Let's have a look at the following simplified model</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog.png" /><br /></a> </p>
<p>I have a Blog which has an author of type Person. Each Blog can have many Posts. To each Post readers can give feedback in the form of Comments. Comments are considered value objects in this model, that is they have no identity and are immutable (a reader cannot edit its comment after it has been published...). All other elements are true entities. If I consider the Blog to be the root object then the relation between Blog and Person is of type many-to-one (a person can be the owner of more than one blog). On the other hand the relation between Blog and Post is of type one-to-many. The parent and the children are both entities.</p>
<p>A special case (as we will see) is the relation between Post and Comment (since Comment is a value object). It is also of type one-to-many but this time the parent is an entity and the children are value objects.</p>
<h3>Mapping</h3>
<p>How can we map this? Well, let's start with the easy one. In this simplified model the Person class has no external dependencies and is thus easy to map</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> PersonMap : ClassMap&lt;Person&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> PersonMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.FirstName);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Map(x =&gt; x.LastName);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>The Comment class has also no external dependencies. I want to treat the Comment as a <b>value object</b>. So I have to map it as follows</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> PostMap : ClassMap&lt;Post&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> PostMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.Title);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Map(x =&gt; x.Body);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.PublicationDate);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        HasMany&lt;Comment&gt;(x =&gt; x.Comments)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .Component(c =&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                           {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                               c.Map(x =&gt; x.Text);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                               c.Map(x =&gt; x.AuthorEmail);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                               c.Map(x =&gt; x.CreationDate);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                           }).AsSet();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Note that I have to tell the framework that I want to have a set by using the <b>AsSet</b> method. The default is a bag (represented by a list in .Net).</p>
<p>Finally we can map the <b>Blog</b> class which is now easy</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> BlogMap : ClassMap&lt;Blog&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> BlogMap()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Id(x =&gt; x.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Map(x =&gt; x.Name);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        References(x =&gt; x.Author);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        HasMany&lt;Post&gt;(x =&gt; x.Posts).AsSet().Cascade.AllDeleteOrphan();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>Note that we map the many-to-one relation between <b>Blog</b> and <b>Person</b> with the aid of the <b>References</b> method. Note further that we map the collection of <b>Posts</b> with the <b>HasMany</b> method. Since by default this method maps to a "bag" we have to further specify that we want to map with a "set" (--&gt; see my <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/06/12/mapping-collections-in-nhibernate-part-1.aspx">post</a> on collection mapping for the various types of collections). Finally I also tell the framework that I want to have all posts of a blog deleted, if the blog is deleted and that I want to cascade all updates and inserts.</p>
<p>The XML generated by the above mapping class is shown below. Now you can ask yourself which way of mapping your entities you prefer...</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">&lt;?</span><span style="color: #800000;">xml</span> <span style="color: #ff0000;">version</span><span style="color: #0000ff;">="1.0"</span> <span style="color: #ff0000;">encoding</span><span style="color: #0000ff;">="utf-8"</span>?<span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">hibernate-mapping</span> <span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="urn:nhibernate-mapping-2.2"</span> <span style="color: #ff0000;">default-lazy</span><span style="color: #0000ff;">="false"</span> </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                   <span style="color: #ff0000;">assembly</span><span style="color: #0000ff;">="FluentMapping.Domain"</span> </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                   <span style="color: #ff0000;">namespace</span><span style="color: #0000ff;">="FluentMapping.Domain.Scenario3"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">class</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Post"</span> <span style="color: #ff0000;">table</span><span style="color: #0000ff;">="[Post]"</span> <span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="urn:nhibernate-mapping-2.2"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Id"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="Id"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="Int64"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">generator</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">="identity"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="PublicationDate"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="PublicationDate"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="DateTime"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">column</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="PublicationDate"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Body"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="Body"</span> <span style="color: #ff0000;">length</span><span style="color: #0000ff;">="100"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="String"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">column</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Body"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Title"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="Title"</span> <span style="color: #ff0000;">length</span><span style="color: #0000ff;">="100"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="String"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">column</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Title"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;set</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Comments"</span> <span style="color: #ff0000;">cascade</span><span style="color: #0000ff;">="none"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">key</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="Post_id"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">composite-element</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">="FluentMapping.Domain.Scenario3.Comment, </span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                FluentMapping.Domain, Version=1.0.0.0, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                Culture=neutral, PublicKeyToken=null"<span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="CreationDate"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="CreationDate"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="DateTime"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">column</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="CreationDate"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="AuthorEmail"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="AuthorEmail"</span> <span style="color: #ff0000;">length</span><span style="color: #0000ff;">="100"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="String"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">column</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="AuthorEmail"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Text"</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="Text"</span> <span style="color: #ff0000;">length</span><span style="color: #0000ff;">="100"</span> <span style="color: #ff0000;">type</span><span style="color: #0000ff;">="String"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">          <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">column</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Text"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">      <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">composite-element</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;/set</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">class</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">hibernate-mapping</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
</div>
<p>&nbsp;</p>
<p>Ok I admit, when hand crafting the XML we can skip some of the elements, but still...</p>
<h3>Testing</h3>
<p>All tests use the base class <b>FixtureBase</b> which I have introduced in my first <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">post</a> about the mapping framework. For completeness I present here the source once again</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> FixtureBase</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <b><span style="color: #0000ff;">protected</span> SessionSource SessionSource { get; set; }</b></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">protected</span> ISession Session { get; <span style="color: #0000ff;">private</span> set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    [SetUp]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> SetupContext()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Before_each_test();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    [TearDown]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> TearDownContext()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        After_each_test();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">void</span> Before_each_test()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        <b>SessionSource = <span style="color: #0000ff;">new</span> SessionSource(<span style="color: #0000ff;">new</span> TestModel());</b></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Session = SessionSource.CreateSession();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        SessionSource.BuildSchema(Session);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        CreateInitialData(Session);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Session.Clear();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">void</span> After_each_test()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Close();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Session.Dispose();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">void</span> CreateInitialData(ISession session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Now let's test whether we can create a blog and add posts to it. Let's start with the former. I define a base class for all my further blog related tests as</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Blog_Fixture : FixtureBase</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">protected</span> Person author;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> CreateInitialData(ISession session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">base</span>.CreateInitialData(session);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        author = <span style="color: #0000ff;">new</span> Person {FirstName = <span style="color: #006080;">"Gabriel"</span>, LastName = <span style="color: #006080;">"Schenker"</span>};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        session.Save(author);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>In the <b>CreateInitialData</b> method I create an author object since every blog has to have an author. I save this author object to the database. To make the author available to all child test classes I have declared it as a protected filed. Now to the test which tries to create a new blog and verifies that it has be written correctly and completely to the database</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[TestFixture]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> When_no_blog_exists : Blog_Fixture</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    [Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Can_add_new_blog()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var blog = <span style="color: #0000ff;">new</span> Blog {Name = <span style="color: #006080;">"Gabriel's Blog"</span>, Author = author};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Save(blog);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Clear();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        var fromDb = Session.Get&lt;Blog&gt;(blog.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb.ShouldNotBeNull();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        fromDb.ShouldNotBeTheSameAs(blog);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb.Id.ShouldEqual(blog.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        fromDb.Name.ShouldEqual(blog.Name);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb.Author.ShouldNotBeNull();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        fromDb.Author.Id.ShouldEqual(blog.Author.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Note that I have inherited this test class from the previously implemented <b>Blog_Fixture</b> class. In the test method I first create a new blog instance. Then I save it to the database. I then flush and clear the session instance to guarantee that all the object(s) in NHibernate's session cache are written to the DB and that the cache is cleared afterwards such as that when a read operation is invoked the respective object is really retrieved from the database.</p>
<p>If you wonder where all these <b>ShouldXXX</b> methods in the second part of the test come from then wonder no longer. These are extension methods which I have implemented. They make all the asserts that you normally would do with the aid on NUnit's Assert class. But like this the code is way more readable, isn't it? If you wonder how these methods are implemented then please have a look into the source code of the solution accompanying this post. Search for the class <b>SpecificationExtensions</b>.</p>
<p>When running this test it succeeds! </p>
<p>But we have seen in the past that the framework offers us some help to reduce the size of our test methods. So let's revisit the test and leverage the framework.</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Can_add_new_blog_revisited()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">new</span> PersistenceSpecification&lt;Blog&gt;(Session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .CheckProperty(x =&gt; x.Name, <span style="color: #006080;">"Gabriel's Blog"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckProperty(x =&gt; x.Author, author)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .VerifyTheMappings();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>Yeah, much shorter! That's what I call wrist friendly... Of course when run also this test succeeds. </p>
<p>Second we want to try to add a post to an already existing blog. I have the following code for that</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">[TestFixture]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> When_a_blog_exists : Blog_Fixture</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">private</span> Blog blog;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> CreateInitialData(ISession session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">base</span>.CreateInitialData(session);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        blog = <span style="color: #0000ff;">new</span> Blog {Name = <span style="color: #006080;">"Gabriel's Blog"</span>, Author = author};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        session.Save(blog);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    [Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Can_add_post_to_blog()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var post = <span style="color: #0000ff;">new</span> Post</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                        Title = <span style="color: #006080;">"First Post"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                        Body = <span style="color: #006080;">"Just a test"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                        PublicationDate = DateTime.Today</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                    };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        blog.Posts.Add(post);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Update(blog);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        Session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Session.Clear();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var fromDb = Session.Get&lt;Blog&gt;(blog.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        fromDb.Posts.Count.ShouldEqual(1);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb.Posts.First().Id.ShouldEqual(post.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>In the <b>CreateInitialData</b> I setup my context which in this case is: I have a blog in the database. In the test method I take this existing blog instance and add a new post to it. I then tell the session to update the blog. As usual I flush and clear the session before I assert that the operation was indeed successful.</p>
<p>Now I reload the blog from the database and test whether it has one post as expected and whether it's the post we have added to the blog (it suffices to test the post's id). Note that the method <b>First()</b> applied to the Posts collection of the blog (on the last line of the test) is also an extension method. This extension method just returns the first element of any collection of objects implementing <b>IEnumerable&lt;T&gt;</b> onto which it is applied.</p>
<p>Again when we run the test it is successful.</p>
<p>We want to leverage the framework once more and thus I revisit the test</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Can_add_post_to_blog_revisited()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    List&lt;Post&gt; posts = <span style="color: #0000ff;">new</span> List&lt;Post&gt;();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    posts.AddRange(<span style="color: #0000ff;">new</span>[]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                        <span style="color: #0000ff;">new</span> Post {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                    Title = <span style="color: #006080;">"First Post"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                    Body = <span style="color: #006080;">"Just a test"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                    PublicationDate = DateTime.Today</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                 },</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                        <span style="color: #0000ff;">new</span> Post {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                    Title = <span style="color: #006080;">"Second Post"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                    Body = <span style="color: #006080;">"Just another test"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                                    PublicationDate = DateTime.Today.AddDays(-1)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                                 },</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                    });</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">new</span> PersistenceSpecification&lt;Blog&gt;(Session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckProperty(x =&gt; x.Name, <span style="color: #006080;">"Gabriel's Blog"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .CheckProperty(x =&gt; x.Author, author)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckList(x =&gt; x.Posts, posts)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .VerifyTheMappings();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>Once again I use our friend the <b>PersistenceSpecification</b> class. This time I use it's method <b>CheckList</b> to test the Posts collection of the blog instance. This method expects a collection of <b>Post</b> objects which I have defined in the first part of this test. Here I have defined two posts in the list but also a single one would suffice for the test.</p>
<p>Let me resume: to completely test the mapping of the <b>Blog</b> class I need four lines of code! Nice.</p>
<p>The last thing we have left to test is whether we can add comments to our posts. First I setup my context; that is I have a blog with one post. I also prepare a comment which I can then later on add to the post.</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[TestFixture]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> When_a_blog_with_a_post_exists : Blog_Fixture</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">private</span> Blog blog;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">private</span> Post post;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">private</span> Comment comment;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> CreateInitialData(ISession session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        <span style="color: #0000ff;">base</span>.CreateInitialData(session);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        blog = <span style="color: #0000ff;">new</span> Blog { Name = <span style="color: #006080;">"Gabriel's Blog"</span>, Author = author };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        post = <span style="color: #0000ff;">new</span> Post</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                   {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                       Title = <span style="color: #006080;">"First Post"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                       Body = <span style="color: #006080;">"Just a test"</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                       PublicationDate = DateTime.Today</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                   };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        blog.Posts.Add(post);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        session.Save(blog);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        comment = <span style="color: #0000ff;">new</span> Comment(<span style="color: #006080;">"This is my comment"</span>, DateTime.Today, <span style="color: #006080;">"someone@gmail.com"</span>);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Once my context is set up writing the test is easy. I read the post from the database, add the prepared comment to it and then flush and clear the session (note that the session automatically realizes that the post is dirty and that an update must be made to the database). The I re-read the post from the database and verify that indeed one comment was added and that it is the comment which I expect (by comparing it's Id).</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Can_add_comment_to_post()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    var thePost = Session.Get&lt;Post&gt;(post.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    thePost.Comments.Add(comment);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Session.Clear();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    var fromDb = Session.Get&lt;Post&gt;(post.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    fromDb.Comments.Count.ShouldEqual(1);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    fromDb.Comments.First().Equals(comment);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>And again the test succeeds. The test using the <b>PersistenceSpecification</b> class is like this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Can_add_comment_to_post_revisited()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">new</span> PersistenceSpecification&lt;Post&gt;(Session)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .CheckProperty(x =&gt; x.Title, <span style="color: #006080;">"Some title"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckProperty(x =&gt; x.Body, <span style="color: #006080;">"Some text"</span>)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .CheckProperty(x =&gt; x.PublicationDate, DateTime.Today)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        .CheckComponentList(x =&gt; x.Comments, <span style="color: #0000ff;">new</span>[] { comment })</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        .VerifyTheMappings();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>which succeeds as usual!</p>
<h2>Source Code</h2>
<p>You can get the source code of the solution accompanying this post <a href="http://hibernatingrhinos.googlecode.com/svn/trunk/FluentMapping2">here</a>.</p>
<h2>Summary</h2>
<p>In this post I have shown you that the mapping framework is indeed ready for mapping more advanced scenarios. I have shown you how to map one-to-many relations where either the children are <b>entities</b> or the children are <b>value objects</b>. I also have shown how to map many-to-one relations.</p>
<p>Enjoy</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0" height="21" /></a></p>]]></content>
      <post-name type="text"><![CDATA[a fluent interface to nhibernate part 3 mapping relations]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1027" />
        <category ref="1037" />
        <category ref="1038" />
      </categories>
      <trackbacks>
        <trackback id="117" date-created="2008-11-17T13:24:43" date-modified="2008-11-17T13:24:43" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/17/lazy-loading-blobs-and-the-like-in-nhibernate.aspx">
          <title type="text"><![CDATA[Lazy loading BLOBS and the like in NHibernate]]></title>
        </trackback>
        <trackback id="120" date-created="2008-11-19T11:18:47" date-modified="2008-11-19T11:18:47" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/18/legacy-db-and-one-to-one-relations.aspx">
          <title type="text"><![CDATA[Legacy DB and one-to-one relations]]></title>
        </trackback>
        <trackback id="138" date-created="2008-11-26T18:14:57" date-modified="2008-11-26T18:14:57" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/26/linq-to-nhibernate.aspx">
          <title type="text"><![CDATA[Linq to NHibernate]]></title>
        </trackback>
        <trackback id="1078" date-created="2014-09-20T13:03:44" date-modified="2014-09-20T13:03:44" approved="true" url="http://www.povestind-braila.ro/index.php?lg=ro_RO&amp;p=concurs&amp;CID=23&amp;TID=214">
          <title type="text"><![CDATA[cheap kettle barbecue]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="40" date-created="2008-09-06T16:59:00" date-modified="2008-09-06T16:59:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/lazy-loading-eager-loading.aspx" type="normal" hasexcerpt="false" views="7134">
      <title type="text"><![CDATA[Lazy Loading - Eager Loading]]></title>
      <content type="text"><![CDATA[<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0" height="21" /></a> </p>
<p>In this article I want to discuss the <a href="http://martinfowler.com/eaaCatalog/lazyLoad.html">lazy loading</a> mechanism provided by NHibernate. It is recommended for maximum flexibility to define all relations in your domain as lazy loadable. This is the default behavior of NHibernate since version 1.2. But this can lead to some undesired effects if querying your data. Let's discuss these effects and how to avoid them.</p>
<p>In my previous posts I showed <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/03/31/prepare-your-system-for-nhibernate.aspx">how to prepare your system for NHibernate</a> and <a href="/wikis/howtonh/your-first-nhibernate-based-application.aspx">how to implement a first NHibernate base application</a>. This post is based on those two articles.</p>
<h2>The Domain</h2>
<p>Let's first define a simple domain. It shows part of an order entry system. I keep this model as simple as possible (a real domain model would be more complex) but it contains all aspects we want to discuss in this post. Below is the class diagram of our model</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/LazyLoadingEagerLoadingDomain.png" /></a> </p>
<p>We have an order entity which can be placed by a customer entity. Each order can have many order line entities. Each of the three entity types is uniquely identified by a property Id (surrogate key).</p>
<h2>The Mapping Files</h2>
<p>We have to write one mapping file per entity. It is recommended that you always have one mapping per file. Don't forget to set the <b>Build Action</b> of each mapping file to <b>Embedded Resource</b>. People often tend to forget it and the subsequent errors raised by NHibernate are not always obvious. Also do not forget to give the mapping files the correct name, that is *.<b>hbm</b>.xml where * denotes the placeholder for the entity name.</p>
<p>The mapping for the <b>Order</b> entity might be implemented as follows</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span></pre>
<pre><span class="kwrd">&lt;</span><span class="html">hibernate-mapping</span> <span class="attr">xmlns</span><span class="kwrd">="urn:nhibernate-mapping-2.2"</span></pre>
<pre class="alt">                   <span class="attr">assembly</span><span class="kwrd">="LazyLoadEagerLoad"</span></pre>
<pre>                   <span class="attr">namespace</span><span class="kwrd">="LazyLoadEagerLoad.Domain"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">  </pre>
<pre>  <span class="kwrd">&lt;</span><span class="html">class</span> <span class="attr">name</span><span class="kwrd">="Order"</span> <span class="attr">table</span><span class="kwrd">="Orders"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">id</span> <span class="attr">name</span><span class="kwrd">="Id"</span><span class="kwrd">&gt;</span></pre>
<pre>      <span class="kwrd">&lt;</span><span class="html">generator</span> <span class="attr">class</span><span class="kwrd">="guid"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;/</span><span class="html">id</span><span class="kwrd">&gt;</span></pre>
<pre>    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="OrderNumber"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="OrderDate"</span><span class="kwrd">/&gt;</span></pre>
<pre>    </pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">many-to-one</span> <span class="attr">name</span><span class="kwrd">="Customer"</span> <span class="kwrd">/&gt;</span></pre>
<pre>&nbsp;</pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">set</span> <span class="attr">name</span><span class="kwrd">="OrderLines"</span> <span class="attr">cascade</span><span class="kwrd">="all-delete-orphan"</span> <span class="kwrd">&gt;</span></pre>
<pre>      <span class="kwrd">&lt;</span><span class="html">key</span> <span class="attr">column</span><span class="kwrd">="OrderId"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">      <span class="kwrd">&lt;</span><span class="html">one-to-many</span> <span class="attr">class</span><span class="kwrd">="OrderLine"</span><span class="kwrd">/&gt;</span></pre>
<pre>    <span class="kwrd">&lt;/</span><span class="html">set</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">    </pre>
<pre>  <span class="kwrd">&lt;/</span><span class="html">class</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">  </pre>
<pre><span class="kwrd">&lt;/</span><span class="html">hibernate-mapping</span><span class="kwrd">&gt;</span></pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>Analogous you can implement the mappings for the <b>Customer</b> entity</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span> </pre>
<pre><span class="kwrd">&lt;</span><span class="html">hibernate-mapping</span> <span class="attr">xmlns</span><span class="kwrd">="urn:nhibernate-mapping-2.2"</span></pre>
<pre class="alt">                   <span class="attr">assembly</span><span class="kwrd">="LazyLoadEagerLoad"</span></pre>
<pre>                   <span class="attr">namespace</span><span class="kwrd">="LazyLoadEagerLoad.Domain"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">  </pre>
<pre>  <span class="kwrd">&lt;</span><span class="html">class</span> <span class="attr">name</span><span class="kwrd">="Customer"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">id</span> <span class="attr">name</span><span class="kwrd">="Id"</span><span class="kwrd">&gt;</span></pre>
<pre>      <span class="kwrd">&lt;</span><span class="html">generator</span> <span class="attr">class</span><span class="kwrd">="guid"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;/</span><span class="html">id</span><span class="kwrd">&gt;</span></pre>
<pre>    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="CompanyName"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">  <span class="kwrd">&lt;/</span><span class="html">class</span><span class="kwrd">&gt;</span></pre>
<pre>&nbsp;</pre>
<pre class="alt"><span class="kwrd">&lt;/</span><span class="html">hibernate-mapping</span><span class="kwrd">&gt;</span></pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>and finally the mapping for the <b>OrderLine</b> entity.</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span> </pre>
<pre><span class="kwrd">&lt;</span><span class="html">hibernate-mapping</span> <span class="attr">xmlns</span><span class="kwrd">="urn:nhibernate-mapping-2.2"</span></pre>
<pre class="alt">                   <span class="attr">assembly</span><span class="kwrd">="LazyLoadEagerLoad"</span></pre>
<pre>                   <span class="attr">namespace</span><span class="kwrd">="LazyLoadEagerLoad.Domain"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">&nbsp;</pre>
<pre>  <span class="kwrd">&lt;</span><span class="html">class</span> <span class="attr">name</span><span class="kwrd">="OrderLine"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">id</span> <span class="attr">name</span><span class="kwrd">="Id"</span><span class="kwrd">&gt;</span></pre>
<pre>      <span class="kwrd">&lt;</span><span class="html">generator</span> <span class="attr">class</span><span class="kwrd">="guid"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;/</span><span class="html">id</span><span class="kwrd">&gt;</span></pre>
<pre>    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="Amount"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="ProductName"</span><span class="kwrd">/&gt;</span></pre>
<pre>  <span class="kwrd">&lt;/</span><span class="html">class</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">  </pre>
<pre><span class="kwrd">&lt;/</span><span class="html">hibernate-mapping</span><span class="kwrd">&gt;</span></pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>&nbsp;</p>
<h2>Testing the Mapping</h2>
<p>To test the mapping we use the following test method</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">using</span> LazyLoadEagerLoad.Domain;</pre>
<pre><span class="kwrd">using</span> NHibernate.Cfg;</pre>
<pre class="alt"><span class="kwrd">using</span> NHibernate.Tool.hbm2ddl;</pre>
<pre><span class="kwrd">using</span> NUnit.Framework;</pre>
<pre class="alt">&nbsp;</pre>
<pre><span class="kwrd">namespace</span> LazyLoadEagerLoad.Tests</pre>
<pre class="alt">{</pre>
<pre>    [TestFixture]</pre>
<pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> GenerateSchema_Fixture</pre>
<pre>    {</pre>
<pre class="alt">        [Test]</pre>
<pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> Can_generate_schema()</pre>
<pre class="alt">        {</pre>
<pre>            var cfg = <span class="kwrd">new</span> Configuration();</pre>
<pre class="alt">            cfg.Configure();</pre>
<pre>            cfg.AddAssembly(<span class="kwrd">typeof</span>(Order).Assembly);</pre>
<pre class="alt">&nbsp;</pre>
<pre>            <span class="kwrd">new</span> SchemaExport(cfg).Execute(<span class="kwrd">false</span>, <span class="kwrd">true</span>, <span class="kwrd">false</span>, <span class="kwrd">false</span>);</pre>
<pre class="alt">        }</pre>
<pre>    }</pre>
<pre class="alt">}</pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
First we create a new instance of the NHibernate Configuration class and tell it to configure itself. Since we don't provide any explicit configuration here in the code NHibernate looks out for an adequate configuration file. I have included such a file (called hibernate.cfg.xml) in my project. Please consult <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/04/01/your-first-nhibernate-based-application.aspx">this</a> previous post for further details about the configuration file. 
</p>
<h2>Testing the Loading Behavior of NHibernate</h2>
<h3>Defining a base class for our tests</h3>
<p>To avoid repetitive task (<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> principle) we implement the following base class.</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">using</span> LazyLoadEagerLoad.Domain;</pre>
<pre><span class="kwrd">using</span> NHibernate;</pre>
<pre class="alt"><span class="kwrd">using</span> NHibernate.Cfg;</pre>
<pre><span class="kwrd">using</span> NHibernate.Tool.hbm2ddl;</pre>
<pre class="alt"><span class="kwrd">using</span> NUnit.Framework;</pre>
<pre>&nbsp;</pre>
<pre class="alt"><span class="kwrd">namespace</span> LazyLoadEagerLoad.Tests</pre>
<pre>{</pre>
<pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> TestFixtureBase</pre>
<pre>    {</pre>
<pre class="alt">        <span class="kwrd">private</span> Configuration _configuration;</pre>
<pre>        <span class="kwrd">private</span> ISessionFactory _sessionFactory;</pre>
<pre class="alt">&nbsp;</pre>
<pre>        <span class="kwrd">protected</span> ISessionFactory SessionFactory</pre>
<pre class="alt">        {</pre>
<pre>            get { <span class="kwrd">return</span> _sessionFactory; }</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        [TestFixtureSetUp]</pre>
<pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> TestFixtureSetUp()</pre>
<pre class="alt">        {</pre>
<pre>            _configuration = <span class="kwrd">new</span> Configuration();</pre>
<pre class="alt">            _configuration.Configure();</pre>
<pre>            _configuration.AddAssembly(<span class="kwrd">typeof</span>(Customer).Assembly);</pre>
<pre class="alt">            _sessionFactory = _configuration.BuildSessionFactory();</pre>
<pre>        }</pre>
<pre class="alt">&nbsp;</pre>
<pre>        [TestFixtureTearDown]</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">void</span> TestFixtureTearDown()</pre>
<pre>        {</pre>
<pre class="alt">            _sessionFactory.Close();</pre>
<pre>        }</pre>
<pre class="alt">&nbsp;</pre>
<pre>        [SetUp]</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">void</span> SetupContext()</pre>
<pre>        {</pre>
<pre class="alt">            <span class="kwrd">new</span> SchemaExport(_configuration).Execute(<span class="kwrd">false</span>, <span class="kwrd">true</span>, <span class="kwrd">false</span>, <span class="kwrd">false</span>);</pre>
<pre>            Before_each_test();</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        [TearDown]</pre>
<pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> TearDownContext()</pre>
<pre class="alt">        {</pre>
<pre>            After_each_test();</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">protected</span> <span class="kwrd">virtual</span> <span class="kwrd">void</span> Before_each_test()</pre>
<pre>        { }</pre>
<pre class="alt">&nbsp;</pre>
<pre>        <span class="kwrd">protected</span> <span class="kwrd">virtual</span> <span class="kwrd">void</span> After_each_test()</pre>
<pre class="alt">        { }</pre>
<pre>    }</pre>
<pre class="alt">}</pre>
</div>
<p>When the test fixture is started, the base class configures NHibernate and creates a session factory (<b>TestFixtureSetUp</b>). When the whole test fixture is ended the session factory is closed (<b>TestFixtureTearDown</b>).</p>
<p>Before each test in the fixture is run the database schema is (re-) created and the virtual <b>Before_each_test</b> method is called. After each test in the fixture is finished the virtual <b>After_each_test</b> method is called. The two virtual methods can (but must not necessarily) be overridden in a child class.
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>All our test fixtures we implement will derive from this base class.</p>
<h3>Filling the database with test data</h3>
<p>To be able to test the loading behavior of NHibernate we need some test data in our database. We create this test data every time a test is run (just after the database schema is re-created). We add a new class <b>Order_Fixture</b> to our test project and inherit from the <b>TestFixtureBase</b> base class. Then we override the Before_each_test method and call a helper method which creates our initial data. We create just the absolute minimum of data we need (again --&gt;DRY). That is: one customer placing one order with two order lines.</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">using</span> System;</pre>
<pre><span class="kwrd">using</span> LazyLoadEagerLoad.Domain;</pre>
<pre class="alt"><span class="kwrd">using</span> NHibernate;</pre>
<pre><span class="kwrd">using</span> NHibernate.Criterion;</pre>
<pre class="alt"><span class="kwrd">using</span> NHibernate.SqlCommand;</pre>
<pre><span class="kwrd">using</span> NUnit.Framework;</pre>
<pre class="alt"><span class="kwrd">using</span> Order=LazyLoadEagerLoad.Domain.Order;</pre>
<pre>&nbsp;</pre>
<pre class="alt"><span class="kwrd">namespace</span> LazyLoadEagerLoad.Tests</pre>
<pre>{</pre>
<pre class="alt">    [TestFixture]</pre>
<pre>    <span class="kwrd">public</span> <span class="kwrd">class</span> Order_Fixture : TestFixtureBase</pre>
<pre class="alt">    {</pre>
<pre>        <span class="kwrd">private</span> Order _order;</pre>
<pre class="alt">&nbsp;</pre>
<pre>        <span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Before_each_test()</pre>
<pre class="alt">        {</pre>
<pre>            <span class="kwrd">base</span>.Before_each_test();</pre>
<pre class="alt">            CreateInitialData();</pre>
<pre>        }</pre>
<pre class="alt">&nbsp;</pre>
<pre>        <span class="kwrd">private</span> <span class="kwrd">void</span> CreateInitialData()</pre>
<pre class="alt">        {</pre>
<pre>            <span class="rem">// create a single customer and an order with two order lines for this customer</span></pre>
<pre class="alt">            var customer = <span class="kwrd">new</span> Customer {CompanyName = <span class="str">"IBM"</span>};</pre>
<pre>            var line1 = <span class="kwrd">new</span> OrderLine {Amount = 5, ProductName = <span class="str">"Laptop XYZ"</span>};</pre>
<pre class="alt">            var line2 = <span class="kwrd">new</span> OrderLine {Amount = 2, ProductName = <span class="str">"Desktop PC A100"</span>};</pre>
<pre>            _order = <span class="kwrd">new</span> Order</pre>
<pre class="alt">                        {</pre>
<pre>                            OrderNumber = <span class="str">"o-100-001"</span>,</pre>
<pre class="alt">                            OrderDate = DateTime.Today,</pre>
<pre>                            Customer = customer</pre>
<pre class="alt">                        };</pre>
<pre>            _order.OrderLines.Add(line1);</pre>
<pre class="alt">            _order.OrderLines.Add(line2);</pre>
<pre>&nbsp;</pre>
<pre class="alt">            <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre>                <span class="kwrd">using</span> (ITransaction transaction = session.BeginTransaction())</pre>
<pre class="alt">                {</pre>
<pre>                    session.Save(customer);</pre>
<pre class="alt">                    session.Save(_order);</pre>
<pre>                    transaction.Commit();</pre>
<pre class="alt">                }</pre>
<pre>        }</pre>
<pre class="alt">    }</pre>
<pre>}</pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>The <b>CreateInitialData</b> method is run before each test. With this we guarantee that each test is side effects free.</p>
<h3>Verifying the default behavior - Lazy Loading</h3>
<p>When loading an order entity from database the default behavior of NHibernate is to lazy load all associated objects of the order entity. Let's write a test to verify this. For the verification we use a utility class provided by NHibernate (NHibernateUtil) which can test whether an associated object or object collection is initialized (i.e. loaded) or not. The class can also force the initialization of an un-initialized relation.</p>
<div class="csharpcode">
<pre class="alt">[Test]</pre>
<pre><span class="kwrd">public</span> <span class="kwrd">void</span> Customer_and_OrderLines_are_not_loaded_when_loading_Order()</pre>
<pre class="alt">{</pre>
<pre>    Order fromDb;</pre>
<pre class="alt">    <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre>        fromDb = session.Get&lt;Order&gt;(_order.Id);</pre>
<pre class="alt">&nbsp;</pre>
<pre>    Assert.IsFalse(NHibernateUtil.IsInitialized(fromDb.Customer));</pre>
<pre class="alt">    Assert.IsFalse(NHibernateUtil.IsInitialized(fromDb.OrderLines));</pre>
<pre>}</pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>The test succeeds and NHibernate generates SQL similar to this one</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">SELECT</span>    order0_.Id <span class="kwrd">as</span> Id0_0_, </pre>
<pre>    order0_.OrderNumber <span class="kwrd">as</span> OrderNum2_0_0_, </pre>
<pre class="alt">    order0_.OrderDate <span class="kwrd">as</span> OrderDate0_0_, </pre>
<pre>    order0_.CustomerId <span class="kwrd">as</span> CustomerId0_0_ </pre>
<pre class="alt"><span class="kwrd">FROM</span>    Orders order0_ </pre>
<pre><span class="kwrd">WHERE</span>    order0_.Id=<span class="str">'15bca5b3-2771-4bee-9923-85bda66318d8'</span></pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>&nbsp;</p>
<p>Now we have a problem: If we want to access the order line items (after the session has been closed) we get an exception. Since the session is closed NHibernate cannot lazily load the order line items for us. We can show this behavior with the following test method</p>
<div class="csharpcode">
<pre class="alt">[Test]</pre>
<pre>[ExpectedException(<span class="kwrd">typeof</span>(LazyInitializationException))]</pre>
<pre class="alt"><span class="kwrd">public</span> <span class="kwrd">void</span> Accessing_customer_of_order_after_session_is_closed_throws()</pre>
<pre>{</pre>
<pre class="alt">    Order fromDb;</pre>
<pre>    <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre class="alt">        fromDb = session.Get&lt;Order&gt;(_order.Id);</pre>
<pre>    </pre>
<pre class="alt">    <span class="rem">// trying to access the Customer of the order, will throw exception</span></pre>
<pre>    <span class="rem">// Note: at this point the session is already closed</span></pre>
<pre class="alt">    <span class="kwrd">string</span> name = fromDb.Customer.CompanyName;</pre>
<pre>}</pre>
</div>
<p>Note: the above test <b>only</b> succeeds if the method throws the expected exception of type <b>LazyInitializationException</b>. And this is just what we want to show!
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>Another problem is the <b>n+1 select statements problem</b>. If we access the order line items after loading the order we generate a select statement for each line item we access. Thus if we have n line items and want to access them all we generate one select statement for the order itself and n select statements for all line items (result: n+1 select statements). This can make our data fetching rather slow and put a (unnecessary) burden onto our database.</p>
<p>We can simulate this behavior with this test method</p>
<div class="csharpcode">
<pre class="alt">[Test]</pre>
<pre><span class="kwrd">public</span> <span class="kwrd">void</span> Show_n_plus_1_select_behavior()</pre>
<pre class="alt">{</pre>
<pre>    <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre class="alt">    {</pre>
<pre>        var fromDb = session.Get&lt;Order&gt;(_order.Id);</pre>
<pre class="alt">        <span class="kwrd">int</span> sum = 0;</pre>
<pre>        <span class="kwrd">foreach</span> (var line <span class="kwrd">in</span> fromDb.OrderLines)</pre>
<pre class="alt">        {</pre>
<pre>            <span class="rem">// just some dummy code to force loading of order line</span></pre>
<pre class="alt">            sum += line.Amount;</pre>
<pre>        } </pre>
<pre class="alt">    }</pre>
<pre>}</pre>
</div>
<p>NHibernate will generate SQL similar to the following
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<div class="csharpcode">
<pre class="alt">SELECT order0_.Id <span class="kwrd">as</span> Id3_0_, </pre>
<pre>       order0_.OrderNumber <span class="kwrd">as</span> OrderNum2_3_0_, </pre>
<pre class="alt">       order0_.OrderDate <span class="kwrd">as</span> OrderDate3_0_, </pre>
<pre>       order0_.Customer <span class="kwrd">as</span> Customer3_0_ </pre>
<pre class="alt">FROM   Orders order0_ </pre>
<pre>WHERE  order0_.Id=<span class="str">'5b2dbcb7-d0bf-4c53-86aa-8cd40cb5061a'</span></pre>
<pre class="alt">&nbsp;</pre>
<pre>SELECT orderlines0_.OrderId <span class="kwrd">as</span> OrderId1_, </pre>
<pre class="alt">       orderlines0_.Id <span class="kwrd">as</span> Id1_, </pre>
<pre>       orderlines0_.Id <span class="kwrd">as</span> Id4_0_, </pre>
<pre class="alt">       orderlines0_.Amount <span class="kwrd">as</span> Amount4_0_, </pre>
<pre>       orderlines0_.ProductName <span class="kwrd">as</span> ProductN3_4_0_ </pre>
<pre class="alt">FROM   OrderLine orderlines0_ </pre>
<pre>WHERE  orderlines0_.OrderId=<span class="str">'5b2dbcb7-d0bf-4c53-86aa-8cd40cb5061a'</span></pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>This time we have been lucky! NHibernate has automatically generated an optimized query for us and has loaded the 2 order line items in one go. But this is not always the case! Imagine having a collection with several 100 items and you only need to access one or two of them. It would be a waste of resources to always load all items.</p>
<p>But fortunately we have a solution for these kind of problems with NHibernate. It's called eagerly loading.</p>
<h3>Eagerly loading with the NHibernateUtil class</h3>
<p>If you know you need have access to related objects of the order entity you can use the <b>NHibernateUtil</b> class to initialize the related objects (that is: to fetch them from the database). Have a look at this test methods</p>
<div class="csharpcode">
<pre class="alt">[Test]</pre>
<pre><span class="kwrd">public</span> <span class="kwrd">void</span> Can_initialize_customer_of_order_with_nhibernate_util()</pre>
<pre class="alt">{</pre>
<pre>    Order fromDb;</pre>
<pre class="alt">    <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre>    {</pre>
<pre class="alt">        fromDb = session.Get&lt;Order&gt;(_order.Id);</pre>
<pre>        NHibernateUtil.Initialize(fromDb.Customer);</pre>
<pre class="alt">    }</pre>
<pre>&nbsp;</pre>
<pre class="alt">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Customer));</pre>
<pre>    Assert.IsFalse(NHibernateUtil.IsInitialized(fromDb.OrderLines));</pre>
<pre class="alt">}</pre>
<pre>&nbsp;</pre>
<pre class="alt">[Test]</pre>
<pre><span class="kwrd">public</span> <span class="kwrd">void</span> Can_initialize_order_lines_of_order_with_nhibernate_util()</pre>
<pre class="alt">{</pre>
<pre>    Order fromDb;</pre>
<pre class="alt">    <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre>    {</pre>
<pre class="alt">        fromDb = session.Get&lt;Order&gt;(_order.Id);</pre>
<pre>        NHibernateUtil.Initialize(fromDb.OrderLines);</pre>
<pre class="alt">    }</pre>
<pre>&nbsp;</pre>
<pre class="alt">    Assert.IsFalse(NHibernateUtil.IsInitialized(fromDb.Customer));</pre>
<pre>    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.OrderLines));</pre>
<pre class="alt">}</pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>With this utility class you can initialize single objects as well as collection of objects. In each case NHibernate will send 2 select statements to the database. One to select the order and one to initialize the related object(s).</p>
<h3>Eagerly loading with HQL</h3>
<p>If you know that you want to load all order items of a given order then you can tell NHibernate to do so and eagerly load all order lines together with the order in one go. The following test method shows how you can formulate a HQL query which not only loads the order but also the associated customer and order lines.</p>
<div class="csharpcode">
<pre class="alt">[Test]</pre>
<pre><span class="kwrd">public</span> <span class="kwrd">void</span> Can_eagerly_load_order_aggregate_with_hql_query()</pre>
<pre class="alt">{</pre>
<pre>    Order fromDb;</pre>
<pre class="alt">    <span class="kwrd">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre>    {</pre>
<pre class="alt">        <span class="kwrd">string</span> sql = <span class="str">"from Order o"</span> +</pre>
<pre>                     <span class="str">" inner join fetch o.OrderLines"</span> +</pre>
<pre class="alt">                     <span class="str">" inner join fetch o.Customer"</span> +</pre>
<pre>                     <span class="str">" where o.Id=:id"</span>;</pre>
<pre class="alt">        fromDb = session.CreateQuery(sql)</pre>
<pre>                        .SetGuid(<span class="str">"id"</span>, _order.Id)</pre>
<pre class="alt">                        .UniqueResult&lt;Order&gt;();</pre>
<pre>    }</pre>
<pre class="alt">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Customer));</pre>
<pre>    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.OrderLines));</pre>
<pre class="alt">}</pre>
</div>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>The resulting sql generated by NHibernate is then similar to this one</p>
<pre class="csharpcode"><span class="kwrd">select</span>      order0_.Id <span class="kwrd">as</span> Id0_0_, <br />            orderlines1_.Id <span class="kwrd">as</span> Id1_1_, <br />            customer2_.Id <span class="kwrd">as</span> Id2_2_, <br />            order0_.OrderNumber <span class="kwrd">as</span> OrderNum2_0_0_, <br />            order0_.OrderDate <span class="kwrd">as</span> OrderDate0_0_, <br />            order0_.CustomerId <span class="kwrd">as</span> CustomerId0_0_, <br />            orderlines1_.Amount <span class="kwrd">as</span> Amount1_1_, <br />            orderlines1_.ProductName <span class="kwrd">as</span> ProductN3_1_1_, <br />            customer2_.CompanyName <span class="kwrd">as</span> CompanyN2_2_2_, <br />            orderlines1_.OrderId <span class="kwrd">as</span> OrderId0__, <br />            orderlines1_.Id <span class="kwrd">as</span> Id0__ <br /><span class="kwrd">from</span>        Orders order0_ <br /><span class="kwrd">inner</span> <span class="kwrd">join</span>  OrderLine orderlines1_ <span class="kwrd">on</span> order0_.Id=orderlines1_.OrderId <br /><span class="kwrd">inner</span> <span class="kwrd">join</span>  Customer customer2_ <span class="kwrd">on</span> order0_.CustomerId=customer2_.Id <br /><span class="kwrd">where</span>       order0_.Id=<span class="str">'409ebd99-3206-459b-bfed-6df989284da9'</span></pre>
<p>
<style type="text/css"><!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>NHibernate has created an SQL select statement which joins the 3 tables involved, namely <b>Orders</b>, <b>Customer</b> and <b>OrderLine</b>. The returned (flat) set of records is then used by NHibernate to build up the object tree with the order entity as a root.</p>
<h2>Aggregates in the Domain</h2>
<p>DDD defines the concept of <a href="http://domaindrivendesign.org/discussion/messageboardarchive/Aggregates.html">aggregates</a>. A short definition of an aggregate is "<i>A cluster of associated objects that are treated as a unit for the purpose of data changes.". </i>An aggregate always has a <i>root</i>.<i>&nbsp;</i>In this context we can define the following aggregate in our domain</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_8.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/LazyLoadingEagerLoadingAggDomain.png" /></a> </p>
<p>The order entity is the <i>root</i> and the order lines belong to the aggregate (can be regarded as children of the <i>root</i>). When creating a new order or changing an existing one we only want to modify either the order itself or its order lines. We certainly do not want to change the customer entity because this would be a completely different use case and does not belong to the <i>order management</i> use case.</p>
<p>So, when dealing with aggregates we often want to load the complete aggregate in one go! This is the perfect example for using <b>eager loading</b> techniques.</p>
<h2>Summary</h2>
<p>I have introduced the concept of lazy loading as provided by NHibernate. I have discussed the consequences and shown how to avoid negative side effects by using different techniques of so called eager loading.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0" height="21" /></a></p>]]></content>
      <post-name type="text"><![CDATA[lazy loading eager loading]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1042" />
      </categories>
      <comments>
        <comment id="130" date-created="2008-11-22T16:23:44" date-modified="2008-11-22T16:23:44" approved="true" user-name="epitka" user-url="http://nhforge.org/members/epitka/default.aspx">
          <title type="text"><![CDATA[re: Lazy Loading - Eager Loading]]></title>
          <content type="text"><![CDATA[Hi, I don't see the behavior that you are describing. I have a test that creates one order with 100 orderlines. OrderLines are lazy loaded. When I try to iterate through order lines the whole collection gets loaded, not one by one.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1027" date-created="2014-09-09T08:51:09" date-modified="2014-09-09T08:51:09" approved="true" url="http://swanlakevillage.com/modus/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Farvay.hu%2Finfo.php%3Fa%255B%255D%3D%253Ca%2Bhref%253Dhttp%253A%252F%252Fconfidencegames.com%252Fclash-of-clans-hack%252F%253Ehttp%253A%252F%252Fconfidencegames.com%252Fclash-of-clans-hack%252F%253C%252Fa%253E%3Ehttp%3A%2F%2Fbakingmart.netnwww.bakingmart.com%2Fphp_test.php%3Fa%255B%255D%3D%253Ca%2Bhref%253Dhttp%253A%252F%252Fconfidencegames.com%252Fclash-of-clans-hack%252F%253Ehttp%253A%252F%252Fconfidencegames.com%252Fclash-of-clans-hack%252F%253C%252Fa%253E%3C%2Fa%3E">
          <title type="text"><![CDATA[Hack Clash Of Clans]]></title>
        </trackback>
        <trackback id="1065" date-created="2014-09-17T23:25:36" date-modified="2014-09-17T23:25:36" approved="true" url="http://www.lib.uoi.gr/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.dlcodes.com%2Fgloblins-hack-cheats-tool%2F%3Ehttp%3A%2F%2Fwww.dlcodes.com%2Fgloblins-hack-cheats-tool%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[how to cheat on globlins]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="42" date-created="2008-09-06T17:05:00" date-modified="2008-09-06T17:05:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/eager-loading-aggregate-with-many-child-collections.aspx" type="normal" hasexcerpt="false" views="18101">
      <title type="text"><![CDATA[Eager loading aggregate with many child collections]]></title>
      <content type="text"><![CDATA[<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0" height="21" /></a> </p>
<p>In a comment to my post on lazy loading versus eager loading which you can find <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/06/lazy-loading-eager-loading.aspx">here</a> I have been asked whether NHibernate 2.0 can now eagerly load an aggregate where the root has more than one child collection. The answer is <b>yes but</b>... Let's discuss it with a sample.</p>
<p>Imagine having the following (academic) domain model.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/BlogAggregateDomainModel.png" /></a> </p>
<p>I have identified a Blog-aggregate. This aggregate has the <b>Blog</b> entity as root and has two child collections <b>Posts</b> and <b>Readers</b>. Additionally it has an <b>Author</b> child. If I want to eager load this aggregate with NHibernate I have several possibilities to do so. (If you are new to NHibernate please refer to <a href="/wikis/howtonh/your-first-nhibernate-based-application.aspx">this</a> post for a detailed introduction.)</p>
<h2>Preparing the initial data</h2>
<p>For my tests I need some data in my sample database. I generate a single blog with one author, 3 readers and two posts as follows</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> CreateInitialData()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    var author = <span style="color: #0000ff;">new</span> Person {Name = <span style="color: #006080;">"Gabriel Schenker"</span>};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    _blog = <span style="color: #0000ff;">new</span> Blog {Name = <span style="color: #006080;">"NHibernate FAQ"</span>, Author = author};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    var readers = <span style="color: #0000ff;">new</span>[]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                      {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                          <span style="color: #0000ff;">new</span> Person {Name = <span style="color: #006080;">"John Doe"</span>},</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                          <span style="color: #0000ff;">new</span> Person {Name = <span style="color: #006080;">"Sue Foo"</span>},</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                          <span style="color: #0000ff;">new</span> Person {Name = <span style="color: #006080;">"Ann Li"</span>},</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                      };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    var posts = <span style="color: #0000ff;">new</span>[]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                        <span style="color: #0000ff;">new</span> Post {Title = <span style="color: #006080;">"Lazy Loading - eager loading"</span>},</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                        <span style="color: #0000ff;">new</span> Post {Title = <span style="color: #006080;">"MultiCriteria queries"</span>},</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                    };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    _blog.Readers.AddAll(readers);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    _blog.Posts.AddAll(posts);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">using</span> (ITransaction transaction = session.BeginTransaction())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        session.Save(author);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        session.Save(_blog);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        transaction.Commit();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<h2>Not recommended solution</h2>
<p>Let's start with the <i>"bad"</i> solution for the problem. I have defined the following test method</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Eager_load_blog_aggregate_in_NOT_recommended_way()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Blog fromDb;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">string</span> sql = <span style="color: #006080;">"from Blog b"</span> +</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                     <span style="color: #006080;">" inner join fetch b.Author"</span> +</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                     <span style="color: #006080;">" left join fetch b.Readers"</span> +</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                     <span style="color: #006080;">" left join fetch b.Posts"</span> +</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                     <span style="color: #006080;">" where b.Id=:id"</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb = session.CreateQuery(sql)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            .SetGuid(<span style="color: #006080;">"id"</span>, _blog.Id)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .UniqueResult&lt;Blog&gt;();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Author));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Readers));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Posts));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.AreEqual(3, fromDb.Readers.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.AreEqual(2, fromDb.Posts.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>This works, that is my test is green. Work done, I can go home - or can't I?</p>
<p>No, the fact that the test passes does not mean, that this is a GOOD solution! Let's analyze what SQL NHibernate generates. It is similar to that:</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">select</span>          blog.Id <span style="color: #0000ff;">as</span> Id1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                author.Id <span style="color: #0000ff;">as</span> Id2_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                readers.Id <span style="color: #0000ff;">as</span> Id2_2_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                posts.Id <span style="color: #0000ff;">as</span> Id3_3_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                blog.Name <span style="color: #0000ff;">as</span> Name1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                blog.Author <span style="color: #0000ff;">as</span> Author1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                author.Name <span style="color: #0000ff;">as</span> Name2_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                readers.Name <span style="color: #0000ff;">as</span> Name2_2_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                posts.Title <span style="color: #0000ff;">as</span> Title3_3_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                readers.BlogId <span style="color: #0000ff;">as</span> BlogId0__, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                readers.Id <span style="color: #0000ff;">as</span> Id0__, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                posts.BlogId <span style="color: #0000ff;">as</span> BlogId1__, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                posts.Id <span style="color: #0000ff;">as</span> Id1__ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">from</span>            Blog blog </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">inner</span> <span style="color: #0000ff;">join</span>      Person author <span style="color: #0000ff;">on</span> blog.Author=author.Id </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">left</span> <span style="color: #0000ff;">outer</span> <span style="color: #0000ff;">join</span> Person readers <span style="color: #0000ff;">on</span> blog.Id=readers.BlogId </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">left</span> <span style="color: #0000ff;">outer</span> <span style="color: #0000ff;">join</span> Post posts <span style="color: #0000ff;">on</span> blog.Id=posts.BlogId </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">where</span>           blog.Id=<span style="color: #006080;">'090de8b6-4c36-4f73-9d63-12dbd6b332b2'</span></pre>
</div>
</div>
<p>Please notice that you have three joins, an inner and two outer joins. NHibernate returns a single set of records containing the cross product of all three joins. That is: if a blog has one author, 10 posts and 100 readers the result set will have 1*10*100 = 1000 records. If you have 100 posts and 1000 readers you will get a set with 100'000 records!</p>
<p>Now imagine the blog having three child collections instead of 2... the situation would be catastrophic and your DBA would insist that you get fired.</p>
<p>Is there a better way? Of course! NHibernate 2.0 introduces the <b>IMultiQuery</b> and <b>IMultiCriteria</b> interfaces. With these interfaces you can send several select statements to the database in one go (<b>Note</b>: not all databases support this, check your provider)</p>
<h2>Better solution</h2>
<h3>HQL Multi Query</h3>
<p>Let's start with the <b>MultiQuery</b> class. I define a test method as follows</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Eager_load_blog_aggregate_with_multi_query()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Blog fromDb;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var sql1 = <span style="color: #006080;">"from Blog b inner join fetch b.Author where b.Id=:id"</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        var sql2 = <span style="color: #006080;">"from Blog b inner join fetch b.Readers where b.Id=:id"</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var sql3 = <span style="color: #006080;">"from Blog b inner join fetch b.Posts where b.Id=:id"</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var result = session.CreateMultiQuery()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                        .Add(session.CreateQuery(sql1))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                        .Add(session.CreateQuery(sql2))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                        .Add(session.CreateQuery(sql3))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                        .SetParameter(<span style="color: #006080;">"id"</span>, _blog.Id)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                        .List();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        IList list = (IList) result[0];</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb = list[0] <span style="color: #0000ff;">as</span> Blog;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.AreNotSame(_blog, fromDb);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Author));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Readers));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Posts));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.AreEqual(3, fromDb.Readers.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.AreEqual(2, fromDb.Posts.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>NHibernate now sends 3 select statements in a single call to the database. I'm using an SQL Server 2005 database and the SQL sent by NHibernate is this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">select</span>  blog0_.Id <span style="color: #0000ff;">as</span> Id1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        person1_.Id <span style="color: #0000ff;">as</span> Id2_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        blog0_.Name <span style="color: #0000ff;">as</span> Name1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        blog0_.Author <span style="color: #0000ff;">as</span> Author1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        person1_.Name <span style="color: #0000ff;">as</span> Name2_1_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">from</span>    Blog blog0_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">inner</span> <span style="color: #0000ff;">join</span> Person person1_ <span style="color: #0000ff;">on</span> blog0_.Author=person1_.Id </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">where</span> (blog0_.Id=@p0 );</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">select</span>  blog0_.Id <span style="color: #0000ff;">as</span> Id1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        readers1_.Id <span style="color: #0000ff;">as</span> Id2_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        blog0_.Name <span style="color: #0000ff;">as</span> Name1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        blog0_.Author <span style="color: #0000ff;">as</span> Author1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        readers1_.Name <span style="color: #0000ff;">as</span> Name2_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        readers1_.BlogId <span style="color: #0000ff;">as</span> BlogId0__, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        readers1_.Id <span style="color: #0000ff;">as</span> Id0__ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">from</span>    Blog blog0_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">inner</span> <span style="color: #0000ff;">join</span> Person readers1_ <span style="color: #0000ff;">on</span> blog0_.Id=readers1_.BlogId </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">where</span> (blog0_.Id=@p1 );</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">select</span>  blog0_.Id <span style="color: #0000ff;">as</span> Id1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        posts1_.Id <span style="color: #0000ff;">as</span> Id3_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        blog0_.Name <span style="color: #0000ff;">as</span> Name1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        blog0_.Author <span style="color: #0000ff;">as</span> Author1_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        posts1_.Title <span style="color: #0000ff;">as</span> Title3_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        posts1_.BlogId <span style="color: #0000ff;">as</span> BlogId0__, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        posts1_.Id <span style="color: #0000ff;">as</span> Id0__ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">from</span>    Blog blog0_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">inner</span> <span style="color: #0000ff;">join</span> Post posts1_ <span style="color: #0000ff;">on</span> blog0_.Id=posts1_.BlogId </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">where</span> (blog0_.Id=@p2 );</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">; @p0 = <span style="color: #006080;">'8558ccf4-449f-497a-8619-12458a0aa402'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">@p1 = <span style="color: #006080;">'8558ccf4-449f-497a-8619-12458a0aa402'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">@p2 = <span style="color: #006080;">'8558ccf4-449f-497a-8619-12458a0aa402'</span></pre>
</div>
</div>
<p>SQL server will return 3 sets of records having 1, 3 and 2 records each (in our case). If I now assume I have a blog with 1 author, 10 posts and 100 readers SQL server will return 1+10+100=111 records. That's significantly less than in the bad sample from above where the database returns 1000 records. The situation is even better for the situation where I have 100 posts and 1000 reader. Here the database will return only 1+100+1000 = 1101 records. Compare this to the 100'000 records of the bad sample!</p>
<h3>Multi Criteria Query</h3>
<p>You can get the same result when using Criteria Queries. Take a look at the following test method</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Eager_load_blog_aggregate_with_multi_criteria()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Blog fromDb;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var criteria1 = DetachedCriteria.For&lt;Blog&gt;()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .Add(Restrictions.Eq(<span style="color: #006080;">"Id"</span>, _blog.Id))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            .SetFetchMode(<span style="color: #006080;">"Author"</span>, FetchMode.Eager)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .CreateCriteria(<span style="color: #006080;">"Readers"</span>, JoinType.LeftOuterJoin);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var criteria2 = DetachedCriteria.For&lt;Blog&gt;()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .Add(Restrictions.Eq(<span style="color: #006080;">"Id"</span>, _blog.Id))</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            .CreateCriteria(<span style="color: #006080;">"Posts"</span>, JoinType.LeftOuterJoin);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        var result = session.CreateMultiCriteria()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .Add(criteria1)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            .Add(criteria2)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            .List();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        IList list = (IList) result[0];</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        fromDb = list[0] <span style="color: #0000ff;">as</span> Blog;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.AreNotSame(_blog, fromDb);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Author));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Readers));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.IsTrue(NHibernateUtil.IsInitialized(fromDb.Posts));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    Assert.AreEqual(3, fromDb.Readers.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Assert.AreEqual(2, fromDb.Posts.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Here I only have defined 2 criteria since the blog has exactly one author I condensed the join with author and the join with readers. The resulting SQL is for my SQL server 2005</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">SELECT</span> this_.Id <span style="color: #0000ff;">as</span> Id1_2_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">this_.Name <span style="color: #0000ff;">as</span> Name1_2_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">this_.Author <span style="color: #0000ff;">as</span> Author1_2_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">person3_.Id <span style="color: #0000ff;">as</span> Id2_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">person3_.Name <span style="color: #0000ff;">as</span> Name2_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">person1_.BlogId <span style="color: #0000ff;">as</span> BlogId4_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">person1_.Id <span style="color: #0000ff;">as</span> Id4_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">person1_.Id <span style="color: #0000ff;">as</span> Id2_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">person1_.Name <span style="color: #0000ff;">as</span> Name2_1_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">FROM</span> Blog this_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">left</span> <span style="color: #0000ff;">outer</span> <span style="color: #0000ff;">join</span> Person person3_ <span style="color: #0000ff;">on</span> this_.Author=person3_.Id </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">left</span> <span style="color: #0000ff;">outer</span> <span style="color: #0000ff;">join</span> Person person1_ <span style="color: #0000ff;">on</span> this_.Id=person1_.BlogId </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">WHERE</span> this_.Id = @p0;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">SELECT</span> this_.Id <span style="color: #0000ff;">as</span> Id1_1_, this_.Name <span style="color: #0000ff;">as</span> Name1_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">this_.Author <span style="color: #0000ff;">as</span> Author1_1_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">post1_.BlogId <span style="color: #0000ff;">as</span> BlogId3_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">post1_.Id <span style="color: #0000ff;">as</span> Id3_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">post1_.Id <span style="color: #0000ff;">as</span> Id3_0_, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">post1_.Title <span style="color: #0000ff;">as</span> Title3_0_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">FROM</span> Blog this_ </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">left</span> <span style="color: #0000ff;">outer</span> <span style="color: #0000ff;">join</span> Post post1_ <span style="color: #0000ff;">on</span> this_.Id=post1_.BlogId </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">WHERE</span> this_.Id = @p1;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">; @p0 = <span style="color: #006080;">'dc29a877-3b28-4c3a-b8dd-4e015d77851d'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">@p1 = <span style="color: #006080;">'dc29a877-3b28-4c3a-b8dd-4e015d77851d'</span></pre>
</div>
</div>
<h2>Summary</h2>
<p>I have shown you several ways how to eagerly load an aggregate where the root is having more than one child collection. I also have shown the pitfalls of a possible (bad) solution.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0" height="21" /></a> .</p>]]></content>
      <post-name type="text"><![CDATA[eager loading aggregate with many child collections]]></post-name>
      <categories>
        <category ref="1038" />
        <category ref="1042" />
      </categories>
      <comments>
        <comment id="45" date-created="2008-09-06T22:02:02" date-modified="2008-09-06T22:02:02" approved="true" user-name="mhnyborg" user-url="http://www.nhforge.org/members/mhnyborg/default.aspx">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[Is this possible with LINQ? ]]></content>
        </comment>
        <comment id="269" date-created="2009-04-21T14:34:43" date-modified="2009-04-21T14:34:43" approved="true" user-name="santo2" user-url="http://">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[I've got 4 one to many bag properties and 10 many to one properties. the many to one properties are not lazy. with the multicriteria that results to loading those 10 many to one properties 4 times, which is taking too long.
Is there another solution except lazy load the many to one properties?]]></content>
        </comment>
        <comment id="289" date-created="2009-05-04T06:34:36" date-modified="2009-05-04T06:34:36" approved="true" user-name="santo2" user-url="http://">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[how do i make sure the lazy loading on a collection of one of the collections is false? 

greets]]></content>
        </comment>
        <comment id="292" date-created="2009-05-05T05:25:38" date-modified="2009-05-05T05:25:38" approved="true" user-name="gabriel.schenker" user-url="http://nhforge.org/members/gabriel.schenker/default.aspx">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[@santo 2: you might have a look at e.g. this post: http://nhforge.org/blogs/nhibernate/archive/2009/04/13/nhibernate-mapping-lt-set-gt.aspx]]></content>
        </comment>
        <comment id="294" date-created="2009-05-06T02:54:58" date-modified="2009-05-06T02:54:58" approved="true" user-name="k03123" user-url="http://nhforge.org/members/k03123/default.aspx">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[in the example above lets say Post has Comments. 

is it still possible to eagerly load Blog with all the Posts and Comments?

thanks]]></content>
        </comment>
        <comment id="295" date-created="2009-05-06T05:53:00" date-modified="2009-05-06T05:53:00" approved="true" user-name="gabriel.schenker" user-url="http://nhforge.org/members/gabriel.schenker/default.aspx">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[@k03123 In general I would avoid such queries... they don't scale. Perhaps you can just show the number of comments per post and only retrieve the comments when the user drills down to an individual post.]]></content>
        </comment>
        <comment id="296" date-created="2009-05-06T06:31:36" date-modified="2009-05-06T06:31:36" approved="true" user-name="k03123" user-url="http://nhforge.org/members/k03123/default.aspx">
          <title type="text"><![CDATA[re: Eager loading aggregate with many child collections]]></title>
          <content type="text"><![CDATA[hi gabriel,

thanks for taking time to reply.

i was taking Blog, Posts and Comments as an example only. in my case i have a Report object which is the root and it has Groups which in turn has Regions. while displaying the Report, i need all the Regions to perform some calculation. 

btw, somewhere on the internet i found that u can do that as:

from Blog b inner join fetch b.Posts p 
inner join fetch p.Comments c

but this returns cartesan products and u need to use Set instead of bag for collection. so i was wondering if it is possible to do it using multiquery/multicriteria.

thanks]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1037" date-created="2014-09-11T22:52:25" date-modified="2014-09-11T22:52:25" approved="true" url="https://www.diigo.com/item/note/4u8c0/eu3m">
          <title type="text"><![CDATA[https://www.diigo.com/item/note/4u8c0/eu3m]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="44" date-created="2008-09-06T17:25:00" date-modified="2008-09-06T17:25:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/soft-deletes.aspx" type="normal" hasexcerpt="false" views="10477">
      <title type="text"><![CDATA[Soft Deletes]]></title>
      <content type="text"><![CDATA[<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_6.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_2.png" width="244" border="0" height="21" /></a> </p>
<p>What can I do if instead of physically delete a record in the database I just want to mark it as deleted?</p>
<p>There are at least two possibilities to achieve the desired result</p>
<ul>
<li>put the necessary logic into the repository  </li>
<li>Write and register a <b>DeleteEvent-Listener</b> for NHibernate </li>
</ul>
<h2>The Domain Model</h2>
<p>Let's assume a simple order entry system with just two entities <b>Order</b> and <b>OrderLine.</b></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_8.png"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/OrderEntrySystemDomainModel.png" /></a> </p>
<p>Note: the implementation of the <b>IdentityFieldProvider</b> class I have discussed <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/06/identity-field-equality-and-hash-code.aspx">here</a>.</p>
<p>The <i>business requirements</i> are such as that you are not allowed to physically delete an order from the system but just mark it as deleted in case where the user cancels an order. That's the reason why we have a property <b>IsDeleted</b> in the two entities. When querying for orders the system will (automatically) filter out orders having IsDeleted=true.</p>
<p>Let's have a look at the implementation of the <b>Order</b> and <b>OrderLine</b> entities. (Note: I have only implemented the absolute minimum needed for this sample to work. A realistic order entity would be more complex.)</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Order : IdentityFieldProvider&lt;Order&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> CustomerName { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> DateTime OrderDate { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">bool</span> IsDeleted { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> ISet&lt;OrderLine&gt; OrderLines { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> Order()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        OrderLines = <span style="color: #0000ff;">new</span> HashedSet&lt;OrderLine&gt;();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> OrderLine : IdentityFieldProvider&lt;OrderLine&gt;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">string</span> ProductName { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">int</span> Amount { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">bool</span> IsDeleted { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>And here are the mappings (For this sample I have the mapping of both entities in a single XML file although the recommendations are one mapping per entity)</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">&lt;?</span><span style="color: #800000;">xml</span> <span style="color: #ff0000;">version</span><span style="color: #0000ff;">="1.0"</span> <span style="color: #ff0000;">encoding</span><span style="color: #0000ff;">="utf-8"</span> ?<span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">hibernate-mapping</span> <span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="urn:nhibernate-mapping-2.2"</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                   <span style="color: #ff0000;">assembly</span><span style="color: #0000ff;">="Domain"</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                   <span style="color: #ff0000;">namespace</span><span style="color: #0000ff;">="Domain"</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">                   <span style="color: #ff0000;">schema</span><span style="color: #0000ff;">="Playground"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">class</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Order"</span> <span style="color: #ff0000;">table</span><span style="color: #0000ff;">="Orders"</span> <span style="color: #ff0000;">where</span><span style="color: #0000ff;">="IsDeleted=0"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Id"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">generator</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">="guid"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="CustomerName"</span> <span style="color: #ff0000;">not-null</span><span style="color: #0000ff;">="true"</span> <span style="color: #ff0000;">length</span><span style="color: #0000ff;">="50"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="OrderDate"</span> <span style="color: #ff0000;">not-null</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="IsDeleted"</span> <span style="color: #ff0000;">not-null</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">set</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="OrderLines"</span> <span style="color: #ff0000;">cascade</span><span style="color: #0000ff;">="all-delete-orphan"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">key</span> <span style="color: #ff0000;">column</span><span style="color: #0000ff;">="OrderId"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">one-to-many</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">="OrderLine"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">set</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">class</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">class</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="OrderLine"</span> <span style="color: #ff0000;">where</span><span style="color: #0000ff;">="IsDeleted=0"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Id"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">generator</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">="guid"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="ProductName"</span> <span style="color: #ff0000;">not-null</span><span style="color: #0000ff;">="true"</span> <span style="color: #ff0000;">length</span><span style="color: #0000ff;">="50"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Amount"</span> <span style="color: #ff0000;">not-null</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="IsDeleted"</span> <span style="color: #ff0000;">not-null</span><span style="color: #0000ff;">="true"</span><span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">class</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">hibernate-mapping</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
</div>
<p>Note the <b>where</b> attribute on the &lt;<b>class</b>&gt; tag of the order mapping. This contains a filter to avoid that NHibernate returns orders marked as deleted when you query for orders.</p>
<h2>Logic in the Repository</h2>
<p>This is easy. Assume that we have a <b>OrderRepository</b> class with a <b>Remove</b> method which physically deletes the order from the system and a <b>SoftDelete</b> method witch only <i>logically</i> removes the order from the system.</p>
<h3>Normal Delete Operation</h3>
<p>The implementation of the Remove method would probably look similar to this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Remove(Order order)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">using</span> (ITransaction tx = session.BeginTransaction())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            session.Delete(order);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            tx.Commit();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>and the SQL generated by NHibernate is as follows</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.OrderLine <span style="color: #0000ff;">SET</span> OrderId = <span style="color: #0000ff;">null</span> <span style="color: #0000ff;">WHERE</span> OrderId = @p0; @p0 = <span style="color: #006080;">'34e04bfd-18d2-4451-8673-b98466c6260f'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">NHibernate: <span style="color: #0000ff;">DELETE</span> <span style="color: #0000ff;">FROM</span> Playground.OrderLine <span style="color: #0000ff;">WHERE</span> Id = @p0; @p0 = <span style="color: #006080;">'82b6ba92-9eca-494e-a71f-10a2fa0012db'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">NHibernate: <span style="color: #0000ff;">DELETE</span> <span style="color: #0000ff;">FROM</span> Playground.OrderLine <span style="color: #0000ff;">WHERE</span> Id = @p0; @p0 = <span style="color: #006080;">'bec15bd1-1216-4623-bfd9-1319fbef764b'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">NHibernate: <span style="color: #0000ff;">DELETE</span> <span style="color: #0000ff;">FROM</span> Playground.Orders <span style="color: #0000ff;">WHERE</span> Id = @p0; @p0 = <span style="color: #006080;">'34e04bfd-18d2-4451-8673-b98466c6260f'</span></pre>
</div>
</div>
<p>This causes an Order (and its set of <b>OrderLine</b> items) to be physically deleted from the system. Note that I'm using SQL Server 2005 as database and my tables are in the Schema called <b>'Playground'</b>.</p>
<h3>Soft Delete</h3>
<p>Now for a soft delete we could write in the repository something like this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> SoftDelete(Order order)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">using</span> (ITransaction tx = session.BeginTransaction())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            order.IsDeleted = <span style="color: #0000ff;">true</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            session.Update(order);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            tx.Commit();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>Note that I have implemented the <b>IsDeleted</b> property of the <b>Order</b> entity such as that it propagates changes to its <b>OrderLine</b> children (only if <b>IsDeleted</b> is set to true).</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">bool</span> _isDeleted;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">bool</span> IsDeleted </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    get { <span style="color: #0000ff;">return</span> _isDeleted; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    set</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        _isDeleted = <span style="color: #0000ff;">value</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        <span style="color: #0000ff;">if</span> (_isDeleted)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            <span style="color: #0000ff;">foreach</span> (var line <span style="color: #0000ff;">in</span> OrderLines)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                line.IsDeleted = <span style="color: #0000ff;">true</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    } </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>and the SQL generated by NHibernate is similar to this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.Orders <span style="color: #0000ff;">SET</span> CustomerName = @p0, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  OrderDate = @p1, IsDeleted = @p2 <span style="color: #0000ff;">WHERE</span> Id = @p3; @p0 = <span style="color: #006080;">'IBM'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  @p1 = <span style="color: #006080;">'09.04.2008 00:00:00'</span>, @p2 = <span style="color: #006080;">'True'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  @p3 = <span style="color: #006080;">'14bd85fd-0094-446b-8416-953e158747a1'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.OrderLine <span style="color: #0000ff;">SET</span> ProductName = @p0, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  Amount = @p1, IsDeleted = @p2 <span style="color: #0000ff;">WHERE</span> Id = @p3; @p0 = <span style="color: #006080;">'Intel Dual Core CPU A'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  @p1 = <span style="color: #006080;">'1'</span>, @p2 = <span style="color: #006080;">'True'</span>, @p3 = <span style="color: #006080;">'fd274287-22a0-460f-a2f1-42cdb031000c'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.OrderLine <span style="color: #0000ff;">SET</span> ProductName = @p0, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  Amount = @p1, IsDeleted = @p2 <span style="color: #0000ff;">WHERE</span> Id = @p3; @p0 = <span style="color: #006080;">'Intel Dual Core CPU B'</span>, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  @p1 = <span style="color: #006080;">'1'</span>, @p2 = <span style="color: #006080;">'True'</span>, @p3 = <span style="color: #006080;">'ec714db7-61e2-4d64-a532-d05da5b8c5af'</span></pre>
</div>
</div>
<p>As expected the records are not deleted in the database but the order and its order lines are marked as deleted.</p>
<h2>Implement and register a DeleteEvent Listener</h2>
<p>If you want a more generic approach you'll have to write a <b>DeleteEvent</b> Listener and register it with the NHibernate configuration. You can argue that "soft delete" is a cross cutting concern and as such should not be implemented in the repositories.</p>
<p>This approach is a little bit more involved and you need some intimate knowledge of the inner workings of NHibernate. Events and Event Listeners are a new concept introduced in NHibernate 2.0. Unfortunately this also means that there is not much help or description around at the moment. But the concept is very powerful! What you can do is only limited by your imagination...</p>
<h3>Implement the DeleteEvent Listener</h3>
<p>A starting point would be to define a class e.g. called <b>MyDeleteEventListener</b> which inherits from the <b>DefaultDeleteEventListener</b> class implemented in NHibernate. Then you override e.g. the <b>DeleteEntity</b> method and define your own "delete" logic.</p>
<p>The code might look similar to this (many thanks for help to <b>Will Shaver</b>)</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyDeleteEventListener : DefaultDeleteEventListener</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> DeleteEntity(IEventSource session, <span style="color: #0000ff;">object</span> entity, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        EntityEntry entityEntry, <span style="color: #0000ff;">bool</span> isCascadeDeleteEnabled, </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        IEntityPersister persister, ISet transientEntities)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">if</span> (entity <span style="color: #0000ff;">is</span> ISoftDeletable)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            var e = (ISoftDeletable)entity;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            e.IsDeleted = <span style="color: #0000ff;">true</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            CascadeBeforeDelete(session, persister, entity, entityEntry, transientEntities);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            CascadeAfterDelete(session, persister, entity, transientEntities);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        <span style="color: #0000ff;">else</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            <span style="color: #0000ff;">base</span>.DeleteEntity(session, entity, entityEntry, isCascadeDeleteEnabled,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">                              persister, transientEntities);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>Here I assume that each entity which should be "soft deleted" has to implement a special interface ISoftDeletable which is defined as follows</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> ISoftDeletable</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">bool</span> IsDeleted { get; set; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>The code in the overriden <b>DeleteEntity</b> method first checks whether the entity implements this interface. If NOT then the call is just forwarded to the base class for default execution (that is the entity will be physically deleted from the system). But if the entity implements the interface then we set its property <b>IsDeleted</b> to true, call the <b>CascadeBeforeDelete</b> and <b>CascadeAfterDelete</b> methods of the base class and are done.</p>
<h3>Register the DeleteEvent Listener</h3>
<p>Now you have to register this class with your NHibernate configuration</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">_configuration = <span style="color: #0000ff;">new</span> Configuration();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">_configuration.Configure();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #008000;">// register the DeleteEvent Listener</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">_configuration.SetListener(ListenerType.Delete, <span style="color: #0000ff;">new</span> MyDeleteEventListener());</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">_configuration.AddAssembly(Assembly.Load(<span style="color: #0000ff;">new</span> AssemblyName(<span style="color: #006080;">"DataLayer"</span>)));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">_sessionFactory = _configuration.BuildSessionFactory();</pre>
</div>
</div>
<h3>Testing the DeleteEvent Listener</h3>
<p>If you create initial data for your tests like this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> CreateInitialData()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    _order = <span style="color: #0000ff;">new</span> Order {CustomerName = <span style="color: #006080;">"IBM"</span>, OrderDate = DateTime.Today};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    _orderLine1 = <span style="color: #0000ff;">new</span> OrderLine { Amount = 1, ProductName = <span style="color: #006080;">"Intel Dual Core CPU A"</span> };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    _orderLine2 = <span style="color: #0000ff;">new</span> OrderLine { Amount = 1, ProductName = <span style="color: #006080;">"Intel Dual Core CPU B"</span> };</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    _order.OrderLines.Add(_orderLine1);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    _order.OrderLines.Add(_orderLine2);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">using</span> (ITransaction tx = session.BeginTransaction())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        session.Save(_order);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        tx.Commit();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">}</pre>
</div>
</div>
<p>When running a unit test like this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">[Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> DeleteEventListener_intercepts_delete_request_for_order()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">{</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    Order orderToDelete;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">    <span style="color: #0000ff;">using</span>(ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        <span style="color: #0000ff;">using</span> (ITransaction tx = session.BeginTransaction())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            orderToDelete = session.Get&lt;Order&gt;(_order.Id);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            Assert.IsNotNull(orderToDelete);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            Assert.AreNotSame(_order, orderToDelete);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            Assert.AreEqual(_order.OrderLines.Count, orderToDelete.OrderLines.Count);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">            session.Delete(orderToDelete);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">            tx.Commit();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">        }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">    <span style="color: #0000ff;">using</span> (ISession session = SessionFactory.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">        Assert.IsNull(session.Get&lt;Order&gt;(orderToDelete.Id));</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">}</pre>
</div>
</div>
<p>the SQL sent to the database will be similar to this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.Orders <span style="color: #0000ff;">SET</span> CustomerName = @p0, OrderDate = @p1,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  IsDeleted = @p2 <span style="color: #0000ff;">WHERE</span> Id = @p3; @p0 = <span style="color: #006080;">'IBM'</span>, @p1 = <span style="color: #006080;">'10.04.2008 00:00:00'</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  @p2 = <span style="color: #006080;">'True'</span>, @p3 = <span style="color: #006080;">'d51345d3-234e-4d7f-90cc-00f7767ae15f'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.OrderLine <span style="color: #0000ff;">SET</span> ProductName = @p0, Amount = @p1,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  IsDeleted = @p2 <span style="color: #0000ff;">WHERE</span> Id = @p3; @p0 = <span style="color: #006080;">'Intel Dual Core CPU A'</span>, @p1 = <span style="color: #006080;">'1'</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  @p2 = <span style="color: #006080;">'True'</span>, @p3 = <span style="color: #006080;">'dbfe4468-9c03-4bfe-8520-0a52312b72a8'</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">&nbsp;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">NHibernate: <span style="color: #0000ff;">UPDATE</span> Playground.OrderLine <span style="color: #0000ff;">SET</span> ProductName = @p0, Amount = @p1,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">  IsDeleted = @p2 <span style="color: #0000ff;">WHERE</span> Id = @p3; @p0 = <span style="color: #006080;">'Intel Dual Core CPU B'</span>, @p1 = <span style="color: #006080;">'1'</span>,</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;">  @p2 = <span style="color: #006080;">'True'</span>, @p3 = <span style="color: #006080;">'06561137-2060-46ef-a331-491dfdac705c'</span></pre>
</div>
</div>
<p>Note that when using a <b>DeleteEvent</b> listener you don't have to implement any cascading logic for the <b>IsDeleted</b> property in the Order (as opposed to the "manual" case where you put your logic in the repository). The <b>IsDeleted</b> property can be simply implemented like this</p>
<div>
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">virtual</span> <span style="color: #0000ff;">bool</span> IsDeleted { get; set; }</pre>
</div>
</div>
<h2>Summary</h2>
<p>I have show two ways how to fulfill the <i>business requirement</i> not to physically delete an entity from the system but rather mark it as deleted when the application requests deletion of an entity. The first one is done "manually" in the repository for the respective entity or aggregate. The second one is using the concept of event listeners which is new to NHibernate and needs some intimate knowledge on the internal workings of NHibernate.</p>
<p>The second approach has the advantage that the <i>business requirement</i> of "soft deletes" is treated as a cross cutting concern and the solution presented is a generic one.</p>
<p>&nbsp;<a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_8.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="Blog Signature Gabriel" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_3.png" width="244" border="0" height="21" /></a> .</p>]]></content>
      <post-name type="text"><![CDATA[soft deletes]]></post-name>
      <categories>
        <category ref="1040" />
        <category ref="1046" />
        <category ref="1047" />
      </categories>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="38" date-created="2008-09-06T20:45:31" date-modified="2008-09-06T20:45:31" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-4-configuration.aspx" type="normal" hasexcerpt="false" views="26082">
      <title type="text"><![CDATA[A fluent interface to NHibernate - Part 4 - Configuration]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </p> <p>This is the fourth post in a series of articles where I want to analyze and describe the new upcoming mapping interface providing a fluent interface to NHibernate for the mapping of a domain model to the underlying database. Other post will follow</p> <ul> <li><a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/05/a-fluent-interface-to-nhibernate-part-1.aspx">A fluent interface to NHibernate</a>  <li><a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-2-value-objects.aspx">A fluent interface to NHibernate - Part 2 - Value Objects</a> </li> <li><a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-3-mapping-relations.aspx">A fluent interface to NHibernate - Part 3 - Mapping Relations</a>  <li>A fluent interface to NHibernate - Part 4 - Configuration</li></ul> <h2>Configuration</h2> <p>In NHibernate we traditionally had several methods how we could configure the database relevant parameters. These are</p> <ul> <li>defining all requested configuration parameters in code  <li>include a special section in the <strong>app.config</strong> or <strong>web.config </strong>file  <li>define a <strong>hibernate.cfg.xml</strong> file  <li>define a custom XML file </li></ul> <p>With the new mapping framework we have one more possibility by using a fluent interface to configure NHibernate. We can define all parameters in our code using a fluent interface. Let's review the various methods to configure our ORM framework.</p> <h3>Defining requested configuration parameters in code</h3> <p>When initializing the NHibernate <strong>framework</strong> I can configure all necessary parameters in code. I just instantiate a <strong>Configuration</strong> object and pass it all requested parameters via the <strong>SetProperty</strong> method. Having set all necessary connection parameters I can now define where my domain model is. In the sample below I take the <strong>AddAssembly</strong> method to tell NHibernate that all my model classes are to be found in the assembly where the class <strong>Blog</strong> is defined. NHibernate will then parse the whole assembly for embedded mapping files (e.g. <strong>Blog.hbm.xml</strong> etc.). In the last line of code I create the session factory. This factory instance I'll then use each time I need a connection to the database.</p> <div> <div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> Configuration();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">cfg.SetProperty(<span style="color: #006080">"connection.provider"</span>, <span style="color: #006080">"NHibernate.Connection.DriverConnectionProvider"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.SetProperty(<span style="color: #006080">"connection.driver_class"</span>, <span style="color: #006080">"NHibernate.Driver.SQLite20Driver"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">cfg.SetProperty(<span style="color: #006080">"dialect"</span>, <span style="color: #006080">"NHibernate.Dialect.SQLiteDialect"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.SetProperty(<span style="color: #006080">"connection.connection_string"</span>, <span style="color: #006080">"Data Source=:memory:;Version=3;New=True;"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">cfg.SetProperty(<span style="color: #006080">"connection.release_mode"</span>, <span style="color: #006080">"on_close"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.SetProperty(<span style="color: #006080">"show_sql"</span>, <span style="color: #006080">"true"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.AddAssembly(<span style="color: #0000ff">typeof</span> (Blog).Assembly);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">ISessionFactory factory = cfg.BuildSessionFactory();</pre></div></div>
<p>In the above sample I'm using <strong>SqLite</strong> as my database and the connection string is configured such as that the database is in in-memory mode, that is the schema and the data is not written to disk but always kept in memory. I also have told NHibernate to output all SQL sent to the database to the console (for debugging purposes). This is the typical configuration I tend to use in my unit tests.</p>
<h3>The app.config or web.config</h3>
<p>This is an example of how to specify the database connection properties inside a <tt><strong>web.config</strong></tt>: </p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;?</span><span style="color: #800000">xml</span> <span style="color: #ff0000">version</span><span style="color: #0000ff">="1.0"</span> <span style="color: #ff0000">encoding</span><span style="color: #0000ff">="utf-8"</span>?<span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">configSections</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">section</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="hibernate-configuration"</span>         </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">             <span style="color: #ff0000">type</span><span style="color: #0000ff">="NHibernate.Cfg.ConfigurationSectionHandler, NHibernate"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">configSections</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-configuration</span> <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-configuration-2.2"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.provider"</span><span style="color: #0000ff">&gt;</span>NHibernate.Connection.DriverConnectionProvider<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.driver_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.connection_string"</span><span style="color: #0000ff">&gt;</span>Server=(local);database=thedatabase;Integrated Security=SSPI;<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dialect"</span><span style="color: #0000ff">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="show_sql"</span><span style="color: #0000ff">&gt;</span>true<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-configuration</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #008000">&lt;!-- other app specific config follows... --&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<div>&nbsp;</div>
<p>You first have to define a section for NHibernate in the <strong>configSections</strong> part of the config file. The content of the NHibernate section is then the same as when you use the <strong>hibernate.cfg.xml</strong> file (see below). In this sample I'm using an <strong>SQL Server 2005</strong> database which is installed on the <strong>local</strong> machine. The connection to the SQL Server uses integrated security. I also have told NHibernate to output all SQL sent to the database to the console.</p>
<p>Now I can initialize NHibernate with the following code</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> Configuration();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.AddAssembly(<span style="color: #0000ff">typeof</span> (Product).Assembly);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">ISessionFactory factory = cfg.BuildSessionFactory();</pre></div></div>
<p>Note that the necessary configuration parameters are automatically picked up by NHibernate from the <strong>app.config</strong> or <strong>web.config</strong> file.</p>
<h3>The hibernate.cfg.xml file</h3>
<p>Below I present a typical configuration file. Again this sample assumes <strong>SqLite</strong> as my database.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;?</span><span style="color: #800000">xml</span> <span style="color: #ff0000">version</span><span style="color: #0000ff">="1.0"</span> <span style="color: #ff0000">encoding</span><span style="color: #0000ff">="utf-8"</span> ?<span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-configuration</span> <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-configuration-2.2"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.provider"</span><span style="color: #0000ff">&gt;</span>NHibernate.Connection.DriverConnectionProvider<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dialect"</span><span style="color: #0000ff">&gt;</span>NHibernate.Dialect.SQLiteDialect<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.driver_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.Driver.SQLite20Driver<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.connection_string"</span><span style="color: #0000ff">&gt;</span>Data Source=:memory:;Version=3;New=True;<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.release_mode"</span><span style="color: #0000ff">&gt;</span>on_close<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="show_sql"</span><span style="color: #0000ff">&gt;</span>true<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-configuration</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>This file must be present in the same directory as the application that uses it. Then NHibernate can automatically pick it up when you initialize the framework.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> Configuration();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.Configure();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.AddAssembly(<span style="color: #0000ff">typeof</span> (Blog).Assembly);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">ISessionFactory factory = cfg.BuildSessionFactory();</pre></div></div>
<p>We have to instantiate a NHibernate <strong>Configuration</strong> object and call the method <strong>Configure</strong>. When doing this the default behavior is that NHibernate looks for a file called <strong>hibernate.cfg.xml</strong> in the application directory an opens it if available.</p>
<h3>A custom XML file</h3>
<p>The content of the file must be structured the same way as in the <strong>hibernate.cfg.xml</strong> presented above. But you can name the file however you want and you are also free to choose it's location. When you initialize NHibernate you have to provide the respective information about your configuration file.</p>
<p>You can pick a different XML configuration file using the following syntax</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> Configuration();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.Configure(Path.Combine(AppDomain.CurrentDomain.BaseDirectory,<span style="color: #006080">"my_config_file.xml"</span>));</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">cfg.AddAssembly(<span style="color: #0000ff">typeof</span>(Product).Assembly);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">ISessionFactory factory = cfg.BuildSessionFactory();</pre></div></div>
<p>The method <strong>Configure</strong> accepts a parameter indicating the full path to my custom XML file.</p>
<h3>Use a fluent interface to configure NHibernate</h3>
<p>All the above samples are not really complicated but have the disadvantage that we have to deal with strings (configuration in code) or with XML. XML is not really nice to read and certainly not wrist friendly. Also there is no compile time error checking. Any typos introduced will only be detected during runtime.</p>
<p>Comes the fluent interface to the rescue. I can now configure NHibernate in a strongly typed fashion. Have a look at the following code</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> MyConfiguration()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .ShowSql()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    .Driver&lt;SQLite20Driver&gt;()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .Dialect&lt;SQLiteDialect&gt;()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    .ConnectionString.Is(<span style="color: #006080">"Data Source=:memory:;Version=3;New=True;"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .Raw(<span style="color: #006080">"connection.release_mode"</span>, <span style="color: #006080">"on_close"</span>);</pre></div></div>
<p>A few remarks to this code</p>
<ul>
<li>no need to define a connection provider (it's always and has always bee <strong>NHibernate.Connection.DriverConnectionProvider</strong> and thus this is configured implicitly by the framework) 
<li>all commonly used parameters can be configured using strong typing 
<li>generic methods are used wherever flexibility is needed (e.g. the method .Driver&lt;T&gt;() where T represents the concrete driver you want to choose) 
<li>the method <strong>Raw</strong> can be used whenever we need to configure non-standard (that is database specific) parameters. In the sample above I define the connection release mode for the <strong>SqLite</strong> database. 
<li>The <strong>connection string</strong> can either be defined in place (as in the above sample) or 
<ul>
<li>be retrieved from the appSection in the <strong>web.config</strong> or <strong>app.config</strong> file <br><font face="courier ne">.ConnectionString.<strong>FromAppSetting</strong>("MyConnectionString")</font> 
<li>be retrieved from the <strong>connectionStrings</strong> section in the <strong>web.config</strong> or <strong>app.config </strong>file <br><font face="Courier New">.ConnectionString.<strong>FromConnectionStringWithKey</strong>("MyConnectionString")</font> </li></ul></li></ul>
<p>There are other methods we can use to further configure NHibernate (e.g. <strong>UseOuterJoin</strong>, <strong>MaxFetchDepth </strong>and <strong>UseReflectionOptimizer</strong>)</p>
<p>Now I have to say some words to the <strong>MyConfiguration</strong> class used in the sample above... This class inherits from the <strong>PersistenceConfiguration</strong> class of the fluent interface framework and contains no code.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> MyConfiguration : PersistenceConfiguration&lt;MyConfiguration&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>For some databases there are even pre-defined configuration classes that facilitate the job even further. For SqLite I can then write</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> SQLiteConfiguration()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .InMemory()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    .DoNot.ShowSql();</pre></div></div>
<p>Really nice! Please note also the <strong>DoNot</strong>... syntax to revert some boolean settings like <strong>ShowSql</strong> or <strong>UseOuterJoin</strong>, etc.</p>
<p>Now a complete sample how to configure and use NHibernate</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">var nhibernateConfig = <span style="color: #0000ff">new</span> Configuration();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">var cfg = <span style="color: #0000ff">new</span> SQLiteConfiguration()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    .InMemory()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .ConfigureProperties(nhibernateConfig);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">var sessionSource = <span style="color: #0000ff">new</span> SessionSource(cfg.Properties, <span style="color: #0000ff">new</span> MyPersistenceModel());</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">using</span> (var session = sessionSource.CreateSession())</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    var product = <span style="color: #0000ff">new</span> Product { Name = <span style="color: #006080">"Product 1"</span>, UnitPrice = 10.55m, Discontinued = <span style="color: #0000ff">false</span> };</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    session.Save(product);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>First I instantiate an object of type <strong>NHibernate.Cfg.Configuration</strong>. I then instantiate an object of type <strong>SQLiteConfiguration</strong> which is defined in the mapping framework. With the <strong>ConfigureProperties</strong> method I tell this object to configure the NHibernate configuration object which I pass as a parameter. Then I instantiate a <strong>SessionSource </strong>object an pass it the properties of my <strong>SqLite</strong> configuration object as well as my persistence model. Last I use this session source to create a new session and insert a new product into the database. (Please refer to the previous articles of this series for a description of the persistence model).</p>
<h2>Summary</h2>
<p>Various methods exists how one can configure <strong>NHibernate</strong>. None of them is really complicated. But the new mapping framework facilitates the configuration even more and has the following advantages over the other methods</p>
<ul>
<li>type safety (and thus also re-factor friendly) 
<li>good readability 
<li>intellisense support </li></ul>
<p>Enjoy</p>
<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0"></a> .</p>]]></content>
      <post-name type="text"><![CDATA[a fluent interface to nhibernate part 4 configuration]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1039" />
      </categories>
      <trackbacks>
        <trackback id="118" date-created="2008-11-17T13:24:47" date-modified="2008-11-17T13:24:47" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/17/lazy-loading-blobs-and-the-like-in-nhibernate.aspx">
          <title type="text"><![CDATA[Lazy loading BLOBS and the like in NHibernate]]></title>
        </trackback>
        <trackback id="121" date-created="2008-11-19T11:18:52" date-modified="2008-11-19T11:18:52" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/18/legacy-db-and-one-to-one-relations.aspx">
          <title type="text"><![CDATA[Legacy DB and one-to-one relations]]></title>
        </trackback>
        <trackback id="139" date-created="2008-11-26T18:15:01" date-modified="2008-11-26T18:15:01" approved="true" url="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/26/linq-to-nhibernate.aspx">
          <title type="text"><![CDATA[Linq to NHibernate]]></title>
        </trackback>
        <trackback id="517" date-created="2009-09-22T01:18:26" date-modified="2009-09-22T01:18:26" approved="true" url="http://www.cnblogs.com/pursue/archive/2009/09/22/1571552.html">
          <title type="text"><![CDATA[Lazy loading BLOBS and the like in NHibernate(zhuan)]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="39" date-created="2008-09-06T20:54:15" date-modified="2008-09-06T20:54:15" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/manage-sql-databases.aspx" type="normal" hasexcerpt="false" views="4347">
      <title type="text"><![CDATA[Manage SQL Databases]]></title>
      <content type="text"><![CDATA[<p><strong><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </strong></p> <p><strong>Note</strong>: the following article is only targeting Microsoft <strong>SQL Server</strong> (I regret...).</p> <p>In a <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/04/28/create-and-update-database-schema.aspx">previous article</a> I have discussed the schema generation and schema update offered by NHibernate. In this post I want to discuss a way how you can generate and/or maintain your SQL Server database.</p> <p>When practicing agile development one of the most important cornerstones of this methodology is implementing <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a> (CI). That is any solution your team develops should be able to build in fully automated manner. One of the build steps is of course the creation and or update of the database and the database schema.</p> <h2>Tools to automate the build process</h2> <p>Many people use either <a href="http://nant.sourceforge.net/">nant</a> or <a href="http://en.wikipedia.org/wiki/MSBuild">msbuild</a> to fully automate their build. And when I say build it includes the following tasks(others are possible)</p> <ul> <li>versioning/tagging the sources  <li>compiling the sources (in Visual Studio called <strong>build</strong>)  <li>running unit tests, integration tests, acceptance tests, stress tests  <li><font color="#0080ff"><strong>dropping and re-creating the database</strong></font>  <li><font color="#0080ff"><strong>re-creating the database schema</strong></font>  <li>creating a package  <li>if Web: deploy the web site  <li>if Other: create installer </li></ul> <p>In this post I'll discuss the two tasks marked in blue.</p> <h2>The nant task</h2> <p>There is an OSS project on <strong>Google Code</strong> which is dedicated to the change management of SQL server databases. It's called <strong>Tarantino</strong> and can be found <a href="http://code.google.com/p/tarantino/wiki/DatabaseChangeManagement">here</a>. One of the outcome of this project is a <strong>custom</strong> <strong>nant</strong> task called <strong>manageSqlDatabase</strong>. We will use nant and this custom task to manage our (sample) database.</p> <p>You need the following files to be able to use the custom task</p> <ul> <li><a><font color="#000000">Tarantino.CommonsCore.dll </font></a> <li><a><font color="#000000">Tarantino.DatabaseManager.Tasks.dll </font></a> <li><a><font color="#000000">Microsoft.SqlServer.BatchParser.dll </font></a> <li><a><font color="#000000">Microsoft.SqlServer.ConnectionInfo.dll </font></a> <li><a><font color="#000000">Microsoft.SqlServer.Smo.dll </font></a></li></ul> <p>To get the files for your own solution either download the <a href="https://hibernatingrhinos.googlecode.com/svn/trunk/ManageSqlDatabase">sample solution</a> accompanying this post or download it directly from the <strong>Tarantino</strong> project which you can find <a href="http://code.google.com/p/tarantino/downloads/list">here</a>.</p> <h2>The build file</h2> <p>The general format of the <strong>custom nant</strong> task is</p><pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">manageSqlDatabase</span>
  <span style="color: #ff0000">scriptDirectory</span>=<span style="color: #0000ff">"${database.script.directory}"</span>
  <span style="color: #ff0000">action</span>=<span style="color: #0000ff">"${action}"</span>
  <span style="color: #ff0000">server</span>=<span style="color: #0000ff">"${database.server}"</span>
  <span style="color: #ff0000">integratedAuthentication</span>=<span style="color: #0000ff">"${database.integrated}"</span>
  <span style="color: #ff0000">database</span>=<span style="color: #0000ff">"${database.name}"</span>
  <span style="color: #ff0000">username</span>=<span style="color: #0000ff">"${database.username}"</span>
  <span style="color: #ff0000">password</span>=<span style="color: #0000ff">"${database.password}"</span>
<span style="color: #0000ff">/&gt;</span></pre>
<p>The <strong>sriptDirectory</strong> contains the path to the files which contain the schema creation and/or schema update statements.</p>
<p>The possible <strong>actions</strong> are</p>
<ul>
<li>dropDatabase 
<li>createDatabase 
<li>rebuildDatabase 
<li>updateDatabase </li></ul>
<p>The <strong>server</strong> parameter must contain the name of the SQL Server (e.g. "<strong>localhost/SQLEXPRESS</strong>").</p>
<p>The parameter <strong>IntegratedAuthentication </strong>can be either <strong>true</strong> or <strong>false</strong>.</p>
<p>The parameter <strong>database</strong> contais the name of the database to re-create or update (e.g. "<strong>SampleDatabase</strong>")</p>
<p>The parameters <strong>username</strong> and <strong>password</strong> are only needed if <strong>IntegratedAuthentication</strong> is set to <strong>false</strong>.</p>
<p>A typical create database scenario could be as shown below</p><pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">manageSqlDatabase</span>
  <span style="color: #ff0000">scriptDirectory</span>=<span style="color: #0000ff">"src\database"</span>
  <span style="color: #ff0000">action</span>=<span style="color: #0000ff">"createDatabase"</span>
  <span style="color: #ff0000">server</span>=<span style="color: #0000ff">"localhost"</span>
  <span style="color: #ff0000">integratedAuthentication</span>=<span style="color: #0000ff">"true"</span>
  <span style="color: #ff0000">database</span>=<span style="color: #0000ff">"SampleDatabase"</span>
<span style="color: #0000ff">/&gt;</span></pre>
<p>Let's not construct a complete build file for nant which includes the task of dropping and re-creating a database and the creation of the database schema. We create a new empty file called default.build and enter the following XML fragments.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;?</span><span style="color: #800000">xml</span> <span style="color: #ff0000">version</span><span style="color: #0000ff">="1.0"</span> <span style="color: #ff0000">encoding</span><span style="color: #0000ff">="utf-8"</span>?<span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">project</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="DemoSolution"</span> <span style="color: #ff0000">default</span><span style="color: #0000ff">="builddatabase"</span> </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">         <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="http://nant.sf.net/release/0.85/nant.xsd"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="solution.dir"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="src"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="database.script.directory"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="${solution.dir}/Database"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="database.server"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="localhost"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="database.name"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="${project::get-name()}"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">target</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="builddatabase"</span> <span style="color: #ff0000">depends</span><span style="color: #0000ff">="dropDatabase, createDatabase"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">target</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dropDatabase"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">target</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">target</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="createDatabase"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">target</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">project</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>In this file we define a new nant project called <strong>DemoSolution</strong>. The default target that is executed is <strong>builddatabase</strong>. Then we define some properties for reference in our project (if you are not fluent in nant syntax please consult the online documentation <a href="http://nant.sourceforge.net/release/latest/help/index.html">here</a>.)</p>
<p>The <strong>builddatabase</strong> target does nothing else than trigger the targets <strong>dropDatabase</strong> and <strong>createDatabase,</strong> that is if the database already exists then it is dropped and then re-created. Finally the database schema is created. But wait, those two targets are empty at the moment and will do absolutely nothing at the moment.</p>
<p>Let's now add this helper target to the build file - we want to avoid duplication don't we?</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">target</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="manageSqlDatabase"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">manageSqlDatabase</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #ff0000">scriptDirectory</span><span style="color: #0000ff">="${database.script.directory}"</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #ff0000">action</span><span style="color: #0000ff">="${action}"</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #ff0000">server</span><span style="color: #0000ff">="${database.server}"</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #ff0000">integratedAuthentication</span><span style="color: #0000ff">="true"</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #ff0000">database</span><span style="color: #0000ff">="${database.name}"</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">if</span> <span style="color: #ff0000">test</span><span style="color: #0000ff">="${action != 'Drop'}"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">echo</span> <span style="color: #ff0000">message</span><span style="color: #0000ff">="Current Database Version: ${usdDatabaseVersion}"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">if</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">target</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>it will be called by the <strong>dropDatabase</strong> and <strong>createDatabase</strong> targets where each provides another action parameter. Note that the <strong>usdDatabaseVersion</strong> parameter is generated by the <strong>manageSqlDatabase</strong> custom task.</p>
<p>Now we complete the <strong>dropDatabase</strong> and <strong>createDatabase</strong> targets as follows</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">target</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dropDatabase"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="action"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="Drop"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">call</span> <span style="color: #ff0000">target</span><span style="color: #0000ff">="manageSqlDatabase"</span> <span style="color: #ff0000">failonerror</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">target</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">target</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="createDatabase"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="action"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="Create"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">call</span> <span style="color: #ff0000">target</span><span style="color: #0000ff">="manageSqlDatabase"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">target</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>that is we use the standard call task of nunit to trigger the custom task. Note that the <strong>dropDatabase</strong> target calls the custom task with <strong>failonerror</strong> set to <strong>false</strong> (default is <strong>true</strong>). It is possible that the database does not yet exist. In this case the build should just continue.</p>
<h2>The script files</h2>
<p>One of the main parts in the automation process is still missing. It's the SQL script files which generate and/or update the database schema. These files have to be valid SQL scripts (you should be able to run these scripts without errors in e.g. a query session in "<strong>SQL Server Management Studio")</strong>. The scripts can contain DDL and DML statements. They have to be sequentially numbered, e.g.</p>
<ul>
<li>0001_CreateBaseSchema.sql 
<li>0002_AddProductAndCategory.sql 
<li>0003_AddIndexes.sql 
<li>0004_InitialDataLoad.sql 
<li>etc. </li></ul>
<p>You can freely choose any name after the underscore. The <strong>manageSqlDatabase</strong> nant task will apply the scripts sequentially starting with the lowest number and ending with the highest number. When creating the database the <strong>manageSqlDatabase</strong> nant task will add a special table to the database which keeps track of which scripts have been applied.</p>
<h2>How to create the script files</h2>
<p>The initial schema generation script I normally generate by using NHibernate's schema export utility. See <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/04/28/create-and-update-database-schema.aspx">this post</a> for an in depth discussion. Alternatively you can also use the script database objects task of "<strong>SQL Server Management Studio</strong>". For any further modifications of the schema (especially if the first version is already in production) I use a product like <strong>Redgate's </strong><a href="http://www.red-gate.com/products/SQL_Compare/index.htm"><strong>SQL Compare</strong></a> or the same product from <a href="http://www.apexsql.com/sql_tools_diff.asp">Apex</a> to generate the alter scripts.</p>
<h2>Execute the build</h2>
<p>We can now execute the build by invoking the following command</p>
<p><font face="Courier New" color="#0080ff">bin\nant\nant.exe -buildfile:default.build</font></p>
<p>we can write a batch file <strong>builddatabase.bat</strong> to further automate the process. The content of the batch file might be as follows</p>
<p><font face="Courier New" color="#0080ff">bin\nant\nant.exe -buildfile:default.build <br>pause</font></p>
<h2>Sample Code</h2>
<p>You can download a little sample from <a href="https://hibernatingrhinos.googlecode.com/svn/trunk/ManageSqlDatabase">here</a>. You need to have an SQL Server available. A local installation of SQL Server Express Edition is enough. Please adjust the properties <strong>database.server</strong> and <strong>database.name</strong> in the file <strong>default.build</strong> according your needs. Double click the file <strong>builddatabase.bat</strong> to test the creation of the database and the database schema.</p>
<p>Enjoy! </p>
<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0"></a></p>]]></content>
      <post-name type="text"><![CDATA[manage sql databases]]></post-name>
      <categories>
        <category ref="1040" />
        <category ref="1041" />
      </categories>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="41" date-created="2008-09-06T21:02:27" date-modified="2008-09-06T21:02:27" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/identity-field-equality-and-hash-code.aspx" type="normal" hasexcerpt="false" views="8479">
      <title type="text"><![CDATA[Identity Field, Equality and Hash Code]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </p> <p>In this post I'll describe a possible base class for domain entities which implements a surrogate key as identity field and provides equality and hash code.</p> <h2>Introduction</h2> <p>Martin Fowler writes in his <a href="http://martinfowler.com/books.html#eaa">PoEAA</a> book: "<em>The identity field saves a database ID field in an object to maintain identity between an in-memory object and a database row</em>."</p> <p>And further he states: "<em>The first concern is whether to use meaningful or meaningless keys. A meaningful key is something like the U.S. Social Security Number... A meaningless key is essentially a random number the database dreams up that's never intended for human use.</em>"</p> <p>There are many reasons why meaningful keys often are NOT good candidates for an identity field. Primarily they often are not immutable (due to possible human errors) and not unique. Thus Martin Fowler states: "... <em>As a result, meaningful keys should be distrusted.</em> ..."</p> <p>Having you provided some background about the ongoing dispute about what is a good candidate for an identity field I'll now make my choice. I always choose meaningless keys as identity fields. Such fields are often called <a href="http://en.wikipedia.org/wiki/Surrogate_key">surrogate key</a>. Important: "<em>The surrogate key is <strong>not</strong> derived from application data.</em>"</p> <p>My favorite type of surrogate key is a <strong>GUID</strong> (global unique identifier). The mathematical algorithm used to generate a new GUID is such as that it is (nearly) impossible to generate the same ID twice (the probability tends to zero).</p> <p>NHibernate supports GUID as one possible type for the identity field.</p> <h2>Problem Description</h2> <p>When dealing with NHibernate one often uses a special type of collection known as <strong>Set</strong>. A set is a collection that contains no duplicate elements. More formally, <em>sets</em> contain no pair of elements <em>e1</em> and <em>e2 </em>such that <em>e1.Equals(e2)</em>, and at most one <em>null</em> element. As the Set is not provided by the .NET framework NHibernate uses the IESI collections library which contains an implementation of a set.</p> <p>In the definition above you find which is the important predicate to decide whether two elements are the same or not. It is the <em><strong>Equals</strong></em> function. By default the Equals function takes the hash code of two objects and compares it. So if two variables <em>e1</em> and <em>e2</em> refer to 2 different instances of a class <em>Equals</em> will always return false. But we want to use the identity field as the relevant part in the comparison of two instances. If two different instances have the <strong>same</strong> identity field then they are equal (that is they refer to the same database record).</p> <h2>Implementation</h2> <p>The default implementation of the Equals function is to be found in the System.Object class. From this class all other classes in .NET implicitly or explicitly inherit. Fortunately the Equals function is virtual and we are able to override it. But when overriding the <em>Equals</em> function we have to also override the <em>GetHashCode</em> function.</p> <p>Assuming that we take a <strong>GUID</strong> called <strong>Id</strong> as identity field we can define the following base class from which all our domain classes directly or indirectly will inherit</p> <div> <div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> IdentityFieldProvider&lt;T&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">where</span> T : IdentityFieldProvider&lt;T&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">private</span> Guid _id;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> Guid Id</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        get { <span style="color: #0000ff">return</span> _id; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        set { _id = <span style="color: #0000ff">value</span>; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>Now lets override the Equals method. A possible solution is</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">bool</span> Equals(<span style="color: #0000ff">object</span> obj)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    T other = obj <span style="color: #0000ff">as</span> T;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">if</span> (other == <span style="color: #0000ff">null</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// handle the case of comparing two NEW objects</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">bool</span> otherIsTransient = Equals(other.Id, Guid.Empty);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">bool</span> thisIsTransient = Equals(Id, Guid.Empty);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">if</span> (otherIsTransient &amp;&amp; thisIsTransient)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> ReferenceEquals(other, <span style="color: #0000ff">this</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">return</span> other.Id.Equals(Id);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>We have to distinguish 3 possible cases. The first one is that the user/developer wants to compare two objects of different type. This case is trivial; the answer is ALWAYS "not equal". The second case is when the two objects are both new (also called <em>transient</em>) then the two references point to the same instance. And the third case just takes the implementation of the Equals method of the GUID type to check for equality.</p>
<p>Now we have to also override the <em>GetHashCode</em> method also inherited from System.Object.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">private</span> <span style="color: #0000ff">int</span>? _oldHashCode;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">int</span> GetHashCode()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// Once we have a hash code we'll never change it</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">if</span> (_oldHashCode.HasValue)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> _oldHashCode.Value;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">bool</span> thisIsTransient = Equals(Id, Guid.Empty);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// When this instance is transient, we use the base GetHashCode()</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #008000">// and remember it, so an instance can NEVER change its hash code.</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">if</span> (thisIsTransient)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        _oldHashCode = <span style="color: #0000ff">base</span>.GetHashCode();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> _oldHashCode.Value;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">return</span> Id.GetHashCode();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>Now, why this kind of code you might ask yourself? Well, a object should never ever change it's hash code during its life, that is from the moment the object is instantiated until it is disposed. If a object is restored from database there is no problem since any existing database record has always a well defined and unique identity field. Thus we can derive the hash code from this Id field. This is done in the last line of code in the code snippet above.</p>
<p>A little bit more problematic is the case when a new object is created in memory, then it's identity field is undefined (the object has not been saved to the database so far and is thus considered as being <em>transient</em>). In our case undefined means that the Id field has a value of <em>Guid.Empty</em>. In this case we take the default implementation (of System.Object) of the <em>GetHashCode</em> method to generate a hash code. But we store is in an instance variable for further reference.</p>
<p>Later in the life cycle of the instance it may be persisted to the database (but still continues to sit around in the memory). At this moment NHibernate assigns a new unique value to the Id field of the instance. Now the object isn't transient any more but the 2 first lines in the method avoid that the hash code of the object changes. It is still the same object as before. It has just been made persistent.</p>
<p>Finally we can also override the two operators '==' and '!=' to make it possible to compare two instances with those operators instead of only the <em>Equals</em> method.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">bool</span> <span style="color: #0000ff">operator</span> ==(IdentityFieldProvider&lt;T&gt; x, IdentityFieldProvider&lt;T&gt; y)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">return</span> Equals(x, y);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">bool</span> <span style="color: #0000ff">operator</span> !=(IdentityFieldProvider&lt;T&gt; x, IdentityFieldProvider&lt;T&gt; y)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">return</span> !(x == y);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>That's it. You can now use this class as the base for every entity class in your domain and never ever have to think about the identity field and the equality of objects. It just happens...</p>
<p>Enjoy</p>
<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="17" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="240" border="0"></a></p>]]></content>
      <post-name type="text"><![CDATA[identity field equality and hash code]]></post-name>
      <categories>
        <category ref="1043" />
        <category ref="1044" />
      </categories>
      <comments>
        <comment id="505" date-created="2009-09-13T17:16:31" date-modified="2009-09-13T17:16:31" approved="true" user-name="Felix Gartsman" user-url="http://nhforge.org/members/felixg/default.aspx">
          <title type="text"><![CDATA[re: Identity Field, Equality and Hash Code]]></title>
          <content type="text"><![CDATA[According to http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx this implementation does not meet consistency requirements.
The requirement is: If two objects compare as equal, the GetHashCode method for each object must return the same value.
Consider object A was transient and saved its hashcode. Then was persisted and assigned Id=X. Afterward we load object B for identity X. Now we get A==B, but their hashcodes differ!
According to this "The GetHashCode method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's  Equals method." you actually can change the hashcode, though it'll probably mess things up.]]></content>
        </comment>
        <comment id="506" date-created="2009-09-13T21:41:37" date-modified="2009-09-13T21:41:37" approved="true" user-name="gabriel.schenker" user-url="http://nhforge.org/members/gabriel.schenker/default.aspx">
          <title type="text"><![CDATA[re: Identity Field, Equality and Hash Code]]></title>
          <content type="text"><![CDATA[In the article I explicitely write that this is a very specific implementation of equality. The equality is based on several conventions:
a) for a given id only one instance can/shall exists at the same time (first level cache!)
b) ONLY the id is the relevant for comparison

if you are talking of "value type" (in the DDD sense) comparison then your statement is valid!]]></content>
        </comment>
        <comment id="973" date-created="2011-08-29T13:50:09" date-modified="2011-08-29T13:50:09" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Identity Field, Equality and Hash Code]]></title>
          <content type="text"><![CDATA[@Felix Gartsman: This shouldn't ever be a problem. There can't be two objects with the same id in the same session - except one is the proxy of the other. But in the case of proxy, it is not possible that one is persistent and the other is not. Additionally, the proxy calls the object's GetHashCode and Equals methods, so they return the same values.

Whatever you do to get two objects with the same id (you need to take it from another session), you'll get a problem. I don't think that an Equals or GetHashCode method could ever avoid this problem. And I can't think of any scenario where it would make sense.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="43" date-created="2008-09-06T21:12:50" date-modified="2008-09-06T21:12:50" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/how-to-configure-log4net-for-use-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="9018">
      <title type="text"><![CDATA[How to configure Log4Net for use with NHibernate]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </p> <p>Recently there was a question in the <a href="http://groups.google.com/group/nhusers?hl=en">NHUser</a> group about how to configure <strong>Log4Net</strong> to log the queries generated by NHibernate. First of all: you can get <strong>Log4Net</strong> <a href="http://logging.apache.org/log4net/index.html">here</a>. There you also find the documentation. If you are not sure about details of the configuration shown below please refer to <a href="http://logging.apache.org/log4net/index.html">this</a> documentation.</p> <h2>Running without Log4Net</h2> <p>If you only want NHibernate to log the queries it sends to the data source when running unit tests you don't have to configure Log4Net at all. It suffices to add the <strong>show_sql</strong> key to the NHibernate configuration. If you are using a separate xml file to configure NHibernate (e.g. the hibernate.cfg.xml) then its content might look similar to the one below</p> <div> <div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;?</span><span style="color: #800000">xml</span> <span style="color: #ff0000">version</span><span style="color: #0000ff">="1.0"</span> <span style="color: #ff0000">encoding</span><span style="color: #0000ff">="utf-8"</span> ?<span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-configuration</span> <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-configuration-2.2"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.provider"</span><span style="color: #0000ff">&gt;</span>NHibernate.Connection.DriverConnectionProvider<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dialect"</span><span style="color: #0000ff">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.driver_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.connection_string"</span><span style="color: #0000ff">&gt;</span>Server=(local);Database=NHibernateFAQ;Integrated Security=SSPI;<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <strong><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="show_sql"</span><span style="color: #0000ff">&gt;</span>true<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span></strong></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-configuration</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>Now when running any unit test that involves NHibernate the queries generated by NHibernate will be logged in the output window (be it the unit test runner of <strong>Resharper</strong> or be it the Output Window of Visual Studio when you use <strong>TestDriven</strong>).</p>
<h2>Logging with Log4Net</h2>
<p>If you want to use Log4Net to collect logging information generated by NHibernate you have to add the necessary configuration to the config file of your application. If you want to log to two different targets (e.g. to the console and to a file) the relevant sections in your config file might look like follows</p>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  ...</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">configSections</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">section</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="log4net"</span> <span style="color: #ff0000">type</span><span style="color: #0000ff">="log4net.Config.Log4NetConfigurationSectionHandler,log4net"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">configSections</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">log4net</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="ConsoleAppender"</span> <span style="color: #ff0000">type</span><span style="color: #0000ff">="log4net.Appender.ConsoleAppender, log4net"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">layout</span> <span style="color: #ff0000">type</span><span style="color: #0000ff">="log4net.Layout.PatternLayout, log4net"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">&lt;</span><span style="color: #800000">param</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="ConversionPattern"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="%d %p %m%n"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;/</span><span style="color: #800000">layout</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">appender</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="RollingFile"</span> <span style="color: #ff0000">type</span><span style="color: #0000ff">="log4net.Appender.RollingFileAppender,log4net"</span> <span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">param</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="File"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="log.txt"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">param</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="AppendToFile"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="true"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">param</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="DatePattern"</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="yyyy.MM.dd"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">layout</span> <span style="color: #ff0000">type</span><span style="color: #0000ff">="log4net.Layout.PatternLayout,log4net"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">&lt;</span><span style="color: #800000">conversionPattern</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="%d %p %m%n"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;/</span><span style="color: #800000">layout</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">appender</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">root</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">priority</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="DEBUG"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender-ref</span> <span style="color: #ff0000">ref</span><span style="color: #0000ff">="ConsoleAppender"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">root</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    ...</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">configuration</span><span style="color: #0000ff">&gt;</span></pre></div>
<p>Here I define that all output with a priority of at least DEBUG goes to the console.</p>
<p>Now I have to tell my application that I want to use Log4Net. I can do that with an assembly level attribute. That is, you have to put the following code snippet somewhere in your application (e.g. the "<strong>Global. asax"</strong> if you are building a web application)</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #008000">// Configure log4net using the .config file</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">[assembly: log4net.Config.XmlConfigurator(Watch = <span style="color: #0000ff">true</span>)]</pre></div></div>
<p>having done do we can now run a first unit test that accesses the database via NHibernate. The output generated by Log4Net in the unit test runner is similar to this</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:07,249 INFO NHibernate 2.0.0.1001 (2.0.0.1001)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:07,251 INFO hibernate-configuration section not found <span style="color: #0000ff">in</span> application configuration file</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:07,254 INFO Bytecode provider name : lcg</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:07,257 INFO Using reflection optimizer</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:08,515 DEBUG connection.provider=NHibernate.Connection.DriverConnectionProvider</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:08,516 DEBUG dialect=NHibernate.Dialect.MsSql2005Dialect</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:08,517 DEBUG connection.driver_class=NHibernate.Driver.SqlClientDriver</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:08,517 DEBUG connection.connection_string=Server=(local);Database=NHibernateFAQ;Integrated Security=SSPI;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:08,518 DEBUG show_sql=<span style="color: #0000ff">false</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:08,522 DEBUG properties: System.Collections.Generic.Dictionary`2[System.String,System.String]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:08,526 INFO Mapping resource: LoggingSample.Person.hbm.xml</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:08,872 INFO Using dialect: NHibernate.Dialect.MsSql2005Dialect</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:11,425 INFO Mapping <span style="color: #0000ff">class</span>: LoggingSample.Person -&gt; Person</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:11,537 DEBUG Mapped property: Id -&gt; Id, type: Int32</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:11,612 DEBUG Mapped property: LastName -&gt; LastName, type: String</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:11,614 DEBUG Mapped property: FirstName -&gt; FirstName, type: String</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:11,614 DEBUG Mapped property: Birthdate -&gt; Birthdate, type: DateTime</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:11,632 INFO checking mappings queue</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:11,634 INFO processing one-to-many association mappings</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:11,634 INFO processing one-to-one association property references</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:11,634 INFO processing foreign key constraints</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:11,712 INFO Using dialect: NHibernate.Dialect.MsSql2005Dialect</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:11,716 INFO Using dialect defined converter</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">...</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:12,410 DEBUG Static SQL <span style="color: #0000ff">for</span> entity: LoggingSample.Person</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">2008-07-02 08:40:12,411 DEBUG  Version select: SELECT Id FROM Person WHERE Id = ?</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:40:12,412 DEBUG  Snapshot select: SELECT person_.Id, person_.LastName <span style="color: #0000ff">as</span> LastName0_, person_.FirstName <span style="color: #0000ff">as</span> FirstName0_, person_.Birthdate <span style="color: #0000ff">as</span> Birthdate0_ FROM Person person_ WHERE person_.Id=?</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">...</pre></div></div>
<p>as you can see LOADS of information.</p>
<p>To tune the generated logging information a little bit we can filter the output generated by NHibernate by putting the following configuration section into our config file (put them just after the <strong>root</strong> section inside the <strong>log4net</strong> node)</p>
<p></p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">logger</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="NHibernate"</span> <span style="color: #ff0000">additivity</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">level</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="WARN"</span><span style="color: #0000ff">/&gt;</span>      </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender-ref</span> <span style="color: #ff0000">ref</span><span style="color: #0000ff">="RollingFile"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender-ref</span> <span style="color: #ff0000">ref</span><span style="color: #0000ff">="ConsoleAppender"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">logger</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">logger</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="NHibernate.SQL"</span> <span style="color: #ff0000">additivity</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">level</span> <span style="color: #ff0000">value</span><span style="color: #0000ff">="ALL"</span><span style="color: #0000ff">/&gt;</span>      </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender-ref</span> <span style="color: #ff0000">ref</span><span style="color: #0000ff">="RollingFile"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">appender-ref</span> <span style="color: #ff0000">ref</span><span style="color: #0000ff">="ConsoleAppender"</span> <span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">logger</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>Obviously NHibernate defines two different loggers <strong>NHibernate</strong> and <strong>NHibernate.SQL</strong>. The first one receives all logging output that NHibernate generates where as the second one only receives the sql statements generated by NHibernate.</p>
<p>With the above settings in place the output generated is reduced to</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">2008-07-02 08:48:58,636 DEBUG <span style="color: #0000ff">select</span> person0_.Id <span style="color: #0000ff">as</span> Id0_, </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                        person0_.LastName <span style="color: #0000ff">as</span> LastName0_, </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                        person0_.FirstName <span style="color: #0000ff">as</span> FirstName0_, </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                        person0_.Birthdate <span style="color: #0000ff">as</span> Birthdate0_ </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                        <span style="color: #0000ff">from</span> Person person0_</pre></div></div>
<p>That's what we want. Only if we have some weird problems we need to change the priority level of the <strong>NHibernate</strong> filter to say INFO or DEBUG.</p>
<p>As usual you can find a demo solution <a href="http://hibernatingrhinos.googlecode.com/svn/trunk/Logging">here</a>.</p>
<p>Enjoy</p>
<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0"></a> .</p>]]></content>
      <post-name type="text"><![CDATA[how to configure log4net for use with nhibernate]]></post-name>
      <categories>
        <category ref="1039" />
        <category ref="1045" />
      </categories>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="46" date-created="2008-09-06T22:12:52" date-modified="2008-09-06T22:12:52" approved="true" post-url="/blogs/nhibernate/archive/2008/09/06/prepare-your-system-for-nhibernate.aspx" type="normal" hasexcerpt="false" views="18451">
      <title type="text"><![CDATA[Prepare your system for NHibernate]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_4.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb_5F00_1.png" width="244" border="0"></a> </p> <p>In this post I'll introduce how to prepare a developer machine to use <strong>NHibernate</strong> as a ORM (Object Relational Modeling) tool.</p> <p>This approach describes the <strong>minimal</strong> setup needed to use NHibernate when developing an application. </p> <p>In this article the focus is on <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> (Test Driven Development) and we want to approach the topic by adhering to <a href="http://de.wikipedia.org/wiki/Domain-Driven_Design">DDD</a> (Domain Driven Design). Although NHibernate can also be used to generate the domain model by starting from an existing database schema I'll concentrate on the opposite direction and start with a domain model first and let NHibernate generate the database schema from the model (and the mapping meta data).</p> <h2>How to start</h2> <p>First you have to download NHibernate. Since NHibernate is an open source project anybody has free access to the (most current) binaries and/or source code. The source code is stored in a SVN repository (<a href="http://subversion.tigris.org/">Subversion</a> Source Control System) and can be found <a href="https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk/">here</a>. The most current source code is called the "trunk". </p> <h3>The Operating System</h3> <p>I expect you are working on a machine with one of the following operating systems</p> <ul> <li>Windows XP SP2,  <li>Windows VISTA,  <li>Windows Server 2003 or  <li>Windows Server 2008. </li></ul> <h3>Which version of Visual Studio</h3> <p>We use the brand new <strong>NHibernate 2.0 Alpha 1</strong> version. This version of NHibernate can work either with .NET 2.0 or .NET 3.5. For the former version you should have at least Visual Studio 2005 Professional installed and for the latter you need at least VS 2008 Professional. Of course you can also work with the Express Edition but they have some serious limitations (e.g. you cannot use any Add-In with VS). Now if you have some money left I strongly recommend you install the <a href="http://www.jetbrains.com/resharper/">ReSharper</a> Add-In as your productivity tool. I promise you it'll boost your productivity by factors! This investment is worth every penny.</p> <h2>Download the NHibernate binaries</h2> <p>You can grab the latest NHibernate binaries <a href="http://sourceforge.net/project/showfiles.php?group_id=73818">here</a>. At the time being this is the Alpha 1 release of the version2.0.0. Download the file "<strong>NHibernate-2.0.0.Alpha1-bin.zip</strong>". Extract the zip files to a folder where you will place all your Open Source Software (OSS). That is create a new folder, e.g. "<strong>m:\dev\OSS\NHibernate</strong>" and extract the binaries to this folder. The binaries are compiled against .NET 2.0. If you prefer to have binaries compiled agains .NET 3.5 you have to build NHibernate from the trunk as described in the next chapter. Otherwise you can skip the following chapter and move directly to the chapter "<strong>Prepare for TDD</strong>".</p> <h2>Build NHibernate from the Trunk</h2> <p>To download the source code you need a SVN client application installed on your developer machine. There exist various open source as well as commercial clients. One of the most known (open source) clients is <strong>TortoiseSVN</strong> and can be found <a href="http://tortoisesvn.tigris.org/">here</a>. <strong>TortoiseSVN</strong> integrates very nicely with Windows Explorer. Download and install it on your machine. Restart your machine after the installation.</p> <h4>Download the NHibernate Source Code</h4> <p>Create a (sub-)directory OSS (Open Source Software; e.g. m:\dev\OSS). Create a subdirectory NHibernate within the OSS directory.</p> <p>Right click on the NHibernate directory and choose the context menu "<strong>SVN checkout...". </strong>In the dialog box enter the url to the trunk as shown below. Double check the checkout directory and then press OK.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="328" alt="TortoiseSVN download dialog" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb.png" width="470" border="0"></a> </p> <p>The SVN client will immediately start to download the NHibernate source code as well as the documentation. Depending on the speed of your Internet connection this may take some time to finish. You should see some thing like this</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="363" alt="TortoiseSVN download progress dialog" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_1.png" width="566" border="0"></a> </p> <p>When the download is completed we can now compile NHibernate (remember: we have downloaded the source code and not the binaries!). Don't fear, this is an automated process. But wait, for this to work we need <strong>NAnt</strong>, another open source tool. </p> <h3>Download and install NAnt</h3> <p>You can get the latest release of NAnt <a href="http://nant.sourceforge.net/">here</a>. This time we download the binaries (and not the source code) since it is "only" a helper tool for now. At the time of this writing I recommend downloading the <strong>0.86 Beta 1</strong> release since this release is the first one that can compile .NET 3.5 projects.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="381" alt="NAnt" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_2.png" width="287" border="0"></a> </p> <p>Download and extract the NAnt binaries (nant-0.86-beta1-bin.zip) into a directory on your developer machine (e.g. m:\dev\OSS\NAnt).</p> <h3>Compile NHibernate</h3> <p>Now it's definitively time to compile NHibernate. Open a console and go to the root directory of the NHibernate source (e.g. m:\dev\OSS\NHibernate\nhibernate). There you should find amongst others a file called <strong>default.build</strong>. This file contains the instructions for NAnt how to compile NHibernate. You can either compile NHibernate for .NET 3.5 (it's the default) or for .NET 2.0. In the console enter the following commands for the 2 scenarios (assuming you have NAnt installed in the same OSS folder as NHibernate)</p> <ul> <li>For .Net 3.5 (default) <br>..\..\nant\bin\nant.exe  <li>For .NET 2.0 <br>..\..\nant\bin\nant.exe "-t:net-2.0" </li></ul> <p>The source code should now be compiled and after some time you should see some thing like this</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_8.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="644" alt="image" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3.png" width="681" border="0"></a> </p> <p>It's important that the second last line states "BUILD SUCCEEDED".</p> <p>After compiling the source code you should find a new sub-folder "build" in your NHibernate folder which contains all the binaries. Depending on the chosen scenario you will find the binaries in either a sub-folder "<strong>net-3.5</strong>" or "<strong>net-2.0"</strong>. Didn't I tell you that it's easy...!</p> <h2>Prepare for TDD</h2> <p>Are we ready now? Nope! Since we're proud fellows of the <a href="http://altnetpedia.com">ALT.NET</a> way we don't want just start coding. No, we do <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>. Doing so we need a test framework. There exist several well known frameworks (e.g. <a href="http://www.nunit.org/index.php">NUnit</a>, <a href="http://www.mbunit.com/">MbUnit</a>, <a href="http://www.codeplex.com/xunit">XUnit</a>, etc.). In our examples we either use NUnit or MbUnit. Let's start with NUnit since NHibernate uses it too for its own test (you can download it from <a href="http://www.nunit.org/index.php">here</a>). Note: we don't have to download it, since we can use the binaries provided with NHibernate (the only files we actually need are <strong>nunit.framework.dll</strong> and <strong>nuni.core.dll</strong>).</p> <h3>Team development and Continuous Integration</h3> <p>Although this article doesn't explain these two topics you still should be prepared to develop in a team and to use <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous integration</a>. Why do I mention this? Well, we should do some further configuration of our environment to be prepared for this situations. Since it's easy to do - why not do it NOW...</p> <p>A solution at best should have <strong>no</strong> external dependencies (ok, .NET we don't count here). If it has, then these dependencies should become a part of the solution (setup). What does this mean for us? Well our projects will have external dependencies, NHibernate is one of them. Another one is NUnit and still another one the database we'll use. A possible solution for this scenario is to <strong>not</strong> rely on assemblies registered in the GAC or any other "common" or "programs" folders of the system. Instead create a directory called e.g. SharedLibs which will be part of your solution and copy all external assemblies into this folder. The solution then only references external assemblies from this folder (an exception are all the .NET assemblies). If you use a source control system (and you should!) then put this folder under version control too!</p> <h3>Our first project</h3> <p>Create a folder FirstSample (e.g. m:\dev\projects\FirstSolution). Create a sub-folder SharedLibs. Copy the following assemblies into this folder (from the NHibernate bin folder which was created during compilation of NHibernate)</p> <ul> <li>nunit.framework.dll  <li>nuni.core.dll  <li>nhibernate.dll  <li>iesi.collections.dll  <li>Castle.DynamicProxy2.dll  <li>Castle.Core.dll  <li>log4net.dll </li></ul> <p>Create a sub-folder src (e.g. m:\dev\projects\FirstSolution\src).</p> <p>Run VS 2008 and create a new solution. Choose C# Class Library as Template and call it <strong>FirstSolution</strong>. Choose "m:\dev\projects\FirstSolution\src" as location and uncheck "Create directory for solution". Click OK now.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_10.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="574" alt="image" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4.png" width="808" border="0"></a> </p> <p>Immediately add an additional class library project to the solution and call it FirstSolution.Tests. This project will contain all our test classes (remember we're doing TDD). You should then have a structure similar to this one:</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_12.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="261" alt="image" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5.png" width="296" border="0"></a> </p> <h2>Summary</h2> <p>In this article I have shown how to prepare a developer machine for using the very latest version of NHibernate as an ORM tool in an application that is developed by using TDD and DDD. First we installed the prerequisites then we either downloaded the NHibernate binaries or we download and compiled the source code of NHibernate and finally we prepared a first .NET solution to start with.</p> <p>In <a href="http://www.nhforge.org/wikis/howtonh/your-first-nhibernate-based-application.aspx">this article</a> I discuss how implement this very first NHibernate based solution.</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="17" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="240" border="0"></a></p>]]></content>
      <post-name type="text"><![CDATA[prepare your system for nhibernate]]></post-name>
      <categories>
        <category ref="1046" />
      </categories>
      <comments>
        <comment id="52" date-created="2008-09-09T07:11:09" date-modified="2008-09-09T07:11:09" approved="true" user-name="yannick" user-url="http://www.nhforge.org/members/yannick/default.aspx">
          <title type="text"><![CDATA[re: Prepare your system for NHibernate]]></title>
          <content type="text"><![CDATA[how about including the link to the svn repo to copy and paste?

https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk

also it would be nice to have this link on the front page or some other more accessible place. i had to search quite a while for it.

thanks
y]]></content>
        </comment>
        <comment id="53" date-created="2008-09-10T04:21:36" date-modified="2008-09-10T04:21:36" approved="true" user-name="Dario Quintana" user-url="http://www.nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: Prepare your system for NHibernate]]></title>
          <content type="text"><![CDATA[Hi

Be patience, we are shaping the site, maybe in a future, the most important resources would be available in a easier fashion.

Best regards]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1021" date-created="2014-09-06T04:21:42" date-modified="2014-09-06T04:21:42" approved="true" url="http://guayamu.com.br/test/php/php_info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.wavenet.com%3EWeb+Hosting+Paraguay%3C%2Fa%3E">
          <title type="text"><![CDATA[Web Hosting Paraguay]]></title>
        </trackback>
        <trackback id="1022" date-created="2014-09-08T03:18:02" date-modified="2014-09-08T03:18:02" approved="true" url="http://legisalud.gov.ar/oscarinfo.php?a%5B%5D=find+out+best+cheap+sewing+machines+%28%3Ca+href%3Dhttp%3A%2F%2F8544da.heteml.jp%2Fscuttle%2Fbookmarks.php%2Flindsqqd%3Eclick+the+following+web+page%3C%2Fa%3E%29">
          <title type="text"><![CDATA[Find Out Information About Cheap Sewing Machines Here]]></title>
        </trackback>
        <trackback id="1026" date-created="2014-09-09T04:30:28" date-modified="2014-09-09T04:30:28" approved="true" url="http://teamenergizer.myorganogold.com">
          <title type="text"><![CDATA[Join Organo Gold]]></title>
        </trackback>
        <trackback id="1056" date-created="2014-09-15T06:49:33" date-modified="2014-09-15T06:49:33" approved="true" url="http://smato.de/scripts/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DPS9CMcBa5-4%3ETvc+matrix+scam%3C%2Fa%3E">
          <title type="text"><![CDATA[have a peek at this site]]></title>
        </trackback>
        <trackback id="1075" date-created="2014-09-20T01:07:31" date-modified="2014-09-20T01:07:31" approved="true" url="http://Felixcos.de/cgi-bin/info.php?a%5B%5D=best+and+cheapest+sewing+machines+-+%3Ca+href%3Dhttp%3A%2F%2FYoutube.com%2Fwatch%3Fv%3DCUBw1oIAV3M%3Ehttp%3A%2F%2FYoutube.com%2Fwatch%3Fv%3DCUBw1oIAV3M%3C%2Fa%3E%2C">
          <title type="text"><![CDATA[Find Out Information About Cheap Sewing Machines Here]]></title>
        </trackback>
        <trackback id="1090" date-created="2014-09-24T09:48:06" date-modified="2014-09-24T09:48:06" approved="true" url="http://84.19.184.35/php.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.thorse.org%2Fmediawiki%2Findex.php%3Ftitle%3DUsuario%3AHelaineHeighway%3Ebest+price+sewing+machines%3C%2Fa%3E">
          <title type="text"><![CDATA[Cheap Sewing Machines]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="49" date-created="2008-09-08T09:55:00" date-modified="2008-09-08T09:55:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/08/nhibernate-resource-search-site.aspx" type="normal" hasexcerpt="false" views="2428">
      <title type="text"><![CDATA[NHIbernate Grok! ]]></title>
      <content type="text"><![CDATA[<p>I've often wanted to have an instant search for the many NHibernate manuals, blogs, articles and code samples. So, I put together a Google Custom Search just for this, and wrapped it up into a little web app.</p>
<p>It's called the <b><a target="_blank" title="NHibernate Deep Grok - Search NHibernate Resources" href="http://nhibernate.deepgrok.com/">NHibernate Deep Grok</a></b>, available at <a title="NHibernate Deep Grok - Search NHibernate Resources" href="http://nhibernate.deepgrok.com/">http://nhibernate.deepgrok.com</a>. &nbsp; </p>
<p>Searches performed on the site cover over 130 NHibernate resources, including <b>NHForge</b> of course :)</p>
<p><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/deepgrok.png" /></p>
<p> Go check it out and let me know what you think. Also, feel free to send me links to any other great NHibernate resources you use (via the <a target="_blank" title="NHIbernate Deep Grok - Submit" href="http://nhibernate.deepgrok.com/submit">suggest page</a>). </p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate resource search site]]></post-name>
      <categories>
        <category ref="1036" />
      </categories>
      <comments>
        <comment id="50" date-created="2008-09-08T14:27:54" date-modified="2008-09-08T14:27:54" approved="true" user-name="Fabio Maulo" user-url="http://www.nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NHIbernate Grok! ]]></title>
          <content type="text"><![CDATA[Why don't integrate it NHforge ? ;)]]></content>
        </comment>
        <comment id="51" date-created="2008-09-08T19:37:53" date-modified="2008-09-08T19:37:53" approved="true" user-name="tobinharris" user-url="http://www.nhforge.org/members/tobinharris/default.aspx">
          <title type="text"><![CDATA[re: NHIbernate Grok! ]]></title>
          <content type="text"><![CDATA[Just to follow up on this, Fabio and I are discussing this option. Putting it under NHForge makes LOADS of sense, and will help guarantee that the search is maintained and valuable for a long time to come.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2193" date-created="2008-09-04T14:12:53" date-modified="2009-02-27T12:40:19" approved="true" email="tobin@tobinharris.com">
          <title type="text"><![CDATA[tobinharris]]></title>
        </author>
      </authors>
    </post>
    <post id="55" date-created="2008-09-12T17:42:00" date-modified="2008-09-12T17:42:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/12/visit-the-quot-how-to-quot-section.aspx" type="normal" hasexcerpt="false" views="2215">
      <title type="text"><![CDATA[Visit the &quot;How To&quot; section]]></title>
      <content type="text"><![CDATA[<p>Our wiki is on movement, visit our articles to learn more about this framework:</p>
<p>Check it out!</p>
<h3>How To</h3>
<ul>
<li>
<h3><span><a href="/wikis/howtonh/your-first-nhibernate-based-application.aspx">Your first NHibernate based application</a></span></h3>
</li>
<li>
<h3><span><a href="/wikis/howtonh/get-unique-results-from-joined-queries.aspx">Get unique results from joined queries</a></span></h3>
</li>
<li>
<h3><span><a href="/wikis/howtonh/lazy-loading-eager-loading.aspx">Lazy loading - eager loading</a></span></h3>
</li>
<li>
<h3><span><a href="/wikis/howtonh/configure-log4net-for-use-with-nhibernate.aspx">Configure Log4Net for use with NHibernate</a></span></h3>
</li>
<li>
<h3><span><a href="/wikis/howtonh/mapping-a-view-and-schema-export-workaround.aspx">Mapping a view and Schema Export Workaround</a></span></h3>
</li>
</ul>
<p>Lets us know your comment.</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[visit the quot how to quot section]]></post-name>
      <categories>
        <category ref="1049" />
        <category ref="1050" />
      </categories>
      <trackbacks>
        <trackback id="1042" date-created="2014-09-12T12:51:31" date-modified="2014-09-12T12:51:31" approved="true" url="http://www.vholeckova.borec.cz/php/info.php?a%5B%5D=Video+-+%3Ca+href%3Dhttp%3A%2F%2Fdemos3.softaculous.com%2FPeoplePods%2Fpeople%2Fia10o%3Edescribes+it%3C%2Fa%3E%2C">
          <title type="text"><![CDATA[Article]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="56" date-created="2008-09-17T11:29:56" date-modified="2008-09-17T11:29:56" approved="true" post-url="/blogs/nhibernate/archive/2008/09/17/value-objects.aspx" type="normal" hasexcerpt="false" views="17640">
      <title type="text"><![CDATA[Value objects]]></title>
      <content type="text"><![CDATA[<h2>Introduction</h2> <p>Eric Evans writes in his <a href="http://domaindrivendesign.org/books/#DDD">DDD book</a>:</p> <p>When you care only about the attributes of an element of the model, classify it as a <strong>value object</strong>. Make it express the meaning of the attributes it conveys and give it related functionality. Treat the value object as immutable. Don't give it any identity and avoid the design complexities necessary to maintain <strong>entities</strong>.</p> <p>Many objects have no conceptual identity. These objects describe some characteristic of a thing.</p> <p>A <strong>value object</strong> is an object that describes some characteristics or attribute but carries no concept of identity .</p> <h2>Samples</h2> <p>There are many samples where the introduction of a value object is useful. One of the most used value objects in DDD is certainly the Money value object. There is even a pattern called after this value object (the <a href="http://www.martinfowler.com/eaaCatalog/money.html">money pattern</a>).</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/money_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="157" alt="money" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/money_5F00_thumb.png" width="192" border="0"></a></p> <p>A large proportion of the computers in this world manipulate money. But money isn't a first class data type on the .Net framework. The lack of a type causes problems, the most obvious surrounding currencies. If all your calculations are done in a single currency, this isn't a huge problem, but once you involve multiple currencies you want to avoid adding an amount expressed in dollars to an amount expressed in Euro without taking the currency differences into account. Also rounding is a problem. Monetary calculations are often rounded to the smallest currency unit (pennies for dollar and cent for Euro).</p> <p>Another typical example of a value object is an Address. The address is even a very interesting beast, since it contains a reference to Country which in turn often is treated like an entity.</p> <p>&nbsp;<a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/address_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="193" alt="address" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/address_5F00_thumb.png" width="449" border="0"></a></p> <p>Yet another example is a geographical coordinate. It consists of the two values longitude and latitude.</p> <p>&nbsp;<a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/GeoCoordinate_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="153" alt="GeoCoordinate" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/GeoCoordinate_5F00_thumb.png" width="184" border="0"></a></p> <p>Often we see people introduce a value object for the names of a person. Such a name value object could e.g. consist of the three members first name, middle name and last name where the first and the last are mandatory and the middle name is optional.</p> <p>&nbsp;<a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/name_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="174" alt="name" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/name_5F00_thumb.png" width="189" border="0"></a> </p> <p>Finally another well known value object is Color. Color is a structure which normally consist of four values (red, green, blue and alpha)</p> <p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/color_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="186" alt="color" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/color_5F00_thumb.png" width="181" border="0"></a> </p> <p>Note that the alpha channel is an indicator for the transparency of a colored shape. It goes from completely transparent (0) to opaque (255).</p> <h2>Immutability</h2> <p>As told earlier a value object should always be <strong>immutable</strong>. The consequence of this is that once its properties are set they cannot be changed. The best way to guarantee this is that all properties are read-only (they have <em>private</em> or no setter methods). A new instance of a value object is completely defined through its constructor. Let's take as a sample the <strong>Name</strong> value object.</p> <div> <div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Name</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> FirstName { get; <span style="color: #0000ff">private</span> set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> MiddleName { get; <span style="color: #0000ff">private</span> set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> LastName { get; <span style="color: #0000ff">private</span> set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> Name(<span style="color: #0000ff">string</span> firstName, <span style="color: #0000ff">string</span> middleName, <span style="color: #0000ff">string</span> lastName)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        FirstName = firstName;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        MiddleName = middleName;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        LastName = lastName;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<h2>Validation</h2>
<p>Since a value object is <strong>immutable</strong> it makes sense that each value object must always be in a valid state. The validation happens in the constructor of the value object. Again let's look at the <strong>Name</strong> value object as an example. Below I present the constructor of the value object. This time with the validation logic.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> Name(<span style="color: #0000ff">string</span> firstName, <span style="color: #0000ff">string</span> middleName, <span style="color: #0000ff">string</span> lastName)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// Validation logic</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">if</span>(<span style="color: #0000ff">string</span>.IsNullOrEmpty(firstName)) </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ArgumentException(<span style="color: #006080">"First name cannot be undefined."</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">if</span>(<span style="color: #0000ff">string</span>.IsNullOrEmpty(lastName)) </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ArgumentException(<span style="color: #006080">"Last name cannot be undefined."</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">if</span>(firstName.Length&gt;50)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ArgumentException(<span style="color: #006080">"Length of first name cannot exceed 50 characters."</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">if</span>(middleName.Length&gt;30)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ArgumentException(<span style="color: #006080">"Length of middle name cannot exceed 30 characters."</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">if</span>(lastName.Length&gt;50)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ArgumentException(<span style="color: #006080">"Length of last name cannot exceed 50 characters."</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    FirstName = firstName;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    MiddleName = middleName;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    LastName = lastName;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>The validation logic checks that the first and last name are given and that any of the names does not exceed the maximal tolerated length. If the validation tests have all passed then we are sure that our value object is now in a valid state. From now on we will <strong>never again</strong> have to make validation check against our Name instance. You should not underestimate the positive consequences of this!</p>
<h2>Equality</h2>
<p>It is very important that two instances of a value object are comparable, that is whether they contain the same values in their constituent properties. To achieve this we have to at least override the two sister methods <strong>Equals</strong> and <strong>GetHashCode</strong> which are inherited from the base class <strong>System.Object</strong>.</p>
<p>But we should also implement the generic interface <strong>IEquatable&lt;T&gt;</strong> in our value object to provide a type safe method for comparing two instances.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Name : IEquatable&lt;Name&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// omitted code for brevity...</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">int</span> GetHashCode()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">string</span>.Format(<span style="color: #006080">"{0}|{1}|{2}"</span>, FirstName, MiddleName, LastName).GetHashCode();</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">bool</span> Equals(<span style="color: #0000ff">object</span> obj)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> Equals(obj <span style="color: #0000ff">as</span> Name);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">bool</span> Equals(Name other)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">if</span>(other==<span style="color: #0000ff">null</span>) <span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> FirstName.Equals(other.FirstName) &amp;&amp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">               ((MiddleName == <span style="color: #0000ff">null</span> &amp;&amp; other.MiddleName == <span style="color: #0000ff">null</span>) ||</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                (MiddleName != <span style="color: #0000ff">null</span> &amp;&amp; MiddleName.Equals(other.MiddleName))) &amp;&amp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                LastName.Equals(other.LastName);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>Note that my implementation of <strong>GetHashCode</strong> is certainly not the unique or best implementation. But it is easy and works for me.</p>
<p>In the <strong>Equals</strong> method I compare the two instances of the value object property by property. Since the middle name is optional it can be null and thus needs a special treatment.</p>
<p>For convenience we can also override the operators == and != as follows</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">bool</span> <span style="color: #0000ff">operator</span> ==(Name left, Name right)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">return</span> Equals(left, right);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">bool</span> <span style="color: #0000ff">operator</span> !=(Name left, Name right)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">return</span> !Equals(left, right);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>this allows me to use such constructs as </p>
<blockquote>
<p><font face="Courier New">if(name1 == name2) {...}</font>&nbsp;&nbsp;&nbsp; or </p>
<p><font face="Courier New">if(name1 != name2) {...}</font>.</p></blockquote>
<h2>Builders</h2>
<p>Creating an instance of a value object can be error prone when using the constructor. The code is not very readable. How should I know whether the following code fragment is correct?</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">address = <span style="color: #0000ff">new</span> Address(<span style="color: #006080">"Paradise Street 12"</span>, <span style="color: #006080">"P.O.Box 233"</span>, <span style="color: #006080">"Neverland"</span>, <span style="color: #006080">"82344"</span>, unitedStates);</pre></div></div>
<p>Could it possibly be that the postal code and the city are confused? How should I know. Just by reading I have no idea since the code is <strong>not self describing</strong>. So, is this the correct version?</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">address = <span style="color: #0000ff">new</span> Address(<span style="color: #006080">"Paradise Street 12"</span>, <span style="color: #006080">"P.O.Box 233"</span>, <span style="color: #006080">"82344"</span>, <span style="color: #006080">"Neverland"</span>, unitedStates);</pre></div></div>
<p>Note that both versions compile, but only the <strong>first</strong> one is correct. To eliminate this weakness people often implement object builders for complex value objects like an address. Often a builder implements some kind of fluent interface to make the code very self explaining and compact (free of syntactic noise!).</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">address = <span style="color: #0000ff">new</span> AddressBuilder()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .AddressLine1(<span style="color: #006080">"Paradise Steet 12"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    .AddressLine2(<span style="color: #006080">"P.O.Box 233"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .PostalCode(<span style="color: #006080">"82344"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    .City(<span style="color: #006080">"Neverland"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    .Country(unitedStates);</pre></div></div>
<p>The above code snippet is very self expressing, isn't it?</p>
<p>How is such a builder implemented? Let's have a look at a possible solution</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> AddressBuilder</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">internal</span> <span style="color: #0000ff">string</span> addressLine1;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">internal</span> <span style="color: #0000ff">string</span> addressLine2;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">internal</span> <span style="color: #0000ff">string</span> city;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">internal</span> <span style="color: #0000ff">string</span> postalCode;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">internal</span> Country country;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    [DebuggerStepThrough]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> AddressBuilder AddressLine1(<span style="color: #0000ff">string</span> line)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        addressLine1 = line;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">this</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [DebuggerStepThrough]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> AddressBuilder AddressLine2(<span style="color: #0000ff">string</span> line)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        addressLine2 = line;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">this</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    [DebuggerStepThrough]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> AddressBuilder PostalCode(<span style="color: #0000ff">string</span> code)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        postalCode = code;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">this</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [DebuggerStepThrough]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> AddressBuilder City(<span style="color: #0000ff">string</span> city)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">this</span>.city = city;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">this</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    [DebuggerStepThrough]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> AddressBuilder Country(Country country)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">this</span>.country = country;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">this</span>;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">implicit</span> <span style="color: #0000ff">operator</span> Address(AddressBuilder builder)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> Address(builder.addressLine1, builder.addressLine2, builder.city, builder.postalCode, builder.country);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>Especially have a look at the implementation of the <strong>implicit operator</strong>!</p>
<p>Note that the <strong>DebuggerStepThrough</strong> attribute is used to avoid debugging through the builder code since the code can be assumed to be error free (it is trivial).</p>
<h2>Object Mother</h2>
<p>When following TDD (that is: write the test first and only then implement the code to satisfy the test...) we often need some sample data. In the case of a value object we can directly create such an instance in the test method. But this is not DRY since we will have a lot of code duplication. One possible solution is the introduction of a so called <strong><a href="http://martinfowler.com/bliki/ObjectMother.html">object mother</a></strong>. This is a class with static methods which delivers us prefabricated (valid) value objects.</p>
<p>An Object Mother is another name for a factory for test objects. It can be implemented as static class with appropriate methods, e.g.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">class</span> ObjectMother</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> Country unitedStates = <span style="color: #0000ff">new</span> Country(<span style="color: #006080">"USA"</span>, <span style="color: #006080">"United States of America"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> Country switzerland = <span style="color: #0000ff">new</span> Country(<span style="color: #006080">"CH"</span>, <span style="color: #006080">"Switzerland"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> Address GetAddress()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> AddressBuilder()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">            .AddressLine1(<span style="color: #006080">"Paradise Street 12"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">            .AddressLine2(<span style="color: #006080">"P.O.Box 233"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">            .PostalCode(<span style="color: #006080">"82344"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">            .City(<span style="color: #006080">"Neverland"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">            .Country(unitedStates);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> Address GetSwissAddress()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> AddressBuilder()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">            .AddressLine1(<span style="color: #006080">"In der Matte 8"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">            .PostalCode(<span style="color: #006080">"3000"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">            .City(<span style="color: #006080">"Bern"</span>)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">            .Country(switzerland);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>In the above sample I use the address builder introduced above to create sample value objects of type address.</p>
<p>Depending on the needs we can have one or several method for any object type we need (or even several overloads of a method if we want to have some configurability of the created objects...).</p>
<h2>Enum type value objects</h2>
<p>A special variant of a value object is a value object whose base is a <strong>enum</strong> type. Let me give some samples:</p>
<p> Let's assume we have a task entity. A task object has a state which can have any of the following values</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">enum</span> TaskStatusEnum</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    Undefined = 0,</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    Pending,</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    InProgress,</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    Done</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>But the direct usage of an <strong>enum</strong> type is unhandy in a domain model. Thus I never use an <strong>enum</strong> type directly as a value object but rather encapsulate it in a class. A possible implementation for this would be</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> TaskStatus</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> TaskStatusEnum Status { get; <span style="color: #0000ff">private</span> set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> Description { get { <span style="color: #0000ff">return</span> Status.ToString(); } }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> TaskStatus(TaskStatusEnum status)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">        Status = status;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>Instances of the <strong>TaskStatus</strong> class are value objects. Only the property <strong>Status</strong> is mapped to the database. The <strong>Name</strong> property is only for visual representation of a task status (on a view). Of course I would have to implement the <strong>IEquality&lt;T&gt;</strong> interface in the above class as well as override the <strong>Equals</strong> and <strong>GetHashCode</strong> methods. But I have omitted this for brevity.</p>
<p>For convenience I normally implement also a static property get for any of the possible values of the enum in the above class, that is</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> TaskStatus Undefined { get { <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> TaskStatus(TaskStatusEnum.Undefined); } }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> TaskStatus Pending { get { <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> TaskStatus(TaskStatusEnum.Pending); } }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> TaskStatus InProgress { get { <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> TaskStatus(TaskStatusEnum.InProgress); } }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> TaskStatus Done { get { <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> TaskStatus(TaskStatusEnum.Done); } }</pre></div></div>
<p>As you can see it's a little bit more overhead over using an <strong>enum</strong> directly but it's definitely worth the effort. You gain all the advantages a value object offers you.</p>
<h2>Value objects and NHibernate</h2>
<p>When we deal with NHibernate a value object is represented by a --&gt;<strong><a href="http://www.hibernate.org/hib_docs/nhibernate/1.2/reference/en/html/mapping.html#mapping-declaration-component">Component</a></strong>. A value object is not stored in a separate table but rather embedded in the table related to the containing entity. That is, if I have an Account entity which contains a property Balance which in turn is a value object (of type Money) then I only have a table Account in the database (but no Money table) and the fields of the Balance value object are part of the Account table.</p>
<h2>Mapping</h2>
<p>How are value objects mapped in NHibernate? I want to describe three possible ways how we can achieve the desired result. Let's take a (simplified) entity <strong>Account</strong> as an example</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Account</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> Guid Id { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> AccountNo { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> Money Balance { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// additional properties and logic</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #008000">// omitted for brevity...</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<h3>XML mapping files</h3>
<p>The most common way to describe the mapping between a domain model and the underlying database is by using XML mapping files.</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;?</span><span style="color: #800000">xml</span> <span style="color: #ff0000">version</span><span style="color: #0000ff">="1.0"</span> <span style="color: #ff0000">encoding</span><span style="color: #0000ff">="utf-8"</span> ?<span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-mapping</span> <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-mapping-2.2"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">  <span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Account"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Id"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="guidcomb"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="AccountNo"</span> <span style="color: #ff0000">not-null</span><span style="color: #0000ff">="true"</span> <span style="color: #ff0000">length</span><span style="color: #0000ff">="20"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">&lt;</span><span style="color: #800000">component</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Balance"</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Value"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">      <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="CurrencyCode"</span><span style="color: #0000ff">/&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">component</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    </pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-mapping</span><span style="color: #0000ff">&gt;</span></pre></div></div>
<p>Note that the Money value object is mapped via the &lt;<strong>component</strong>&gt; tag in the mapping file.</p>
<h3>Castle Active Record</h3>
<p>If you are using <a href="http://www.castleproject.org/activerecord/index.html">Castle Active Record</a> for your mapping then you just have to decorate the <strong>Balance</strong> property of the <strong>Account</strong> with the attribute [<strong>Nested</strong>].</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">[ActiveRecord]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Account</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [PrimaryKey]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> Guid Id { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [Property]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> AccountNo { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    [Nested(<span style="color: #006080">"Balance"</span>)]</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> Money Balance { get; set; }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #008000">// additional properties and logic</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    <span style="color: #008000">// omitted for brevity...</span></pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">}</pre></div></div>
<p>You can provide as a parameter to the attribute the column prefix that will be used when mapped to the underlying database table. In the above example the fields in the Account table would be <strong>BalanceValue</strong> and <strong>BalanceCurrencyCode</strong>.</p>
<h3>Fluent Interface</h3>
<p>With the new Fluent NHibernate framework which I descibed <a href="http://nhforge.org/blogs/nhibernate/archive/2008/09/06/a-fluent-interface-to-nhibernate-part-2-value-objects.aspx">here</a> one can define the mapping as follows</p>
<div>
<div style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none"><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> AccountMap : ClassMap&lt;Account&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">{</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    <span style="color: #0000ff">public</span> AccountMap()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">    {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Id(x =&gt; x.Id);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Map(x =&gt; x.AccountNo)</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">            .CanNotBeNull()</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">            .WithLengthOf(20);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">&nbsp;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">        Component&lt;Money&gt;(</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">            x =&gt; x.Balance, m =&gt;</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                                {</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                                    m.Map(x =&gt; x.Value, <span style="color: #006080">"BalanceValue"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">                                    m.Map(x =&gt; x.CurrencyCode, <span style="color: #006080">"BalanceCurrencyCode"</span>);</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">                                });</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: white; border-bottom-style: none">    }</pre><pre style="padding-right: 0px; padding-left: 0px; font-size: 8pt; padding-bottom: 0px; margin: 0em; overflow: visible; width: 100%; color: black; border-top-style: none; line-height: 12pt; padding-top: 0px; font-family: consolas, 'Courier New', courier, monospace; border-right-style: none; border-left-style: none; background-color: #f4f4f4; border-bottom-style: none">}</pre></div></div>
<p>Note that the benefit of the fluent interface is not the brevity of the code but rather the robustness, testability of the mapping as well as the ability to include the mapping in any refactoring.</p>
<h2>Summary </h2>
<p>I have introduced you to the <strong>value object,</strong> which is a fundamental piece of <a href="http://domaindrivendesign.org/">DDD</a>. Not only have I presented you the theory behind a value object but also shown you some possible implementation for immutability, validation and mapping of value objects. I also have shown how one can handle value objects which are based on a .Net <strong>enum</strong>. Further I introduced the concept of builders (for value objects) which help you make the code more readable (and thus maintainable). Last but not least I discussed the usage of the <a href="http://martinfowler.com/bliki/ObjectMother.html">Object Mother</a> pattern in the context of test driven development (TDD).</p>
<p>Enjoy</p>
<p><a href="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_2.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="21" alt="Blog Signature Gabriel" src="http://www.nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Blog-Signature-Gabriel_5F00_thumb.png" width="244" border="0"></a></p>]]></content>
      <post-name type="text"><![CDATA[value objects]]></post-name>
      <categories>
        <category ref="1037" />
      </categories>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="57" date-created="2008-09-18T14:48:00" date-modified="2008-09-18T14:48:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/18/extending-nhibernate-s-driverconnectionprovider.aspx" type="normal" hasexcerpt="false" views="5185">
      <title type="text"><![CDATA[Extending NHibernate's DriverConnectionProvider]]></title>
      <content type="text"><![CDATA[<p>Note: this was orginally posted on my <a target="_blank" href="http://davybrion.com/blog/2008/09/extending-nhibernates-driverconnectionprovider/">own blog</a>
</p>
<p>Ahh, i'm finally able to use NHibernate again at work, so expect more NHibernate related posts in the future :)
</p>
<p>Today i needed a way to add some functionality when NHibernate opens a database connection, and again when NHibernate closes the connection.  When the connection is opened, i need to setup some context on the connection for auditing purposes and it needs to be cleared again when the connection is closed.  So i started searching on how to plug this into NHibernate.  As usual, this was trivially easy to do.
All you need to do is create a type that implements the IConnectionProvider interface.  In my case, i only needed to add a bit of behavior so i could just derive from NHibernate's standard DriverConnectionProvider class and add the stuff i needed at the right time:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> <span style="color: #2b91af;">AuditingConnectionProvider</span> : NHibernate.Connection.DriverConnectionProvider</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: #2b91af;">IDbConnection</span> GetConnection()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IDbConnection</span> connection = <span style="color: blue;">base</span>.GetConnection();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; SetContextInfo(connection);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> connection;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">override</span> <span style="color: blue;">void</span> CloseConnection(<span style="color: #2b91af;">IDbConnection</span> connection)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ClearContextInfo(connection);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">base</span>.CloseConnection(connection);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">void</span> SetContextInfo(<span style="color: #2b91af;">IDbConnection</span> connection)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// ...</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">void</span> ClearContextInfo(<span style="color: #2b91af;">IDbConnection</span> connection)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// ...</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; }</p>
</div>
<p>
Pretty simple huh? All you have to do now is to configure NHibernate to use this new ConnectionProvider in your hibernate.cfg.xml file:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">property</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">connection.provider</span>"<span style="color: blue;">&gt;</span>My.Assembly.AuditingConnectionProvider, My.Assembly<span style="color: blue;">&lt;/</span><span style="color: #a31515;">property</span><span style="color: blue;">&gt;</span></p>
</div>
<p>
Was that easy or what? If only all frameworks were extensible in such an easy manner ;)</p>]]></content>
      <post-name type="text"><![CDATA[extending nhibernate s driverconnectionprovider]]></post-name>
      <categories>
        <category ref="1051" />
        <category ref="1052" />
      </categories>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="58" date-created="2008-09-23T04:28:22" date-modified="2008-09-23T04:28:22" approved="true" post-url="/blogs/nhibernate/archive/2008/09/22/introducing-nhibernate-proxygenerators.aspx" type="normal" hasexcerpt="false" views="6717">
      <title type="text"><![CDATA[Introducing NHibernate ProxyGenerators]]></title>
      <content type="text"><![CDATA[<p>I am pleased to announce the first release of <a href="http://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=292389&amp;release_id=628137" target="_blank">NHibernate ProxyGenerators</a>, the latest addition to the <a href="http://sourceforge.net/projects/nhcontrib/" target="_blank">NHibernate Contrib</a> project.&#160; NHibernate ProxyGenerators (NHPG)&#160; is a simple utility that you can use to pre-generate lazy loading proxies for use with NHibernate.&#160; Why would you want to pre-generate lazy loading proxies you ask?&#160; The prime example is to make use of lazy loading functionality in a Medium Trust environment, like a shared hosting ASP.Net environment.&#160; NHibernate will function in a <a href="http://www.nhforge.org/wikis/howtonh/run-in-medium-trust.aspx" target="_blank">Medium Trust</a> environment but you were previously required to disable lazy loading for all of your entities.&#160; The default behavior of NHibernate is to generate these proxies at runtime during your application’s startup, an operation that requires elevated permissions not present under Medium Trust.&#160; NHPG now allows you to generate these proxies in your development or build environment (which should have the required permissions) and deploy them along with the rest of your application’s assemblies.</p>  <p>Please visit <a href="http://nhforge.org/" target="_blank">NHForge.org</a> for complete reference information and <a href="http://www.nhforge.org/wikis/howtonh/pre-generate-lazy-loading-proxies.aspx" target="_blank">tutorials</a>.&#160; Any feedback or issues can be sent to the <a href="http://groups.google.com/group/nhusers" target="_blank">NHibernate Users</a> group and is greatly anticipated.</p>]]></content>
      <post-name type="text"><![CDATA[introducing nhibernate proxygenerators]]></post-name>
      <categories>
        <category ref="1025" />
        <category ref="1042" />
        <category ref="1053" />
      </categories>
      <comments>
        <comment id="61" date-created="2008-09-24T17:36:00" date-modified="2008-09-24T17:36:00" approved="true" user-name="wibber" user-url="http://www.nhforge.org/members/kenwiebke/default.aspx">
          <title type="text"><![CDATA[re: Introducing NHibernate ProxyGenerators]]></title>
          <content type="text"><![CDATA[Can't wait to try this out.  I was about to jump to a different hosting provider because of the issues you mention.  ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="59" date-created="2008-09-23T05:06:23" date-modified="2008-09-23T05:06:23" approved="true" url="http://blechie.com/WPierce/archive/2008/09/22/Introducing-NHibernate-ProxyGenerators.aspx">
          <title type="text"><![CDATA[Introducing NHibernate ProxyGenerators]]></title>
        </trackback>
        <trackback id="80" date-created="2008-10-07T14:44:23" date-modified="2008-10-07T14:44:23" approved="true" url="http://www.nhforge.org/blogs/nhibernate/archive/2008/10/07/nhibernate-proxygenerators-1-0-0-beta-released.aspx">
          <title type="text"><![CDATA[NHibernate ProxyGenerators 1.0.0 Beta Released]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2144" date-created="2008-08-31T22:49:06" date-modified="2008-10-07T14:48:45" approved="true" email="wcpierce@gmail.com">
          <title type="text"><![CDATA[wcpierce]]></title>
        </author>
      </authors>
    </post>
    <post id="66" date-created="2008-09-29T18:55:00" date-modified="2008-09-29T18:55:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/29/the-month-of-nh-forge.aspx" type="normal" hasexcerpt="false" views="2057">
      <title type="text"><![CDATA[The month of NH Forge]]></title>
      <content type="text"><![CDATA[<p>A month ago we started this new challenge.</p>
<p>As first result two projects accepted our invitation to be together, with us, in <a href="http://sourceforge.net/projects/nhcontrib/">NHibernate.Contrib</a>.</p>
<p><a href="/wikis/proxygenerators10/default.aspx">NHibernate.ProxyGenerators</a> and <a href="/wikis/spatial/default.aspx">NHibernate.Spatial</a> are now part of <a href="http://sourceforge.net/projects/nhcontrib/">NH.Contrib</a> and, over all, <strong>Bill Pierce </strong>and <strong>Ricardo Stuven </strong>are now part of the <span style="color: #800000;"><strong>NHibernate team</strong></span>.</p>
<p>&nbsp;</p>
<p>Another important result was know part of the NH reality (at least those who are using <span style="color: #800000;"><strong>NH-Forge</strong></span>) and I would like to share it with you:</p>
<p><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate.MonthNHForge/Analytics1.png" /></p>
<p style="padding-left: 120px;"><span style="font-size: large;"><strong>10347 visits came from 104 countries</strong></span></p>
<p>The top ten is:</p>
<p style="padding-left: 150px;"><img src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate.MonthNHForge/Analytics2.png" /></p>
<p>&nbsp;</p>
<p>If you want start to share your experience&nbsp; with NHibernate a good place is <a href="/groups/nhusers/wiki/default.aspx">the wiki of users group</a> or contact us, you are welcome.</p>]]></content>
      <post-name type="text"><![CDATA[the month of nh forge]]></post-name>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="67" date-created="2008-09-30T00:44:00" date-modified="2008-09-30T00:44:00" approved="true" post-url="/blogs/nhibernate/archive/2008/09/29/nhibernate-validator-1-0-0-ga-released.aspx" type="normal" hasexcerpt="false" views="2134">
      <title type="text"><![CDATA[NHibernate Validator 1.0.0 GA released !]]></title>
      <content type="text"><![CDATA[<p>Proud to announce the release of this validation framework, that comes with more stability and full compliance with NHibernate 2.0.1 to use it in production.</p>
<p><a href="http://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=275108">Binaries, source and examples</a></p>
<p><a href="/wikis/validator10/default.aspx">Documentation online here</a></p>
<p>Enjoy !</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 0 0 ga released]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1036" />
      </categories>
      <trackbacks>
        <trackback id="69" date-created="2008-10-03T00:27:43" date-modified="2008-10-03T00:27:43" approved="true" url="http://blog.darioquintana.com.ar/2008/10/02/lleg-nhibernate-validator-100-ga/">
          <title type="text"><![CDATA[Lleg&amp;oacute; NHibernate Validator 1.0.0 GA at Espacio de Dario Quintana]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="68" date-created="2008-10-01T04:44:00" date-modified="2008-10-01T04:44:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/01/nhibernate-spatial-1-0-0-beta1-released.aspx" type="normal" hasexcerpt="false" views="3791">
      <title type="text"><![CDATA[NHibernate.Spatial 1.0.0 Beta1 released]]></title>
      <content type="text"><![CDATA[<p>I'm proud to announce the first release of&nbsp;<strong>NHibernate.Spatial</strong>. This extension allows you to handle data in a <a href="http://en.wikipedia.org/wiki/Spatial_database">spatial database</a>&nbsp;using .NET&nbsp;objects&nbsp;and HQL queries&nbsp;in a way compliant with&nbsp;<a href="http://www.opengeospatial.org/standards/sfs">Open Geospatial Consortium specifications</a>.&nbsp;Currently we support&nbsp;<strong>PostgreSQL</strong> (using&nbsp;<a href="http://www.postgis.org/" class="externalLink">PostGIS</a>&nbsp;extension), <strong>SQL Server 2005</strong> (using&nbsp;<a href="http://codeplex.com/MsSqlSpatial" class="externalLink">MsSqlSpatial</a>&nbsp;extension)&nbsp;and <strong>SQL Server 2008</strong> (using their new&nbsp;<a href="http://www.microsoft.com/sqlserver/2008/en/us/spatial-data.aspx" class="externalLink">spatial built-in capabilities</a>).&nbsp; More on features, setup and usage in our <a href="/wikis/spatial/default.aspx">wiki site</a>.</p>
<p><a href="/media/p/63/download.aspx">Download</a>&nbsp;and enjoy!</p>
<p>Please submit your bug reports or feature requests to&nbsp;<a href="http://jira.nhibernate.org/browse/NHSP"><span style="color: #003399;">NH issue tracker&nbsp;</span></a>and support questions to&nbsp;<a href="http://groups.google.com/group/nhusers" class="externalLink"><span style="color: #3366cc;">NH Users mailing list</span></a>.</p>
<p>________________________________</p>
<p><strong><span style="font-size: small;">UPDATE: Prefer the <a href="/media/p/83.aspx">lastest release</a>.</span></strong></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate spatial 1 0 0 beta1 released]]></post-name>
      <categories>
        <category ref="1070" />
        <category ref="1071" />
        <category ref="1072" />
        <category ref="1073" />
        <category ref="1074" />
        <category ref="1075" />
        <category ref="1076" />
        <category ref="1077" />
        <category ref="1078" />
      </categories>
      <trackbacks>
        <trackback id="82" date-created="2008-10-07T19:51:52" date-modified="2008-10-07T19:51:52" approved="true" url="http://www.dotnetkicks.com/csharp/NHibernate_Spatial_1_0_0_Beta1_released">
          <title type="text"><![CDATA[NHibernate.Spatial 1.0.0 Beta1 released]]></title>
        </trackback>
        <trackback id="85" date-created="2008-10-08T13:48:57" date-modified="2008-10-08T13:48:57" approved="true" url="http://www.nhforge.org/blogs/nhibernate/archive/2008/10/08/nhibernate-spatial-1-0-0-beta2-released.aspx">
          <title type="text"><![CDATA[NHibernate.Spatial 1.0.0 Beta2 released]]></title>
        </trackback>
        <trackback id="1072" date-created="2014-09-19T05:04:37" date-modified="2014-09-19T05:04:37" approved="true" url="http://teamenergizer.myorganogold.com">
          <title type="text"><![CDATA[http://teamenergizer.myorganogold.com]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2249" date-created="2008-09-10T06:00:22" date-modified="2010-10-06T17:20:20" approved="true" email="rstuven@gmail.com">
          <title type="text"><![CDATA[rstuven]]></title>
        </author>
      </authors>
    </post>
    <post id="71" date-created="2008-10-04T07:04:00" date-modified="2008-10-04T07:04:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/04/the-best-way-to-solve-nhibernate-bugs-submit-good-unit-test.aspx" type="normal" hasexcerpt="false" views="15317">
      <title type="text"><![CDATA[The best way to solve NHibernate bugs? Submit good unit test]]></title>
      <content type="text"><![CDATA[<p>There's no better way to explain some code-related issue than providing a test for them, and that is what any NH team member is going to ask you no matter how clearly you described it; that said.. why not being smart enough to provide it since the beginning? </p>
<p>For those who doesn't know what a unit test is, or why could possibly be useful, a unit test is nothing more than a method with some code in it to test if a feature works as expected or, in your case, to reproduce a bug. What makes them so useful is the ability to automatically execute them all; if you hypothetically had a set of test for every feature you coded into the software you're designing, after every change you could test if everything is still working or something got broken. If that triggered your attention, you can read further information on Unit Tests and Test Driven Development <a href="http://en.wikipedia.org/wiki/Unit_testing">here</a> and <a href="http://en.wikipedia.org/wiki/Test-driven_development">here</a>, while <a href="http://www.nunit.org/index.php">here</a> you can download and get some info on NUnit, which is the testing framework NHibernate team is currently using; obviously you can google around a bit for more info on this topic, as I'm going to focus on how testing applies to NHibernate bug fixing process. </p>
<p>Ok, back on topic then. If you dared to download NHibernate sources from SourceForge, or perhaps the trunk itself using a SVN client, you'd find a well established test project with some base classes you should use to implement the test. BTW, for the sake of simplicity, I created a C# project extracting only the few classes you need to build a test, so you don't need to use the actual NH sources anymore. <a href="/media/p/70.aspx">You can download it </a><a href="/media/p/70.aspx">here</a>.</p>
<p>The project has the following structure, which is very similar to the one you'd find in the official sources:</p>
<p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_c8aa69da_2D00_812b_2D00_4164_2D00_ac32_2D00_83fb3645b3e3.png" border="0" height="241" width="344" /> </p>
<p>I've mantained classes and namespaces naming in order to let your test compile in the actual NH test project without (hopefully) changing anything on it. Next steps will be</p>
<ul>
<li>Building a small domain model along with its mappings  </li>
<li>Setting up the test class  </li>
<li>Create the test itself  </li>
<li>Run the test to verify that it reproduces the bug  </li>
<li>If it does, open a Jira issue and attach the test </li>
</ul>
<p>Please note that all the code should be located in a NHSpecificTest folder's subfolder named like the Jira entry you submitted (for example, NH1234). So, once you've created the issue, you should do a little refactoring work to modify your test's folder and namespaces.</p>
<h3>Domain Model and mappings</h3>
<p>It would be hard to test an ORM without a domain model, so a simple one is mandatory, along with its mappings. My advice here is to keep things as simple as possible: your main aim should be trying to isolate the bug without introducing unnecessary complexity.</p>
<p>For example, if you find out that NHibernate isn't working fine retrieving a byte[] property when using a Sql Server 2005 RDBMS (it isn't true, NHibernate can deal quite well with such kind of data), you should create a domain entity not so different from the following:</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> <span style="color: #0000ff;">namespace</span> NHibernate.Test.NHSpecificTest.NH1234</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span> {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span>     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> DomainClass</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span>     {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   5:</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">byte</span>[] byteData;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   6:</span>         <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">int</span> id;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   7:</span>&nbsp; </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   8:</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> Id</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   9:</span>         {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  10:</span>             get { <span style="color: #0000ff;">return</span> id; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  11:</span>             set { id = <span style="color: #0000ff;">value</span>; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  12:</span>         }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  13:</span>&nbsp; </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  14:</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">byte</span>[] ByteData</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  15:</span>         {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  16:</span>             get { <span style="color: #0000ff;">return</span> byteData; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  17:</span>             set { byteData = <span style="color: #0000ff;">value</span>; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  18:</span>         }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  19:</span>     }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  20:</span> }</pre>
</div>
</div>
<p>Mappings of such a simple domain model should be quite easy and small sized; the standard way to proceed is creating a single mapping file, named <i>Mappings.hbm.xml</i>, containing mapping definitions of all your domain model.</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">hibernate-mapping</span> <span style="color: #ff0000;">xmlns</span><span style="color: #0000ff;">="urn:nhibernate-mapping-2.2"</span> <span style="color: #ff0000;">assembly</span><span style="color: #0000ff;">="NHibernate.Test"</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span>                    <span style="color: #ff0000;">namespace</span><span style="color: #0000ff;">="NHibernate.Test.NHSpecificTest.NH1234"</span> <span style="color: #ff0000;">default-access</span><span style="color: #0000ff;">="field.camelcase"</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span>                    <span style="color: #ff0000;">default-lazy</span><span style="color: #0000ff;">="false"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span>   <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">class</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="DomainClass"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   5:</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">id</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="Id"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   6:</span>       <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">generator</span> <span style="color: #ff0000;">class</span><span style="color: #0000ff;">="assigned"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   7:</span>     <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   8:</span>     <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span><span style="color: #0000ff;">="ByteData"</span> <span style="color: #0000ff;">/&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   9:</span>   <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">class</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  10:</span> <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">hibernate-mapping</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
</div>
<p>As we're going to see shortly, test base class, in his default behavior, looks for such a file in test assembly's resources and automatically adds it to NHibernate configuration.</p>
<h3>Setting up the test class</h3>
<p>A test class is nothing more than a class decorated with the TestFixture attribute and which inherits (in our test environment) from BugTestCase base class. If you remember, we are going to test a fake bug about NHibernate incorrectly retrieving a byte[] property from the database. That means that first of all we're going to need a database with a suitable schema and then an entity already stored in it.</p>
<p>The default connection string points to a localhost server containing a test database called NHibernate; if your environment fits well with that, you have nothing to change in the app.config file. The test base class takes care of creating all the tables, keys and constraints that your test needs to play fine, taking into account what you wrote on the mapping file(s).</p>
<p>What about the entity we should already have into a table to test the retrieving process? The right way to inject custom code before the execution of a test is overriding the OnSetup method:</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnSetUp()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span> {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span>     <span style="color: #0000ff;">base</span>.OnSetUp();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span>     <span style="color: #0000ff;">using</span> (ISession session = <span style="color: #0000ff;">this</span>.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   5:</span>     {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   6:</span>         DomainClass entity = <span style="color: #0000ff;">new</span> DomainClass();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   7:</span>         entity.Id = 1;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   8:</span>         entity.ByteData = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">byte</span>[] {1, 2, 3};</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   9:</span>         session.Save(entity);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  10:</span>         session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  11:</span>     }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  12:</span> }</pre>
</div>
</div>
<p>That code is invoked once per test, just before its execution; the infrastructure provides a OnTearDown virtual method as well, useful to wipe away your data from the tables and present a clean environment to the next test being executed:</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">void</span> OnTearDown()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span> {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span>     <span style="color: #0000ff;">base</span>.OnTearDown();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span>     <span style="color: #0000ff;">using</span> (ISession session = <span style="color: #0000ff;">this</span>.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   5:</span>     {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   6:</span>         <span style="color: #0000ff;">string</span> hql = <span style="color: #006080;">"from System.Object"</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   7:</span>         session.Delete(hql);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   8:</span>         session.Flush();</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   9:</span>     }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  10:</span> }</pre>
</div>
</div>
<p>The test class is almost setted up, we only need one last element: our imaginary bug happens only when dealing with a Sql Server 2005 database, things seem to be fine with other RDBMS. That means that the corresponding test only makes sense when that dialect has been selected, otherwise it should be ignored; another virtual method, called <i>AppliesTo</i>, serves for this purpose and can be overridden to specify a particular dialect for which the test makes sense:</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">bool</span> AppliesTo(NHibernate.Dialect.Dialect dialect)</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span> {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span>     <span style="color: #0000ff;">return</span> dialect <span style="color: #0000ff;">as</span> MsSql2005Dialect != <span style="color: #0000ff;">null</span>;</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span> }</pre>
</div>
</div>
<h3>Coding the test</h3>
<p>The test method is were you'll describe how NHibernate should behave although it actually doesn't. It's a traditional C# method, that usually ends with one or more Asserts, by which you verify whether things went as you expected. Our "fake" bug was <i>"In Sql Server 2005, NHibernate can't correctly load a byte array property of an entity";</i> a good test for that could be something like</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> [Test]</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> BytePropertyShouldBeRetrievedCorrectly()</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span> {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span>     <span style="color: #0000ff;">using</span> (ISession session = <span style="color: #0000ff;">this</span>.OpenSession())</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   5:</span>     {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   6:</span>         DomainClass entity = session.Get&lt;DomainClass&gt;(1);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   7:</span>&nbsp; </pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   8:</span>         Assert.AreEqual(3, entity.ByteData.Length);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   9:</span>         Assert.AreEqual(1, entity.ByteData[0]);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  10:</span>         Assert.AreEqual(2, entity.ByteData[1]);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  11:</span>         Assert.AreEqual(3, entity.ByteData[2]);</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">  12:</span>     }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">  13:</span> }</pre>
</div>
</div>
<p>Your test class may contain as many test methods as you need to better show the cases in which you experienced the issue. If it relies on NHibernate 2nd level cache, you can turn it on and off simply overriding the <i>CacheConcurrencyStrategy</i> propery in your test class:</p>
<div style="border: 1px solid gray; margin: 20px 0px 10px; padding: 4px; overflow: auto; font-size: 8pt; width: 97.5%; cursor: text; max-height: 200px; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<div style="border-style: none; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;">
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   1:</span> <span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">override</span> <span style="color: #0000ff;">string</span> CacheConcurrencyStrategy</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   2:</span> {</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: white;"><span style="color: #606060;">   3:</span>     get { <span style="color: #0000ff;">return</span> <span style="color: #006080;">"nonstrict-read-write"</span>; }</pre>
<pre style="border-style: none; margin: 0em; padding: 0px; overflow: visible; font-size: 8pt; width: 100%; color: black; line-height: 12pt; font-family: consolas,'Courier New',courier,monospace; background-color: #f4f4f4;"><span style="color: #606060;">   4:</span> }</pre>
</div>
</div>
<p>Please remember that in the simple test project I provided, 2nd level cache is disabled by default. However, NHibernate official test project uses nonstrict-read-write caching strategy for every entity, because every "green" test should pass with caching enabled as well. </p>
<h3>Conclusions</h3>
<p>When NHibernate doesn't work as expected, the best way to describe the issue is providing a good unit test. NHibernate.LiteTest helps you writing tests that are so similar to the official ones to be directly integrable in the actual NHibernate trunk. So, if you think you've just discovered a bug, </p>
<ol>
<li>Go to <a href="http://jira.nhibernate.org/secure/Dashboard.jspa">NHibernate Jira</a> and use its search engine to look for a similar bug (perhaps your problem has already been fixed and you only need to wait for a new release) 
</li>
<li>If you don't find anything, write a unit test to reproduce it 
</li>
<li>Execute NUnit and test it 
</li>
<li>if NUnit bar is red (and NHibernate documentation doesn't state that it's a not supported case), go to the Jira, open a issue, rename your test folder and namespaces with the actual issue number (ex. NH1234) and upload it as an attachment. </li>
</ol>
<p>Obviously, if you think you're good enough, no one will be offended if you submit a patch, too.</p>]]></content>
      <post-name type="text"><![CDATA[the best way to solve nhibernate bugs submit good unit test]]></post-name>
      <categories>
        <category ref="1050" />
      </categories>
      <comments>
        <comment id="72" date-created="2008-10-04T17:08:16" date-modified="2008-10-04T17:08:16" approved="true" user-name="tehlike" user-url="http://">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[Good article, Crad! 

I suggest executing the test cases against the trunk because it may already be fixed but not yet released. 

If I am to summary what to do,
1. Download the trunk, use it always(even if one isn't going to create patch)
2. Search jira for similar issues, and if there is nothing similar and you still think that it is a bug to be fixed, create a jira issue.
3. Create NHxyzt folder(xyzt being the bug number).
4. Add your domain classes and then mappings(Mappings.hbm.xml)
5. Create the test code which illustrates the problem. Override OnSetUp and OnTearDown for your initial data and other initializations.
6. Run the test case see if it is failing.
7. If you know how to fix, then fix it in NHibernate project, if not, it still fine.
8. Create the patch against src folder using
      Right Click "src" folder and go to Tortoise SVN->Create Patch. Make sure it doesn't contain any dll's(A test case doesn't need compiled file, source is fine) and contain the files you have modified, don't forget to include .csproj files.
9. Add the patch to Jira.
]]></content>
        </comment>
        <comment id="73" date-created="2008-10-04T18:34:17" date-modified="2008-10-04T18:34:17" approved="true" user-name="tehlike" user-url="http://">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[And I think we need to define coding standards.
Things like camelCase for fields, etc.]]></content>
        </comment>
        <comment id="74" date-created="2008-10-04T18:34:18" date-modified="2008-10-04T18:34:18" approved="true" user-name="Fabio Maulo" user-url="http://www.nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[- The patch is better in a specific separate file.
 
About "Download the trunk" it is enough with "Download the last available version", for somebody "trunk" is an heavy world.

Another point is:
If you find a similar issue but it was closed, please, create a new one with your specific test if the old one was closed as fixed.]]></content>
        </comment>
        <comment id="77" date-created="2008-10-06T17:00:12" date-modified="2008-10-06T17:00:12" approved="true" user-name="jnapier" user-url="http://www.nhforge.org/members/jnapier/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[I think information contained in this article should be included in this post. This article describes exactly what should be done to get started creating a test for a jira issue and I dont believe this is referenced anywhere through out the wiki

http://www.hibernate.org/428.html]]></content>
        </comment>
        <comment id="78" date-created="2008-10-07T13:53:01" date-modified="2008-10-07T13:53:01" approved="true" user-name="Dario Quintana" user-url="http://www.nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[Nobody is maintaining nhibernate.org domain. You should find here at NHForge for every NHibernate info.

Best regards]]></content>
        </comment>
        <comment id="86" date-created="2008-10-11T02:02:14" date-modified="2008-10-11T02:02:14" approved="true" user-name="jnapier" user-url="http://www.nhforge.org/members/jnapier/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[Dario, 
My point was, that there is valuable information in this link, www.hibernate.org/428.html, that is not mentioned here and hopefully it can be pulled over into this post. For example there is information on how to configure nhibernate for your test environment without changing app.config.
]]></content>
        </comment>
        <comment id="87" date-created="2008-10-11T05:55:15" date-modified="2008-10-11T05:55:15" approved="true" user-name="Fabio Maulo" user-url="http://www.nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[@jnapier
Info on how configure NH are available here
http://www.nhforge.org/wikis/howtonh/your-first-nhibernate-based-application.aspx

The ways to configure NH is outside the scope of this blog-post]]></content>
        </comment>
        <comment id="128" date-created="2008-11-22T08:11:00" date-modified="2008-11-22T08:11:00" approved="true" user-name="Adrian" user-url="http://nhforge.org/members/HappyNomad/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[I suggest moving this post over to the Wiki.  It covers an issue of central importance to NH and, obvious from comments above, many people are interested in improving upon it.  Moving it over would make it possible to incorporate these, and other, improvements into the original article.
]]></content>
        </comment>
        <comment id="129" date-created="2008-11-22T13:19:46" date-modified="2008-11-22T13:19:46" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[You are right.]]></content>
        </comment>
        <comment id="363" date-created="2009-06-09T07:29:21" date-modified="2009-06-09T07:29:21" approved="true" user-name="darius.damalakas@gmail.com" user-url="http://nhforge.org/members/darius.damalakas_4000_gmail.com/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[Fabio, very good post.

And i agree that you expressed your opinion actively on NH-1818.  That kind of bug report is not good, i wastes lots of NH supporters time. ]]></content>
        </comment>
        <comment id="703" date-created="2010-08-06T18:00:53" date-modified="2010-08-06T18:00:53" approved="true" user-name="kanderson" user-url="http://nhforge.org/members/kanderson/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[The links to download the sample test projects (http://www.nhforge.org/media/p/70.aspx) give Access Denied errors.]]></content>
        </comment>
        <comment id="729" date-created="2010-11-08T11:06:05" date-modified="2010-11-08T11:06:05" approved="true" user-name="Nexus" user-url="http://nhforge.org/members/tommarien/default.aspx">
          <title type="text"><![CDATA[re: The best way to solve NHibernate bugs? Submit good unit test]]></title>
          <content type="text"><![CDATA[Please update this post as it seems test project is no longer available and i have no clue how to get trunk building.

I'd like to submit a bug and a fix :)]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="75" date-created="2008-10-04T18:37:07" date-modified="2008-10-04T18:37:07" approved="true" url="http://blogs.aspitalia.com/cradle/post2400/Info-Usa-NHibernate.aspx">
          <title type="text"><![CDATA[Alcune info per chi usa NHibernate]]></title>
        </trackback>
        <trackback id="1024" date-created="2014-09-08T05:53:55" date-modified="2014-09-08T05:53:55" approved="true" url="http://84.19.184.35/php.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.maxinehaber.com%3Emlm+recruiting+tips%3C%2Fa%3E">
          <title type="text"><![CDATA[video]]></title>
        </trackback>
        <trackback id="1103" date-created="2014-09-27T21:47:40" date-modified="2014-09-27T21:47:40" approved="true" url="http://www.callerid.de/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fcgi.members.interq.or.jp%2Fjapan%2Fmill%2Fcgi-bin%2Fg_book.cgi%3Evisit+this+link%3C%2Fa%3E">
          <title type="text"><![CDATA[Read More Listed here]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2145" date-created="2008-08-31T23:12:33" date-modified="2008-10-05T21:40:51" approved="true" email="marcodesanctis2@gmail.com">
          <title type="text"><![CDATA[Crad]]></title>
        </author>
      </authors>
    </post>
    <post id="76" date-created="2008-10-05T11:00:00" date-modified="2008-10-05T11:00:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/05/querying-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="36252">
      <title type="text"><![CDATA[Querying With NHibernate]]></title>
      <content type="text"><![CDATA[<p>NOTE: this was originally posted on <a target="_blank" href="http://davybrion.com/blog/2008/10/querying-with-nhibernate/">my own blog</a></p>
<p>&nbsp;</p>
<p>
A lot of people are rather skeptical when it comes to executing non-trivial queries with NHibernate. In this post, i want to explore some of the features that NHibernate offers to execute those kind of queries in an easy manner.
Now, the difference between easy, non-trivial and complex queries is different for everyone. So in the following example, the query that needs to be executed is not at all complex, but it isn't your typically way too simplistic example either. It does show some often occurring requirements for queries, but at the same time it's still small enough to grasp easily.
</p>
<p>Suppose we have the following 4 tables:</p>
<p>
<a href="http://davybrion.com/blog/wp-content/uploads/2008/10/querying_example_tables.png"><img src="http://davybrion.com/blog/wp-content/uploads/2008/10/querying_example_tables.png" title="querying_example_tables" class="aligncenter size-full wp-image-481" height="371" width="499" /></a>
</p>
<p>
Now, suppose we have the following business requirement: if we discontinue a product, we want to inform all of the customers who've ever bought that product. 
</p>
<p>NHibernate offers a few options of retrieving the customers that once bought a given product. You could use the lazy loading capabilities to walk the object graph and keep the customers you need.  This approach would justify a punch in the face though.  That's just abusing lazy loading to achieve lazy coding, which is just wrong.  The correct way to fetch the data is to query for it in an efficient manner.
</p>
<p>Suppose that we would typically write the following SQL query to fetch the required data:
<code>
</code></p>
<pre>select<br />	customer.CustomerId,<br />	customer.CompanyName,<br />	customer.ContactName,<br />	customer.ContactTitle,<br />	customer.Address,<br />	customer.City,<br />	customer.Region,<br />	customer.PostalCode,<br />	customer.Country,<br />	customer.Phone,<br />	customer.Fax<br />from<br />	dbo.Customers customer<br />where<br />	customer.CustomerId in<br />		(select distinct CustomerId from Orders<br />		 where OrderId in (select OrderId from [Order Details] where ProductId = 24))</pre>
<p>

For the purpose of this example, let's just assume that the ProductId that we need is 24. Now, i'm far from a SQL guru so i don't know if this approach (using subqueries) is the best way to fetch this data.  We'll explore another possibility later on.  But for now, let's try to get NHibernate to generate a query like the one i just showed you.
First of all, let's focus on the following subquery:
</p>
<p>select OrderId from [Order Details] where ProductId = 24
</p>
<p>With NHibernate, we'd get the same thing like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> orderIdsCriteria = <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">OrderLine</span>&gt;()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetProjection(<span style="color: #2b91af;">Projections</span>.Distinct(<span style="color: #2b91af;">Projections</span>.Property(<span style="color: #a31515;">"Order.Id"</span>)))</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span style="color: #2b91af;">Restrictions</span>.Eq(<span style="color: #a31515;">"Product.Id"</span>, productId));</p>
</div>
<p>

This basically tells NHibernate to build a query which fetches each Orders' Id property for every Order that has an OrderLine which contains the given Product's Id.  Keep in mind that this doesn't actually fetch the Order Id's yet.
Now that we already have that part, let's focus on the next subquery:
</p>
<p>select distinct CustomerId from Orders
where OrderId in (select OrderId from [Order Details] where ProductId = 24)
</p>
<p>With NHibernate, we'd get the same thing like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> customerIdsFromOrdersForProductCriteria = <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">Order</span>&gt;()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetProjection(<span style="color: #2b91af;">Projections</span>.Distinct(<span style="color: #2b91af;">Projections</span>.Property(<span style="color: #a31515;">"Customer.Id"</span>)))</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span style="color: #2b91af;">Subqueries</span>.PropertyIn(<span style="color: #a31515;">"Id"</span>, orderIdsCriteria));</p>
</div>
<p>

This builds a query which returns the Customer Id for each Customer that ever ordered the given product.  Notice how we reuse the previous subquery in this Criteria.
Now we need to build a query that fetches the full Customer entities, but only for the Customers whose Id is in the resultset of the previous query:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> customersThatBoughtProductCriteria = <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">Customer</span>&gt;()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span style="color: #2b91af;">Subqueries</span>.PropertyIn(<span style="color: #a31515;">"Id"</span>, customerIdsFromOrdersForProductCriteria));</p>
</div>
<p>

That's pretty easy, right? This is the query that NHibernate sends to the database to fetch the data:
<code>
</code></p>
<pre>SELECT <br />   this_.CustomerId as CustomerId0_0_, <br />   this_.CompanyName as CompanyN2_0_0_, <br />   this_.ContactName as ContactN3_0_0_, <br />   this_.ContactTitle as ContactT4_0_0_, <br />   this_.Address as Address0_0_, <br />   this_.City as City0_0_, <br />   this_.Region as Region0_0_, <br />   this_.PostalCode as PostalCode0_0_, <br />   this_.Country as Country0_0_, <br />   this_.Phone as Phone0_0_, <br />   this_.Fax as Fax0_0_ <br />FROM dbo.Customers this_ <br />WHERE <br />   this_.CustomerId in <br />      (SELECT distinct this_0_.CustomerId as y0_ FROM dbo.Orders this_0_ <br />       WHERE this_0_.OrderId in <br />           (SELECT distinct this_0_0_.OrderId as y0_ FROM dbo.[Order Details] this_0_0_ WHERE  <br />            this_0_0_.ProductId = @p0));<br /></pre>
<p>

Apart from the aliases that were added, this looks exactly the same as the query i wrote manually.  
An extra benefit that i think is pretty important is that each part of the query is actually reusable. If you built an API that could give you each part of the entire query that you needed, then you could easily reuse each part whenever you needed it.  Duplication in queries is just as bad as duplication in code IMHO.
</p>
<p>Suppose you'd want to limit the amount of subqueries and use a join instead of the lowest level subquery.  If we'd write the query ourselves, it would look something like this:
<code>
</code></p>
<pre>select<br />	customer.CustomerId,<br />	customer.CompanyName,<br />	customer.ContactName,<br />	customer.ContactTitle,<br />	customer.Address,<br />	customer.City,<br />	customer.Region,<br />	customer.PostalCode,<br />	customer.Country,<br />	customer.Phone,<br />	customer.Fax<br />from<br />	dbo.Customers customer<br />where<br />	customer.CustomerId in <br />		(select o.customerId<br />		 from Orders o inner join [Order Details] line on line.OrderId = o.OrderId<br />		 where line.ProductId = 24)<br /></pre>
<p>

First, let's try to write the following query with NHibernate's Criteria API:
</p>
<p>select o.customerId 
from Orders o inner join [Order Details] line on line.OrderId = o.OrderId
where line.ProductId = 24
</p>
<p>
Since our Order class has an OrderLines collection that is mapped to the [Order Details] table, we can generate that part of the query like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> customerIdsFromOrdersForProductCriteria = <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">Order</span>&gt;()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetProjection(<span style="color: #2b91af;">Projections</span>.Distinct(<span style="color: #2b91af;">Projections</span>.Property(<span style="color: #a31515;">"Customer.Id"</span>)))</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .CreateCriteria(<span style="color: #a31515;">"OrderLines"</span>, <span style="color: #2b91af;">JoinType</span>.InnerJoin)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span style="color: #2b91af;">Restrictions</span>.Eq(<span style="color: #a31515;">"Product.Id"</span>, productId));</p>
</div>
<p>

The final part remains the same:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> customersThatBoughtProductCriteria = <span style="color: #2b91af;">DetachedCriteria</span>.For&lt;<span style="color: #2b91af;">Customer</span>&gt;()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span style="color: #2b91af;">Subqueries</span>.PropertyIn(<span style="color: #a31515;">"Id"</span>, customerIdsFromOrdersForProductCriteria));</p>
</div>
<p>

And the query that NHibernate generates looks like this:
<code>
</code></p>
<pre>SELECT <br />   this_.CustomerId as CustomerId0_0_, <br />   this_.CompanyName as CompanyN2_0_0_, <br />   this_.ContactName as ContactN3_0_0_, <br />   this_.ContactTitle as ContactT4_0_0_, <br />   this_.Address as Address0_0_, <br />   this_.City as City0_0_, <br />   this_.Region as Region0_0_, <br />   this_.PostalCode as PostalCode0_0_, <br />   this_.Country as Country0_0_, <br />   this_.Phone as Phone0_0_, <br />   this_.Fax as Fax0_0_ <br />FROM <br />   dbo.Customers this_ <br />WHERE <br />   this_.CustomerId in <br />      (SELECT distinct this_0_.CustomerId as y0_ <br />       FROM dbo.Orders this_0_ inner join dbo.[Order Details] orderline1_ on this_0_.OrderId = <br />       orderline1_.OrderId WHERE orderline1_.ProductId = @p0); <br /></pre>
<p>

Again, pretty easy right?
</p>
<p>The Criteria API's Projection features, combined with Subqueries and combining Criteria into larger Criteria offers you a lot of possibilities when it comes to querying.  This post only showed a very small part of what's available, but hopefully it's enough to point some people in the right direction. Now, NHibernate's criteria API is pretty powerful, but the learning curve is indeed somewhat steep. It does take a while to get used to it, and i certainly don't know everything there is to know about it either. But it's definitely worth investing some time into learning how to use it well.</p>]]></content>
      <post-name type="text"><![CDATA[querying with nhibernate]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1112" />
      </categories>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="79" date-created="2008-10-07T14:44:21" date-modified="2008-10-07T14:44:21" approved="true" post-url="/blogs/nhibernate/archive/2008/10/07/nhibernate-proxygenerators-1-0-0-beta-released.aspx" type="normal" hasexcerpt="false" views="2522">
      <title type="text"><![CDATA[NHibernate ProxyGenerators 1.0.0 Beta Released]]></title>
      <content type="text"><![CDATA[<p>I am pleased to announce the release of <a href="http://www.nhforge.org/blogs/nhibernate/archive/2008/09/22/introducing-nhibernate-proxygenerators.aspx" target="_blank">NHibernate ProxyGenerators</a> 1.0.0 Beta.&#160; This release uses NHibernate 2.0.1 GA, allows you to specify a dialect to use when generating proxies (thank you Jaroslav Martásek), and includes example usage with ActiveRecord.&#160; </p>  <p>Please visit <a href="http://nhforge.org/">NHForge.org</a> for <a href="http://www.nhforge.org/media/g/proxygenerators/default.aspx" target="_blank">downloads</a>, <a href="http://www.nhforge.org/wikis/proxygenerators10/default.aspx" target="_blank">reference information</a>, and <a href="http://www.nhforge.org/wikis/howtonh/pre-generate-lazy-loading-proxies.aspx">tutorials</a>.&#160; Any feedback or issues can be sent to the <a href="http://groups.google.com/group/nhusers">NHibernate Users</a> group and is greatly anticipated.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate proxygenerators 1 0 0 beta released]]></post-name>
      <categories>
        <category ref="1025" />
        <category ref="1042" />
      </categories>
      <trackbacks>
        <trackback id="81" date-created="2008-10-07T14:53:30" date-modified="2008-10-07T14:53:30" approved="true" url="http://blechie.com/WPierce/archive/2008/10/07/NHibernate-ProxyGenerators-1.0.0-Beta-Released.aspx">
          <title type="text"><![CDATA[NHibernate ProxyGenerators 1.0.0 Beta Released]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2144" date-created="2008-08-31T22:49:06" date-modified="2008-10-07T14:48:45" approved="true" email="wcpierce@gmail.com">
          <title type="text"><![CDATA[wcpierce]]></title>
        </author>
      </authors>
    </post>
    <post id="84" date-created="2008-10-08T13:36:00" date-modified="2008-10-08T13:36:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/08/nhibernate-spatial-1-0-0-beta2-released.aspx" type="normal" hasexcerpt="false" views="2289">
      <title type="text"><![CDATA[NHibernate.Spatial 1.0.0 Beta2 released]]></title>
      <content type="text"><![CDATA[<p>Yes, it has been a few days since&nbsp;<a href="/blogs/nhibernate/archive/2008/09/30/nhibernate-spatial-1-0-0-beta1-released.aspx">1.0.0 Beta1 release</a>, but why we should wait so much for more goodness? :-)</p>
<p>Beta2 brings a new MySQL spatial dialect and gets Npgsql updated to 2.0RTM. &nbsp;You can download it <a href="/media/g/spatial/default.aspx">here</a>.</p>
<p>Enjoy!</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate spatial 1 0 0 beta2 released]]></post-name>
      <categories>
        <category ref="1070" />
        <category ref="1071" />
        <category ref="1072" />
        <category ref="1073" />
        <category ref="1074" />
        <category ref="1075" />
        <category ref="1076" />
        <category ref="1077" />
        <category ref="1078" />
        <category ref="1088" />
      </categories>
      <comments>
        <comment id="702" date-created="2010-08-05T08:10:51" date-modified="2010-08-05T08:10:51" approved="true" user-name="chief007" user-url="http://nhforge.org/members/chief007/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Spatial 1.0.0 Beta2 released]]></title>
          <content type="text"><![CDATA[anything is possible]]></content>
        </comment>
        <comment id="713" date-created="2010-09-22T10:53:46" date-modified="2010-09-22T10:53:46" approved="true" user-name="sherazmustafa" user-url="http://nhforge.org/members/sherazmustafa/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Spatial 1.0.0 Beta2 released]]></title>
          <content type="text"><![CDATA[Receive Access Denied Message when try to download NHibernate.Spatial 1.0.0 Beta2]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2249" date-created="2008-09-10T06:00:22" date-modified="2010-10-06T17:20:20" approved="true" email="rstuven@gmail.com">
          <title type="text"><![CDATA[rstuven]]></title>
        </author>
      </authors>
    </post>
    <post id="88" date-created="2008-10-11T22:58:44" date-modified="2008-10-11T22:58:44" approved="true" post-url="/blogs/nhibernate/archive/2008/10/11/nh2-1-0-reference-to-castle-removed.aspx" type="normal" hasexcerpt="false" views="7945">
      <title type="text"><![CDATA[NH2.1.0: Reference to Castle removed]]></title>
      <content type="text"><![CDATA[<p><font size="3">The NH trunk do no longer have dependency from Castle project; Castle.DynamicProxy2 are now only the default option.</font></p>  <p><font size="3">All dependency to Castle was moved to : </font><strong>NHibernate.ProxyGenerators.CastleDynamicProxy</strong></p>  <p><font size="3">To continue working using lazy-loading, exactly as before, now you must deploy the default proxy generator.</font></p>  <p><font size="3">This was the first step to better understand which are the NHibernate intrusions, in your code, and to have some other dynamic-proxy alternative or some other alternative than dynamic-proxy ;)</font></p>  <p><font size="3"></font></p>  <p><font size="3">Less dependency and high-level-injectability is one of the “musts” of NHibernate; <a href="http://www.nhforge.org/wikis/proxygenerators10/introduction.aspx">NHibernate.ProxyGenerators</a> is only one more example.</font></p>]]></content>
      <post-name type="text"><![CDATA[nh2 1 0 reference to castle removed]]></post-name>
      <categories>
        <category ref="1025" />
        <category ref="1042" />
        <category ref="1053" />
        <category ref="1089" />
        <category ref="1090" />
        <category ref="1091" />
        <category ref="1092" />
      </categories>
      <trackbacks>
        <trackback id="104" date-created="2008-11-09T15:15:49" date-modified="2008-11-09T15:15:49" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx">
          <title type="text"><![CDATA[NH2.1.0: Bytecode providers]]></title>
        </trackback>
        <trackback id="416" date-created="2009-07-20T06:50:02" date-modified="2009-07-20T06:50:02" approved="true" url="http://blogs.ugidotnet.org/Alby/archive/2009/07/20/rilasciato-nhibernate-2.1.0.aspx">
          <title type="text"><![CDATA[Rilasciato NHibernate 2.1.0]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="89" date-created="2008-10-12T20:40:00" date-modified="2008-10-12T20:40:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/12/less-than-few-is-gof.aspx" type="normal" hasexcerpt="false" views="5519">
      <title type="text"><![CDATA[Less than “Few” is GoF]]></title>
      <content type="text"><![CDATA[<p>Some years ago a phrase broke my mind:</p>
<p><strong><span style="color: #000080">&ldquo;Program to an interface and not to an implementation&rdquo;</span></strong></p>
<p>As you probably know the phrase is one of the famous <a href="http://en.wikipedia.org/wiki/Design_Patterns">Gang of Four</a>.</p>
<p>Is the&nbsp; phrase valid even for entities ?</p>
<p>I definitive think that the answer is <strong>yes</strong> for various reason; from dyn-proxy, for lazy-loading, to the use of <a href="http://en.wikipedia.org/wiki/Data_Transfer_Object">DTO</a> in View.</p>
<p>If we want use <strong>GoF </strong>suggestion, do we must write a lot of &ldquo;artifacts&rdquo; ?</p>
<p>Let me make an example&hellip; (fasten your seat belts)</p>
<p>First of all I start defining a simple entity:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> IPerson</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">long</span> Id { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">string</span> Name { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p>&nbsp;</p>
<p>Now I want persist it using <strong>NHibernate2.1.0</strong> (the next mayor version) but without write a real implementation. What I want is write a generic implementation for the whole domain; to do it I&rsquo;m going to use <a href="http://www.castleproject.org/dynamicproxy/index.html">Castle.DynamicProxy</a>.</p>
<p>The responsibility of my proxy will be <em>hold entity-data</em> so basically I need&nbsp; two things: the <em>DataProxy</em> and a <em>&ldquo;proxy marker&rdquo;</em> to discover if an object-instance is an instance of my proxy.</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 99.8%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 973px; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> IProxyMarker</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        DataProxyHandler DataHandler { get; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">sealed</span> <span style="color: #0000ff">class</span> DataProxyHandler : IInterceptor</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">private</span> <span style="color: #0000ff">readonly</span> Dictionary&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">object</span>&gt; data = <span style="color: #0000ff">new</span> Dictionary&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">object</span>&gt;(50);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">private</span> <span style="color: #0000ff">readonly</span> <span style="color: #0000ff">string</span> entityName;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> DataProxyHandler(<span style="color: #0000ff">string</span> entityName, <span style="color: #0000ff">object</span> id)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">this</span>.entityName = entityName;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            data[<span style="color: #006080">"Id"</span>] = id;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">string</span> EntityName</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            get { <span style="color: #0000ff">return</span> entityName; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> IDictionary&lt;<span style="color: #0000ff">string</span>, <span style="color: #0000ff">object</span>&gt; Data</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            get { <span style="color: #0000ff">return</span> data; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #cc6633">#region</span> IInterceptor Members</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Intercept(IInvocation invocation)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            invocation.ReturnValue = <span style="color: #0000ff">null</span>;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">string</span> methodName = invocation.Method.Name;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">if</span> (<span style="color: #006080">"get_DataHandler"</span>.Equals(methodName))</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                invocation.ReturnValue = <span style="color: #0000ff">this</span>;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (methodName.StartsWith(<span style="color: #006080">"set_"</span>))</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                <span style="color: #0000ff">string</span> propertyName = methodName.Substring(4);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                data[propertyName] = invocation.Arguments[0];</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (methodName.StartsWith(<span style="color: #006080">"get_"</span>))</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                <span style="color: #0000ff">string</span> propertyName = methodName.Substring(4);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                invocation.ReturnValue = data[propertyName];</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (<span style="color: #006080">"ToString"</span>.Equals(methodName))</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                invocation.ReturnValue = entityName + <span style="color: #006080">"#"</span> + data[<span style="color: #006080">"Id"</span>];</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">else</span> <span style="color: #0000ff">if</span> (<span style="color: #006080">"GetHashCode"</span>.Equals(methodName))</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                invocation.ReturnValue = GetHashCode();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #cc6633">#endregion</span></pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p><strong><span style="color: #0000ff">Note</span></strong>: the <span style="color: #0080ff">IInterceptor</span> is Castle.Core.Interceptor.<span style="color: #0080ff">IInterceptor</span><span style="color: #000000">.</span></p>
<p>Now I want persist the <span style="color: #0080ff">IPerson</span> but before write the mapping I need some more <em>artifacts </em>related to some new features of NH2.1. I&rsquo;m going to use <strong>Tuplizers</strong>.</p>
<p>The <span style="color: #0080ff">IInstantiator</span> implementation:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 99.9%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 550px; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> EntityInstantiator : IInstantiator</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> ProxyGenerator proxyGenerator = <span style="color: #0000ff">new</span> ProxyGenerator();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">private</span> <span style="color: #0000ff">readonly</span> Type t;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> EntityInstantiator(Type entityType)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            t = entityType;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">object</span> Instantiate(<span style="color: #0000ff">object</span> id)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">return</span></pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                proxyGenerator.CreateInterfaceProxyWithoutTarget(t, <span style="color: #0000ff">new</span>[] {<span style="color: #0000ff">typeof</span> (IProxyMarker), t},</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                                                                 <span style="color: #0000ff">new</span> DataProxyHandler(t.FullName, id));</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">object</span> Instantiate()</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">return</span> Instantiate(<span style="color: #0000ff">null</span>);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">bool</span> IsInstance(<span style="color: #0000ff">object</span> obj)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">try</span></pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                <span style="color: #0000ff">return</span> t.IsInstanceOfType(obj);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">catch</span> (Exception e)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> Exception(<span style="color: #006080">"could not get handle to entity-name as interface : "</span> + e);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p><strong><span style="color: #0000ff">Note</span></strong>: the <span style="color: #0080ff">ProxyGenerator</span> is Castle.DynamicProxy.<span style="color: #0080ff">ProxyGenerator</span>.</p>
<p>The override of <span style="color: #0080ff">PocoEntityTuplizer</span>:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 180px; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> EntityTuplizer : PocoEntityTuplizer</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> EntityTuplizer(EntityMetamodel entityMetamodel, PersistentClass mappedEntity) </pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            : <span style="color: #0000ff">base</span>(entityMetamodel, mappedEntity) {}</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">protected</span> <span style="color: #0000ff">override</span> IInstantiator BuildInstantiator(PersistentClass persistentClass)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> EntityInstantiator(persistentClass.MappedClass);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p>Has you know when we create a proxy the System.<span style="color: #0080ff">Type</span><span style="color: #000000"> will take a value that nobody can predict; to allow <strong>NH</strong> recognize my entity I use a simple NHibernate.</span><span style="color: #0080ff">IInterceptor</span><span style="color: #000000"> implementation:</span></p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 99.9%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 348px; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> EntityNameInterceptor : EmptyInterceptor</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">override</span> <span style="color: #0000ff">string</span> GetEntityName(<span style="color: #0000ff">object</span> entity)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">string</span> entityName = ExtractEntityName(entity) ?? <span style="color: #0000ff">base</span>.GetEntityName(entity);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">return</span> entityName;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">string</span> ExtractEntityName(<span style="color: #0000ff">object</span> entity)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #008000">// Our custom Proxy instances actually bundle</span></pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #008000">// their appropriate entity name, so we simply extract it from there</span></pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #008000">// if this represents one of our proxies; otherwise, we return null</span></pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            var pm = entity <span style="color: #0000ff">as</span> IProxyMarker;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">if</span> (pm != <span style="color: #0000ff">null</span>)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                var myHandler = pm.DataHandler;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                <span style="color: #0000ff">return</span> myHandler.EntityName;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">return</span> <span style="color: #0000ff">null</span>;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p>Because I will need to have a instance of <em>&ldquo;something&rdquo;</em> in my application I need a sort of EntityFactory. Here a quick implementation:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 217px; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> EntityFactory</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> ProxyGenerator proxyGenerator = <span style="color: #0000ff">new</span> ProxyGenerator();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> T NewEntity&lt;T&gt;()</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            Type t = <span style="color: #0000ff">typeof</span> (T);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">return</span> (T)</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                proxyGenerator.CreateInterfaceProxyWithoutTarget</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            (t, <span style="color: #0000ff">new</span>[] {<span style="color: #0000ff">typeof</span> (IProxyMarker), t}, <span style="color: #0000ff">new</span> DataProxyHandler(t.FullName, 0));</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p>Before write a persistence test I need the last little thing: the mapping.</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 244px; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-mapping</span> <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-mapping-2.2"</span>
                       <span style="color: #ff0000">assembly</span><span style="color: #0000ff">="LessThanFew"</span>
                       <span style="color: #ff0000">namespace</span><span style="color: #0000ff">="LessThanFew.Domain"</span><span style="color: #0000ff">&gt;</span>

    <span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="IPerson"</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">tuplizer</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="LessThanFew.EntityTuplizer, LessThanFew"</span> 
                  <span style="color: #ff0000">entity-mode</span><span style="color: #0000ff">="poco"</span><span style="color: #0000ff">/&gt;</span>
        
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Id"</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="hilo"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Name"</span><span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-mapping</span><span style="color: #0000ff">&gt;</span></pre>
</div>
<p>Now I can write my test&hellip;</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 99.9%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 582px; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    [TestFixture]</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> PersistenceFixture : FunctionalTest</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        [Test]</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> PersonCrud()</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">object</span> savedId;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            var person = entityFactory.NewEntity&lt;IPerson&gt;();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            person.Name = <span style="color: #006080">"Katsumoto"</span>;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">using</span> (var session = sessions.OpenSession())</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                savedId = session.Save(person);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                tx.Commit();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">using</span> (var session = sessions.OpenSession())</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                person = session.Get&lt;IPerson&gt;(savedId);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                Assert.That(person, Is.Not.Null);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                Assert.That(person.Name, Is.EqualTo(<span style="color: #006080">"Katsumoto"</span>));</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                session.Delete(person);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                tx.Commit();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            <span style="color: #0000ff">using</span> (var session = sessions.OpenSession())</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">            <span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                person = session.Get&lt;IPerson&gt;(savedId);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">                Assert.That(person, Is.Null);</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">                tx.Commit();</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">            }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p>The test work but&hellip; to persist my little entity I write 6 more classes than usual&hellip; yes but now I have an <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a> approach of my application even for entities. Ok let me complicate the domain a little bit:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<div style="font-size: 8pt; overflow: visible; width: 99.9%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 421px; background-color: #f4f4f4; border-style: none; padding: 0px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> IPerson</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">int</span> Id { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">string</span> Name { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        IAddress Address { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        ISet&lt;IPerson&gt; Family { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> ICustomer : IPerson</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        ICompany Company { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> ICompany</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">int</span> Id { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">string</span> Name { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">&nbsp;</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    <span style="color: #0000ff">public</span> <span style="color: #0000ff">interface</span> IAddress</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">    {</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">int</span> Id { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">string</span> Street { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">        <span style="color: #0000ff">string</span> City { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: white; border-style: none; padding: 0px;">        <span style="color: #0000ff">string</span> PostalCode { get; set; }</pre>
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;">    }</pre>
</div>
</div>
<p>and the new <em><span style="color: #800000"><strong>&ldquo;matrix&rdquo;</strong></span></em>:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 1000px; border: gray 1px solid; padding: 4px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; height: 701px; background-color: #f4f4f4; border-style: none; padding: 0px;"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-mapping</span> <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-mapping-2.2"</span>
                       <span style="color: #ff0000">assembly</span><span style="color: #0000ff">="LessThanFew"</span>
                       <span style="color: #ff0000">namespace</span><span style="color: #0000ff">="LessThanFew.Domain"</span><span style="color: #0000ff">&gt;</span>

    <span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="IPerson"</span> <span style="color: #ff0000">discriminator-value</span><span style="color: #0000ff">="person"</span> <span style="color: #ff0000">abstract</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">tuplizer</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="LessThanFew.EntityTuplizer, LessThanFew"</span> <span style="color: #ff0000">entity-mode</span><span style="color: #0000ff">="poco"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Id"</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="hilo"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">discriminator</span> <span style="color: #ff0000">type</span><span style="color: #0000ff">="string"</span> <span style="color: #ff0000">force</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Name"</span><span style="color: #0000ff">/&gt;</span>

        <span style="color: #0000ff">&lt;</span><span style="color: #800000">many-to-one</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Address"</span> <span style="color: #ff0000">cascade</span><span style="color: #0000ff">="all"</span> <span style="color: #ff0000">column</span><span style="color: #0000ff">="addr_id"</span><span style="color: #0000ff">/&gt;</span>

        <span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Family"</span> <span style="color: #ff0000">cascade</span><span style="color: #0000ff">="all"</span> <span style="color: #ff0000">generic</span><span style="color: #0000ff">="true"</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span><span style="color: #0000ff">="pers_id"</span><span style="color: #0000ff">/&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">one-to-many</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="IPerson"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span>

        <span style="color: #0000ff">&lt;</span><span style="color: #800000">subclass</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="ICustomer"</span> <span style="color: #ff0000">discriminator-value</span><span style="color: #0000ff">="customer"</span> <span style="color: #ff0000">abstract</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">tuplizer</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="LessThanFew.EntityTuplizer, LessThanFew"</span> <span style="color: #ff0000">entity-mode</span><span style="color: #0000ff">="poco"</span><span style="color: #0000ff">/&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">many-to-one</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Company"</span> <span style="color: #ff0000">cascade</span><span style="color: #0000ff">="none"</span> <span style="color: #ff0000">column</span><span style="color: #0000ff">="comp_id"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">subclass</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>

    <span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="ICompany"</span> <span style="color: #ff0000">abstract</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">tuplizer</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="LessThanFew.EntityTuplizer, LessThanFew"</span> <span style="color: #ff0000">entity-mode</span><span style="color: #0000ff">="poco"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Id"</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="hilo"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Name"</span><span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>

    <span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="IAddress"</span> <span style="color: #ff0000">abstract</span><span style="color: #0000ff">="false"</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">tuplizer</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="LessThanFew.EntityTuplizer, LessThanFew"</span> <span style="color: #ff0000">entity-mode</span><span style="color: #0000ff">="poco"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Id"</span><span style="color: #0000ff">&gt;</span>
            <span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span><span style="color: #0000ff">="hilo"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="Street"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="City"</span><span style="color: #0000ff">/&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="PostalCode"</span><span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-mapping</span><span style="color: #0000ff">&gt;</span></pre>
</div>
<p>If I need <span style="color: #0080ff;">INotifyPropertyChanged</span>, for all entities of my domain, what I must change is the implementation of <span style="color: #0080ff;">DataProxyHandler</span>, by the way the intention of this post is only to show another NH2.1 feature : <strong>Tuplizers</strong>.</p>
<p>The code is available <a href="/members/fabiomaulo/files/Posts/default.aspx">here</a> (note that it not contain the deploy of NH2.1).</p>
<p>The last little thing&hellip; the Italian and Spanish translation of &ldquo;FEW&rdquo; is <a href="http://en.wikipedia.org/wiki/POCO"><strong>POCO</strong></a>. </p>]]></content>
      <post-name type="text"><![CDATA[less than few is gof]]></post-name>
      <categories>
        <category ref="1025" />
        <category ref="1091" />
        <category ref="1092" />
        <category ref="1093" />
        <category ref="1094" />
        <category ref="1095" />
      </categories>
      <trackbacks>
        <trackback id="92" date-created="2008-10-16T17:33:38" date-modified="2008-10-16T17:33:38" approved="true" url="http://www.nhforge.org/blogs/nhibernate/archive/2008/10/16/less-than-gof-is-hbm.aspx">
          <title type="text"><![CDATA[Less than GoF is hbm]]></title>
        </trackback>
        <trackback id="133" date-created="2008-11-23T11:32:50" date-modified="2008-11-23T11:32:50" approved="true" url="http://blog.yoot.be/post/Entity-Framework-3d-Entity-Base-Class-Library.aspx">
          <title type="text"><![CDATA[Entity Framework =&gt; Entity Base Class Library]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="90" date-created="2008-10-13T00:17:00" date-modified="2008-10-13T00:17:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/13/persisting-custom-values-for-enums.aspx" type="normal" hasexcerpt="false" views="1701">
      <title type="text"><![CDATA[Persisting custom values for enums]]></title>
      <content type="text"><![CDATA[<p>I've recently posted about persisting custom values for enums( like "M" for SexType.Male) , <a href="http://www.kenegozi.com/Blog/2008/10/12/described-enums-in-nhibernate.aspx">on my blog</a> and <a href="/wikis/howtonh/persisiting-described-enums.aspx">in the WIKI</a>.</p>
<p>The code is using an external codebase (the D9 project). However it's BSD licensed so you can either just use it, or you can learn from the code and tailor something for your needs. And of course you can contribute your improvements to NH and/or D9</p>]]></content>
      <post-name type="text"><![CDATA[persisting custom values for enums]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1096" />
      </categories>
      <authors>
        <author id="2139" date-created="2008-08-31T17:02:24" date-modified="2008-09-24T14:24:21" approved="true" email="egozi13+nhforge@gmail.com">
          <title type="text"><![CDATA[kenegozi]]></title>
        </author>
      </authors>
    </post>
    <post id="91" date-created="2008-10-16T17:30:00" date-modified="2008-10-16T17:30:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/16/less-than-gof-is-hbm.aspx" type="normal" hasexcerpt="false" views="7504">
      <title type="text"><![CDATA[Less than GoF is hbm]]></title>
      <content type="text"><![CDATA[<p>In <a href="/blogs/nhibernate/archive/2008/10/12/less-than-few-is-gof.aspx">Less than &ldquo;Few&rdquo; is GoF</a> I show how have a single implementation for the whole domain entities using <strong>Tuplizers</strong>.</p>
<p>In this post I will show another NH2.1 feature : <strong><span style="color: #0080ff">EntityMode</span>.Map</strong></p>
<p>Suppose you want prototype the persistence of your application; you don&rsquo;t want write any entity-interface nor any entity-implementation.</p>
<p>Suppose you want test the <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>, in the strictly meaning of the anachronism, to a legacy data base; you don&rsquo;t want write any entity-interface nor any entity-implementation.</p>
<p>Suppose a company send you some NH-mappings-files, to optimize data access, but they don&rsquo;t want send you their implementation; you don&rsquo;t have the implementation.</p>
<p>To prototype a entirely system there are various tools; one of these is <a href="http://www.codeplex.com/ajgenesis">AjGenesis</a> and it&rsquo;s IDE <a href="http://www.codeplex.com/ajgenesisstudio">AjGenesisStudio</a>. AjGenesis is a CodeGenerator that use an XML source (at the end, who are using only the designer for WebForm or WPF ? ). In practices AjGenesis start from a conceptual model written in XML, and NOT from a DB model, to generate your system. </p>
<p>As I can do with AjGenesis (explain how it work is not a target of this post), I&rsquo;m going to prototype, a little system, using an XML:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">ProductLine</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">length</span><span style="color: blue">=</span>"<span style="color: blue">200</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">string</span>"<span style="color: blue">/&gt;<br /><br />   &lt;</span><span style="color: #a31515">bag </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Models</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">inverse</span><span style="color: blue">=</span>"<span style="color: blue">true</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">productId</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Model</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">bag</span><span style="color: blue">&gt;<br /><br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;</span><span style="color: #a31515">class </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Model</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br /><br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">length</span><span style="color: blue">=</span>"<span style="color: blue">25</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">string</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">length</span><span style="color: blue">=</span>"<span style="color: blue">200</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">string</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">ProductLine</span>" <span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">productId</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">ProductLine</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<br />Do you are seeing something familiar ? 
</p>
<p>Yes! it is only a NHibernate2.1 mapping file. 
  </p>
<p>How I can write a persistence-test without write a single class ? well&hellip; with my hands, VisualStudio, NUnit and&hellip; of course our dear <strong>NHibernate</strong>. 
  </p>
<p>The configuration:</p>
<p>
[<span style="color: #2b91af">TestFixtureSetUp</span>] 
</p>
<pre class="code"><span style="color: blue">public void </span>TestFixtureSetUp()<br />{<br />   cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();<br />   cfg.Configure();<br />   cfg.AddResource(<span style="color: #a31515">"LessThanGoF.Prototype.ProductLine.hbm.xml"</span>, <span style="color: blue">typeof </span>(<span style="color: #2b91af">PrototypeSystemFixture</span>).Assembly);<br />   <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(cfg).Create(<span style="color: blue">false</span>, <span style="color: blue">true</span>);<br /><br />   cfg.SetProperty(<span style="color: #a31515">"default_entity_mode"</span>, <span style="color: #2b91af">EntityModeHelper</span>.ToString(<span style="color: #2b91af">EntityMode</span>.Map));<br /><br />   sessions = (<span style="color: #2b91af">ISessionFactoryImplementor</span>) cfg.BuildSessionFactory();<br />}</pre>
<p>
The line to pay attention is the set of <span style="color: #a31515">"default_entity_mode"</span>. If you paid attention in the mappings of the previous <a href="http://fabiomaulo.blogspot.com/2008/10/less-than-few-is-gof.html">post</a> you sure noted <span style="color: #ff0000"><strong>entity-mode</strong></span><span style="color: #0000ff"><strong>="poco"</strong><span style="color: #000000">. The <strong><span style="color: #0080ff">EntityMode</span>.Poco</strong> is the <span style="color: #0080ff">EntityMode</span> you are using until today. The <strong><span style="color: #0080ff">EntityMode</span>.Map</strong> is not something new; if you are using </span></span><a href="/doc/nh/en/index.html#mapping-declaration-component"><span style="color: #ff0000">dynamic-component</span></a>, even in NH2.0, you are using part of the implementation of <strong><span style="color: #0080ff">EntityMode</span>.Map</strong>.</p>
<div>The <span style="color: #0080ff">EntityMode</span> work together with <strong>Tuplizers</strong>. In practice the tuplizer defines the way on how transform a <em>Property-Value</em> to it&rsquo;s persistent representation, and viceversa a <em>Column-Value</em> to it&rsquo;s in-memory representation, and the <span style="color: #0080ff">EntityMode</span> defines which tuplizer is in use (I have simplified the &ldquo;definition&rdquo; of tuplizer).</div>
<p>
<br />In NH2.1 each entity may have tree representations: 
</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/POCO">POCO</a> 
    <br /></li>
<li>Dynamic-Map (aka Dictionary&lt;PropertyName, PropertyValue&gt;) 
    <br /></li>
<li>Xml (Not implemented yet) 
    <br /></li>
</ul>
<p>
And now the test 
</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>DynamicClasses()<br />{<br />   <span style="color: #2b91af">IDictionary </span>cars;<br />   <span style="color: #2b91af">IList </span>models;<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   {<br />       <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>t = s.BeginTransaction())<br />       {<br />           cars = <span style="color: blue">new </span><span style="color: #2b91af">Hashtable</span>();<br />           cars[<span style="color: #a31515">"Description"</span>] = <span style="color: #a31515">"Cars"</span>;<br /><br />           <span style="color: #2b91af">IDictionary </span>ferrari = <span style="color: blue">new </span><span style="color: #2b91af">Hashtable</span>();<br />           ferrari[<span style="color: #a31515">"ProductLine"</span>] = cars;<br />           ferrari[<span style="color: #a31515">"Name"</span>] = <span style="color: #a31515">"Dino"</span>;<br />           ferrari[<span style="color: #a31515">"Description"</span>] = <span style="color: #a31515">"Ferrari Dino."</span>;<br /><br />           <span style="color: #2b91af">IDictionary </span>lamborghini = <span style="color: blue">new </span><span style="color: #2b91af">Hashtable</span>();<br />           lamborghini[<span style="color: #a31515">"ProductLine"</span>] = cars;<br />           lamborghini[<span style="color: #a31515">"Name"</span>] = <span style="color: #a31515">"Countach"</span>;<br />           lamborghini[<span style="color: #a31515">"Description"</span>] = <span style="color: #a31515">"Lamborghini Countach"</span>;<br /><br />           models = <span style="color: blue">new </span><span style="color: #2b91af">List</span>&lt;<span style="color: #2b91af">IDictionary</span>&gt; {ferrari, lamborghini};<br /><br />           cars[<span style="color: #a31515">"Models"</span>] = models;<br /><br />           s.Save(<span style="color: #a31515">"ProductLine"</span>, cars);<br />           t.Commit();<br />       }<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   {<br />       <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>t = s.BeginTransaction())<br />       {<br />           cars = (<span style="color: #2b91af">IDictionary</span>) s.CreateQuery(<span style="color: #a31515">"from ProductLine pl order by pl.Description"</span>).UniqueResult();<br />           models = (<span style="color: #2b91af">IList</span>) cars[<span style="color: #a31515">"Models"</span>];<br /><br />           <span style="color: #2b91af">Assert</span>.That(models.Count == 2);<br /><br />           s.Clear();<br /><br />           <span style="color: #2b91af">IList </span>list = s.CreateQuery(<span style="color: #a31515">"from Model m"</span>).List();<br />           <span style="color: blue">var </span>model = (<span style="color: #2b91af">IDictionary</span>) list[0];<br /><br />           <span style="color: #2b91af">Assert</span>.That(((<span style="color: #2b91af">IList</span>) ((<span style="color: #2b91af">IDictionary</span>) model[<span style="color: #a31515">"ProductLine"</span>])[<span style="color: #a31515">"Models"</span>]).Contains(model));<br /><br />           s.Clear();<br />           t.Commit();<br />       }<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   {<br />       <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>t = s.BeginTransaction())<br />       {<br />           cars = (<span style="color: #2b91af">IDictionary</span>) s.CreateQuery(<span style="color: #a31515">"from ProductLine pl order by pl.Description"</span>).UniqueResult();<br />           s.Delete(cars);<br />           t.Commit();<br />       }<br />   }<br />}</pre>
<p>
Take a look to <span style="font-family: courier new">s.Save(<span style="color: #006080">"ProductLine"</span>, cars);</span> the first parameter is the <span style="color: #ff0000">entity-name</span> I had used in the mapping, the second is the instance. 
</p>
<p>As you can see, I have wrote a complete persistence test without write a single entity-interface nor entity-implementation. All NH-session-API are working as expected, <em>lazy-loading</em> are working as expected and if you activate <em>NHibernate.SQL</em> logging you can see that all are working in the same way than when you have entities implemented. 
  </p>
<p><strong>End of the story!</strong> 
  </p>
<p>&hellip;&hellip; wait&hellip; wait&hellip;</p>
<p>let me wire some thoughts&hellip; 
  </p>
<ul>
<li>The <span style="color: #ff0000">entity-name</span> is a conceptual representation of an entity definition, I can use the <span style="color: #ff0000">entity-name</span> to work with NH without take care if the entity is represented by an interface, a class or a class with some generic type definition&hellip; 
    <br /></li>
<li>With NHibernate an entity have tree possible representations&hellip; 
    <br /></li>
<li>In this post I have a <span style="color: #0080ff">Dictionary</span>&lt;PropertyName, PropertyValue&gt; to represent the state of an entity&hellip; but in the <a href="/blogs/nhibernate/archive/2008/10/12/less-than-few-is-gof.aspx">previous post</a> I have the same representation in the <em>DataProxy</em>&hellip; 
    <br /></li>
<li><span style="color: #0080ff">Dictionary</span>&lt;K, V&gt; is serializable and if I join it with a string, to hold the entityName, I may have a generic <span style="color: #0080ff">DataContract</span><span style="color: #000000"> to send my entity state&hellip;</span> 
    <br /></li>
</ul>
<p>Material for some others posts. 
  </p>
<p><strong>To be continued&hellip;</strong></p>]]></content>
      <post-name type="text"><![CDATA[less than gof is hbm]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1097" />
        <category ref="1098" />
        <category ref="1099" />
      </categories>
      <comments>
        <comment id="106" date-created="2008-11-14T10:30:36" date-modified="2008-11-14T10:30:36" approved="true" user-name="ssteinegger" user-url="http://">
          <title type="text"><![CDATA[re: Less than GoF is hbm]]></title>
          <content type="text"><![CDATA[Did you read about the new C# 4 features? There you can access properties that are "created" at runtime. I think this is also a kind of a Dictionary behind the scenes and could probably easily supported by NHibernate (when it is released).]]></content>
        </comment>
        <comment id="108" date-created="2008-11-14T12:51:14" date-modified="2008-11-14T12:51:14" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Less than GoF is hbm]]></title>
          <content type="text"><![CDATA[Yes I know. Even LinFu DynamicObject (in .Net 2.0 and 3.5 support it)]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="134" date-created="2008-11-23T11:32:55" date-modified="2008-11-23T11:32:55" approved="true" url="http://blog.yoot.be/post/Entity-Framework-3d-Entity-Base-Class-Library.aspx">
          <title type="text"><![CDATA[Entity Framework =&gt; Entity Base Class Library]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="94" date-created="2008-10-20T13:48:00" date-modified="2008-10-20T13:48:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/20/how-test-your-mappings-the-ghostbuster.aspx" type="normal" hasexcerpt="false" views="10758">
      <title type="text"><![CDATA[How Test your mappings: the Ghostbuster]]></title>
      <content type="text"><![CDATA[<p>In NHibernate, when you have the <span style="color: #2b91af;">FlushMode</span> configured to <b>AutoFlush</b>, session.Flush() is called when NH detects a dirty entity instance and when&nbsp;a query with&nbsp;an intersected <i>QuerySpace</i>&nbsp;is performed. (The <i>QuerySpace</i> is represented by all tables affected in a query.)</p>
<p>Example:</p>
<pre class="code">  <span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">class </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Animal</span>"<span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">id </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Id</span>"<span style="color: #0000ff;">&gt;<br />         &lt;</span><span style="color: #a31515;">generator </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">hilo</span>"<span style="color: #0000ff;">/&gt;<br />     &lt;/</span><span style="color: #a31515;">id</span><span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Description</span>"<span style="color: #0000ff;">/&gt;<br /><br />     &lt;</span><span style="color: #a31515;">joined-subclass </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Reptile</span>"<span style="color: #0000ff;">&gt;<br />         &lt;</span><span style="color: #a31515;">key </span><span style="color: #ff0000;">column</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">animalId</span>"<span style="color: #0000ff;">/&gt;<br />         &lt;</span><span style="color: #a31515;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">BodyTemperature</span>"<span style="color: #0000ff;">/&gt;<br />     &lt;/</span><span style="color: #a31515;">joined-subclass</span><span style="color: #0000ff;">&gt;<br /><br /> &lt;/</span><span style="color: #a31515;">class</span><span style="color: #0000ff;">&gt;<br /></span></pre>
<p>In the above domain, a query on the <span style="color: #2b91af;">Reptile</span> class in a opened session with a dirty instance of <span style="color: #2b91af;">Animal</span> would cause&nbsp;session.Flush() will be called.</p>
<p>After a <span style="font-family: courier new;">session.Get&lt;<span style="color: #2b91af;">Animal</span>&gt;(animalId)</span> we can be pretty sure that there is no dirty entities in the session, <b>sure ?</b></p>
<p><b>Don&rsquo;t be so sure!</b> The real answer is: <b><span style="text-decoration: underline;">It depends</span></b>.</p>
<p>For example try this domain:</p>
<pre class="code"><span style="color: #0000ff;">public enum </span><span style="color: #2b91af;">Sex<br /></span>{<br /> Unspecified,<br /> Male,<br /> Female<br />}<br /><span style="color: #0000ff;">public class </span><span style="color: #2b91af;">Person<br /></span>{<br /> <span style="color: #0000ff;">public virtual int </span>Id { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br /> <span style="color: #0000ff;">public virtual </span><span style="color: #2b91af;">Sex </span>Sex { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br />}</pre>
<p>with this mapping:</p>
<pre class="code">  <span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">class </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Person</span>"<span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">id </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Id</span>"<span style="color: #0000ff;">&gt;<br />         &lt;</span><span style="color: #a31515;">generator </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">hilo</span>"<span style="color: #0000ff;">/&gt;<br />     &lt;/</span><span style="color: #a31515;">id</span><span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Sex</span>" <span style="color: #ff0000;">type</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">int</span>"<span style="color: #0000ff;">/&gt;<br /> &lt;/</span><span style="color: #a31515;">class</span><span style="color: #0000ff;">&gt;<br /></span></pre>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>In the mapping I define the property Sex of type <span style="color: #0000ff;">int</span> but in the class the type is <span style="color: #2b91af;">Sex</span>; even if you don&rsquo;t receive an exception, because an <span style="color: #0000ff;">int</span> is convertible to <span style="color: #2b91af;">Sex</span> and viceversa, your persistence will have a unexpected&nbsp; behavior. NH will detect a modification, of your entity, &ldquo;immediately&rdquo; after session.Get because it having an <span style="color: #0000ff;">int</span> in the entity snap-shot (retrieved from DB) and a <span style="color: #2b91af;">Sex</span> in the actual state. The example are showing a very simple case of &ldquo;ghosts&rdquo; in your application. In a big environment, with a complex domain, find &ldquo;ghosts&rdquo; it is not so easy.</p>
<h3>The Ghostbusters</h3>
<pre class="code">[<span style="color: #2b91af;">TestFixtureSetUp</span>]<br /><span style="color: #0000ff;">public void </span>TestFixtureSetUp()<br />{<br /> <span style="color: #2b91af;">XmlConfigurator</span>.Configure();<br /> cfg = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">Configuration</span>();<br /> cfg.Configure();<br /> <span style="color: #0000ff;">new </span><span style="color: #2b91af;">SchemaExport</span>(cfg).Create(<span style="color: #0000ff;">false</span>, <span style="color: #0000ff;">true</span>);<br /> sessions = (<span style="color: #2b91af;">ISessionFactoryImplementor</span>) cfg.BuildSessionFactory();<br /> PopulateDb();<br />}</pre>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>Few words about the TestFixtureSetUp: </p>
<ul>
<br />
<li>if you are testing your domain persistence you can run the &ldquo;ghostbuster&rdquo; in each test. </li>
<li>if you are testing yours <a href="http://en.wikipedia.org/wiki/Data_Access_Object">DAO</a>s and you have an implementation of <a href="http://martinfowler.com/bliki/ObjectMother.html">ObjectMother</a> or <a href="http://nat.truemesh.com/archives/000714.html">TestDataBuilder</a> you can use it in the implementation of <i>PopulateDb()</i> method. </li>
<li>If you don&rsquo;t have tests you can leave the <i>PopulateDb()</i> method empty and configure NH to an existing copy of your DB. <br /></li>
</ul>
<pre class="code">[<span style="color: #2b91af;">Test</span>, <span style="color: #2b91af;">Explicit</span>]<br /><span style="color: #0000ff;">public void </span>UnexpectedUpdateDeleteOnFetch()<br />{<br /> PersistingMappings(<span style="color: #0000ff;">null</span>);<br />}<br /><br />[<span style="color: #2b91af;">Test</span>, <span style="color: #2b91af;">Explicit</span>]<br /><span style="color: #0000ff;">public void </span>UnexpectedUpdateDeleteOnFetchSpecific()<br />{<br /> <span style="color: #0000ff;">var </span>entitiesFilter = <span style="color: #0000ff;">new</span>[]<br />                          {<br />                              <span style="color: #a31515;">"Person"<br />                          </span>};<br /> PersistingMappings(entitiesFilter);<br />}</pre>
<p>In my experience the above two tests are needed. The first sound like <i>&ldquo;close your eyes and pray&rdquo;</i> the second allow you to analyze some specific entities.</p>
<p>To avoid breaking the test, on each unexpected DB-hit, I&rsquo;ll use the power of <a href="http://logging.apache.org/log4net/index.html">log4net</a> in the whole fixture.</p>
<p>To intercept unexpected <i>Flush </i>a possible, easy and quickly, way is an implementation of <span style="color: #2b91af;">IInterceptor</span>.</p>
<pre class="code"><span style="color: #0000ff;">private class </span><span style="color: #2b91af;">NoUpdateInterceptor </span>: <span style="color: #2b91af;">EmptyInterceptor<br /></span>{<br /> <span style="color: #0000ff;">private readonly </span><span style="color: #2b91af;">IList</span>&lt;<span style="color: #0000ff;">string</span>&gt; invalidUpdates;<br /><br /> <span style="color: #0000ff;">public </span>NoUpdateInterceptor(<span style="color: #2b91af;">IList</span>&lt;<span style="color: #0000ff;">string</span>&gt; invalidUpdates)<br /> {<br />     <span style="color: #0000ff;">this</span>.invalidUpdates = invalidUpdates;<br /> }<br /><br /> <span style="color: #0000ff;">public override bool </span>OnFlushDirty(<span style="color: #0000ff;">object </span>entity, <span style="color: #0000ff;">object </span>id, <span style="color: #0000ff;">object</span>[] currentState, <span style="color: #0000ff;">object</span>[] previousState, <span style="color: #0000ff;">string</span>[] propertyNames, <span style="color: #2b91af;">IType</span>[] types)<br /> {<br />     <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">" FlushDirty :" </span>+ entity.GetType().FullName;<br />     log.Debug(msg);<br />     invalidUpdates.Add(msg);<br />     <span style="color: #0000ff;">return false</span>;<br /> }<br /><br /> <span style="color: #0000ff;">public override bool </span>OnSave(<span style="color: #0000ff;">object </span>entity, <span style="color: #0000ff;">object </span>id, <span style="color: #0000ff;">object</span>[] state, <span style="color: #0000ff;">string</span>[] propertyNames, <span style="color: #2b91af;">IType</span>[] types)<br /> {<br />     <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">" Save       :" </span>+ entity.GetType().FullName;<br />     log.Debug(msg);<br />     invalidUpdates.Add(msg);<br />     <span style="color: #0000ff;">return false</span>;<br /> }<br /><br /> <span style="color: #0000ff;">public override void </span>OnDelete(<span style="color: #0000ff;">object </span>entity, <span style="color: #0000ff;">object </span>id, <span style="color: #0000ff;">object</span>[] state, <span style="color: #0000ff;">string</span>[] propertyNames, <span style="color: #2b91af;">IType</span>[] types)<br /> {<br />     <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">" Delete     :" </span>+ entity.GetType().FullName;<br />     log.Debug(msg);<br />     invalidUpdates.Add(msg);<br /> }<br />}</pre>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>As you can see I&rsquo;m interested in : unexpected <span style="text-decoration: underline;">Flush of dirty</span> instance, unexpected <span style="text-decoration: underline;">Saves</span> and unexpected <span style="text-decoration: underline;">Deletes</span>.</p>
<p>The <i>PersistingMappings</i> is my &ldquo;driver&rdquo; to test each entity. The responsibility of the method is iterate each persistent class known by the <i>SessionFactory</i> (or the selected in <i>UnexpectedUpdateDeleteOnFetchSpecific</i> methods), run the test of each entity and reports all issues found.</p>
<pre class="code"><span style="color: #0000ff;">private void </span>PersistingMappings(<span style="color: #2b91af;">ICollection</span>&lt;<span style="color: #0000ff;">string</span>&gt; entitiesFilter)<br />{<br /> <span style="color: #0000ff;">var </span>invalidUpdates = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">List</span>&lt;<span style="color: #0000ff;">string</span>&gt;();<br /> <span style="color: #0000ff;">var </span>nop = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">NoUpdateInterceptor</span>(invalidUpdates);<br /><br /> <span style="color: #2b91af;">IEnumerable</span>&lt;<span style="color: #0000ff;">string</span>&gt; entitiesToCheck;<br /> <span style="color: #0000ff;">if </span>(entitiesFilter == <span style="color: #0000ff;">null</span>)<br /> {<br />     entitiesToCheck = cfg.ClassMappings.Select(x =&gt; x.EntityName);<br /> }<br /> <span style="color: #0000ff;">else<br /> </span>{<br />     entitiesToCheck = <span style="color: #0000ff;">from </span>persistentClass <span style="color: #0000ff;">in </span>cfg.ClassMappings<br />                       <span style="color: #0000ff;">where </span>entitiesFilter.Contains(persistentClass.EntityName)<br />                       <span style="color: #0000ff;">select </span>persistentClass.EntityName;<br /> }<br /><br /> <span style="color: #0000ff;">foreach </span>(<span style="color: #0000ff;">var </span>entityName <span style="color: #0000ff;">in </span>entitiesToCheck)<br /> {<br />     EntityPersistenceTest(invalidUpdates, entityName, nop);<br /> }<br /><br /> <span style="color: #0000ff;">if </span>(invalidUpdates.Count &gt; 0)<br /> {<br />     <span style="color: #0000ff;">if </span>(logError.IsDebugEnabled)<br />     {<br />         logError.Debug(<span style="color: #a31515;">"  "</span>);<br />         logError.Debug(<span style="color: #a31515;">"------ INVALID UPDATES -------"</span>);<br />         invalidUpdates.ForEach(x =&gt; logError.Debug(x));<br />         logError.Debug(<span style="color: #a31515;">"------------------------------"</span>);<br />     }<br /> }<br /> <span style="color: #2b91af;">Assert</span>.AreEqual(0, invalidUpdates.Count, <span style="color: #a31515;">"Has unexpected updates."</span>);<br />}</pre>
<p>To check each persistent entity I&rsquo;m using the <span style="color: #2b91af;">Configuration</span>.ClassMappings collection and extracting the <i>EntityName</i> from the <span style="color: #2b91af;">PersistentClass</span>. The use of <i>EntityName</i> don&rsquo;t mean that I&rsquo;m using the tag <span style="color: #ff0000;">entity-name</span> (as you can see in the mapping above).</p>
<p>The real &ldquo;ghostbuster&rdquo; is:</p>
<pre class="code"><span style="color: #0000ff;">private void </span>EntityPersistenceTest(<span style="color: #2b91af;">ICollection</span>&lt;<span style="color: #0000ff;">string</span>&gt; invalidUpdates,<br /> <span style="color: #0000ff;">string </span>entityName, <span style="color: #2b91af;">IInterceptor </span>nop)<br />{<br /> <span style="color: #0000ff;">const string </span>queryTemplate = <span style="color: #a31515;">"select e.{0} from {1} e"</span>;<br /> <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">"s--------" </span>+ entityName;<br /> log.Debug(msg);<br /><br /> <span style="color: #0000ff;">using </span>(<span style="color: #0000ff;">var </span>s = sessions.OpenSession(nop))<br /> <span style="color: #0000ff;">using </span>(<span style="color: #0000ff;">var </span>tx = s.BeginTransaction())<br /> {<br />     <span style="color: #2b91af;">IList </span>entityIds = <span style="color: #0000ff;">null</span>;<br />     <span style="color: #0000ff;">try<br />     </span>{<br />         <span style="color: #0000ff;">string </span>queryString = <span style="color: #0000ff;">string</span>.Format(queryTemplate, DefaultIdName, entityName);<br />         entityIds = s.CreateQuery(queryString).SetMaxResults(1).List();<br />     }<br />     <span style="color: #0000ff;">catch </span>(<span style="color: #2b91af;">Exception </span>e)<br />     {<br />         log.Debug(<span style="color: #a31515;">"Possible METEORITE:" </span>+ e.Message);<br />     }<br /><br />     <span style="color: #0000ff;">if </span>(entityIds != <span style="color: #0000ff;">null</span>)<br />     {<br />         <span style="color: #0000ff;">if </span>(entityIds.Count == 0 || entityIds[0] == <span style="color: #0000ff;">null</span>)<br />         {<br />             log.Debug(<span style="color: #a31515;">"No instances"</span>);<br />         }<br />         <span style="color: #0000ff;">else<br />         </span>{<br />             <span style="color: #0000ff;">if </span>(entityIds.Count &gt; 1)<br />             {<br />                 msg = <span style="color: #a31515;">"&gt;Has " </span>+ entityIds.Count + <span style="color: #a31515;">" subclasses"</span>;<br />                 log.Debug(msg);<br />             }<br />             <span style="color: #0000ff;">object </span>entityId = entityIds[0];<br />             <span style="color: #0000ff;">try<br />             </span>{<br />                 s.Get(entityName, entityId);<br />                 <span style="color: #0000ff;">try<br />                 </span>{<br />                     s.Flush();<br />                 }<br />                 <span style="color: #0000ff;">catch </span>(<span style="color: #2b91af;">Exception </span>ex)<br />                 {<br />                     <span style="color: #0000ff;">string </span>emsg = <span style="color: #0000ff;">string</span>.Format(<span style="color: #a31515;">"EXCEPTION - Flushing entity [#{0}]: {1}"</span>, entityId, ex.Message);<br />                     log.Debug(emsg);<br />                     invalidUpdates.Add(emsg);<br />                 }<br />             }<br />             <span style="color: #0000ff;">catch </span>(<span style="color: #2b91af;">Exception </span>ex)<br />             {<br />                 <span style="color: #0000ff;">string </span>emsg = <span style="color: #0000ff;">string</span>.Format(<span style="color: #a31515;">"EXCEPTION - Getting [#{0}]: {1}"</span>, entityId, ex.Message);<br />                 invalidUpdates.Add(emsg);<br />                 log.Debug(emsg);<br />             }<br />         }<br />         tx.Rollback();<br />     }<br /> }<br /> msg = <span style="color: #a31515;">"e--------" </span>+ entityName;<br /> log.Debug(msg);<br />}</pre>
<p>The core of the test is:</p>
<pre class="code">s.Get(entityName, entityId);<br />s.Flush();</pre>
<p>If I Get an entity, from a clear fresh session, without touch the state what I&rsquo;m expect is that the follow Flush don&rsquo;t&nbsp; make absolutely nothing but&hellip; you know&hellip; perhaps there is an ugly &ldquo;ghost&rdquo;. Each <span style="color: #0000ff;">try</span>-<span style="color: #0000ff;">catch</span><span style="color: #000000;"> are checking some special situation.</span></p>
<p>And now lets go to run the &ldquo;ghostbuster&rdquo; in your application. Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/Ghostbusters/Ghostbusters">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[how test your mappings the ghostbuster]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1089" />
        <category ref="1100" />
      </categories>
      <comments>
        <comment id="107" date-created="2008-11-14T12:40:56" date-modified="2008-11-14T12:40:56" approved="true" user-name="ssteinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: How Test your mappings: the Ghostbuster]]></title>
          <content type="text"><![CDATA[Interesting approach. I also wrote a MappingTester, that works quite different. Probably because our project is different. We generate the tables from the mapping files. We have to test if the mapping matches to the entities.

I write a test for each class graph ("tree"). The tester takes the type of the "root" object. Then it
  - creates an instance of the type, populating all properties using reflection.
  - stores the entity (and some referenced entities that are configured to be not cascading)
  - reloads the entity in a new transaction
  - compares all properties using reflection.
  - Assures that a given list of types has been tested

In most cases, there is little to write, like "ignore this property" and cascading issues.

Example (pseudo-code)

tester = new MappingTester(typeof(Person))
tester.Configure<Person>()
  .NonCascading("Employer")
  .DontGenerate("AnnualWage") // calculated from Salary
  .DontTest("State"); // transient
tester.Configure<Address>()
  .NonCascading("City");
tester.test();
tester.AssertTypesTested(
  typeof(Person), 
  typeof(Address), 
  typeof(City), 
  typeof(Company));

Finds errors like:
  - Mapping-parsing errors
  - create schema errors (rare)
  - When storing: many, many possible mistakes, missing mapping file (simple, but common), type mismatches and so on
  - When comparing: a list of properties that are not equal after persisting

It's pretty easy. The tests are set up within minutes, I write them before I write the mapping file and use the test result as "task-list". When it runs, I'm pretty sure that everything is alright.

Because of the excluding nature of the configuration, new properties in the entities let the test break, until they are either mapped or excluded (using DontTest which needs a good reason).

The configurations could be held on a central place, because they are not test-specific, but entity-specific (If the same entity is reference from another test, you need the same configuration for it)

The most complex part of the tester is the TestDataGenerator, that creates fully populated instances of object graphs, which saves one of writing hundreds of lines of code. It could be used independent from the mapping test.

When I enhance it, I would implement that the same property is tested with two different values, which is important for booleans (until now, only true is tested).

Another enhancment would be testing the deletion (and cascades like with update). But in my experience, a high percentage of common mistakes is already covered.]]></content>
        </comment>
        <comment id="109" date-created="2008-11-14T13:00:29" date-modified="2008-11-14T13:00:29" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: How Test your mappings: the Ghostbuster]]></title>
          <content type="text"><![CDATA[ObjectMother, and you can do it in the method PopulateDb.
What we are testing here is something else... to be sure try to change a type of an enum (the same example I'm doing here) in your tests and take a look if some test fail.]]></content>
        </comment>
        <comment id="111" date-created="2008-11-16T00:32:57" date-modified="2008-11-16T00:32:57" approved="true" user-name="ssteinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: How Test your mappings: the Ghostbuster]]></title>
          <content type="text"><![CDATA[I know that you are testing something else. I don't question your approach. The "Get-Flush" ghostbuster should probably also be part of my test. (You could easily use a mock as interceptor).

I'm not sure if I understand your ObjectMother remark. You mean, that you write a method that creates objects hardcoded (instead of using a generic library or helper class)? If this is what you mean, you have to admit that you can't create a whole object graph (consisting of many classes) within four lines of code. You'll get hundreds of lines of code in your project, which is hard to maintain.]]></content>
        </comment>
        <comment id="112" date-created="2008-11-16T20:47:10" date-modified="2008-11-16T20:47:10" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: How Test your mappings: the Ghostbuster]]></title>
          <content type="text"><![CDATA[Try to follow the link of ObjectMother and/or TestDataBuilder I put in the post.]]></content>
        </comment>
        <comment id="141" date-created="2008-12-03T12:42:53" date-modified="2008-12-03T12:42:53" approved="true" user-name="Giovanni as PadovaBoy" user-url="http://nhforge.org/members/Giovanni-as-PadovaBoy/default.aspx">
          <title type="text"><![CDATA[re: How Test your mappings: the Ghostbuster]]></title>
          <content type="text"><![CDATA[Hi Fabio ;)
Tnx a lot for this peace of code!
I have some suggest:

In PersistingMappings method there are 2 problem:

1) the name of persistentClass.EntityName can contain the namespaces ...so u check something like "pippo.Contains(MySpace.Domain.Preferred.Degustibus.Pippo) ...and yep: there is no story :P

My BRUTAL suggestion:

where entitiesFilter.Contains(			                  persistentClass.EntityName.Split('.')[persistentClass.EntityName.Split('.').Length - 1])

(brutal but it work!)

2) for the Id key: i don't know why, but i use a "personal" Primary Key Name for every entity. Like IdUser, IdBill etc...
So i change the code (raw mode on): (From Line 80):

if (entitiesFilter == null)
			{
				var entitiesToCheck = from persistentClass in _config.ClassMappings
									  select new { Name = persistentClass.EntityName, 
										  IdName = persistentClass.IdentifierProperty.Name };
				foreach (var entity in entitiesToCheck)
				{
					EntityPersistenceTest(invalidUpdates, entity.Name, entity.IdName, nop);
				}
			}
			else
			{
				var entitiesToCheck = from persistentClass in _config.ClassMappings
				                  where
				                  	entitiesFilter.Contains(
				                  	persistentClass.EntityName.Split('.')[persistentClass.EntityName.Split('.').Length - 1])

				                  select new {Name = persistentClass.EntityName, IdName = persistentClass.IdentifierProperty.Name};
				foreach (var entity in entitiesToCheck)
				{
					EntityPersistenceTest(invalidUpdates, entity.Name, entity.IdName, nop);
				}
			}

And obviusly the firm of EntityPersistenceTest:

private void EntityPersistenceTest(ICollection<string> invalidUpdates,
				string entityName, string idName, IInterceptor nop)

And use:

string queryString = string.Format(queryTemplate, idName, entityName);



I hope this help somone ...if u understand what i wrote]]></content>
        </comment>
        <comment id="142" date-created="2008-12-03T13:02:21" date-modified="2008-12-03T13:02:21" approved="true" user-name="Giovanni as PadovaBoy" user-url="http://nhforge.org/members/Giovanni-as-PadovaBoy/default.aspx">
          <title type="text"><![CDATA[re: How Test your mappings: the Ghostbuster]]></title>
          <content type="text"><![CDATA[AARGH My post was lost! ARGH.

Ok I retry:
First: thanks a lot to Fabio for another cool peace of code!

Second: I have some suggestions:

1) a problem with filter in PersistingMappings:
i compare something like:
pippoEntity.Contains(MyNameSpace.Domain.Land.Preferred.Walt.Disney.PippoEntity).
Somethins go wrong...
so it's my BRUTAL solution:

where
				                  	entitiesFilter.Contains(
				                  	persistentClass.EntityName.Split('.')[persistentClass.EntityName.Split('.').Length - 1])

2) the Primary Key Name problem: for reason that i don't understand, i still use "personalize" id name for my entities. Like IdUser, IdBill, IdDrugs...

so i change the call of EntityPersistenceTest:

if (entitiesFilter == null)
			{
				var entitiesToCheck = from persistentClass in _config.ClassMappings
									  select new { Name = persistentClass.EntityName, 
										  IdName = persistentClass.IdentifierProperty.Name };
				foreach (var entity in entitiesToCheck)
				{
					EntityPersistenceTest(invalidUpdates, entity.Name, entity.IdName, nop);
				}
			}
			else
			{
				var entitiesToCheck = from persistentClass in _config.ClassMappings
				                  where
				                  	entitiesFilter.Contains(
				                  	persistentClass.EntityName.Split('.')[persistentClass.EntityName.Split('.').Length - 1])

				                  select new {Name = persistentClass.EntityName, IdName = persistentClass.IdentifierProperty.Name};
				foreach (var entity in entitiesToCheck)
				{
					EntityPersistenceTest(invalidUpdates, entity.Name, entity.IdName, nop);
				}
			}

and obviusly the EntityPersistenceTest itself with the new firm:
private void EntityPersistenceTest(ICollection<string> invalidUpdates,
				string entityName, string idName, IInterceptor nop)

And the line of query builder:

string queryString = string.Format(queryTemplate, idName, entityName);

3) if u change ur mapping files at Class definition with this:
<class name="MyBill" table="Bills" lazy="true" dynamic-update="true">

With Dinamyc-update="true" u can see ONLY the FIELD to adjust!

I hope this help someone :P
]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="95" date-created="2008-10-21T13:18:00" date-modified="2008-10-21T13:18:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/21/entity-name-in-action-a-strongly-typed-entity.aspx" type="normal" hasexcerpt="false" views="8454">
      <title type="text"><![CDATA[entity-name in action: a strongly typed entity]]></title>
      <content type="text"><![CDATA[<p>(<a href="http://www.fabiomaulo.blogspot.com/">my blog</a>)</p>
<p>The <span style="color: #ff0000">entity-name</span> is another powerful feature of NH2.1.</p>
<p>Part of the implementation was introduced in NH2.0 but it was not fully implemented even if it are working "under the cover" (if you read the SVN-log you saw <em>&ldquo;one more step to entity-name&rdquo;</em> many and many times).</p>
<p>As usual I start from domain:</p>
<pre class="code"><span style="color: blue">namespace </span>EntityNameInAction<br />{<br />   <span style="color: blue">public abstract class </span><span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br />       <span style="color: blue">public virtual string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br /><br />   <span style="color: blue">public class </span><span style="color: #2b91af">Reptile</span>: <span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual float </span>BodyTemperature { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br /><br />   <span style="color: blue">public class </span><span style="color: #2b91af">Human </span>: <span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual string </span>Name { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual string </span>NickName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual </span><span style="color: #2b91af">DateTime </span>Birthdate { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br /><br />   <span style="color: blue">public class </span><span style="color: #2b91af">Family</span>&lt;T&gt; <span style="color: blue">where </span>T: <span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br />       <span style="color: blue">public virtual </span>T Father { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual </span>T Mother { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual </span><span style="color: #2b91af">ISet</span>&lt;T&gt; Childs { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br />}</pre>
<p>In the DB representation I want each Animal in a different table so I&rsquo;m going to have tree different tables. At this point only one table for all &ldquo;kinds&rdquo; of Family is not enough basically because I can&rsquo;t have a ForeignKey pointing to two tables. What I need is a table for each strongly typed Family. The way to do it, using <strong>NHibernate</strong>, is the new tag: <strong><span style="color: #ff0000">entity-name</span></strong></p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<br />                  <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction</span>"<br />                  <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction</span>"<br />                  <span style="color: red">default-access</span><span style="color: blue">=</span>"<span style="color: blue">backfield</span>"<span style="color: blue">&gt;<br />  <br />   &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />      <br />       &lt;</span><span style="color: #a31515">joined-subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">animalId</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">BodyTemperature</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">joined-subclass</span><span style="color: blue">&gt;<br />      <br />       &lt;</span><span style="color: #a31515">joined-subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">animalId</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">NickName</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Birthdate</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Date</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">joined-subclass</span><span style="color: blue">&gt;       <br />   &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />   &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Family`1[[Reptile]]</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">ReptilesFamilies</span>"<br />          <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">ReptilesFamily</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />   &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br />  <br />   &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Family`1[[Human]]</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">HumanFamilies</span>"<br />          <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">HumanFamily</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />   &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;/</span><span style="color: #a31515">hibernate-mapping</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The new accessor "<strong>backfield</strong>" is another new feature but it don&rsquo;t play some special role here.</p>
<p>As you can see I have a class implementation for all &ldquo;kinds&rdquo; of families but two different strongly typed persistence mappings.</p>
<p>Well&hellip; that&rsquo;s all&hellip; ups&hellip; The test to demonstrate that it are working</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>EntityNameDemo()<br />{<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />       <span style="color: blue">var </span>rf = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rm = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rc1 = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rc2 = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rfamily = <span style="color: blue">new </span><span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;<br />                         {<br />                             Father = rf,<br />                             Mother = rm,<br />                             Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">Reptile</span>&gt; {rc1, rc2}<br />                         };<br />       s.Save(<span style="color: #a31515">"ReptilesFamily"</span>, rfamily);<br />       tx.Commit();<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />           <span style="color: blue">var </span>hf = <span style="color: blue">new </span><span style="color: #2b91af">Human </span>{Description = <span style="color: #a31515">"Flinstone"</span>, Name = <span style="color: #a31515">"Fred"</span>};<br />           <span style="color: blue">var </span>hm = <span style="color: blue">new </span><span style="color: #2b91af">Human </span>{Description = <span style="color: #a31515">"Flinstone"</span>, Name = <span style="color: #a31515">"Wilma"</span>};<br />           <span style="color: blue">var </span>hc1 = <span style="color: blue">new </span><span style="color: #2b91af">Human </span>{Description = <span style="color: #a31515">"Flinstone"</span>, Name = <span style="color: #a31515">"Pebbles"</span>};<br />           <span style="color: blue">var </span>hfamily = <span style="color: blue">new </span><span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;<br />                             {<br />                                 Father = hf,<br />                                 Mother = hm,<br />                                 Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">Human</span>&gt; {hc1}<br />                             };<br />           s.Save(<span style="color: #a31515">"HumanFamily"</span>, hfamily);<br />           tx.Commit();<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />       <span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;&gt; hf = s.CreateQuery(<span style="color: #a31515">"from HumanFamily"</span>).List&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;&gt;();<br />       <span style="color: #2b91af">Assert</span>.That(hf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />       <span style="color: #2b91af">Assert</span>.That(hf[0].Father.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Fred"</span>));<br />       <span style="color: #2b91af">Assert</span>.That(hf[0].Mother.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Wilma"</span>));<br />       <span style="color: #2b91af">Assert</span>.That(hf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br /><br />       <span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;&gt; rf = s.CreateQuery(<span style="color: #a31515">"from ReptilesFamily"</span>).List&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;&gt;();<br />       <span style="color: #2b91af">Assert</span>.That(rf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />       <span style="color: #2b91af">Assert</span>.That(rf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(2));<br /><br />       tx.Commit();<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />       s.Delete(<span style="color: #a31515">"from HumanFamily"</span>);<br />       s.Delete(<span style="color: #a31515">"from ReptilesFamily"</span>);<br />       tx.Commit();<br />   }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>As in &ldquo;<a href="http://fabiomaulo.blogspot.com/2008/10/less-than-gof-is-hbm.html">Less than GoF is hbm</a>&rdquo; I&rsquo;m using the overload of <strong>session.Save(string, object)</strong> method; the first parameter is the entity-name, I had used in the mapping, the second is the instance.</p>
<p>Now that&rsquo;s all (code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/EntityNameInAction/EntityNameInAction">here</a>).</p>]]></content>
      <post-name type="text"><![CDATA[entity name in action a strongly typed entity]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1092" />
        <category ref="1098" />
        <category ref="1101" />
        <category ref="1102" />
      </categories>
      <trackbacks>
        <trackback id="437" date-created="2009-07-20T23:44:47" date-modified="2009-07-20T23:44:47" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="96" date-created="2008-10-21T19:28:00" date-modified="2008-10-21T19:28:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/21/nhibernate-burrow-1-0-0-cr2-is-released.aspx" type="normal" hasexcerpt="false" views="2209">
      <title type="text"><![CDATA[NHibernate.Burrow 1.0.0 CR2 is released!]]></title>
      <content type="text"><![CDATA[<p>NHibernate.Burrow is a light weight middleware developed to support .Net applications using NHibernate (maybe also referred as NH in this article) as ORM framework by providing advanced and smart session/transaction management and other facilitates. Documentation and examples are available at NHForge.net. 
Any feedback or issue can be sent to NHibernate user group(http://groups.google.com/group/nhusers) and will be greatly anticipated.</p>
<p> 
1.0.0 CR 2 consists of a couple of bug fixes and minor changes. It should be the last release before 1.0.0 GA, which is coming soon.</p>
<p>Go <a target="_self" title="download" href="https://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=272688">here</a> to download.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate burrow 1 0 0 cr2 is released]]></post-name>
      <categories>
        <category ref="1035" />
        <category ref="1107" />
        <category ref="1111" />
      </categories>
      <authors>
        <author id="2123" date-created="2008-08-30T15:08:45" date-modified="2010-01-04T23:29:30" approved="true" email="kailuo.wang@gmail.com">
          <title type="text"><![CDATA[kailuowang]]></title>
        </author>
      </authors>
    </post>
    <post id="97" date-created="2008-10-26T18:52:00" date-modified="2008-10-26T18:52:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/26/exploring-nhibernate-statistics-part-1-simple-data-fetching.aspx" type="normal" hasexcerpt="false" views="11053">
      <title type="text"><![CDATA[Exploring NHibernate Statistics, Part 1: Simple Data Fetching]]></title>
      <content type="text"><![CDATA[<p>Note: this was originally posted on my <a target="_blank" href="http://davybrion.com/blog/2008/10/exploring-nhibernate-statistics-part-1-simple-data-fetching/">own blog</a></p>
<p>One of the new features that NHibernate 2.0 introduced is NHibernate Statistics. This feature can be pretty useful during development (or while debugging) to keep an eye on what NHibernate is doing.  Not a lot of people know about this feature, so i've decided to write a short series of posts about it.  In this first episode, we'll explore some stats which can show you some useful information regarding the efficiency of your (simple) data fetching strategies.  Later episodes will cover insert/update/delete statistics, query specific statistics and caching statistics.  I don't know yet when the other episodes will be posted, but they are definitely on my TODO list so they will get written eventually ;)
</p>
<p>First of all, here's how you can enable this feature. In your hibernate.cfg.xml file, you can add the following setting within the session-factory element.
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">property</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">generate_statistics</span>"<span style="color: blue;">&gt;</span>true<span style="color: blue;">&lt;/</span><span style="color: #a31515;">property</span><span style="color: blue;">&gt;</span></p>
</div>
<p>

Now, there are two levels of statistics. The first is at the level of the SessionFactory. These statistics basically keep count of everything that happens for each Session that was created by the SessionFactory.  You can access these stats through the Statistics property of the SessionFactory instance, which you can access from your Session instance if you don't have a reference to the SessionFactory, for instance:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> count = Session.SessionFactory.Statistics.EntityFetchCount;</p>
</div>
<p>
 
To give you an idea of what kind of stats are available on the SessionFactory level, here's a quick listing of most of the available properties: </p>
<p>EntityDeleteCount, EntityInsertCount, EntityLoadCount, EntityFetchCount, EntityUpdateCount, QueryExecutionCount, QueryExecutionMaxTime, QueryCacheHitCount, QueryCacheMissCount, QueryCachePutCount, FlushCount, ConnectCount, SecondLevelCacheHitCount, SecondLevelCacheMissCount, SecondLevelCachePutCount, SessionCloseCount, SessionOpenCount, CollectionLoadCount, CollectionFetchCount, CollectionUpdateCount, CollectionRemoveCount, CollectionRecreateCount, SuccessfulTransactionCount, TransactionCount, PrepareStatementCount, CloseStatementCount, OptimisticFailureCount.
</p>
<p>There are even more properties and methods available. For instance to retrieve the executed queries, statistics for a specific query, statistics for a specific entity type, for a specific collection role, and to get the second level cache statistics for a specific cache region. 
As you can see, lots of useful properties to help you examine where your NHibernate usage might not be the way it should be. Or just useful in case you're tying to figure out what kind of stuff NHibernate is doing behind the scenes for features you don't fully understand and want to experiment with.  There's also a useful LogSummary() method which (obviously) logs a summary of these stats to NHibernate's logger.
</p>
<p>Let's get into a couple of examples that will tell us more about the efficiency of our simple data access strategies. We'll start with some really simple stuff, and then move to some more interesting statistics.
</p>
<p>
For brevity, i'm using the following simple property to quickly access the SessionFactory's statistics:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: #2b91af;">IStatistics</span> GlobalStats</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> Session.SessionFactory.Statistics; }</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

For the first example, we'll retrieve all of the records in the Product table. After fetching this result, the EntityLoadCount statistic will reflect the number of entities we've loaded:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> TestEntityLoadCount()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">long</span> entityLoadCountBefore = GlobalStats.EntityLoadCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> allProducts = Session.CreateCriteria(<span style="color: blue;">typeof</span>(<span style="color: #2b91af;">Product</span>)).List&lt;<span style="color: #2b91af;">Product</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(entityLoadCountBefore + allProducts.Count, GlobalStats.EntityLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

What happens if we start using NHibernate's lazy loading features? For instance, if we access a Product's Category reference NHibernate has to retrieve that record from the database if it's not already loaded. Does this count as an EntityLoad, or an EntityFetch?  It counts as both an EntityLoad and an EntityFetch actually:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> TestEntityFetchCountForManyToOnePropertiesWithLazyLoading()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">long</span> entityLoadCountBefore = GlobalStats.EntityLoadCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">long</span> entityFetchCountBefore = GlobalStats.EntityFetchCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> allProducts = Session.CreateCriteria(<span style="color: blue;">typeof</span>(<span style="color: #2b91af;">Product</span>)).List&lt;<span style="color: #2b91af;">Product</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> product <span style="color: blue;">in</span> allProducts)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// this makes NHibernate fetch the Category from the database</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> categoryName = product.Category.Name;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> entitiesFetched = GlobalStats.EntityFetchCount - entityFetchCountBefore;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(entityLoadCountBefore + allProducts.Count + entitiesFetched, GlobalStats.EntityLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.That(entitiesFetched != 0);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

With the data in my database, this test loads 77 Product entities, and fetches 8 Categories for a total of 85 loaded entities.  The Product entities are loaded in one roundtrip, but for each Category another roundtrip is performed which is not ideal from a performance perspective.  The stats actually reflect that through the PrepareStatementCount property.  Let's modify the previous test to highlight this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> entitiesFetched = GlobalStats.EntityFetchCount - entityFetchCountBefore;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(entityLoadCountBefore + allProducts.Count + entitiesFetched, GlobalStats.EntityLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(entitiesFetched + 1, GlobalStats.PrepareStatementCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.That(entitiesFetched != 0);</p>
</div>
<p>

We get the count of the fetched entities, and add 1 to it to reflect the roundtrip to fetch all the products. This total equals the value of the PrepareStatementCount property.
This example shows that it can be pretty important to try to keep the EntityFetchCount and PrepareStatementCount property values as low as possible when you need to fix a performance problem.  Let's give it a shot:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> TestEntityFetchCountForManyToOnePropertiesWithoutLazyLoading()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">long</span> entityFetchCountBefore = GlobalStats.EntityFetchCount;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> allProducts = Session.CreateCriteria(<span style="color: blue;">typeof</span>(<span style="color: #2b91af;">Product</span>))</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .CreateCriteria(<span style="color: #a31515;">"Category"</span>, <span style="color: #2b91af;">JoinType</span>.InnerJoin)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .List&lt;<span style="color: #2b91af;">Product</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> product <span style="color: blue;">in</span> allProducts)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// the Categories have already been retrieved, so this doesn't cause a db roundtrip</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> categoryName = product.Category.Name;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> entitiesFetched = GlobalStats.EntityFetchCount - entityFetchCountBefore;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(1, GlobalStats.PrepareStatementCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(0, entitiesFetched);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Instead of fetching all of the Products and then relying on NHibernate's lazy loading to fetch the Categories, we fetch all of them in one go. The result is that NHibernate only performs one DB statement and it still loads all 85 records. 
</p>
<p>These statistics are nice if you just want to get information about loading entities, but what about collections? Well, we can use the CollectionLoadCount and CollectionFetchCount properties for this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> TestCountsForOneToManyPropertyWithLazyLoading()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> loadCountBefore = GlobalStats.EntityLoadCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> collectionLoadCountBefore = GlobalStats.CollectionLoadCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> collectionFetchCountBefore = GlobalStats.CollectionFetchCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> prepareStatementCountBefore = GlobalStats.PrepareStatementCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> allRegions = Session.CreateCriteria(<span style="color: blue;">typeof</span>(<span style="color: #2b91af;">Region</span>)).List&lt;<span style="color: #2b91af;">Region</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> territoryCount = 0;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> region <span style="color: blue;">in</span> allRegions)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// uses lazy-loading to fetch the Territories for this region</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; territoryCount += region.Territories.Count();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(loadCountBefore + allRegions.Count + territoryCount, GlobalStats.EntityLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(collectionLoadCountBefore + allRegions.Count, GlobalStats.CollectionLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(collectionFetchCountBefore + allRegions.Count, GlobalStats.CollectionFetchCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(prepareStatementCountBefore + allRegions.Count + 1, GlobalStats.PrepareStatementCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Btw, using the Count() result of the Territories property is something i'd never do, but i'm just using it here to illustrate these stats. In this case, we have 4 Regions, which we retrieve in one roundtrip, and then we fetch each Region's Territories in seperate trips which brings the total of PrepareStatementCount up to 5.  As you can see, the CollectionLoadCount is equal to the CollectionFetchCount.  In some cases, it can be better to retrieve the Territories while we're also retrieving the Regions:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">void</span> TestCountsForManyToOnePropertyWithoutLazyLoading()</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> loadCountBefore = GlobalStats.EntityLoadCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> collectionLoadCountBefore = GlobalStats.CollectionLoadCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> collectionFetchCountBefore = GlobalStats.CollectionFetchCount;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> prepareStatementCountBefore = GlobalStats.PrepareStatementCount;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> allRegions = Session.CreateCriteria(<span style="color: blue;">typeof</span>(<span style="color: #2b91af;">Region</span>))</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetFetchMode(<span style="color: #a31515;">"Territories"</span>, <span style="color: #2b91af;">FetchMode</span>.Join)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetResultTransformer(<span style="color: #2b91af;">CriteriaUtil</span>.DistinctRootEntity)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .List&lt;<span style="color: #2b91af;">Region</span>&gt;();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> territoryCount = 0;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> region <span style="color: blue;">in</span> allRegions)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// the Territories have already been retrieved, so this doesn't use lazy-loading</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; territoryCount += region.Territories.Count();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(loadCountBefore + allRegions.Count + territoryCount, GlobalStats.EntityLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(collectionLoadCountBefore + allRegions.Count, GlobalStats.CollectionLoadCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(collectionFetchCountBefore, GlobalStats.CollectionFetchCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">Assert</span>.AreEqual(prepareStatementCountBefore + 1, GlobalStats.PrepareStatementCount);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

With this code, there's only one roundtrip, yet all of the Regions and their Territories are loaded.  This approach won't always be better than retrieving the collections seperately though... it kinda depends on the size and shape of the resultset of the joined query compared to the size and shapes of the resultsets of retrieving the root entities and their child collections seperately.
</p>
<p>This post only showed a couple of the (many) interesting statistics that NHibernate can give you, but it could already help you troubleshoot bad-performing parts of your application.  Keep an eye on those EntityFetchCount and PrepareStatementCount values... If the EntityFetchCount is rather low compared to the total EntityLoadCount, then there's probably nothing bad going on.  If the EntityFetchCount is a rather large percentage of the total EntityLoadCount value, then you can be pretty sure that you can get some solid performance improvements in the code that drives up the EntityFetchCount value.</p>]]></content>
      <post-name type="text"><![CDATA[exploring nhibernate statistics part 1 simple data fetching]]></post-name>
      <categories>
        <category ref="1110" />
      </categories>
      <trackbacks>
        <trackback id="231" date-created="2009-04-03T15:07:52" date-modified="2009-04-03T15:07:52" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/04/03/ensuring-updates-on-flush.aspx">
          <title type="text"><![CDATA[Ensuring updates on Flush]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="98" date-created="2008-10-27T15:23:00" date-modified="2008-10-27T15:23:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/27/batching-nhibernate-s-dml-statements.aspx" type="normal" hasexcerpt="false" views="3429">
      <title type="text"><![CDATA[Batching NHibernate’s DML Statements]]></title>
      <content type="text"><![CDATA[<p>Note: this was originally posted on <a target="_blank" href="http://davybrion.com/blog/2008/10/batching-nhibernates-dm-statements/">my own blog</a></p>
<p>&nbsp;</p>
<p>
An oft-forgotten feature of NHibernate is that of batching DML statements.  If you need to create, update or delete a bunch of objects you can get NHibernate to send those statements in batches instead of one by one.  Let's give this a closer look.
</p>
<p>
I have an 'entity' with the following mapping:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;</span><span style="color: #a31515;">class</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">CrudTest</span>"<span style="color: blue;"> </span><span style="color: red;">table</span><span style="color: blue;">=</span>"<span style="color: blue;">CrudTest</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">id</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Id</span>"<span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Id</span>"<span style="color: blue;"> </span><span style="color: red;">type</span><span style="color: blue;">=</span>"<span style="color: blue;">guid</span>"<span style="color: blue;"> &gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">generator</span><span style="color: blue;"> </span><span style="color: red;">class</span><span style="color: blue;">=</span>"<span style="color: blue;">assigned</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;/</span><span style="color: #a31515;">id</span><span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">property</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Description</span>"<span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Description</span>"<span style="color: blue;"> </span><span style="color: red;">type</span><span style="color: blue;">=</span>"<span style="color: blue;">string</span>"<span style="color: blue;"> </span><span style="color: red;">length</span><span style="color: blue;">=</span>"<span style="color: blue;">200</span>"<span style="color: blue;"> </span><span style="color: red;">not-null</span><span style="color: blue;">=</span>"<span style="color: blue;">true</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;/</span><span style="color: #a31515;">class</span><span style="color: blue;">&gt;</span></p>
</div>
<p>
Nothing special here, just a Guid Id field and a string Description field. 
First, let's see how much time it takes to create 10000 records of this without using the batching feature. </p>
<p> I use the following method to create a bunch of dummy objects:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: #2b91af;">IEnumerable</span>&lt;<span style="color: #2b91af;">CrudTest</span>&gt; CreateTestObjects(<span style="color: blue;">int</span> count)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">List</span>&lt;<span style="color: #2b91af;">CrudTest</span>&gt; objects = <span style="color: blue;">new</span> <span style="color: #2b91af;">List</span>&lt;<span style="color: #2b91af;">CrudTest</span>&gt;(count);</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; count; i++)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; objects.Add(<span style="color: blue;">new</span> <span style="color: #2b91af;">CrudTest</span> { Id = <span style="color: #2b91af;">Guid</span>.NewGuid(), Description = <span style="color: #2b91af;">Guid</span>.NewGuid().ToString() });</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> objects;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>
Then, the code to persist these objects:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> testObjects = CreateTestObjects(10000);</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> stopwatch = <span style="color: blue;">new</span> <span style="color: #2b91af;">Stopwatch</span>();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stopwatch.Start();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">using</span> (<span style="color: #2b91af;">ITransaction</span> transaction = Session.BeginTransaction())</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> testObject <span style="color: blue;">in</span> testObjects)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Session.Save(testObject);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transaction.Commit();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stopwatch.Stop();</p>
</div>
<p>
Without enabling the batching, this code took 23 seconds to run on my cheap MacBook.  Now let's enable the batching in the hibernate.cfg.xml file:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">property</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">adonet.batch_size</span>"<span style="color: blue;">&gt;</span>5<span style="color: blue;">&lt;/</span><span style="color: #a31515;">property</span><span style="color: blue;">&gt;</span></p>
</div>
<p>
A batch size of 5 is still very small, but for this test it means that it only has to do 2000 trips to the database instead of the original 10000.  The code above now runs in 5.5 seconds.  Setting the batch size to 100 made it run in 1.8 seconds.  Going from 23 to 1.8 seconds with a small configuration change is a pretty nice improvement with very little effort.  Obviously, these aren't real benchmarks so your results may vary but i think it does show that you can easily get some performance benefits from it.
</p>
<p>You can get performance benefits like this whenever you need to create/update/delete a bunch of records simply by enabling this setting.  Keep in mind that this batching of statements doesn't apply to select queries... for that you need to use NHibernate's MultiCriteria or MultiQuery features :)
</p>
<p>Another thing to keep in mind is that for this test i used the 'assigned' Id generator... which means that the developer is responsible for providing the Id value for new objects.  One of the consequences of this is that NHibernate does not have to go to the database to retrieve the Id values like it would have to do if you were using (for instance) Identity Id values.  If you were using the Identity Id generator, this configuration setting would have no effect whatsoever for inserts, although the benefits would still apply to update and delete statements.
</p>
<p>Note that this approach is good for regular applications, but it's still not good enough if you need to process very large data sets (like import processes and things of that nature). Obviously, an ORM isn't well suited for those purposes, but we will examine another NHibernate feature in a future post which makes it possible to use NHibernate in such bulk operations with a pretty low performance overhead.</p>]]></content>
      <post-name type="text"><![CDATA[batching nhibernate s dml statements]]></post-name>
      <categories>
        <category ref="1108" />
        <category ref="1109" />
      </categories>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="99" date-created="2008-10-30T20:28:00" date-modified="2008-10-30T20:28:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/30/bulk-data-operations-with-nhibernate-s-stateless-sessions.aspx" type="normal" hasexcerpt="false" views="29898">
      <title type="text"><![CDATA[Bulk Data Operations With NHibernate's Stateless Sessions]]></title>
      <content type="text"><![CDATA[<p>Note: this was originally posted on my <a target="_blank" href="http://davybrion.com/blog/2008/10/bulk-data-operations-with-nhibernates-stateless-sessions/">own blog</a></p>
<p>In my previous <a href="http://davybrion.com/blog/2008/10/batching-nhibernates-dm-statements/">post</a>, i showed how you can configure NHibernate to batch create/update/delete statements and what kind of performance benefits you can get from it.  In this post, we're going to take this a bit further so we can actually use NHibernate in bulk data operations, an area where ORM's traditionally perform pretty badly.
</p>
<p>
First of all, let's get back to our test code from the last post:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> testObjects = CreateTestObjects(500000);</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> stopwatch = <span style="color: blue;">new</span> <span style="color: #2b91af;">Stopwatch</span>();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stopwatch.Start();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">using</span> (<span style="color: #2b91af;">ITransaction</span> transaction = Session.BeginTransaction())</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> testObject <span style="color: blue;">in</span> testObjects)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Session.Save(testObject);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transaction.Commit();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stopwatch.Stop();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> time = stopwatch.Elapsed;</p>
</div>
<p>

The only thing that changed since the previous post is the amount of objects that are created. In the previous post we only created 10000 objects, whereas now we'll be creating 500000 objects.
The batch size is configured like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">property</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">adonet.batch_size</span>"<span style="color: blue;">&gt;</span>100<span style="color: blue;">&lt;/</span><span style="color: #a31515;">property</span><span style="color: blue;">&gt;</span></p>
</div>
<p>

This means that NHibernate will send its DML statements in batches of 100 statements instead of sending all of them one by one.  The above code runs in 2 minutes and 24 seconds with a batch size of 100.  
However, if we use NHibernate's IStatelessionSession instead of a regular ISession, we can get some nice improvements. </p>
<p>First of all, here's the code to use the IStatelessSession:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> testObjects = CreateTestObjects(500000);</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> stopwatch = <span style="color: blue;">new</span> <span style="color: #2b91af;">Stopwatch</span>();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stopwatch.Start();</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">using</span> (<span style="color: #2b91af;">IStatelessSession</span> statelessSession = sessionFactory.OpenStatelessSession())</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">using</span> (<span style="color: #2b91af;">ITransaction</span> transaction = statelessSession.BeginTransaction())</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> testObject <span style="color: blue;">in</span> testObjects)</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; statelessSession.Insert(testObject);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transaction.Commit();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; stopwatch.Stop();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">var</span> time = stopwatch.Elapsed;</p>
</div>
<p>

As you can see, apart from the usage of the IStatelessSession instead of the regular ISession, this is pretty much the same code.
With a batch-size of 100, this code creates and inserts the 500000 records in 1 minute and 26 seconds.  While not a spectacular improvement, it's definitely a nice improvement in duration.
The biggest difference however is in memory usage while the code is running. A regular NHibernate ISession keeps a lot of data in its first-level cache (this enables a lot of the NHibernate magical goodies).  The IStatelessSession however, does no such thing.  It does no caching whatsoever and it also doesn't fire all of the events that you could usually plug into.  This is strictly meant to be used for bulk data operations.
</p>
<p>
To give you an idea on the difference in memory usage, here are the memory statistics (captured by Process Explorer) after running the original code (with the ISession instance):
</p>
<p><a href="http://davybrion.com/blog/wp-content/uploads/2008/10/isession.png"><img src="http://davybrion.com/blog/wp-content/uploads/2008/10/isession.png" title="isession" class="alignnone size-full wp-image-551" height="385" width="398" /></a></p>
<p>
And here are the memory statistics after running the modified code (with the IStatelessSession instance):</p>
<p>
<a href="http://davybrion.com/blog/wp-content/uploads/2008/10/istatelesssession.png"><img src="http://davybrion.com/blog/wp-content/uploads/2008/10/istatelesssession.png" title="istatelesssession" class="alignnone size-full wp-image-552" height="386" width="400" /></a></p>
<p>Quite a difference for what is essentially the same operation.  We could even improve on this because the code in its current form keeps all of the object instances in its own collection, preventing them from being garbage collected after they have been inserted in the database.  But i think this already demonstrates the value in using the IStatelessSession if you need to perform bulk operations.
Obviously, this will never perform as well as a bulk data operation that directly uses low-level ADO.NET code.  But if you already have the NHibernate mappings and infrastructure set up, implementing those bulk operations could be cheaper while still being 'fast enough' for most situations.</p>]]></content>
      <post-name type="text"><![CDATA[bulk data operations with nhibernate s stateless sessions]]></post-name>
      <categories>
        <category ref="1105" />
        <category ref="1106" />
        <category ref="1107" />
      </categories>
      <comments>
        <comment id="100" date-created="2008-10-31T17:54:33" date-modified="2008-10-31T17:54:33" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Bulk Data Operations With NHibernate's Stateless Sessions]]></title>
          <content type="text"><![CDATA[Another way for BulkUpdate without use ADO.NET directly is IQuery.ExecuteUpdate() (so far available only for native SQL).]]></content>
        </comment>
        <comment id="160" date-created="2009-02-01T04:36:07" date-modified="2009-02-01T04:36:07" approved="true" user-name="sqhua" user-url="http://nhforge.org/members/sqhua/default.aspx">
          <title type="text"><![CDATA[re: Bulk Data Operations With NHibernate's Stateless Sessions]]></title>
          <content type="text"><![CDATA[我發現測試數據要超過5W才能體現無狀態Session的優勢：

NHibernate.IStatelessSession 無狀態 = Sessions.GetStatelessSession();
            NHibernate.ISession 有狀態 = Sessions.GetSession();
            int testNumber = 100000;

            Stopwatch stopwatch = new Stopwatch();
            IList<Test> list = new List<Test>();
            for (int i = 0; i < testNumber; i++)
            {
                Test t = new Test();
                t.ID = i;
                t.Name = "批量加载" + i.ToString();
                list.Add(t);
            }

            stopwatch.Start();
            NHibernate.ITransaction tran = 無狀態.BeginTransaction();
            foreach (Test t in list)
                無狀態.Insert(t);
            tran.Commit();
            stopwatch.Stop();
            lb_insert.Text = "无状态插入:" + stopwatch.ElapsedMilliseconds.ToString();
            無狀態.Close();

            //list = NHHelper<Test>.GetIList("from Test");
            //無狀態 = Sessions.GetStatelessSession();
            //stopwatch.Reset();
            //stopwatch.Start();
            //foreach (Test tmp in list)
            //    無狀態.Delete(tmp);
            //無狀態.Close();
            //stopwatch.Stop();
            //lb_delete.Text = "无状态刪除:" + stopwatch.ElapsedMilliseconds.ToString();

            list.Clear();
            for (int i = 0; i < testNumber; i++)
            {
                Test t = new Test();
                t.ID = i;
                t.Name = "批量加载" + i.ToString();
                list.Add(t);
            }
            stopwatch = new Stopwatch();
            stopwatch.Start();
            tran = 有狀態.BeginTransaction();
            foreach (Test t in list)
                有狀態.Save(t);
            tran.Commit();
            stopwatch.Stop();
            有狀態.Close();

            lb_insert_old.Text = "有状态插入:" + stopwatch.ElapsedMilliseconds.ToString();

            //NHibernate.ISession s2 = Sessions.GetSession();
            //stopwatch.Reset();
            //stopwatch.Start();
            //有狀態 = Sessions.GetSession();
            //tran = 有狀態.BeginTransaction();
            //int r = 有狀態.Delete("from Test");
            //tran.Commit();
            //有狀態.Close();

            //stopwatch.Stop();
            //lb_delete_old.Text = "有状态刪除:" + stopwatch.ElapsedMilliseconds.ToString();]]></content>
        </comment>
        <comment id="161" date-created="2009-02-01T04:39:14" date-modified="2009-02-01T04:39:14" approved="true" user-name="sqhua" user-url="http://nhforge.org/members/sqhua/default.aspx">
          <title type="text"><![CDATA[re: Bulk Data Operations With NHibernate's Stateless Sessions]]></title>
          <content type="text"><![CDATA[如果只有1K或者更少的對象要處理，無狀態的Session比有狀態的還有慢大概2倍的時間]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="486" date-created="2009-08-21T16:27:04" date-modified="2009-08-21T16:27:04" approved="true" url="http://tunatoksoz.com/post/My-Thoughts-on-ORM-comparisons.aspx">
          <title type="text"><![CDATA[My Thoughts on ORM comparisons]]></title>
        </trackback>
        <trackback id="487" date-created="2009-08-21T16:27:52" date-modified="2009-08-21T16:27:52" approved="true" url="http://devlicio.us/blogs/tuna_toksoz/archive/2009/08/21/my-thoughts-on-orm-comparisons.aspx">
          <title type="text"><![CDATA[My Thoughts on ORM comparisons]]></title>
        </trackback>
        <trackback id="801" date-created="2011-02-22T23:24:18" date-modified="2011-02-22T23:24:18" approved="true" url="http://www.tunatoksoz.com/post/My-Thoughts-on-ORM-comparisons.aspx">
          <title type="text"><![CDATA[My Thoughts on ORM comparisons]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="101" date-created="2008-10-31T22:53:00" date-modified="2008-10-31T22:53:00" approved="true" post-url="/blogs/nhibernate/archive/2008/10/31/entity-name-in-action-entity-abstraction.aspx" type="normal" hasexcerpt="false" views="7239">
      <title type="text"><![CDATA[entity-name in action: Entity Abstraction]]></title>
      <content type="text"><![CDATA[<p><a href="http://fabiomaulo.blogspot.com/2008/10/less-than-few-is-gof.html">Another time</a> I start from :</p>
<p><strong><span style="font-size: 130%; color: #000080; font-family: t">&ldquo;Program to an interface and not to an implementation&rdquo;</span></strong></p>
<p>I want have the same approach, I&rsquo;m using for DAOs, Models, Presenters, Validation, and so on, for my domain.</p>
<p>The domain:</p>
<pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IEntity</span>&lt;TIdentity&gt;: <span style="color: #2b91af">IEquatable</span>&lt;<span style="color: #2b91af">IEntity</span>&lt;TIdentity&gt;&gt;<br />{<br />  TIdentity Id { <span style="color: blue">get</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IAnimal </span>: <span style="color: #2b91af">IEntity</span>&lt;<span style="color: blue">int</span>&gt;<br />{<br />  <span style="color: blue">string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IReptile </span>: <span style="color: #2b91af">IAnimal<br /></span>{<br />  <span style="color: blue">float </span>BodyTemperature { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IHuman </span>: <span style="color: #2b91af">IAnimal<br /></span>{<br />  <span style="color: blue">string </span>Name { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">string </span>NickName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: #2b91af">DateTime </span>Birthdate { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IFamily</span>&lt;T&gt; : <span style="color: #2b91af">IEntity</span>&lt;<span style="color: blue">int</span>&gt; <span style="color: blue">where </span>T : <span style="color: #2b91af">IAnimal<br /></span>{<br />  T Father { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  T Mother { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: #2b91af">ISet</span>&lt;T&gt; Childs { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>Because I&rsquo;m going to work with interfaces I will need a sort of factory to have transient-instances of my entities. For this example I&rsquo;m going to use something simple and more &ldquo;general purpose&rdquo;; a class resolver:</p>
<pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IClassResolver </span>: <span style="color: #2b91af">IDisposable<br /></span>{<br />  T Resolve&lt;T&gt;() <span style="color: blue">where </span>T : <span style="color: blue">class</span>;<br />  T Resolve&lt;T&gt;(<span style="color: blue">string </span>service) <span style="color: blue">where </span>T : <span style="color: blue">class</span>;<br />}</pre>
<p>The responsibility of the <span style="color: #2b91af">IClassResolver</span> implementor is return an instance for a given <span style="color: #2b91af">Type</span> where the <span style="color: #2b91af">Type</span> is an interface (well&hellip; in general is an interface). The concrete implementation of a <span style="color: #2b91af">IClassResolver</span> will be injected using some <a href="http://en.wikipedia.org/wiki/Inversion_of_control">IoC</a> framework but for this post I will use a simple static exposer:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">DI<br /></span>{<br />  <span style="color: blue">private static </span><span style="color: #2b91af">IClassResolver </span>resolver;<br />  <span style="color: blue">private </span>DI() {}<br /><br />  <span style="color: blue">public static </span><span style="color: #2b91af">IClassResolver </span>Resolver<br />  {<br />      <span style="color: blue">get<br />      </span>{<br />          <span style="color: blue">if </span>(resolver == <span style="color: blue">null</span>)<br />          {<br />              <span style="color: blue">throw new </span><span style="color: #2b91af">InvalidOperationException</span>(<span style="color: #a31515">"Resolver was not initialized. Use StackResolver."</span>);<br />          }<br /><br />          <span style="color: blue">return </span>resolver;<br />      }<br />  }<br /><br />  <span style="color: blue">public static void </span>StackResolver(<span style="color: #2b91af">IClassResolver </span>dependencyResolver)<br />  {<br />      resolver = dependencyResolver;<br />  }<br />}</pre>
<p>As you can see nothing so complicated.</p>
<p>Now I have all needed to write a test for my domain:</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>DomainAbstraction()<br />{<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>rf = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rf.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rm = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rm.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rc1 = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rc1.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rc2 = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rc2.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rfamily = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IReptile</span>&gt;&gt;();<br />      rfamily.Father = rf;<br />      rfamily.Mother = rm;<br />      rfamily.Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">IReptile</span>&gt; { rc1, rc2 };<br /><br />      s.Save(rfamily);<br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>hf = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IHuman</span>&gt;();<br />      hf.Description = <span style="color: #a31515">"Flinstone"</span>;<br />      hf.Name = <span style="color: #a31515">"Fred"</span>;<br /><br />      <span style="color: blue">var </span>hm = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IHuman</span>&gt;();<br />      hm.Description = <span style="color: #a31515">"Flinstone"</span>;<br />      hm.Name = <span style="color: #a31515">"Wilma"</span>;<br /><br />      <span style="color: blue">var </span>hc1 = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IHuman</span>&gt;();<br />      hc1.Description = <span style="color: #a31515">"Flinstone"</span>;<br />      hc1.Name = <span style="color: #a31515">"Pebbles"</span>;<br /><br />      <span style="color: blue">var </span>hfamily = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IHuman</span>&gt;&gt;();<br />      hfamily.Father = hf;<br />      hfamily.Mother = hm;<br />      hfamily.Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">IHuman</span>&gt; { hc1 };<br /><br />      s.Save(hfamily);<br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>hf = s.CreateQuery(<span style="color: #a31515">"from HumanFamily"</span>).List&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IHuman</span>&gt;&gt;();<br />    <br />      <span style="color: #2b91af">Assert</span>.That(hf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />      <span style="color: #2b91af">Assert</span>.That(hf[0].Father.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Fred"</span>));<br />      <span style="color: #2b91af">Assert</span>.That(hf[0].Mother.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Wilma"</span>));<br />      <span style="color: #2b91af">Assert</span>.That(hf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br /><br />      <span style="color: blue">var </span>rf = s.CreateQuery(<span style="color: #a31515">"from ReptilesFamily"</span>).List&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IReptile</span>&gt;&gt;();<br /><br />      <span style="color: #2b91af">Assert</span>.That(rf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />      <span style="color: #2b91af">Assert</span>.That(rf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(2));<br /><br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      s.Delete(<span style="color: #a31515">"from HumanFamily"</span>);<br />      s.Delete(<span style="color: #a31515">"from ReptilesFamily"</span>);<br />      tx.Commit();<br />  }<br />}</pre>
<p><strong><span style="color: #004080">Note</span>: s.Save(hfamily)</strong> &lt;&lt;=== there isn&rsquo;t a string for the <em>entity-name</em>; <span style="text-decoration: underline;">now NH are supporting it</span>.</p>
<p>As you can see the users of my domain (the test in this case), are working only using interfaces; there isn&rsquo;t a reference to a concrete implementation of my domain. The concrete implementation of the domain is trivial and you can see it downloading the code. The main thing you will notice, in the implementation, is the <span style="text-decoration: underline;">absence</span> of the <span style="color: #0000ff; font-family: courier new">virtual</span> modifier.</p>
<h3>Wiring&hellip;</h3>
<p>To wire the interface, with its concrete implementation, I want use NHibernate. The mapping is similar to the <a href="http://fabiomaulo.blogspot.com/2008/10/power-of-orm.html">previous</a>:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<br />                 <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Impl</span>"<br />                 <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Impl.Naturalness</span>"<br />                 <span style="color: red">default-access</span><span style="color: blue">=</span>"<span style="color: blue">backfield</span>"<span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyAnimal</span>" <span style="color: red">abstract</span><span style="color: blue">=</span>"<span style="color: blue">true</span>"<br />         <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IAnimal, EntityNameInAction.Abstraction.Entities</span>"<br />         <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>" <span style="color: red">access</span><span style="color: blue">=</span>"<span style="color: blue">field</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">discriminator </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">kind</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyHuman</span>"<br />               <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IHuman, EntityNameInAction.Abstraction.Entities</span>"<br />               <span style="color: red">extends</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<br />               <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">NickName</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Birthdate</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Date</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">subclass</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyReptile</span>"<br />               <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IReptile, EntityNameInAction.Abstraction.Entities</span>"<br />               <span style="color: red">extends</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<br />               <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">BodyTemperature</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">subclass</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IReptile, EntityNameInAction.Abstraction.Entities]]</span>"<br />         <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IReptile, EntityNameInAction.Abstraction.Entities]], EntityNameInAction.Abstraction.Entities</span>"<br />         <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">Families</span>" <span style="color: red">discriminator-value</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>" <span style="color: red">where</span><span style="color: blue">=</span>"<span style="color: blue">familyKind = 'Reptile'</span>"<br />         <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">ReptilesFamily</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>" <span style="color: red">access</span><span style="color: blue">=</span>"<span style="color: blue">field</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">discriminator </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyKind</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IHuman, EntityNameInAction.Abstraction.Entities]]</span>"<br />         <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IHuman, EntityNameInAction.Abstraction.Entities]], EntityNameInAction.Abstraction.Entities</span>"<br />         <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">Families</span>" <span style="color: red">discriminator-value</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>" <span style="color: red">where</span><span style="color: blue">=</span>"<span style="color: blue">familyKind = 'Human'</span>"<br />         <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">HumanFamily</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>" <span style="color: red">access</span><span style="color: blue">=</span>"<span style="color: blue">field</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">discriminator </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyKind</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-mapping</span><span style="color: blue">&gt;</span></pre>
<h4>Mapping highlight</h4>
<ul>
<br />
<li><span style="color: #800000">class</span>/<span style="color: #800000">subclass</span> name: are my concrete classes (implementors of domain) </li>
<li><span style="color: #ff0000">proxy</span> : is the interface (the domain); using it as proxy I can <strong>avoid</strong> <span style="color: #0000ff; font-family: courier new">virtual</span> methods in the implementation because the underlining Dynamic-Proxy will inherit from the interface. Using interface I have many others vantages but is to long explain each (only one for example: I can cast a proxy-instance to an interface) </li>
<li><span style="color: #ff0000">entity-name</span> :&nbsp; is the name I will use for persistence and represent <span style="text-decoration: underline;">another abstraction-level</span>. For persistence stuff I can use a &ldquo;<em>conceptual-name</em>&rdquo; of the entity without take care about its representation in C#. As you can see the entity-name are playing on each association/aggregation/<span style="color: #ff0000">extends</span>; not the concrete class nor the interface. </li>
<li>As in <a href="http://fabiomaulo.blogspot.com/2008/10/power-of-orm.html">this post</a> the domain is represented in two tables. </li>
</ul>
<h4>Class Resolver</h4>
<p>In the implementation of <span style="color: #2b91af; font-family: courier new">IClassResolver</span> I&rsquo;m going to use the NHibernate&rsquo;s mapping to wire the interface of the domain (ex: <span style="color: #2b91af; font-family: courier new">IHuman</span>) to its concrete class (ex: <span style="color: #2b91af; font-family: courier new">MyHuman</span>) trough the entity-name. Is it not clear ? ok perhaps the code will be more clear</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">NhEntityClassResolver </span>: <span style="color: #2b91af">IClassResolver<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">Dictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: blue">string</span>&gt; serviceToEntityName = <span style="color: blue">new </span><span style="color: #2b91af">Dictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: blue">string</span>&gt;();<br />  <span style="color: blue">public </span>NhEntityClassResolver(<span style="color: #2b91af">ISessionFactoryImplementor </span>factory)<br />  {<br />      <span style="color: blue">if</span>(factory == <span style="color: blue">null</span>)<br />      {<br />          <span style="color: blue">throw new </span><span style="color: #2b91af">ArgumentNullException</span>(<span style="color: #a31515">"factory"</span>);<br />      }<br />      Factory = factory;<br />      InitializeTypedPersisters();<br />  }<br /><br />  <span style="color: blue">private void </span>InitializeTypedPersisters()<br />  {<br />      <span style="color: blue">foreach </span>(<span style="color: blue">var </span>entityName <span style="color: blue">in </span>Factory.GetAllClassMetadata().Keys)<br />      {<br />          serviceToEntityName<br />              .Add(Factory.GetEntityPersister(entityName)<br />                  .GetConcreteProxyClass(<span style="color: #2b91af">EntityMode</span>.Poco), entityName);<br />      }<br />  }<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">ISessionFactoryImplementor </span>Factory { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br /><br />  <span style="color: blue">#region </span>Implementation of IDisposable<br /><br />  <span style="color: blue">public void </span>Dispose()<br />  {<br />  }<br /><br />  <span style="color: blue">#endregion<br /><br />  #region </span>Implementation of IClassResolver<br /><br />  <span style="color: blue">public </span>T Resolve&lt;T&gt;() <span style="color: blue">where </span>T : <span style="color: blue">class<br />  </span>{<br />      <span style="color: blue">string </span>entityName;<br />      <span style="color: blue">if</span>(serviceToEntityName.TryGetValue(<span style="color: blue">typeof</span>(T), <span style="color: blue">out </span>entityName))<br />      {<br />          <span style="color: blue">return </span>Resolve&lt;T&gt;(entityName);<br />      }<br />      <span style="color: blue">return null</span>;<br />  }<br /><br />  <span style="color: blue">public </span>T Resolve&lt;T&gt;(<span style="color: blue">string </span>service) <span style="color: blue">where </span>T: <span style="color: blue">class<br />  </span>{<br />      <span style="color: blue">return </span>Factory.GetEntityPersister(service).Instantiate(<span style="color: blue">null</span>, <span style="color: #2b91af">EntityMode</span>.Poco) <span style="color: blue">as </span>T;<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>The <span style="color: #2b91af; font-family: courier new">ISessionFactoryImplementor</span> is one of the interfaces implemented by the NH <a href="/wikis/reference2-0en/architecture.aspx">SessionFactory</a>. The method <span style="font-family: courier new">Resolve&lt;T&gt;(string)</span> are using the parameter <span style="font-family: courier new">service</span> as the entity-name. The hard-work is done by the method <span style="font-family: courier new">InitializeTypedPersisters</span>; what I&rsquo;m doing there is map each interface with its entity-name&hellip; nothing more.</p>
<h3>Conclusions</h3>
<p><strong>&ldquo;Program to an interface and not to an implementation&rdquo;</strong> is really wonderful.</p>
<p><span style="font-size: 130%">Do you really have some doubt about how NHibernate implements &ldquo;Persistence ignorance&rdquo; ?</span></p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/EntityNameInAction.Abstraction">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[entity name in action entity abstraction]]></post-name>
      <categories>
        <category ref="1092" />
        <category ref="1098" />
        <category ref="1104" />
      </categories>
      <comments>
        <comment id="122" date-created="2008-11-20T11:41:56" date-modified="2008-11-20T11:41:56" approved="true" user-name="Graham" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[I'm struggling with doing exactly this problem and, close as this is, it doesn't solve it. The problem is the requirement to use ISET in my domain specific interfaces ... i.e. a link to NHibernate. This breaks the rule of persistance ignorance.

I could use IList and a Bag but I actually don't want to use IList. I want to use (e.g.) IAnimals because IAnimals also exposes some methods specific to dealing with Animal collections.

I have yet to find a way around this. Even creating my own domain collection class that implements IList<T> and IList, that Animals inherits from, throws a "cannot cast PersistentBag" exception.

Any suggestions?]]></content>
        </comment>
        <comment id="123" date-created="2008-11-20T12:32:09" date-modified="2008-11-20T12:32:09" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[ISet don't is a requirement; It is an extension of the .NET FW.  In .NET3.5 there is a new implementation but, without an interface. BTW you can use any kind of implementation if you domain can expose ICollection.
About "IAnimals" you can implements your own IUserCollectionType; this is required if you want use lazy-loading and extra-lazy-loading. If you don't want do it you can map the collection with a field accessor and expose what you want in your entity.]]></content>
        </comment>
        <comment id="124" date-created="2008-11-20T12:50:13" date-modified="2008-11-20T12:50:13" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[Ah... another little thing... the use of ISet don't require a reference to NHibernate assembly but a reference to Iesi.Collections.]]></content>
        </comment>
        <comment id="125" date-created="2008-11-20T14:17:47" date-modified="2008-11-20T14:17:47" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[Thanks for the reply Fabio. I am really stuck on this,  as IList extends ICollection so by default IAnimal, which implements IList also implements ICollection... unless I misunderstand something fundamental. Regardess, even if I added ICollection to IAnimal (e.g. IAnimal : IList<T>, IList, ICollection it still didn't work.

If you say it does (and I am using .NET 3.5) then at least I know I'm making a mistake somewhere, but an update to your example doing something like that (i.e. pure OO with Interfaces... no dependency on ISet or IUserCollectionType, and using something like IAnimals instead of IList or IList<T>) would help me a lot :)

In my example, IAnimals is implemented by a specialised domain class that wraps an internal List<T> by the way. This class implements all IList, IList<T>, ICollection, IAnimals interfaces... something that I don't think is too crazy? :)

As regards Iesi.Collections and IUserCollectionType... I take your point but they are still part of the NHibernate API .. hence a dependency on the NHibernate product and, a far I consider it, breaks Persistence Ignorance]]></content>
        </comment>
        <comment id="126" date-created="2008-11-20T15:29:47" date-modified="2008-11-20T15:29:47" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[I hope that your doctor don't said you to use ISet. The Iesi.Collection.Set is a specialized collection and an implementation of something similar is available in .NET3.5 unfortunately without an appropriate interface. The use of ISet don't mean to have a reference to NH. You can create the same example of this post using IList<T> or ICollection<T> or IEnumerable<T>.

About IAnimals... do you can send me, in a private mail, two Collections interface needed by your domain ?
I know various BO FW and I don't saw specialized collection for each collection used in the domain.

About IUserCollectionType... probably you don't know what it is, because use it don't mean that you will have a reference to NH in your domain.]]></content>
        </comment>
        <comment id="127" date-created="2008-11-21T19:03:33" date-modified="2008-11-21T19:03:33" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[Thanks Fabio, started a private conversation thread.]]></content>
        </comment>
        <comment id="495" date-created="2009-08-28T10:48:10" date-modified="2009-08-28T10:48:10" approved="true" user-name="Konstantin" user-url="http://nhforge.org/members/wetlook/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[Hello, Fabio! Entity-Name with Poco is the cool stuff. Can i use this feature to map one class to the several tables in one hbm.xml?
Like this:
<class entity-name="ObjectType.TableRecordClass1" name="TableRecordClass" table="DirectoriesSection1">
<id name="Id">
<column name="Id" sql-type="bigint" not-null="true" />
<generator class="native"></generator>
</id>
<property name="Name">
<column name="Name" length="50" not-null="true" />
</property>
<property name="Type" />
<property name="ParentId" />	
</class>

<class entity-name="ObjectClass.TableRecordClass1" name="TableRecordClass" table="DocumentsSection1">
<id name="Id">
<column name="Id" sql-type="bigint" not-null="true" />
<generator class="native"></generator>
</id>
<property name="Name">
<column name="Name" length="50" not-null="true" />
</property>
<property name="Type" />
<property name="ParentId" />	
</class>

<class entity-name="ObjectClass.TableRecordClass2" name="TableRecordClass" table="DocumentsSection2">
<id name="Id">
<column name="Id" sql-type="bigint" not-null="true" />
<generator class="native"></generator>
</id>
<property name="Name">
<column name="Name" length="50" not-null="true" />
</property>
<property name="Type" />
<property name="ParentId" />	
</class>]]></content>
        </comment>
        <comment id="496" date-created="2009-08-28T21:40:37" date-modified="2009-08-28T21:40:37" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: entity-name in action: Entity Abstraction]]></title>
          <content type="text"><![CDATA[No.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1051" date-created="2014-09-14T18:20:56" date-modified="2014-09-14T18:20:56" approved="true" url="http://68.142.134.46/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fthe-sims-freeplay-cheats%2F%3Ehttp%3A%2F%2Fwww.socialcheats.com%2Fthe-sims-freeplay-cheats%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[The Sims Freeplay Cheats]]></title>
        </trackback>
        <trackback id="1052" date-created="2014-09-14T21:49:20" date-modified="2014-09-14T21:49:20" approved="true" url="http://203.72.177.8/images/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Ffree-netflix-account%2F%3Efree+free+netflix+account%3C%2Fa%3E">
          <title type="text"><![CDATA[free netflix accounts]]></title>
        </trackback>
        <trackback id="1054" date-created="2014-09-14T23:51:17" date-modified="2014-09-14T23:51:17" approved="true" url="http://www.autoboerse1.de/phpinfo?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fboom-beach-hack%2F%3Eboom+beach+hack%3C%2Fa%3E">
          <title type="text"><![CDATA[online boom beach hack]]></title>
        </trackback>
        <trackback id="1061" date-created="2014-09-15T16:18:37" date-modified="2014-09-15T16:18:37" approved="true" url="http://wyckoff198.com/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fminion-rush-cheats%2F%3Eminion+rush+Cheats%3C%2Fa%3E">
          <title type="text"><![CDATA[best site]]></title>
        </trackback>
        <trackback id="1093" date-created="2014-09-25T18:04:30" date-modified="2014-09-25T18:04:30" approved="false" url="http://svitlytsia.crimea.ua/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.kochlear.unas.cz%2Fphp-info.php%3Fa%255B%255D%3D%253Ca%2Bhref%253Dhttp%253A%252F%252Fwww.ltlurl.com%252Fdota2cheats515261%253Ehttp%253A%252F%252Fextremflug.de%252Ftest.php%253Fa%25255B%25255D%253D%25253Ca%252Bhref%25253Dhttp%25253A%25252F%25252Fwww.socialcheats.com%25252Fdota-2-cheats%25252F%25253Eworking%252Bdota%252B2%252Bhack%25253C%25252Fa%25253E%253C%252Fa%253E%3Edota+2+cheats%3C%2Fa%3E">
          <title type="text"><![CDATA[http://svitlytsia.crimea.ua/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.kochlear.unas.cz%2Fphp-info.php%3Fa%255B%255D%3D%253Ca%2Bhref%253Dhttp%253A%252F%252Fwww.ltlurl.com%252Fdota2cheats515261%253Ehttp%253A%252F%252Fextremflug.de%252Ftest.php%253Fa%2]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="102" date-created="2008-11-08T20:10:00" date-modified="2008-11-08T20:10:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/08/nhibernate-burrow-1-0-0-ga-is-released.aspx" type="normal" hasexcerpt="false" views="1347">
      <title type="text"><![CDATA[NHibernate.Burrow 1.0.0 GA is released!]]></title>
      <content type="text"><![CDATA[<p>NHibernate.Burrow is a light weight middleware developed to support
.Net applications using NHibernate (maybe also referred as NH in this
article) as ORM framework by providing advanced and smart
session/transaction management and other facilitates. Documentation and
examples are available at NHForge.net. Any feedback or issue can be
sent to NHibernate user group(<a href="http://groups.google.com/group/nhusers" target="_new">http://groups.google.com/group/nhusers</a>)
or jira.nhibernate.org and will be greatly appreciated. 1.0.0 GA
consists of no major bug fixes from 1.0.0 CR2. However it introduced a
breaking naming change in the configuration file - the section
&lt;persistantUnits&gt; is now renamed to &lt;persistenceUnits&gt;.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate burrow 1 0 0 ga is released]]></post-name>
      <categories>
        <category ref="1113" />
      </categories>
      <authors>
        <author id="2123" date-created="2008-08-30T15:08:45" date-modified="2010-01-04T23:29:30" approved="true" email="kailuo.wang@gmail.com">
          <title type="text"><![CDATA[kailuowang]]></title>
        </author>
      </authors>
    </post>
    <post id="103" date-created="2008-11-09T15:04:00" date-modified="2008-11-09T15:04:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx" type="normal" hasexcerpt="false" views="84125">
      <title type="text"><![CDATA[NH2.1.0: Bytecode providers]]></title>
      <content type="text"><![CDATA[<p>This post is an update of <a href="/blogs/nhibernate/archive/2008/10/11/nh2-1-0-reference-to-castle-removed.aspx">&ldquo;Reference to Castle removed&rdquo;</a>.</p>
<p>In the trunk we had removed all dependency from any kind of &ldquo;Proxy framework&rdquo; trough various implementations of <span style="color: #2b91af">IProxyFactoryFactory</span>.</p>
<p><span style="text-decoration: underline;">There is not a specific default Proxy-framework</span> and now the set of <span style="color: #0000ff"><strong>proxyfactory.factory_class</strong></span> property, of the <span style="color: #800000">session-factory</span> configuration section, is mandatory (as the property <span style="color: #0000ff"><strong>dialect</strong></span>).</p>
<p>So far, two implementations of <span style="color: #2b91af">IProxyFactoryFactory</span> are available :</p>
<ol>
<li>NHibernate.ByteCode.<strong>LinFu</strong>.ProxyFactoryFactory </li>
<li>NHibernate.ByteCode.<strong>Castle</strong>.ProxyFactoryFactory </li>
</ol>
<p>Soon, we hope to have the availability of NHibernate.ByteCode.<strong>Spring</strong>.ProxyFactoryFactory.</p>
<p>For NHibernate testing purpose we are using <strong>LinFu </strong>without a special reason even if I have the impression that LinFu give us a very little performance improvement. For who are using NHibernate without an IoC framework LinFu.DynamicProxy is more than enough.</p>
<p>For who are working with <strong>Castle.ActiveRecord</strong> and/or <strong>Castle.Windsor</strong>, obviously, the best choice is Castle.DynamicProxy2 (mean NHibernate.ByteCode.Castle.ProxyFactoryFactory).</p>
<p>A minimal <span style="color: #800000">session-factory</span> configuration, to work with NH using MsSQL and LinFu, should look like this one:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 200px; border: gray 1px solid; padding: 4px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-configuration</span>  <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-configuration-2.2"</span> <span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">session-factory</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="YourAppName"</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.driver_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dialect"</span><span style="color: #0000ff">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.connection_string"</span><span style="color: #0000ff">&gt;</span>
            Server=(local);initial catalog=nhibernate;Integrated Security=SSPI
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="proxyfactory.factory_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.ByteCode.LinFu.ProxyFactoryFactory, NHibernate.ByteCode.LinFu<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-configuration</span><span style="color: #0000ff">&gt;</span></pre>
</div>
<p>In this case you must confirm that your deployment folder contains : <strong>NHibernate.ByteCode.LinFu.dll</strong></p>
<p>&nbsp;</p>
<p>The same configuration for who want use Castle should look like this one:</p>
<div style="font-size: 8pt; margin: 20px 0px 10px; overflow: auto; width: 97.5%; cursor: text; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; max-height: 200px; border: gray 1px solid; padding: 4px;">
<pre style="font-size: 8pt; margin: 0em; overflow: visible; width: 100%; color: black; line-height: 12pt; font-family: consolas, 'Courier New', courier, monospace; background-color: #f4f4f4; border-style: none; padding: 0px;"><span style="color: #0000ff">&lt;</span><span style="color: #800000">hibernate-configuration</span>  <span style="color: #ff0000">xmlns</span><span style="color: #0000ff">="urn:nhibernate-configuration-2.2"</span> <span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">session-factory</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="YourAppName"</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.driver_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="dialect"</span><span style="color: #0000ff">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="connection.connection_string"</span><span style="color: #0000ff">&gt;</span>
            Server=(local);initial catalog=nhibernate;Integrated Security=SSPI
        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span><span style="color: #0000ff">="proxyfactory.factory_class"</span><span style="color: #0000ff">&gt;</span>NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle<span style="color: #0000ff">&lt;/</span><span style="color: #800000">property</span><span style="color: #0000ff">&gt;</span>
    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">session-factory</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">hibernate-configuration</span><span style="color: #0000ff">&gt;</span></pre>
</div>
<p>In this case you must confirm that your deployment folder contains : <strong>NHibernate.ByteCode.Castle.dll</strong></p>
<p>&nbsp;</p>
<p><strong>LinFu info</strong> available <a href="http://www.codeproject.com/info/search.aspx?artkw=LinFu&amp;sbo=kw">here</a> and code <a href="http://code.google.com/p/linfu/">here</a>.</p>
<p>&nbsp;</p>
<h3>Enjoy NHibernate injectability.</h3>
<p>P.S. Let me say that something strange happened in my heart when I had remove the last reference to Castle in NH-Core and NH-Tests.</p>]]></content>
      <post-name type="text"><![CDATA[nh2 1 0 bytecode providers]]></post-name>
      <categories>
        <category ref="1025" />
        <category ref="1092" />
      </categories>
      <comments>
        <comment id="105" date-created="2008-11-10T10:13:19" date-modified="2008-11-10T10:13:19" approved="true" user-name="Tommaso Caldarola" user-url="http://nhforge.org/members/Tommaso-Caldarola/default.aspx">
          <title type="text"><![CDATA[re: NH2.1.0: Bytecode providers]]></title>
          <content type="text"><![CDATA[Wow, great feature.]]></content>
        </comment>
        <comment id="226" date-created="2009-04-01T20:47:50" date-modified="2009-04-01T20:47:50" approved="true" user-name="jnoody" user-url="http://">
          <title type="text"><![CDATA[re: NH2.1.0: Bytecode providers]]></title>
          <content type="text"><![CDATA[Would you mind elaborating as to why one would want to change the underlying proxy implementation?  I'm not suggesting that it's not nice or even necessary. I am simply trying to understand of what benefit this is?  It was suggested in the dev google group that an example could be seen in NHibernate.ByteCode.Castle.Tests, but I still don't understand.  Thanks. ]]></content>
        </comment>
        <comment id="227" date-created="2009-04-01T21:02:14" date-modified="2009-04-01T21:02:14" approved="true" user-name="Fabio Maulo" user-url="http://fabiomaulo.blogspot.com/">
          <title type="text"><![CDATA[re: NH2.1.0: Bytecode providers]]></title>
          <content type="text"><![CDATA[@jnoody
For us the benefit is remove a strong reference to a specific implementation of DynamicProxy, this is, may be, the only one benefit so far (note "so far").
Who use Castle as IoC, as a lot of NH users, have another benefit (Castle and NH now don't have a circular reference).
There are others benefit but to large to explain, if you want you can start a thread in the nh-user group.]]></content>
        </comment>
        <comment id="228" date-created="2009-04-01T21:24:51" date-modified="2009-04-01T21:24:51" approved="true" user-name="jnoody" user-url="http://">
          <title type="text"><![CDATA[re: NH2.1.0: Bytecode providers]]></title>
          <content type="text"><![CDATA[Thanks Fabio.  Here's my post: http://groups.google.com/group/nhusers/browse_thread/thread/2f78857456bde8d6]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="143" date-created="2008-12-04T17:04:29" date-modified="2008-12-04T17:04:29" approved="true" url="http://www.itcommunity.ru/blogs/mind-injection/archive/2008/11/09/40399.aspx">
          <title type="text"><![CDATA[Байт-код провайдеры в NHibernate 2.1]]></title>
        </trackback>
        <trackback id="145" date-created="2008-12-12T12:01:45" date-modified="2008-12-12T12:01:45" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2008/12/12/entities-behavior-injection.aspx">
          <title type="text"><![CDATA[Entities behavior injection]]></title>
        </trackback>
        <trackback id="146" date-created="2008-12-15T21:24:20" date-modified="2008-12-15T21:24:20" approved="true" url="http://dotnet.org.za/adriaan/archive/2008/12/15/how-to-get-to-use-linq-to-nhibernate.aspx">
          <title type="text"><![CDATA[How to get to use Linq to NHibernate]]></title>
        </trackback>
        <trackback id="186" date-created="2009-03-03T21:09:44" date-modified="2009-03-03T21:09:44" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/03/03/nhibernate-with-spring-net.aspx">
          <title type="text"><![CDATA[NHibernate with Spring.NET]]></title>
        </trackback>
        <trackback id="196" date-created="2009-03-15T13:32:50" date-modified="2009-03-15T13:32:50" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/03/15/nhibernate-2-1-0-on-the-road.aspx">
          <title type="text"><![CDATA[NHibernate 2.1.0 on the road]]></title>
        </trackback>
        <trackback id="384" date-created="2009-06-24T05:31:31" date-modified="2009-06-24T05:31:31" approved="true" url="http://patrickgannon-net.access.secure-ssl-servers.biz/archive/2009/06/23/getting-activerecord-and-nhibernate-working-in-medium-trust.aspx">
          <title type="text"><![CDATA[Getting ActiveRecord and NHibernate Working in Medium Trust]]></title>
        </trackback>
        <trackback id="417" date-created="2009-07-20T06:50:08" date-modified="2009-07-20T06:50:08" approved="true" url="http://blogs.ugidotnet.org/Alby/archive/2009/07/20/rilasciato-nhibernate-2.1.0.aspx">
          <title type="text"><![CDATA[Rilasciato NHibernate 2.1.0]]></title>
        </trackback>
        <trackback id="431" date-created="2009-07-20T23:44:30" date-modified="2009-07-20T23:44:30" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
        <trackback id="485" date-created="2009-08-20T21:29:08" date-modified="2009-08-20T21:29:08" approved="true" url="http://weblogs.asp.net/bleroy/archive/2009/08/20/a-total-n00b-s-guide-to-migrating-from-a-custom-data-layer-to-nhibernate-so-many-choices.aspx">
          <title type="text"><![CDATA[A total n00b’s guide to migrating from a custom data layer to Nhibernate: so many choices]]></title>
        </trackback>
        <trackback id="518" date-created="2009-09-24T18:05:09" date-modified="2009-09-24T18:05:09" approved="true" url="http://www.cnblogs.com/UpThinking/archive/2009/09/25/1573703.html">
          <title type="text"><![CDATA[我的NHibernate曲折之行]]></title>
        </trackback>
        <trackback id="538" date-created="2009-11-06T07:02:08" date-modified="2009-11-06T07:02:08" approved="true" url="http://www.cnblogs.com/jams742003/archive/2009/11/06/1597446.html">
          <title type="text"><![CDATA[NHibernate初探（一）]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="110" date-created="2008-11-14T22:45:00" date-modified="2008-11-14T22:45:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/14/nhibernate-burrow-1-0-1-ga-is-released.aspx" type="normal" hasexcerpt="false" views="1896">
      <title type="text"><![CDATA[NHibernate.Burrow 1.0.1 GA is released!   ]]></title>
      <content type="text"><![CDATA[<p>NHibernate.Burrow is a light weight middleware developed to support .Net applications using NHibernate (maybe also referred as NH in this article) as ORM framework by providing advanced and smart session/transaction management and other facilitates. <br />This release is mainly about updating to NHiberante 2.0.1 GA.<br />Documentation and examples are available at NHForge.net. <br />Any feedback can be sent to NHibernate user group(http://groups.google.com/group/nhusers). Issues can be submitted to http://jira.nhibernate.org/. They will be greatly appreciated. Please go to http://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=272688 to download</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate burrow 1 0 1 ga is released]]></post-name>
      <categories>
        <category ref="1114" />
      </categories>
      <authors>
        <author id="2123" date-created="2008-08-30T15:08:45" date-modified="2010-01-04T23:29:30" approved="true" email="kailuo.wang@gmail.com">
          <title type="text"><![CDATA[kailuowang]]></title>
        </author>
      </authors>
    </post>
    <post id="113" date-created="2008-11-17T00:13:00" date-modified="2008-11-17T00:13:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/16/mapping-source-how-map-a-class-without-use-nothing.aspx" type="normal" hasexcerpt="false" views="7904">
      <title type="text"><![CDATA[Mapping Source: How map a class without use nothing]]></title>
      <content type="text"><![CDATA[<p>I don&rsquo;t know how many times you heard a mad man talking about &ldquo;mapping source&rdquo; in NHibernate&hellip;</p>
<p><strong>Map a class in NH without use XML at all ? </strong>only a crazy man can say that [;)].</p>
<p>As usual an entity implementation:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Animal<br /></span>{<br />   <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br />   <span style="color: blue">public virtual string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>Is a simple class because map something else, and <span style="text-decoration: underline;">begin a new framework, is <strong>not</strong> the target of this post</span>.</p>
<p>Now an empty method, to write an integration test, of a new class inherited from the NHibernate configuration class:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Configuration </span>: NHibernate.Cfg.<span style="color: #2b91af">Configuration<br /></span>{<br />   <span style="color: blue">public void </span>Register(<span style="color: #2b91af">Type </span>entity){}<br />}</pre>
<p>The integration test, basically, include the SchemaExport, a CRUD and an HQL; what is interesting here is only the setup of the test:</p>
<pre class="code"><span style="color: blue">protected </span><span style="color: #2b91af">Configuration </span>cfg;<br /><span style="color: blue">protected </span><span style="color: #2b91af">ISessionFactoryImplementor </span>sessions;<br /><br />[<span style="color: #2b91af">TestFixtureSetUp</span>]<br /><span style="color: blue">public void </span>TestFixtureSetUp()<br />{<br />   cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();<br />   cfg.Configure();<br />   cfg.Register(<span style="color: blue">typeof</span>(<span style="color: #2b91af">Animal</span>));<br />   <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(cfg).Create(<span style="color: blue">false</span>, <span style="color: blue">true</span>);<br />   sessions = (<span style="color: #2b91af">ISessionFactoryImplementor</span>)cfg.BuildSessionFactory();<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>As you can see is similar to a common setup except for cfg.Register(<span style="color: blue">typeof</span>(<span style="color: #2b91af">Animal</span>)). The others parts of the test are available from the download link.</p>
<p>Now I can start the dance&hellip;</p>
<p>In NHibernate all classes metadata are completely decoupled from XML; this mean that <span style="color: #2b91af">SchemaExport</span>, and everything else in NH, absolutely don&rsquo;t need XML files to be used. What I must do is inject everything after call the method cfg.Configure(). The place where all metadata are available is the namespace NHibernate.Mapping. The holder of metadata is the class <span style="color: #2b91af">Configuration</span> trough the class NHibernate.Cfg.<span style="color: #2b91af">Mappings</span>. The provider of an instance of NHibernate.Cfg.<span style="color: #2b91af">Mappings</span> is the <span style="color: #2b91af">Configuration</span> itself trough the method:</p>
<pre class="code"><span style="color: gray">/// &lt;summary&gt;<br />/// </span><span style="color: green">Create a new </span><span style="color: gray">&lt;see cref="Mappings" /&gt; </span><span style="color: green">to add classes and collection<br /></span><span style="color: gray">/// </span><span style="color: green">mappings to.<br /></span><span style="color: gray">/// &lt;/summary&gt;<br /></span><span style="color: blue">public </span><span style="color: #2b91af">Mappings </span>CreateMappings(Dialect.<span style="color: #2b91af">Dialect </span>dialect)</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>That method stay there from loooong time ago.</p>
<p>As we are doing in NH-Core each &ldquo;<em>binder</em>&rdquo; must use at least two classes (to create new metadata):</p>
<ol>
<li>an instance of NHibernate.Cfg.<span style="color: #2b91af">Mappings</span> </li>
<li>the instance of the configured <span style="color: #2b91af">Dialect</span> </li>
</ol>
<h4>The configuration extension</h4>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Configuration </span>: NHibernate.Cfg.<span style="color: #2b91af">Configuration<br /></span>{<br />   <span style="color: blue">public void </span>Register(<span style="color: #2b91af">Type </span>entity)<br />   {<br />       <span style="color: #2b91af">Dialect </span>dialect = <span style="color: #2b91af">Dialect</span>.GetDialect(Properties);<br />       <span style="color: #2b91af">Mappings </span>mappings = CreateMappings(dialect);<br />       SetDefaultMappingsProperties(mappings);<br />       <span style="color: blue">new </span><span style="color: #2b91af">EntityMapper</span>(mappings, dialect).Bind(entity);<br />   }<br /><br />   <span style="color: blue">private static void </span>SetDefaultMappingsProperties(<span style="color: #2b91af">Mappings </span>mappings)<br />   {<br />       mappings.SchemaName = <span style="color: blue">null</span>;<br />       mappings.DefaultCascade = <span style="color: #a31515">"none"</span>;<br />       mappings.DefaultAccess = <span style="color: #a31515">"property"</span>;<br />       mappings.DefaultLazy = <span style="color: blue">true</span>;<br />       mappings.IsAutoImport = <span style="color: blue">true</span>;<br />       mappings.DefaultNamespace = <span style="color: blue">null</span>;<br />       mappings.DefaultAssembly = <span style="color: blue">null</span>;<br />   }<br />}</pre>
<p>For each class, I&rsquo;m going to register, I&rsquo;m getting the configured dialect and a new instance of <span style="color: #2b91af">Mappings</span> class. Then I&rsquo;m setting some default values and at the end I&rsquo;m biding the entity type (<span style="color: #2b91af">EntityMapper</span>(mappings, dialect).Bind(entity)).</p>
<h4>The EntityMapper</h4>
<p>Without boring you, with the full code, the heart is here</p>
<pre class="code"><span style="color: blue">public void </span>Bind(<span style="color: #2b91af">Type </span>entity)<br />{<br />   <span style="color: blue">var </span>rootClass = <span style="color: blue">new </span><span style="color: #2b91af">RootClass</span>();<br />   BindClass(entity, rootClass);<br />}<br /><br /><span style="color: blue">private void </span>BindClass(<span style="color: #2b91af">Type </span>entity, <span style="color: #2b91af">PersistentClass </span>pclass)<br />{<br />   pclass.IsLazy = <span style="color: blue">true</span>;<br />   pclass.EntityName = entity.FullName;<br />   pclass.ClassName = entity.AssemblyQualifiedName;<br />   pclass.ProxyInterfaceName = entity.AssemblyQualifiedName;<br />   <span style="color: blue">string </span>tableName = GetClassTableName(pclass);<br />   <span style="color: #2b91af">Table </span>table = mappings.AddTable(<span style="color: blue">null</span>, <span style="color: blue">null</span>, tableName, <span style="color: blue">null</span>, pclass.IsAbstract.GetValueOrDefault());<br />   ((<span style="color: #2b91af">ITableOwner</span>) pclass).Table = table;<br />   pclass.IsMutable = <span style="color: blue">true</span>;<br />   <span style="color: #2b91af">PropertyInfo</span>[] propInfos = entity.GetProperties();<br /><br />   <span style="color: #2b91af">PropertyInfo </span>toExclude = <span style="color: blue">new </span><span style="color: #2b91af">IdBinder</span>(<span style="color: blue">this</span>, propInfos).Bind(pclass, table);<br /><br />   pclass.CreatePrimaryKey(dialect);<br />   BindProperties(pclass, propInfos.Where(x =&gt; x != toExclude));<br />   mappings.AddClass(pclass);<br /><br />   <span style="color: blue">string </span>qualifiedName = pclass.MappedClass == <span style="color: blue">null </span>? pclass.EntityName : pclass.MappedClass.AssemblyQualifiedName;<br />   mappings.AddImport(qualifiedName, pclass.EntityName);<br />   <span style="color: blue">if </span>(mappings.IsAutoImport &amp;&amp; pclass.EntityName.IndexOf(<span style="color: #a31515">'.'</span>) &gt; 0)<br />   {<br />       mappings.AddImport(qualifiedName, <span style="color: #2b91af">StringHelper</span>.Unqualify(pclass.EntityName));<br />   }<br />}</pre>
<p>Including everything the <em>EntityMapper.cs</em> have 198 lines.</p>
<p>Metadata classes used are: <span style="color: #2b91af">RootClass</span>, <span style="color: #2b91af">PersistentClass</span>, <span style="color: #2b91af">Table</span>, <span style="color: #2b91af">SimpleValue</span>, <span style="color: #2b91af">Property</span> and <span style="color: #2b91af">Column</span>.</p>
<h4>Conclusions</h4>
<p>To use NHibernate without write a single XML mapping, <strong>is possible</strong>. Create mapped classes or others artifacts (as typedef, database-objects, named-queries, stored-procedures, filters and so on) without use XML, <strong>is possible</strong>. Because I&rsquo;m extending the NHibernate.Cfg.<span style="color: #2b91af">Configuration</span>, add some other artifacts or override mapping written using XML <strong>is possible</strong>. Write a &ldquo;bridge&rdquo; using EntityFramework attributes instead XMLs, <strong>is possible</strong>.</p>
<p>Write a new framework <strong>avoiding</strong> <strong>XML</strong> at all, <strong>is possible <span style="text-decoration: underline;">that is completely different than &ldquo;is easy&rdquo;</span></strong>. In general a framework is to make something easy to the framework users and not to the framework developers; no?</p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/MappingSource/MappingSource">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[mapping source how map a class without use nothing]]></post-name>
      <categories>
        <category ref="1030" />
        <category ref="1050" />
        <category ref="1089" />
        <category ref="1115" />
      </categories>
      <comments>
        <comment id="114" date-created="2008-11-17T11:19:30" date-modified="2008-11-17T11:19:30" approved="true" user-name="HielkeHoeve" user-url="http://nhforge.org/members/HielkeHoeve/default.aspx">
          <title type="text"><![CDATA[re: Mapping Source: How map a class without use nothing]]></title>
          <content type="text"><![CDATA[It's also possible to use NHibernate Attributes and then use the Configuration and SchemaExport class to map your classes to an sql file. You'll never have to deal with xml files again!!! :D]]></content>
        </comment>
        <comment id="115" date-created="2008-11-17T11:50:13" date-modified="2008-11-17T11:50:13" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Mapping Source: How map a class without use nothing]]></title>
          <content type="text"><![CDATA[NHMA is good but a little bit invasive as any other FW based on attributes. NHMA is based on XML generation.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="131" date-created="2008-11-22T21:55:00" date-modified="2008-11-22T21:55:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/22/nhibernate-schemavalidator.aspx" type="normal" hasexcerpt="false" views="5375">
      <title type="text"><![CDATA[NHibernate SchemaValidator]]></title>
      <content type="text"><![CDATA[<p>This post was originally posted <a href="http://tunatoksoz.com/post/NHibernate-SchemaValidator.aspx">here</a></p>
<p><span style="font-size: small;">NHibernate provides <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/04/28/create-and-update-database-schema.aspx" target="_blank">a number of tools</a>
for developers to manage their database. I prefer mapping driven
approach in which I let NHibernate generate the schema for database for
me. By that way, I only concentrate on my domain. For me, database is
not the center but only a tool for storage most of the cases.</span></p>
<p><span style="font-size: small;">This
approach is valid only for greenfield projects. If you&rsquo;re using a
legacy database, however, things get more complicated and you write
your mappings according to your database. </span></p>
<p><span style="font-size: small;">NHibernate
now(with revision 3918, which means you have to use trunk until we
release it) provides a way to verify your mappings against your
database.</span></p>
<p><span style="font-size: small;">The usage is similar to <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/04/28/create-and-update-database-schema.aspx" target="_blank">other tools</a></span></p>
<p><span style="font-size: small;">I won&rsquo;t write a dedicated code for this but rather I am going to copy the tests from the code itself. </span></p>
<p><img src="/cfs-file.ashx/__key/CommunityServer.Components.UserFiles/00.00.00.21.06/schemavalidator_5F00_test.jpg" /></p>
<p>&nbsp;</p>
<p>SchemaValidator has a single method called <b>Validate</b>. You give it the configuration and it validates the schema.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate schemavalidator]]></post-name>
      <attachments>
        <attachment url="schemavalidator_test.jpg" size="46043" mime-type="image/jpeg" embedded="true"></attachment>
      </attachments>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="132" date-created="2008-11-22T22:04:00" date-modified="2008-11-22T22:04:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/23/nhibernate-hbm2ddl.aspx" type="normal" hasexcerpt="false" views="12173">
      <title type="text"><![CDATA[NHibernate hbm2ddl]]></title>
      <content type="text"><![CDATA[<p>NHibernate has a number of configuration options: Enabling statistics, Caching etc. You can check more from <a href="http://nhibernate.svn.sourceforge.net/viewvc/nhibernate/trunk/nhibernate/src/NHibernate/Cfg/Settings.cs?revision=3870&amp;view=markup" target="_blank">here</a></p>
<p>I will now talk about an unknown feature(well, at least I didn&rsquo;t know until I implement SchemaValidator): <b>hbm2ddl.auto</b></p>
<p>Hbm2ddl.auto
is declarative way to use SchemaExport / SchemaUpdate / SchemaValidator
(well the latter sounds odd, maybe it would be better to call it
SchemaValidate, what do you think?). If you add </p>
<p>&lt;property name="<b>hbm2ddl.auto</b>"&gt;create&lt;/property&gt;</p>
<p>for example, it will run</p>
<p><b>new SchemaExport(cfg).Create(false, true);</b></p>
<p>during SessionFactory initialization, with which you probably are familiar.</p>
<p>There are several options for hbm2ddl.auto.</p>
<ol>
<li><b>update</b> executes <b>SchemaUpdate</b> which will modify your existing table with new mapping, without dropping any columns.</li>
<li><b>create-drop </b>executes SchemaExport when SessionFactory initializes and drops the schema at the end of the life of the factory.</li>
<li><b>validate</b> executes SchemaValidator which I blogged about <a href="http://www.tunatoksoz.com/post/NHibernate-SchemaValidator.aspx" target="_blank">here</a></li>
</ol>
<p> If you prefer not to use programatic way, configuration is just here. </p>]]></content>
      <post-name type="text"><![CDATA[nhibernate hbm2ddl]]></post-name>
      <comments>
        <comment id="198" date-created="2009-03-15T20:40:39" date-modified="2009-03-15T20:40:39" approved="true" user-name="sushanty2k5" user-url="http://nhforge.org/members/sushanty2k5/default.aspx">
          <title type="text"><![CDATA[re: NHibernate hbm2ddl]]></title>
          <content type="text"><![CDATA[I'm using Fluent NH for mapping and NH as ORM in my C# application.. The problem is with schemaupdate class.. if I create an instance of that.. using the configuration I got from my exposeconfiguration function.. It doesnot update the schema.. I need some better documentation on SchemaUpdate class.. or might be.. setting the configuration to accomodate the new schema in an old database.. for versioning purposes.. 
I have tried a lot of variations but no DDL command is reflected on the actual database using SchemaUpdate :(
is this my problem:
http://code.google.com/p/fluent-nhibernate/issues/detail?id=55
?]]></content>
        </comment>
        <comment id="199" date-created="2009-03-15T20:52:43" date-modified="2009-03-15T20:52:43" approved="true" user-name="Tuna Toksoz" user-url="http://devlicio.us/blogs/tuna_toksoz">
          <title type="text"><![CDATA[re: NHibernate hbm2ddl]]></title>
          <content type="text"><![CDATA[Hello sushanty2k5
Can you please raise the issue at

fluent-nhibernate[AT HERE]googlegroups.com

I believe this has been implemented in FNH but not sure. ]]></content>
        </comment>
        <comment id="203" date-created="2009-03-16T07:24:28" date-modified="2009-03-16T07:24:28" approved="true" user-name="sushanty2k5" user-url="http://nhforge.org/members/sushanty2k5/default.aspx">
          <title type="text"><![CDATA[re: NHibernate hbm2ddl]]></title>
          <content type="text"><![CDATA[I already have done that.. I just wanted to know how it works.. as in.. If I expose the configuration from :
  private static ISessionFactory CreateSessionFactory()  
        {
             return Fluently.Configure()
                .Database(SQLiteConfiguration.Standard
                    .UsingFile(basefile))
                .Mappings(m =>                    m.FluentMappings.AddFromAssemblyOf<Program>())
                .ExposeConfiguration(BuildSchema)
                .BuildSessionFactory();
        }

and use it here :
private static void BuildSchema(NHibernate.Cfg.Configuration cfg)
        {
            config = cfg;          
        }
private static void update_the_schema()
     {
       new SchemaUpdate(config).Execute(true, true);         
     }     
//Here config is that static configuration variable obtained from ExposeConfiguration method...   ]]></content>
        </comment>
        <comment id="520" date-created="2009-10-02T18:28:35" date-modified="2009-10-02T18:28:35" approved="true" user-name="HappyNomad" user-url="http://happynomad121.blogspot.com/">
          <title type="text"><![CDATA[re: NHibernate hbm2ddl]]></title>
          <content type="text"><![CDATA[In my tests, the "create-drop" option doesn't reliably drop the tables...

Also, does NH support an import.sql file as described here?
http://www.jroller.com/eyallupu/entry/hibernate_s_hbm2ddl_tool
]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="135" date-created="2008-11-23T14:37:00" date-modified="2008-11-23T14:37:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/23/populating-entities-from-stored-procedures-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="24500">
      <title type="text"><![CDATA[Populating Entities From Stored Procedures With NHibernate]]></title>
      <content type="text"><![CDATA[<p>Note: this was orginally posted on my <a target="_blank" href="http://davybrion.com/blog/2008/11/populating-entities-from-stored-procedures-with-nhibernate/">own blog</a>.</p>
<p>A short while ago we needed to fetch the data for some entities through a stored procedure for performance reasons.  We already use NHibernate in the typical way to fetch and modify the data of this entity type, but we just wanted something so we could also use the resultset of the stored procedure to populate the entities.  One of my team members spent some time figuring out how to get the data returned by the stored procedure into the entities without actually having to write the code ourselves.  Turns out this was pretty easy to do.  Let's go over the solution with a very simple example.
</p>
<p>
The stored procedure i'll use for the example is extremely simple, and you'd never need to use this technique for such a stupid procedure.  But in the situation we faced at work, the stored procedure was obviously a lot more complicated.  So the stored procedure for this example is just this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">ALTER PROCEDURE </span>[dbo].[GetProductsByCategoryId]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; @CategoryId <span style="color: blue;">int </span></p>
<p style="margin: 0px;"><span style="color: blue;">AS</span></p>
<p style="margin: 0px;"><span style="color: blue;">BEGIN</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">SET NOCOUNT ON</span>;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">SELECT </span>[ProductID]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[ProductName]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[SupplierID]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[CategoryID]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[QuantityPerUnit]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[UnitPrice]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[UnitsInStock]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[UnitsOnOrder]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[ReorderLevel]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Discontinued]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp; <span style="color: blue;">FROM </span>[Northwind].[dbo].[Products]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">WHERE </span>[CategoryId] = @CategoryId</p>
<p style="margin: 0px;"><span style="color: blue;">END</span></p>
</div>
<p>
This just returns the product rows for the given CategoryId parameter.  Again, you'd never do this in real life but this simple procedure is just used as an example.
Now, the structure of the resultset that this procedure returns is identical to the structure that the Product entity is mapped to.  This makes it really easy to get this data into the Product entities.  Just add a named query to your mapping like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;</span><span style="color: #a31515;">sql-query</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">GetProductsByCategoryId</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return</span><span style="color: blue;"> </span><span style="color: red;">class</span><span style="color: blue;">=</span>"<span style="color: blue;">Product</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;">&nbsp; &nbsp; exec dbo.GetProductsByCategoryId :CategoryId</p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;/</span><span style="color: #a31515;">sql-query</span><span style="color: blue;">&gt;</span></p>
</div>
<p>
And this is all you need to do in code to get your list of entities from this stored procedure:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IQuery</span> query = Session.GetNamedQuery(<span style="color: #a31515;">"GetProductsByCategoryId"</span>);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; query.SetInt32(<span style="color: #a31515;">"CategoryId"</span>, 1);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IList</span>&lt;<span style="color: #2b91af;">Product</span>&gt; products = query.List&lt;<span style="color: #2b91af;">Product</span>&gt;();</p>
</div>
<p>
Is that easy or what?
Now, suppose that the stored procedure returns more columns than you've got mapped to the entity.  You can still use this approach as well, but then you'll need to specify which return values map to which properties in the entity like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;</span><span style="color: #a31515;">sql-query</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">GetProductsByCategoryId</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return</span><span style="color: blue;"> </span><span style="color: red;">class</span><span style="color: blue;">=</span>"<span style="color: blue;">Product</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">ProductID</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Id</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">ProductName</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Name</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">SupplierID</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Supplier</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">CategoryID</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Category</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">QuantityPerUnit</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">QuantityPerUnit</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitPrice</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitPrice</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitsInStock</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitsInStock</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitsOnOrder</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitsOnOrder</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">ReorderLevel</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">ReorderLevel</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Discontinued</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Discontinued</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;/</span><span style="color: #a31515;">return</span><span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;">&nbsp; &nbsp; exec dbo.GetProductsByCategoryId :CategoryId</p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;/</span><span style="color: #a31515;">sql-query</span><span style="color: blue;">&gt;</span></p>
</div>
<p>
Notice how the CategoryID and SupplierID columns are mapped to Category and Supplier properties, which in Product's mapping are mapped as Category and Supplier many-to-one types, so basically references of type Category and Supplier respectively.  NHibernate basically just takes care of all of the dirty work.</p>]]></content>
      <post-name type="text"><![CDATA[populating entities from stored procedures with nhibernate]]></post-name>
      <trackbacks>
        <trackback id="626" date-created="2010-04-23T02:17:17" date-modified="2010-04-23T02:17:17" approved="true" url="http://www.sharpcoder.co.uk/post/2010/04/23/How-NHibernate-integrates-with-second-level-cache.aspx">
          <title type="text"><![CDATA[How NHibernate integrates with second level cache]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="136" date-created="2008-11-24T02:27:00" date-modified="2008-11-24T02:27:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/24/populating-entities-with-associations-from-stored-procedures-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="8128">
      <title type="text"><![CDATA[Populating Entities With Associations From Stored Procedures With NHibernate]]></title>
      <content type="text"><![CDATA[<p>Note: this was originally posted on <a target="_blank" href="http://davybrion.com/blog/2008/11/populating-entities-with-associations-from-stored-procedures-with-nhibernate/">my own blog</a>.</p>
<p>In response to my last post where i showed how you could <a href="http://davybrion.com/blog/2008/11/populating-entities-from-stored-procedures-with-nhibernate/">fill entities with the resultset of a stored procedure</a>, i was asked if it was also possible to fill entities and their associations if the stored procedure returned all of the necessary data.  I looked into it, and it's possible, although it did take me some time to figure out how to actually do it.
</p>
<p>
First of all, here's the modified stored procedure:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">ALTER PROCEDURE </span>[dbo].[GetProductsByCategoryId]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; @CategoryId <span style="color: blue;">int </span></p>
<p style="margin: 0px;"><span style="color: blue;">AS</span></p>
<p style="margin: 0px;"><span style="color: blue;">BEGIN</span></p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">SET NOCOUNT ON</span>;</p>
<p style="margin: 0px;">&nbsp;</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">SELECT </span>[Products].[ProductID] <span style="color: blue;">as </span>"Product.ProductID"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[ProductName] <span style="color: blue;">as </span>"Product.ProductName"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[SupplierID] <span style="color: blue;">as </span>"Product.SupplierID"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[CategoryID] <span style="color: blue;">as </span>"Product.CategoryID"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[QuantityPerUnit] <span style="color: blue;">as </span>"Product.QuantityPerUnit"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[UnitPrice] <span style="color: blue;">as </span>"Product.UnitPrice"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[UnitsInStock] <span style="color: blue;">as </span>"Product.UnitsInStock"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[UnitsOnOrder] <span style="color: blue;">as </span>"Product.UnitsOnOrder"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[ReorderLevel] <span style="color: blue;">as </span>"Product.ReorderLevel"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Products].[Discontinued] <span style="color: blue;">as </span>"Product.Discontinued"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Categories].[CategoryID] <span style="color: blue;">as </span>"Category.CategoryID"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Categories].[CategoryName] <span style="color: blue;">as </span>"Category.CategoryName"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ,[Categories].[Description] <span style="color: blue;">as </span>"Category.Description"</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp; <span style="color: blue;">FROM </span>[Northwind].[dbo].[Products]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">inner join </span>[Northwind].[dbo].[Categories] </p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">on </span>[Products].[CategoryID] = [Categories].[CategoryID]</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">WHERE </span>[Products].[CategoryId] = @CategoryId</p>
<p style="margin: 0px;"><span style="color: blue;">END</span></p>
</div>
<p>

As you can see, this returns all of the columns of the Products table, as well as the columns of the Categories table.  The goal is to let NHibernate execute this stored procedure, and use the returning data to give us a list of Product entities with a Category reference which is already set up with the proper data. 
The mapping of the named query now looks like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;</span><span style="color: #a31515;">sql-query</span><span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">GetProductsByCategoryId</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return</span><span style="color: blue;"> </span><span style="color: red;">alias</span><span style="color: blue;">=</span>"<span style="color: blue;">Product</span>"<span style="color: blue;"> </span><span style="color: red;">class</span><span style="color: blue;">=</span>"<span style="color: blue;">Product</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.ProductID</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Id</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.ProductName</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Name</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.CategoryId</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Category</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.SupplierID</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Supplier</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.QuantityPerUnit</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">QuantityPerUnit</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.UnitPrice</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitPrice</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.UnitsInStock</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitsInStock</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.UnitsOnOrder</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">UnitsOnOrder</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.ReorderLevel</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">ReorderLevel</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.Discontinued</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Discontinued</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;/</span><span style="color: #a31515;">return</span><span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-join</span><span style="color: blue;"> </span><span style="color: red;">alias</span><span style="color: blue;">=</span>"<span style="color: blue;">Category</span>"<span style="color: blue;"> </span><span style="color: red;">property</span><span style="color: blue;">=</span>"<span style="color: blue;">Product.Category</span>"<span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Category.CategoryId</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Id</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Category.CategoryName</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Name</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &lt;</span><span style="color: #a31515;">return-property</span><span style="color: blue;"> </span><span style="color: red;">column</span><span style="color: blue;">=</span>"<span style="color: blue;">Category.Description</span>"<span style="color: blue;"> </span><span style="color: red;">name</span><span style="color: blue;">=</span>"<span style="color: blue;">Description</span>"<span style="color: blue;"> /&gt;</span></p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;/</span><span style="color: #a31515;">return-join</span><span style="color: blue;">&gt;</span></p>
<p style="margin: 0px;">&nbsp; &nbsp; exec dbo.GetProductsByCategoryId :CategoryId</p>
<p style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;/</span><span style="color: #a31515;">sql-query</span><span style="color: blue;">&gt;</span></p>
</div>
<p>

We map each column of the Product table to its correct property of the Product class.  Notice that we defined the 'Product' alias for this part of the data.  Then we use the return-join element to map the joined properties to the 'Product.Category' property.  This might look a bit weird at first.  You have to specify the alias of the owning object (which in our case is the 'Product' alias), and then you need to specify the name of the property of the owning object upon which the other part of the data should be mapped (in our case, the 'Category' property of the 'Product' object).
Now we can retrieve the data like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IQuery</span> query = Session.GetNamedQuery(<span style="color: #a31515;">"GetProductsByCategoryId"</span>);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; query.SetInt32(<span style="color: #a31515;">"CategoryId"</span>, 1);</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IList</span> results = query.List();</p>
</div>
<p>
 
I first tried to use the IQuery's generic List of T method which i had hoped would give me a generic list of Product entities.  But i couldn't get that working. So i tried the regular List method, and it turns out that NHibernate doesn't just give me a list of Product entities... it gives me a list where each item in the list is an object array where the first item in the array is the Product entity, and the second item is the Category.  Each Product entity's Category property references the correct Category instance though.  So you can get the product instances like this:
<code>
</code></p>
<div style="font-family: Consolas; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IEnumerable</span>&lt;<span style="color: #2b91af;">Product</span>&gt; products = results.Cast&lt;<span style="color: #2b91af;">Object</span>[]&gt;().Select(i =&gt; (<span style="color: #2b91af;">Product</span>)i[0]);</p>
</div>
<p>

There's probably an easier way to just get the list of Product entities from the named query, but i haven't found it yet :)</p>]]></content>
      <post-name type="text"><![CDATA[populating entities with associations from stored procedures with nhibernate]]></post-name>
      <comments>
        <comment id="627" date-created="2010-04-25T03:47:32" date-modified="2010-04-25T03:47:32" approved="true" user-name="sougandhpavithran" user-url="http://nhforge.org/members/sougandhpavithran/default.aspx">
          <title type="text"><![CDATA[re: Populating Entities With Associations From Stored Procedures With NHibernate]]></title>
          <content type="text"><![CDATA[Suppose we have a one-to-many relationship between class [product] and class [productcategory] defined using an IList.  And suppose, we have this relationship neatly mapped in our [product.hbm.xml] file. Now, will the products fetched using this stored procedure automatically hydrate the [productcategories] IList in product class also?]]></content>
        </comment>
        <comment id="636" date-created="2010-05-17T20:00:19" date-modified="2010-05-17T20:00:19" approved="true" user-name="seeriuss" user-url="http://nhforge.org/members/seeriuss/default.aspx">
          <title type="text"><![CDATA[re: Populating Entities With Associations From Stored Procedures With NHibernate]]></title>
          <content type="text"><![CDATA[I've been trying this method, but always seem to get the error 'errors in named queries'. ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="140" date-created="2008-11-27T15:32:00" date-modified="2008-11-27T15:32:00" approved="true" post-url="/blogs/nhibernate/archive/2008/11/27/nh-with-multiple-assembly-versions-in-gac.aspx" type="normal" hasexcerpt="false" views="3702">
      <title type="text"><![CDATA[NH with Multiple Assembly versions in GAC]]></title>
      <content type="text"><![CDATA[<p>I know that the title have something strange because NH don&rsquo;t have nothing to do with GAC, but in NH-JIRA we have an issue with this title: &ldquo;NHibernate does not support multiple versions of the same assembly for entity mapping&rdquo;</p>
<p>Perhaps I don&rsquo;t understand what that issue mean; I can&rsquo;t understand what mean work we two mappings versions of the same entity&hellip; mean it work with two tables versions in the same DB at the same time ?</p>
<p>If the problem is not the mapping but the class implementation, NH are using, this is the solution.</p>
<p>Domain <strong>version 1.0.0.0</strong></p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Person<br /></span>{<br />  <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public virtual string </span>FirstName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public virtual string </span>LastName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><br />  <span style="color: blue">public virtual string </span>FullName<br />  {<br />      <span style="color: blue">get </span>{ <span style="color: blue">return string</span>.Concat(FirstName, <span style="color: #a31515">"-"</span>, LastName); }<br />  }<br />}</pre>
<p>The mapping is:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<br />                 <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain</span>"<br />                 <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Person</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">native</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">FirstName</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">LastName</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-mapping</span><span style="color: blue">&gt;<br /></span></pre>
<p><span style="font-weight: bold">Note:</span> In the mapping I don&rsquo;t write anything about the version of the assembly.</p>
<p>Sign, and compile the domain, and add it to the GAC.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/GACAdded_5F00_73C2338C.png"><img border="0" width="644" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/GACAdded_5F00_thumb_5F00_21435350.png" alt="GACAdded" height="29" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="GACAdded" /></a> </p>
<p>Domain <strong>version 1.1.0.0</strong></p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Person<br /></span>{<br />  <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public virtual string </span>FirstName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public virtual string </span>LastName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><br />  <span style="color: blue">public virtual string </span>FullName<br />  {<br />      <span style="color: blue">get </span>{ <span style="color: blue">return string</span>.Concat(LastName, <span style="color: #a31515">"*"</span>, FirstName); }<br />  }<br />}</pre>
<p>As you can see there is a different implementation of the property FullName.</p>
<p>Compile and add the new version to the GAC.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/GACAddedBoth_5F00_439AE8C9.png"><img border="0" width="644" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/GACAddedBoth_5F00_thumb_5F00_53A9B780.png" alt="GACAddedBoth" height="37" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="GACAddedBoth" /></a> </p>
<h3>The Test</h3>
<p>Without make a completely automated test&hellip;</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>SomebodySaidIsABug()<br />{<br />  <span style="color: blue">var </span>version = <span style="color: blue">typeof </span>(<span style="color: #2b91af">Person</span>).Assembly.GetName().Version.ToString();<br />  <span style="color: #2b91af">Console</span>.WriteLine(<span style="color: #a31515">"Running version {0}"</span>, version);<br /><br />  <span style="color: blue">object </span>savedId;<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>a = <span style="color: blue">new </span><span style="color: #2b91af">Person </span>{FirstName = <span style="color: #a31515">"Pasqual"</span>, LastName = <span style="color: #a31515">"Angulo"</span>};<br />      savedId = s.Save(a);<br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>a = s.Get&lt;<span style="color: #2b91af">Person</span>&gt;(savedId);<br />      <span style="color: blue">if</span>(version == <span style="color: #a31515">"1.0.0.0"</span>)<br />          <span style="color: #2b91af">Assert</span>.That(a.FullName, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Pasqual-Angulo"</span>));<br />      <span style="color: blue">else<br />          </span><span style="color: #2b91af">Assert</span>.That(a.FullName, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Angulo*Pasqual"</span>));<br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      s.Delete(<span style="color: #a31515">"from Person"</span>);<br />      tx.Commit();<br />  }<br />}</pre>
<p>I&rsquo;m showing the loaded version used in tests (that, in this, case represent the assembly with the responsibility of DataAccess) and changing the expected value of FullName according with the assembly version.</p>
<p>The assembly referenced by the test project, at design time, is not important.</p>
<p>The App.config of the test is:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">configSections</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">section </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">hibernate-configuration</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">NHibernate.Cfg.ConfigurationSectionHandler, NHibernate</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">configSections</span><span style="color: blue">&gt;<br /><br />&lt;</span><span style="color: #a31515">hibernate-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-configuration-2.2</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">session-factory </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Company</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.provider</span>"<span style="color: blue">&gt;</span>NHibernate.Connection.DriverConnectionProvider<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.driver_class</span>"<span style="color: blue">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">dialect</span>"<span style="color: blue">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.connection_string</span>"<span style="color: blue">&gt;<br />          </span>Data Source=localhost\SQLEXPRESS;Initial Catalog=BlogSpot;Integrated Security=True<br />      <span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">show_sql</span>"<span style="color: blue">&gt;</span>false<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">use_outer_join</span>"<span style="color: blue">&gt;</span>true<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">query.substitutions</span>"<span style="color: blue">&gt;</span>true 1, false 0, yes 'Y', no 'N'<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">command_timeout</span>"<span style="color: blue">&gt;</span>60<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">proxyfactory.factory_class</span>"<span style="color: blue">&gt;</span>NHibernate.ByteCode.LinFu.ProxyFactoryFactory, NHibernate.ByteCode.LinFu<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />    <br />      &lt;</span><span style="color: #a31515">mapping </span><span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain</span>"<span style="color: blue">/&gt;<br />    <br />  &lt;/</span><span style="color: #a31515">session-factory</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-configuration</span><span style="color: blue">&gt;</span></pre>
<pre class="code"><span style="color: blue"><span style="color: #000000; font-family: trebuchet ms">I&rsquo;m loading the assembly with all mappings, trough the session-factory configuration, another time without specify the assembly strong name.</span></span></pre>
<pre class="code"><span style="color: blue"><span style="color: #000000; font-family: trebuchet ms">Compile the test project and close VisualStudio. Now go to the output folder (bin/Debug) and delete the Company.Domain.dll file. Then open NUnit.Gui.</span></span></pre>
<pre class="code"><span style="color: blue"><span style="color: #000000; font-family: trebuchet ms">The situation at this point is:</span></span></pre>
<pre class="code"><ul><li><span style="font-family: 'Trebuchet MS'"><span style="font-size: medium">Two version of Company.Domain.dll in the GAC.</span></span><span style="font-size: medium"><br /></span></li><li><span style="font-family: 'Trebuchet MS'"><span style="font-size: medium">Visual Studio Closed</span></span><span style="font-size: medium"><br /></span></li><li><span style="font-family: 'Trebuchet MS'"><span style="font-size: medium">The test compiled and the Company.Domain.dll removed</span></span><span style="font-size: medium"><br /></span></li><li><span style="font-family: 'Trebuchet MS'"><span style="font-size: medium">NUnit.GUI opened</span></span><br /></li></ul></pre>
<pre class="code"><span style="color: blue"><span style="color: #000000; font-family: trebuchet ms">Because I'm not using the strongly name of <span style="font-style: italic">Company.Domain.dll</span>, running the test what I expect is that it fail</span></span></pre>
<pre class="code"><span style="color: blue"><span style="color: #000000; font-family: trebuchet ms"><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NunitNoOk0_5F00_20D9B10C.png"><img border="0" width="642" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NunitNoOk0_5F00_thumb_5F00_34892B51.png" alt="NunitNoOk0" height="162" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="NunitNoOk0" /></a>  </span></span></pre>
<pre class="code"><span style="color: blue"><span style="color: #000000; font-family: trebuchet ms">Perfect!! Assembly not found. Now I can start to play with the compiled configuration file (<span style="font-style: italic"><span style="font-weight: bold">DiffAssemblyVersion.dll.config</span></span>) using the NotePad.</span></span></pre>
<pre class="code">    <span style="color: blue">&lt;</span><span style="color: #a31515">runtime</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">assemblyBinding </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:schemas-microsoft-com:asm.v1</span>" <span style="color: red">applies-to</span><span style="color: blue">=</span>"<span style="color: blue">v2.0.50727</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">qualifyAssembly </span><span style="color: red">partialName</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain</span>"<br />              <span style="color: red">fullName</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=5c41dce254553643</span>" <span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">assemblyBinding</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">runtime</span><span style="color: blue">&gt;<br /></span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>Now, if I reload the assembly in NUnit.GUI, the assembly will be loaded from GAC.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NunitOk10_5F00_63DD318C.png"><img border="0" width="644" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NunitOk10_5F00_thumb_5F00_7A32D6D1.png" alt="NunitOk10" height="114" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="NunitOk10" /></a> </p>
<p>Now I want run the test but using the 1.1.0.0 version. Using NotePad again the new config is:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">runtime</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">assemblyBinding </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:schemas-microsoft-com:asm.v1</span>" <span style="color: red">applies-to</span><span style="color: blue">=</span>"<span style="color: blue">v2.0.50727</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">qualifyAssembly </span><span style="color: red">partialName</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain</span>"<br />          <span style="color: red">fullName</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=5c41dce254553643</span>" <span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">dependentAssembly</span><span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">assemblyIdentity </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Company.Domain</span>"<br />                            <span style="color: red">publicKeyToken</span><span style="color: blue">=</span>"<span style="color: blue">5c41dce254553643</span>"<span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">bindingRedirect </span><span style="color: red">oldVersion</span><span style="color: blue">=</span>"<span style="color: blue">1.0.0.0</span>"<br />                           <span style="color: red">newVersion</span><span style="color: blue">=</span>"<span style="color: blue">1.1.0.0</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">dependentAssembly</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">assemblyBinding</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">runtime</span><span style="color: blue">&gt;</span></pre>
<p>Reload the assembly in NUnit.GUI and re-run it:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NunitOk11_5F00_4528D852.png"><img border="0" width="644" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NunitOk11_5F00_thumb_5F00_34B06757.png" alt="NunitOk11" height="102" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="NunitOk11" /></a> </p>
<p>Work done.</p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/DiffAssemblyVersion">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nh with multiple assembly versions in gac]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1116" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="144" date-created="2008-12-12T11:50:00" date-modified="2008-12-12T11:50:00" approved="true" post-url="/blogs/nhibernate/archive/2008/12/12/entities-behavior-injection.aspx" type="normal" hasexcerpt="false" views="10927">
      <title type="text"><![CDATA[Entities behavior injection]]></title>
      <content type="text"><![CDATA[<p>If you are working with NH you know that NH likes POCOs and you must have a default constructor without parameters. Starting from today that is the past.</p>
<h4>The domain</h4>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_37CDC07C.png"><img border="0" width="471" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_606C2C83.png" alt="image" height="480" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="image" /></a> </p>
<p>The implementation of Invoice is:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Invoice </span>: <span style="color: #2b91af">IInvoice<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">IInvoiceTotalCalculator </span>calculator;<br /><br />  <span style="color: blue">public </span>Invoice(<span style="color: #2b91af">IInvoiceTotalCalculator </span>calculator)<br />  {<br />      <span style="color: blue">this</span>.calculator = calculator;<br />      Items = <span style="color: blue">new </span><span style="color: #2b91af">List</span>&lt;<span style="color: #2b91af">InvoiceItem</span>&gt;();<br />  }<br /><br />  <span style="color: blue">#region </span>IInvoice Members<br /><br />  <span style="color: blue">public string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public decimal </span>Tax { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public </span><span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">InvoiceItem</span>&gt; Items { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><br />  <span style="color: blue">public decimal </span>Total<br />  {<br />      <span style="color: blue">get </span>{ <span style="color: blue">return </span>calculator.GetTotal(<span style="color: blue">this</span>); }<br />  }<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">InvoiceItem </span>AddItem(<span style="color: #2b91af">Product </span>product, <span style="color: blue">int </span>quantity)<br />  {<br />      <span style="color: blue">var </span>result = <span style="color: blue">new </span><span style="color: #2b91af">InvoiceItem</span>(product, quantity);<br />      Items.Add(result);<br />      <span style="color: blue">return </span>result;<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>Are you observing something strange ?</p>
<ul>
<br />
<li>There is not a property for the Id </li>
<li>There is not a default constructor without parameter </li>
</ul>
<p>The Invoice entity are using an injectable behavior to calculate the total amount of the invoice; the implementation is not so important&hellip;</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">SumAndTaxTotalCalculator </span>: <span style="color: #2b91af">IInvoiceTotalCalculator<br /></span>{<br />  <span style="color: blue">#region </span>Implementation of IInvoiceTotalCalculator<br /><br />  <span style="color: blue">public decimal </span>GetTotal(<span style="color: #2b91af">IInvoice </span>invoice)<br />  {<br />      <span style="color: blue">decimal </span>result = invoice.Tax;<br />      <span style="color: blue">foreach </span>(<span style="color: #2b91af">InvoiceItem </span>item <span style="color: blue">in </span>invoice.Items)<br />      {<br />          result += item.Product.Price * item.Quantity;<br />      }<br />      <span style="color: blue">return </span>result;<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The full mapping:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Invoice</span>" <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">IInvoice</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">id </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Tax</span>"<span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">list </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Items</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">InvoiceId</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">list-index </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">pos</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">composite-element </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">InvoiceItem</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Product</span>"<span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Quantity</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">composite-element</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">list</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Product</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Price</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>The Test</h4>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>CRUD()<br />{<br />  <span style="color: #2b91af">Product </span>p1;<br />  <span style="color: #2b91af">Product </span>p2;<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />      {<br />          p1 = <span style="color: blue">new </span><span style="color: #2b91af">Product </span>{Description = <span style="color: #a31515">"P1"</span>, Price = 10};<br />          p2 = <span style="color: blue">new </span><span style="color: #2b91af">Product </span>{Description = <span style="color: #a31515">"P2"</span>, Price = 20};<br />          s.Save(p1);<br />          s.Save(p2);<br />          tx.Commit();<br />      }<br />  }<br /><br />  <span style="color: blue">var </span>invoice = <span style="color: #2b91af">DI</span>.Container.Resolve&lt;<span style="color: #2b91af">IInvoice</span>&gt;();<br />  invoice.Tax = 1000;<br />  invoice.AddItem(p1, 1);<br />  invoice.AddItem(p2, 2);<br />  <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br /><br />  <span style="color: blue">object </span>savedInvoice;<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />      {<br />          savedInvoice = s.Save(invoice);<br />          tx.Commit();<br />      }<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      invoice = s.Get&lt;<span style="color: #2b91af">Invoice</span>&gt;(savedInvoice);<br />      <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      invoice = (<span style="color: #2b91af">IInvoice</span>) s.Load(<span style="color: blue">typeof </span>(<span style="color: #2b91af">Invoice</span>), savedInvoice);<br />      <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">IInvoice</span>&gt; l = s.CreateQuery(<span style="color: #a31515">"from Invoice"</span>).List&lt;<span style="color: #2b91af">IInvoice</span>&gt;();<br />      invoice = l[0];<br />      <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />      {<br />          s.Delete(<span style="color: #a31515">"from Invoice"</span>);<br />          s.Delete(<span style="color: #a31515">"from Product"</span>);<br />          tx.Commit();<br />      }<br />  }<br />}</pre>
<p>In the previous week I tried to pass the test without change NH&rsquo;s code-base. The first result was that I found a bug in NH and probably in Hibernate3.2.6, the second result was that it is completely possible to use NH with &ldquo;fat&rdquo; entities, without default constructor and using an IoC framework to inject behavior to an entity. After that work I realize that some little &ldquo;relax&rdquo; are needed in NH-code-base (<a href="http://jira.nhibernate.org/browse/NH-1587">NH-1587</a>,<a href="http://jira.nhibernate.org/browse/NH-1588">NH-1588</a>,<a href="http://jira.nhibernate.org/browse/NH-1589">NH-1589</a>).</p>
<h4>How pass the test</h4>
<p>A very simple solution, to use an IoC with NH, is write a custom implementation of <a href="/doc/nh/en/index.html#manipulatingdata-interceptors">IInterceptor</a> and use the <em><strong>Instantiate</strong></em> method to create an entity instance using an IoC container. The problem with this solution is that you still need a default constructor and&hellip; well&hellip; you must use the same interceptor for all sessions.</p>
<p>Another possible solution, for NH2.1 (trunk), is the use of a custom &lt;<span style="color: #ff0000">tuplizer</span>&gt; for <span style="color: #2b91af">EntityMode</span>.POCO. Probably I will write another blog-post about it.</p>
<p>If you are using the ReflectionOptimizer (used by default) there is a simple short-cut: I can write a <span style="color: #2b91af">IBytecodeProvider</span> implementation based on <a href="http://www.castleproject.org/container/index.html">Castle.Windsor</a> container. The BytecodeProvider is another injectable piece of NH, trough the NHibernate.Cfg.<span style="color: #2b91af">Environment</span>, before create the configuration. The BytecodeProvider has two responsibility: provide the ProxyFactoryFactory and provide the ReflectionOptimizer.</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">BytecodeProvider </span>: <span style="color: #2b91af">IBytecodeProvider<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">IWindsorContainer </span>container;<br /><br />  <span style="color: blue">public </span>BytecodeProvider(<span style="color: #2b91af">IWindsorContainer </span>container)<br />  {<br />      <span style="color: blue">this</span>.container = container;<br />  }<br /><br />  <span style="color: blue">#region </span>IBytecodeProvider Members<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">IReflectionOptimizer </span>GetReflectionOptimizer(<span style="color: #2b91af">Type </span>clazz, <span style="color: #2b91af">IGetter</span>[] getters, <span style="color: #2b91af">ISetter</span>[] setters)<br />  {<br />      <span style="color: blue">return new </span><span style="color: #2b91af">ReflectionOptimizer</span>(container, clazz, getters, setters);<br />  }<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">IProxyFactoryFactory </span>ProxyFactoryFactory<br />  {<br />      <span style="color: blue">get </span>{ <span style="color: blue">return new </span><span style="color: #2b91af">ProxyFactoryFactory</span>(); }<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a>In this case, obviously, the ProxyFactoryFactory class is <a href="/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx">NHibernate.ByteCode.Castle.ProxyFactoryFactory</a>.</p>
<p>Now the ReflectionOptimizer (using the fresh NH&rsquo;s trunk):</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">ReflectionOptimizer </span>: NHibernate.Bytecode.Lightweight.<span style="color: #2b91af">ReflectionOptimizer<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">IWindsorContainer </span>container;<br /><br />  <span style="color: blue">public </span>ReflectionOptimizer(<span style="color: #2b91af">IWindsorContainer </span>container, <span style="color: #2b91af">Type </span>mappedType, <span style="color: #2b91af">IGetter</span>[] getters, <span style="color: #2b91af">ISetter</span>[] setters)<br />      : <span style="color: blue">base</span>(mappedType, getters, setters)<br />  {<br />      <span style="color: blue">this</span>.container = container;<br />  }<br /><br />  <span style="color: blue">public override object </span>CreateInstance()<br />  {<br />      <span style="color: blue">if </span>(container.Kernel.HasComponent(mappedType))<br />      {<br />          <span style="color: blue">return </span>container.Resolve(mappedType);<br />      }<br />      <span style="color: blue">else<br />      </span>{<br />          <span style="color: blue">return </span>container.Kernel.HasComponent(mappedType.FullName)<br />                     ? container.Resolve(mappedType.FullName)<br />                     : <span style="color: blue">base</span>.CreateInstance();<br />      }<br />  }<br /><br />  <span style="color: blue">protected override void </span>ThrowExceptionForNoDefaultCtor(<span style="color: #2b91af">Type </span>type)<br />  {<br />  }<br />}</pre>
<p>As last, a quick view to the configuration:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-configuration-2.2</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">session-factory </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">EntitiesWithDI</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.driver_class</span>"<span style="color: blue">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">dialect</span>"<span style="color: blue">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.connection_string</span>"<span style="color: blue">&gt;<br />          </span>Data Source=localhost\SQLEXPRESS;Initial Catalog=BlogSpot;Integrated Security=True<br />      <span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">session-factory</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-configuration</span><span style="color: blue">&gt;</span></pre>
<p>As you can see the configuration is minimal and, in this case, I don&rsquo;t need to configure the &ldquo;<span style="color: #800000">proxyfactory.factory_class</span>&rdquo; property because I will inject the whole BytecodeProvider.</p>
<pre class="code">[<span style="color: #2b91af">TestFixtureSetUp</span>]<br /><span style="color: blue">public void </span>TestFixtureSetUp()<br />{<br />  ConfigureWindsorContainer();<br />  <span style="color: #2b91af">Environment</span>.BytecodeProvider = <span style="color: blue">new </span><span style="color: #2b91af">BytecodeProvider</span>(container);<br />  cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();<br />  cfg.AddAssembly(<span style="color: #a31515">"EntitiesWithDI"</span>);<br />  cfg.Configure();<br />  cfg.Interceptor = <span style="color: blue">new </span><span style="color: #2b91af">WindsorInterceptor</span>(container);<br />  <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(cfg).Create(<span style="color: blue">false</span>, <span style="color: blue">true</span>);<br />  sessions = (<span style="color: #2b91af">ISessionFactoryImplementor</span>) cfg.BuildSessionFactory();<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The BytecodeProvider injection is the line after the configuration of Windsor container.</p>
<p>The configuration of the container is very simple:</p>
<pre class="code"><span style="color: blue">protected override void </span>ConfigureWindsorContainer()<br />{<br />  container.AddComponent&lt;<span style="color: #2b91af">IInvoiceTotalCalculator</span>, <span style="color: #2b91af">SumAndTaxTotalCalculator</span>&gt;();<br />  container.AddComponentLifeStyle(<span style="color: blue">typeof </span>(<span style="color: #2b91af">Invoice</span>).FullName,<br />      <span style="color: blue">typeof </span>(<span style="color: #2b91af">IInvoice</span>), <span style="color: blue">typeof </span>(<span style="color: #2b91af">Invoice</span>), <span style="color: #2b91af">LifestyleType</span>.Transient);<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>Conclusions</h4>
<ul>
<br />
<li>The default ctor without parameter constraint was removed. </li>
<li>Use an IoC to inject behavior to an entity is possible and easy. </li>
</ul>
<p><strong>NOTE</strong>: Even if is possible to write an entity without the Id, the feature <span style="text-decoration: underline;">is not fully supported</span>.</p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/EntitiesWithDI/EntitiesWithDI">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[entities behavior injection]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1117" />
      </categories>
      <trackbacks>
        <trackback id="623" date-created="2010-04-14T13:10:06" date-modified="2010-04-14T13:10:06" approved="true" url="http://www.lostechies.com/blogs/jimmy_bogard/archive/2010/04/14/injecting-services-into-entities.aspx">
          <title type="text"><![CDATA[Injecting services into entities]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="147" date-created="2008-12-16T00:50:00" date-modified="2008-12-16T00:50:00" approved="true" post-url="/blogs/nhibernate/archive/2008/12/15/customizing-schema-export-with-schema-action.aspx" type="normal" hasexcerpt="false" views="6623">
      <title type="text"><![CDATA[Customizing Schema Export with schema-action]]></title>
      <content type="text"><![CDATA[<p>Mapping views with NHibernate just got a whole lot easier. Previous to revisions committed to the trunk today (Dec 15, 2008) there was no good way to exclude certain files from being exported with a schema export. </p>
<p>Now a new attribute has been added to the &lt;class&gt; schema. </p>
<p>&lt;class name="Cat" schema-action="none|drop|export|update|validate|all"&gt; ...</p>
<p>Using this to map a view is easy:</p>
<p>&lt;class name="CustomersView" table="CustomsReportView" schema-action="none" mutable="false"&gt; ...</p>
<p>This will automatically exclude this class from all schema actions such as updates, drops, and exports. You can mix and match with schema-action="update,drop" etc.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[customizing schema export with schema action]]></post-name>
      <categories>
        <category ref="1118" />
        <category ref="1119" />
        <category ref="1120" />
      </categories>
      <comments>
        <comment id="222" date-created="2009-03-29T08:37:57" date-modified="2009-03-29T08:37:57" approved="true" user-name="csokun" user-url="http://chornsokun.wordpress.com/">
          <title type="text"><![CDATA[re: Customizing Schema Export with schema-action]]></title>
          <content type="text"><![CDATA[I've gone through the NH code but it doesn't seem to have a good explanation for these options and how it affect schema export.

Could you elaborate a bit more?]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2168" date-created="2008-09-02T04:38:03" date-modified="2011-08-17T22:35:20" approved="true" email="will.shaver@gmail.com">
          <title type="text"><![CDATA[Woil]]></title>
        </author>
      </authors>
    </post>
    <post id="148" date-created="2008-12-21T12:38:00" date-modified="2008-12-21T12:38:00" approved="true" post-url="/blogs/nhibernate/archive/2008/12/21/identity-the-never-ending-story.aspx" type="normal" hasexcerpt="false" views="6903">
      <title type="text"><![CDATA[Identity: The never ending story]]></title>
      <content type="text"><![CDATA[<p>How many times you heard us saying &ldquo;don&rsquo;t use identity POID generator!&rdquo; ?</p>
<p>To understand it better you must move your mind to an application, or a <a href="http://en.wikipedia.org/wiki/Use_case">use-case</a>, where the pattern <a href="http://www.hibernate.org/43.html">open-session-in-view</a> (aka session-per-request) is not applicable.</p>
<h4>The Unit of Work</h4>
<p>The Unit of Work (UoW) is a <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html">pattern described by Martin Fowler</a>. When you work with NHibernate the real implementation of the pattern is the NH-Session (more exactly in PersistentContext inside de session). The <em>commit </em>and <em>rollback</em>, described in the pattern, are respectively the session.Flush() and the session.Close() (the close mean when close the session without Flush it). As usual the pattern described by Fowler is short and very clear so an explication is unneeded; here I want put more emphasis in two phrases:</p>
<p>&ldquo;You can change the database with each change to your object model, but this can lead to lots of very small database calls, which ends up being very slow.&rdquo; </p>
<p>&ldquo;A Unit of Work keeps track of everything you do during a business transaction that can affect the database. When you're done, it figures out everything that needs to be done to alter the database as a result of your work.&rdquo;</p>
<p>In addition note, that Fowler, are talking about <strong>business transaction</strong> (repeat business-transaction).</p>
<p>In NHibernate, setting the <span style="color: #2b91af">FlushMode</span> to <span style="color: #2b91af">FlushMode</span>.Never (MANUAL in Hibernate), if you begin a NH-Transaction and commit it, but without a session.Flush, nothing happen in DB.</p>
<h4>Analyze Session-per-conversation</h4>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/SessionPerConversation_5F00_587705A2.png"><img title="SessionPerConversation" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="458" alt="SessionPerConversation" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/SessionPerConversation_5F00_thumb_5F00_7345BC5F.png" width="640" border="0" /></a> </p>
<p>The session-per-conversation pattern is an example of a business transaction that spans multiple requests. As described by Fowler the nh-session (the real UoW) spans the whole business-transaction and <strong>in each request we are begin-commit a NH-Transaction</strong>. At the end of the conversation, inside a NH-Transaction, we will chose to Flush or Close the NH-session (mean commit or rollback the UoW).</p>
<p>In session-per-conversation we don&rsquo;t want have a NH-Transaction (that, in this moment, mean a ADO.NET transaction) open for the whole conversation because not only is &ldquo;impractical&rdquo;, as said Fowler, but, in my opinion, it break the concept of <a href="http://en.wikipedia.org/wiki/ACID">ACID</a>.</p>
<h4>How to break all ?</h4>
<p>If you want break the UoW pattern, and session-per-conversation pattern, you have a very easy way:<strong>use <span style="color: #ff0000">identity</span> as your POID strategy</strong>.</p>
<p>The <span style="color: #ff0000">identity</span> strategy mean :</p>
<ul>
<li>change the database with each change to your object model (see the phrase above) </li>
<li>if you run a session.Save in the first request you will have a new record in the DB, and you can&rsquo;t rollback this change without run an explicit Delete. </li>
</ul>
<p>In addition I want say that using <strong><span style="color: #ff0000">identity</span></strong> you are &ldquo;disabling&rdquo; the ADO-batcher NH&rsquo;s feature for inserts.</p>
<p>You can continue using <span style="color: #ff0000">identity</span> but you must know what you are loosing, and only you know what you are winning (I don&rsquo;t know what you are winning using <span style="color: #ff0000">identity</span> when you are working with a spectacular persistence layer as NHibernate is). </p>]]></content>
      <post-name type="text"><![CDATA[identity the never ending story]]></post-name>
      <categories>
        <category ref="1043" />
        <category ref="1089" />
        <category ref="1107" />
        <category ref="1121" />
      </categories>
      <comments>
        <comment id="165" date-created="2009-02-07T00:10:16" date-modified="2009-02-07T00:10:16" approved="true" user-name="tobinharris" user-url="http://nhforge.org/members/tobinharris/default.aspx">
          <title type="text"><![CDATA[re: Identity: The never ending story]]></title>
          <content type="text"><![CDATA[Good points there. Using database-assigned identity is very popular because it's simple. What's your favourite alternative?

I like GUIDs because they're unique across servers, and master-master replication-proof. But ugly to look at :) Hi-Lo seems good too, but harder to set up.   

 ]]></content>
        </comment>
        <comment id="166" date-created="2009-02-07T05:23:10" date-modified="2009-02-07T05:23:10" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Identity: The never ending story]]></title>
          <content type="text"><![CDATA[It depend on the app and my customer preference.
Personally I prefer HiLo, where possible, or guid.comb.
BTW the war is lost... I know it and for that soon you will see some unexpected feature implementations "identity oriented".]]></content>
        </comment>
        <comment id="167" date-created="2009-02-07T13:42:17" date-modified="2009-02-07T13:42:17" approved="true" user-name="tobinharris" user-url="http://nhforge.org/members/tobinharris/default.aspx">
          <title type="text"><![CDATA[re: Identity: The never ending story]]></title>
          <content type="text"><![CDATA[How do you mean "identity oriented"? Are you saying that identity is on it's way out?]]></content>
        </comment>
        <comment id="168" date-created="2009-02-07T14:40:07" date-modified="2009-02-07T14:40:07" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Identity: The never ending story]]></title>
          <content type="text"><![CDATA[be patient]]></content>
        </comment>
        <comment id="213" date-created="2009-03-19T09:57:10" date-modified="2009-03-19T09:57:10" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Identity: The never ending story]]></title>
          <content type="text"><![CDATA[I'm starting to understand. We are using identity all over the place. I'm considering to replace it some day. Does it make any difference if you store (also insert) entities using Merge?]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="149" date-created="2009-01-07T10:08:00" date-modified="2009-01-07T10:08:00" approved="true" post-url="/blogs/nhibernate/archive/2009/01/07/typesafe-icriteria-using-lambda-expressions.aspx" type="normal" hasexcerpt="false" views="11677">
      <title type="text"><![CDATA[Typesafe ICriteria using Lambda Expressions]]></title>
      <content type="text"><![CDATA[<p><i>
<p>Originally announced on my own blog here: <a target="_blank" href="http://broloco.blogspot.com/2008/12/using-lambda-expressions-with.html" style="background:#c0ffc0;">Using Lambda Expressions with NHibernate </a></p>
</i></p>
<h4>Introduction</h4>
<p>I love NHibernate, but I've never been a fan of the 'magic strings' used in the ICriteria API. Now we have .Net 3.5, and the ability to have strongly-typed queries built into the language, and a corresponding NH-Contrib project (NHibernate.Linq) to allow us to use LINQ with NHibernate. </p>
<p>However, there are still times when you need to use the ICriteria API (or HQL) to achieve the results you want. </p>
<h4>When ICriteria is more powerful than LINQ</h4>
<p>Consider the following query: </p>
<p><code>&nbsp;&nbsp;&nbsp; session.CreateCriteria(typeof(Person), "personAlias")<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SetFetchMode("personAlias.PersonDetail", FetchMode.Eager)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>// to prevent select n+1</i><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SetLockMode("personAlias", LockMode.Upgrade)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>// to read-lock the data until commit</i><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Add(Expression.Like("Name", "%anna%"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>// includes the name 'Polyanna', 'Annabella', ...</i><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br /></code></p>
<p>LINQ provides a high-level abstraction of a query that can potentially be run against any datasource. However, this abstraction comes at a cost (try writing the above query in LINQ). LINQ (out of the box) has no concept of: 
<ul>
<li>Fetch modes (an ORM concept);</li>
<li>Locking (a database/transaction concept);</li>
<li>SQL specific functions (there is not always an equivalent C# function).</li>
</ul>
</p>
<p>So ICriteria and HQL will not be obsolete - they will quite happily live side-by-side with LINQ. </p>
<h4>Typesafe Syntax for ICriteria</h4>
<p>In order to implement LINQ, .Net 3.5 also introduced both <a target="_blank" href="http://weblogs.asp.net/scottgu/archive/2007/03/13/new-orcas-language-feature-extension-methods.aspx">Extension Methods</a> and <a target="_blank" href="http://weblogs.asp.net/scottgu/archive/2007/04/08/new-orcas-language-feature-lambda-expressions.aspx">Lambda Expressions</a> </p>
<p>Extension methods allow us to extend the ICriteria interface with our own methods, while Lambda Expressions allow us to create typesafe expressions that can be examined at runtime. So with some extra syntactic sugar, the above query can be written as: </p>
<p><code>
<divre></divre>&nbsp;&nbsp;&nbsp; Person personAlias = null;<br />&nbsp;&nbsp;&nbsp; session.CreateCriteria(typeof(Person), () =&gt; personAlias)<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SetFetchMode(() =&gt; personAlias.PersonDetail, FetchMode.Eager)<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .SetLockMode(() =&gt; personAlias, LockMode.Upgrade)<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Add(SqlExpression.Like&lt;Person&gt;(p =&gt; p.Name, "%anna%"))<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br /><br /></code></p>
<p>The 'magic strings' are gone! This code uses a combination of Extension Methods and Lambda Expressions to create a typesafe version of the ICriteria. We can now also use our refactoring tools to rename, or find references to properties safe if the knowledge that the IDE will pick them up. </p>
<p>The extensions methods required to do this have been packaged up into a project (link below), making it easy to add this to your own .Net 3.5 NHibernate project. </p>
<p>With the addition of projects like <a target="_blank" href="http://code.google.com/p/fluent-nhibernate/">Fluent NHibernate</a> , perhaps 'magic strings' will finally become a thing of the past. </p>
<h5>Some links:</h5>
<p>
<ul>
<li><a target="_blank" href="http://code.google.com/p/nhlambdaextensions/">Project home</a>;</li>
<li><a target="_blank" href="http://nhlambdaextensions.googlecode.com/files/NhLambdaExtensions.html">Documentation</a>;</li>
<li><a target="_blank" href="http://code.google.com/p/nhlambdaextensions/downloads/list">Download</a>.</li>
</ul>
</p>
<div></div>
<p>
<divre></divre>
<divre></divre></p>
<p>
<divre></divre>
<divre></divre></p>
<p>
<divre></divre></p>
<p>
<divre></divre></p>
<p>
<divre></divre></p>
<p>
<divre></divre>
<divre></divre></p>
<pre></pre>]]></content>
      <post-name type="text"><![CDATA[typesafe icriteria using lambda expressions]]></post-name>
      <comments>
        <comment id="150" date-created="2009-01-12T16:49:24" date-modified="2009-01-12T16:49:24" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: Typesafe ICriteria using Lambda Expressions]]></title>
          <content type="text"><![CDATA[Nice idea, thanks!]]></content>
        </comment>
        <comment id="154" date-created="2009-01-27T12:31:32" date-modified="2009-01-27T12:31:32" approved="true" user-name="ssteinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Typesafe ICriteria using Lambda Expressions]]></title>
          <content type="text"><![CDATA[Looks great. But how can you find out which property is meant by the lamda expression? I thought that it is not possible to "see" the content of an expression, that you only can execute it. (This would return the value of the property, not its name or PropertyInfo)

By the way, the Documentation link is broken somehow. It tries to download it. (Same on your project page.)]]></content>
        </comment>
        <comment id="155" date-created="2009-01-27T12:42:38" date-modified="2009-01-27T12:42:38" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: Typesafe ICriteria using Lambda Expressions]]></title>
          <content type="text"><![CDATA[ssteinegger,

LambdaExpressions are not evaluated until runtime, so you are able to retrieve the PropertyInfo at runtime too.

The docs are hosted from the Google Project downloads sections - Google adds a host-header that makes IE prompt for download, but you should still just be able to 'open' it (it's just a regular HTML page).]]></content>
        </comment>
        <comment id="169" date-created="2009-02-09T19:21:48" date-modified="2009-02-09T19:21:48" approved="true" user-name="ssteinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Typesafe ICriteria using Lambda Expressions]]></title>
          <content type="text"><![CDATA[This is pretty cool. I have to try it for my mapping tester configuration, where I use property names in strings.

Docs: I'm using Firefox. I can choose Firefox as the application to open the file, but then I see the HTML tags. ]]></content>
        </comment>
        <comment id="171" date-created="2009-02-09T22:38:26" date-modified="2009-02-09T22:38:26" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: Typesafe ICriteria using Lambda Expressions]]></title>
          <content type="text"><![CDATA[Ah, sorry, I can't control how the Google downloads return the headers.

I tried it in Firefox, and if you save it to disk you're fine.

Also the docs are in the .zip download too; the separate download is just for convenience.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2221" date-created="2008-09-05T11:09:25" date-modified="2014-08-18T07:44:21" approved="true" email="fluke_fan@hotmail.com">
          <title type="text"><![CDATA[FlukeFan]]></title>
        </author>
      </authors>
    </post>
    <post id="151" date-created="2009-01-25T12:08:00" date-modified="2009-01-25T12:08:00" approved="true" post-url="/blogs/nhibernate/archive/2009/01/25/nhibernate-and-future-queries.aspx" type="normal" hasexcerpt="false" views="4824">
      <title type="text"><![CDATA[NHibernate and Future Queries]]></title>
      <content type="text"><![CDATA[<p>As some of you already know, i'm a big fan of avoiding excessive roundtrips by batching queries and/or service calls.  For NHibernate, i wrote the <a href="http://davybrion.com/blog/2008/06/the-query-batcher/">QueryBatcher</a> class which makes this pretty easy to do.  Ayende recently added a much easier approach for this to NHibernate.  
</p>
<p>Take a look at the following code:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #2b91af; }
.cb3 { color: green; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">using</span> (<span class="cb2">ISession</span> session = sessionFactory.OpenSession())</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// this executes the first query</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">var</span> categories = session.CreateCriteria(<span class="cb1">typeof</span>(<span class="cb2">ProductCategory</span>)).List();&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// this executes the second query</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">var</span> suppliers = session.CreateCriteria(<span class="cb1">typeof</span>(<span class="cb2">Supplier</span>)).List();</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">foreach</span> (<span class="cb1">var</span> category <span class="cb1">in</span> categories)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// do something</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">foreach</span> (<span class="cb1">var</span> supplier <span class="cb1">in</span> suppliers)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// do something</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

This is a really trivial example, but it should be more than sufficient.  It simply executes two very simple queries and loops through the results to do something with each returned entity.  The problem, obviously, is that this hits the database twice while there really is no good reason for doing so.
</p>
<p>With the new Future feature we can rewrite that code like this:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #2b91af; }
.cb3 { color: green; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">using</span> (<span class="cb2">ISession</span> session = sessionFactory.OpenSession())</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// this creates the first query</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">var</span> categories = session.CreateCriteria(<span class="cb1">typeof</span>(<span class="cb2">ProductCategory</span>)).Future&lt;<span class="cb2">ProductCategory</span>&gt;();</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// this creates the second query</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">var</span> suppliers = session.CreateCriteria(<span class="cb1">typeof</span>(<span class="cb2">Supplier</span>)).Future&lt;<span class="cb2">Supplier</span>&gt;();</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// this causes both queries to be sent in ONE roundtrip</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">foreach</span> (<span class="cb1">var</span> category <span class="cb1">in</span> categories)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// do something</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// this doesn't do anything because the suppliers have already been loaded</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">foreach</span> (<span class="cb1">var</span> supplier <span class="cb1">in</span> suppliers)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">// do something</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Apart from the comments, did you spot the difference? Instead of calling ICriteria's List method (which causes the query to be executed immediately), we call ICriteria's Future method.  This returns an IEnumerable of the type you provided to the Future method.  And this is where it gets interesting.  Instead of executing the queries immediately, the queries are added to an instance of NHibernate's already existing MultiCriteria class.  Only once you enumerate through one of the retrieved IEnumerables will all the (queued) Future queries be executed, in a single roundtrip.  Once they are executed, their result is final (as in: enumerating through the IEnumerable will not cause the query to be executed again).
</p>
<p>The example used here is obviously very trivial, but you can use this with any ICriteria so you can very easily start batching your complex queries as well.  The kind of query doesn't really matter, as long as it's an ICriteria instance.
</p>
<p>
This feature will be available in NHibernate 2.1, or if you're using the trunk you can use it starting with revision 3999.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and future queries]]></post-name>
      <categories>
        <category ref="1092" />
        <category ref="1124" />
      </categories>
      <comments>
        <comment id="152" date-created="2009-01-26T10:36:50" date-modified="2009-01-26T10:36:50" approved="true" user-name="Giovanni" user-url="http://nhforge.org/members/PadovaBoy/default.aspx">
          <title type="text"><![CDATA[re: NHibernate and Future Queries]]></title>
          <content type="text"><![CDATA[Simply Wonderful!
Guys ur the bests!

Tnx!]]></content>
        </comment>
        <comment id="153" date-created="2009-01-27T10:44:00" date-modified="2009-01-27T10:44:00" approved="true" user-name="ssteinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: NHibernate and Future Queries]]></title>
          <content type="text"><![CDATA[Looks awful. But how can you find out which property is meant by the lamda expression? I thought that it is not possible to "see" the content of an expression, that you only can execute it. (This would return the value of the property, not its name or PropertyInfo)]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="157" date-created="2009-01-29T20:35:10" date-modified="2009-01-29T20:35:10" approved="true" url="http://darioquintana.com.ar/blogging/?p=54">
          <title type="text"><![CDATA[Future&amp;lt;T&amp;gt; Queries with HQL and Criteria at Dario Quintana]]></title>
        </trackback>
        <trackback id="159" date-created="2009-01-30T16:12:58" date-modified="2009-01-30T16:12:58" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/01/30/futuret_2D00_queries_2D00_with_2D00_hql_2D00_and_2D00_criteria.aspx">
          <title type="text"><![CDATA[Future&lt;T&gt; Queries with HQL and Criteria]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="158" date-created="2009-01-30T16:10:00" date-modified="2009-01-30T16:10:00" approved="true" post-url="/blogs/nhibernate/archive/2009/01/30/futuret_2D00_queries_2D00_with_2D00_hql_2D00_and_2D00_criteria.aspx" type="normal" hasexcerpt="false" views="13483">
      <title type="text"><![CDATA[Future&lt;T&gt; Queries with HQL and Criteria]]></title>
      <content type="text"><![CDATA[<p>A few days ago Oren Eini and Davy Brion were working in a new feature for NH 2.1 (no a release yet) called Future, in the <i>ICriteria</i> API. You can see and explanation of the job <a href="/blogs/nhibernate/archive/2009/01/25/nhibernate-and-future-queries.aspx">here</a>. Now I&rsquo;ve committed a complement to enable that use into the <i>IQuery</i> API, for those who prefer to use HQL.</p>
<p>What is Future Query anyway? Future are queries that are kept, waiting to be executed as a group in just one roundtrip, making use of an underlying NHibernate feature: <i>MultiCriteria/MultiQuery</i>.</p>
<p>Let&rsquo;s have a look to this simple piece of code. You can see both queries sentences, and both are executed in that sentence point against the database producing 2 roundtrips to the database. Nothing weird about this, but what if we can just execute the queries in just one roundtrip?</p>
<p><img src="http://darioquintana.com.ar/files/future01.png" /> </p>
<p>And now, using Future we can hold the execution, in this case just two, but we can hold how many queries we need. </p>
<p>Where is the trick? <i>Future</i> method is returning a delayed enumerable implementation, that&rsquo;s all. When you iterate the enumerable (with a <i>foreach</i> for example), it detects and execute all the queries using a NHibernate-MultiQuery command (could be a MultiCriteria, it depends what we are using). But we don&rsquo;t need to know nothing about the underlying implementation, just the concept.</p>
<p><img src="http://darioquintana.com.ar/files/future02.png" /> </p>
<p>In other terms, this is what happens behind the scenes:</p>
<p><img src="http://darioquintana.com.ar/files/future03.png" /> </p>
<p>But what if we want to retrieve an entity or a scalar ? This is too simple for an IEnumerable. Thanks to Davy Brion we have another feature called FutureValue. The mechanism is the same as Future, but instead of expect a IEnumerable, we obtain a single value (an entity or a scalar).</p>
<p><img src="http://darioquintana.com.ar/files/future04.png" /></p>
<p><b>Note</b>: examples adapted from Davy Brion posts <a href="http://davybrion.com/blog/2009/01/nhibernate-and-future-queries/">[1]</a> and <a href="http://davybrion.com/blog/2009/01/nhibernate-and-future-queries-part-2/">[2]</a>.</p>]]></content>
      <post-name type="text"><![CDATA[futuret-queries-with-hql-and-criteria]]></post-name>
      <categories>
        <category ref="1092" />
        <category ref="1112" />
        <category ref="1122" />
        <category ref="1123" />
        <category ref="1124" />
      </categories>
      <comments>
        <comment id="164" date-created="2009-02-07T00:04:24" date-modified="2009-02-07T00:04:24" approved="true" user-name="tobinharris" user-url="http://nhforge.org/members/tobinharris/default.aspx">
          <title type="text"><![CDATA[re: Future&lt;T&gt; Queries with HQL and Criteria]]></title>
          <content type="text"><![CDATA[Awesome :) That's a really good explanation of the Future pattern too.]]></content>
        </comment>
        <comment id="183" date-created="2009-02-27T20:38:27" date-modified="2009-02-27T20:38:27" approved="true" user-name="Carlos Peix" user-url="http://nhforge.org/members/cpeix/default.aspx">
          <title type="text"><![CDATA[re: Future&lt;T&gt; Queries with HQL and Criteria]]></title>
          <content type="text"><![CDATA[Hi Dario, nice example. Glad to see your English is getting better as well :-)]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="436" date-created="2009-07-20T23:44:44" date-modified="2009-07-20T23:44:44" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="162" date-created="2009-02-06T06:40:00" date-modified="2009-02-06T06:40:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/06/nhibernate-in-action-book-is-out.aspx" type="normal" hasexcerpt="false" views="3327">
      <title type="text"><![CDATA[NHibernate in Action Book is Out!]]></title>
      <content type="text"><![CDATA[<p><img src="http://img.skitch.com/20090206-2n1sjmrt361j39hq5k54er6u1.jpg" alt="NHibernate in Action" style="float: left; padding-right: 10px; padding-bottom: 10px;" width="339" height="253" /></p>
<p>I'm excited to announce that the <a title="NHibernate in Action at Manning Press" href="http://www.manning.com/kuate/">NHibernate in Action book</a> is finally out of print and available to buy!</p>
<p>I got my box of books this morning, they're looking great :D</p>
<p>As with all Manning books, there are a few <a title="NHibernate in Action at Manning Press" href="http://www.manning.com/kuate/">free chapters</a> posted up online. Enjoy!</p>
<p><a href="http://www.tobinharris.com/2009/2/5/nhibernate-in-action-has-arrived">More piccies here</a> on my blog.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate in action book is out]]></post-name>
      <categories>
        <category ref="1036" />
      </categories>
      <comments>
        <comment id="582" date-created="2009-12-22T17:31:17" date-modified="2009-12-22T17:31:17" approved="true" user-name="davidpizon" user-url="http://nhforge.org/members/davidpizon/default.aspx">
          <title type="text"><![CDATA[re: NHibernate in Action Book is Out!]]></title>
          <content type="text"><![CDATA[Does anyone have any other book recommendations? I'm looking into this book but would also like to hear about any other NHibernate books.]]></content>
        </comment>
        <comment id="583" date-created="2009-12-22T17:42:21" date-modified="2009-12-22T17:42:21" approved="true" user-name="bunceg" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate in Action Book is Out!]]></title>
          <content type="text"><![CDATA[Google (Bing)  is your friend...

Detailed documentation on NH is sparse. There are lots of blogs but its always hard to find stuff later (this site is an example... loads of useful stuff in blogs but not alot in a way that's easy to correlate with each other).

Biggest problem for NH IMO.... and most open source TBH. Programmers don't like writing docs.]]></content>
        </comment>
        <comment id="587" date-created="2010-01-04T08:32:51" date-modified="2010-01-04T08:32:51" approved="true" user-name="lending" user-url="http://nhforge.org/members/lending/default.aspx">
          <title type="text"><![CDATA[re: NHibernate in Action Book is Out!]]></title>
          <content type="text"><![CDATA[what this book is about?]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2193" date-created="2008-09-04T14:12:53" date-modified="2009-02-27T12:40:19" approved="true" email="tobin@tobinharris.com">
          <title type="text"><![CDATA[tobinharris]]></title>
        </author>
      </authors>
    </post>
    <post id="163" date-created="2009-02-06T16:33:00" date-modified="2009-02-06T16:33:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/06/unhaddins-persistence-conversation-part-1-configuration.aspx" type="normal" hasexcerpt="false" views="3363">
      <title type="text"><![CDATA[uNHaddins Persistence Conversation – Part 1: Configuration]]></title>
      <content type="text"><![CDATA[<p><i>This post was previously published in my blog <a target="_blank" title="uNHaddins Persistence Conversation &ndash; Part 1: Configuration" href="http://gustavoringel.blogspot.com/">here </a></i></p>
<p>uNHAddins Conversation and motivations where widely presented on Fabio&rsquo;s blog <a href="http://fabiomaulo.blogspot.com/2009/01/aspect-conversation-per.html" target="_blank">here</a>.</p>
<p>The focus of this series of posts is configuring the Persistence Conversation aspect using uNHAddins and CastleAdapter targeting a Windows Forms Application (some of the concepts are easily movable to a Web application, but there are much more frameworks and examples matching this)</p>
<p>A working example can be found in the examples folder of <a href="http://groups.google.com/group/unhaddins" target="_blank">uNHAddins</a> trunk, <a href="http://unhaddins.googlecode.com/svn/trunk/Examples/uNHAddins.Examples.SessionManagement/" target="_blank">here</a>.</p>
<p>The following assumptions are made about your repositories/Dao&rsquo;s for this to work. </p>
<p>1) You are injecting the ISessionFactory in the repositories and not an ISession. </p>
<p>2) You are using GetCurrentSession() instead of OpenSession() to get the active session inside the repositories / dao&rsquo;s.</p>
<p>3) You are able to use Castle for Dependency Injection, I hope more adapters will come in the future, but this is one that it is implemented and it is enough popular.</p>
<p>First thing we should do is to decide the conversation context strategy and set it in the hibernate cfg. For this example it is:</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span>=<span style="color: #0000ff;">"current_session_context_class"</span><span style="color: #0000ff;">&gt;</span> </pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">uNhAddIns.SessionEasier.Conversations.ThreadLocalConversationalSessionContext, uNhAddIns </pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">property</span><span style="color: #0000ff;">&gt;</span></pre>
</pre>
<p>Next thing is configuring castle to accept the PersistenceConversationalFacility, which will bring AOP in a similar manner to the TransactionalFacility from castle, and all the factories and services that compose a conversation.</p>
<p>The configuration for the facilities and default uNHAddins components for Castle can be found <a href="http://unhaddins.googlecode.com/svn/trunk/Examples/uNHAddins.Examples.SessionManagement/SessionManagement.Infrastructure/uNhAddIns-PersistenceConversation-nh-default.config" target="_blank">here</a> . There are some cases when you will want to play with the factories, this will be the reason for another post.</p>
<p>
Finally you set the way you are going to create sessions in your application (sessionFactory provider is the id to an implementation of ISessionFactoryProvider)</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">component</span> <span style="color: #ff0000;">id</span>=<span style="color: #0000ff;">"uNhAddIns.sessionFactory"</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">      <span style="color: #ff0000;">type</span>=<span style="color: #0000ff;">"NHibernate.ISessionFactory, NHibernate"</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">      <span style="color: #ff0000;">factoryId</span>=<span style="color: #0000ff;">"sessionFactoryProvider"</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">      <span style="color: #ff0000;">factoryCreate</span>=<span style="color: #0000ff;">"GetFactory"</span><span style="color: #0000ff;">&gt;</span><br /></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">      <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">parameters</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">        <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">factoryId</span><span style="color: #0000ff;">&gt;</span>uNhAddIns<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">factoryId</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">      <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">parameters</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">component</span><span style="color: #0000ff;">&gt;</span></pre>
</pre>
<p>
This is all the magic we need to set it up all. The following post will be about using it in our application. 
<br />
<br />If you want to see it working follow the link to the source at the beginning of the post.</p>]]></content>
      <post-name type="text"><![CDATA[unhaddins persistence conversation part 1 configuration]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1107" />
      </categories>
      <authors>
        <author id="2130" date-created="2008-08-30T23:23:03" date-modified="2009-02-22T10:18:57" approved="true" email="gustavo.ringel@gmail.com">
          <title type="text"><![CDATA[Gustavo]]></title>
        </author>
      </authors>
    </post>
    <post id="170" date-created="2009-02-09T22:19:00" date-modified="2009-02-09T22:19:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/09/quickly-setting-up-and-using-nhibernate-s-second-level-cache.aspx" type="normal" hasexcerpt="false" views="37402">
      <title type="text"><![CDATA[Quickly Setting Up And Using NHibernate's Second Level Cache]]></title>
      <content type="text"><![CDATA[<p>The purpose of this post is just to quickly go over what you need to do to get NHibernate's 2nd Level Cache working in your application.  If you want to read how the 1st and 2nd Level Caches work, please read Gabriel Schenker's excellent and thorough <a href="http://blogs.hibernatingrhinos.com/nhibernate/archive/2008/11/09/first-and-second-level-caching-in-nhibernate.aspx">post about it</a>.
Anyways, the first thing you need to do, is to enable the 2nd level cache.  </p>
<p>Add the following 2 properties to your hibernate.cfg.xml file:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #a31515; }
.cb3 { color: red; }
--></style>
</code></p>
<div class="cf">
<p class="cl"><span class="cb1">&nbsp; &nbsp; &lt;</span><span class="cb2">property</span><span class="cb1"> </span><span class="cb3">name</span><span class="cb1">=</span>"<span class="cb1">cache.use_second_level_cache</span>"<span class="cb1">&gt;</span>true<span class="cb1">&lt;/</span><span class="cb2">property</span><span class="cb1">&gt;</span></p>
<p class="cl"><span class="cb1">&nbsp; &nbsp; &lt;</span><span class="cb2">property</span><span class="cb1"> </span><span class="cb3">name</span><span class="cb1">=</span>"<span class="cb1">cache.use_query_cache</span>"<span class="cb1"> &gt;</span>true<span class="cb1">&lt;/</span><span class="cb2">property</span><span class="cb1">&gt;</span></p>
</div>
<p>

The first one (obviously) enables the 2nd level cache, while the second one enables query caching. That basically means that you can (optionally) cache the results of specific queries.  Note that this doesn't mean that the results of all queries will be cached, only the ones where you specify that the results can be cached.
Next, you need to choose a CacheProvider.  There are various options available, although i generally just use SysCache (which makes use of the ASP.NET Cache).  You can download the CacheProviders <a href="http://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=286204">here</a>.
</p>
<p>Once you've picked out a CacheProvider, you need to add a property for it to your hibernate.cfg.xml file as well:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #a31515; }
.cb3 { color: red; }
--></style>
</code></p>
<div class="cf">
<p class="cl"><span class="cb1">&nbsp; &nbsp; &lt;</span><span class="cb2">property</span><span class="cb1"> </span><span class="cb3">name</span><span class="cb1">=</span>"<span class="cb1">cache.provider_class</span>"<span class="cb1">&gt;</span>NHibernate.Caches.SysCache.SysCacheProvider, NHibernate.Caches.SysCache<span class="cb1">&lt;/</span><span class="cb2">property</span><span class="cb1">&gt;</span></p>
</div>
<p>

Let's first start with caching the results of a query.  Suppose we have the following query:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #2b91af; }
.cb3 { color: #a31515; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">var</span> products = session.CreateCriteria(<span class="cb1">typeof</span>(<span class="cb2">Product</span>))</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span class="cb2">Restrictions</span>.Eq(<span class="cb3">"Category.Id"</span>, categoryId))</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .List&lt;<span class="cb2">Product</span>&gt;();</p>
</div>
<p>

If we want NHibernate to cache the results of this query, we can make that happen like this:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #2b91af; }
.cb3 { color: #a31515; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">var</span> products = session.CreateCriteria(<span class="cb1">typeof</span>(<span class="cb2">Product</span>))</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .SetCacheable(<span class="cb1">true</span>)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span class="cb2">Restrictions</span>.Eq(<span class="cb3">"Category.Id"</span>, categoryId))</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .List&lt;<span class="cb2">Product</span>&gt;();</p>
</div>
<p>

When we execute this query, NHibernate will cache the results of this query.  It is very important to know that it won't actually cache all of the values of each row.  Instead, when the results of queries are cached, only the identifiers of the returned rows are cached.
So what happens when we execute the query the first time with categoryId containing the value 1? It sends the correct SQL statement to the database, creates all of the entities, but it only stores the identifiers of those entities in the cache.  The second time you execute this query with categoryId containing the value 1, it will retrieve the previously cached identifiers but then it will go to the database to fetch each row that corresponds with the cached identifiers.
</p>
<p>Obviously, this is bad.  What good is caching if it's actually making us go to the database more often than without caching?  That is where entity caching comes in.  In this case, our query returns Product entities, but because the Product entity hasn't been configured for caching, only the identifiers are cached.  If we enable caching for Product entities, the resulting identifiers of the query will be cached, as well as the actual entities.  In this case, the second time this query is executed with a categoryId with value 1, we won't hit the database at all because both the resulting identifiers as well as the entities are stored in the cache.  
</p>
<p>To enable caching on the entity level, add the following property right below the class definition in the Product.hbm.xml file:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #a31515; }
.cb3 { color: red; }
--></style>
</code></p>
<div class="cf">
<p class="cl"><span class="cb1">&nbsp; &lt;</span><span class="cb2">class</span><span class="cb1"> </span><span class="cb3">name</span><span class="cb1">=</span>"<span class="cb1">Product</span>"<span class="cb1"> </span><span class="cb3">table</span><span class="cb1">=</span>"<span class="cb1">Products</span>"<span class="cb1">&gt;</span></p>
<p class="cl"><span class="cb1">&nbsp; &nbsp; &lt;</span><span class="cb2">cache</span><span class="cb1"> </span><span class="cb3">usage</span><span class="cb1">=</span>"<span class="cb1">read-write</span>"<span class="cb1">/&gt;</span></p>
</div>
<p>

This tells NHibernate to store the data of Product entities in the 2nd level cache, and that any updates that we make to Product entities need to be synchronized in both the database and the cache.
That's pretty much all you need to do to get the 2nd Level Cache working.  But please keep in mind that there is a lot more to caching than what i showed in this post.  Reading Gabriel's post on caching is an absolute must IMO.  Caching is a powerful feature, but with great power comes great responsibility. Learn how to use it wisely :)</p>
<p>If you liked this post, please check out my <a target="_blank" href="http://davybrion.com/">blog</a> where i post about NHibernate and (.NET) development in general.</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[quickly setting up and using nhibernate s second level cache]]></post-name>
      <trackbacks>
        <trackback id="1015" date-created="2012-02-26T22:53:10" date-modified="2012-02-26T22:53:10" approved="true" url="http://www.sharpcoder.co.uk/post/2012/01/11/NHibernateCachesAppFabric-Documentation.aspx">
          <title type="text"><![CDATA[NHibernate.Caches.AppFabric - Documentation]]></title>
        </trackback>
        <trackback id="1100" date-created="2014-09-27T05:11:51" date-modified="2014-09-27T05:11:51" approved="true" url="http://genesiswochenende.slipperman.de/index.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fgoogle-play-gift-card-generator%2F%3EGoogle+Play+Redeem+Codes%3C%2Fa%3E">
          <title type="text"><![CDATA[http://genesiswochenende.slipperman.de/index.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fgoogle-play-gift-card-generator%2F%3EGoogle+Play+Redeem+Codes%3C%2Fa%3E]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="172" date-created="2009-02-10T00:12:00" date-modified="2009-02-10T00:12:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/09/nh2-1-0-new-generators.aspx" type="normal" hasexcerpt="false" views="18501">
      <title type="text"><![CDATA[NH2.1.0: New generators]]></title>
      <content type="text"><![CDATA[<p>This post is an recognition that we had lost the fight with Identity's fans. As you probably know <a href="http://fabiomaulo.blogspot.com/2008/12/identity-never-ending-story.html">I don&rsquo;t like Identity</a>, but as a NHibernate-developer I can&rsquo;t ignore ours users requests. </p>
<p>This is the complete list of <strong>POID</strong> (<strong>P</strong>ersistent <strong>O</strong>bject <strong>ID</strong>entifier) generators provided by NHibernate2.1.0:</p>
<ul>
<li>native </li>
<li>identity (<strong>improved</strong>) </li>
<li>sequence </li>
<li>hilo </li>
<li>seqhilo </li>
<li>assigned </li>
<li>guid </li>
<li>guid.comb </li>
<li>guid.native (<strong>new</strong>) </li>
<li>select (<strong>new</strong>) </li>
<li>sequence-identity (<strong>new</strong>) </li>
<li>trigger-identity (<strong>new</strong>) </li>
<li>uuid.hex </li>
<li>uuid.string </li>
<li>counter </li>
<li>increment </li>
<li>foreign </li>
</ul>
<h4>guid.native</h4>
<p>Is a new generator that allow to use the RDBMS native function to generate GUID. The behavior is similar to the &ldquo;sequence&rdquo; generator: when a new object is saved NH run two query; the first to retrieve the GUID value and the second to insert the entity using the Guid retrieved from RDBMS. The type in your entity is System.<span style="color: #2bafa5">Guid</span> and the SQLtype depend from the dialect (RAW(16) in Oracle, UniqueIdentifier in MsSQL for example).</p>
<p>Queries that runs in ORACLE are:</p>
<ol>
<li>select rawtohex(sys_guid()) from dual </li>
<li>INSERT INTO MyEntityTable (Id, Description) VALUES (:p0, :p1) </li>
</ol>
<p>The&nbsp; parameter &ldquo;:p0&rdquo; has the value retrieved in the first query.</p>
<h4>sequence-identity</h4>
<p>The &ldquo;sequence-identity&rdquo; is based on &ldquo;sequence&rdquo; but work as an &ldquo;identity&rdquo;. The POID values is retrieved with the INSERT query. The types, in your entity, maybe are System.<span style="color: #2bafa5">Int32</span> or System.<span style="color: #2bafa5">Int64</span> depending on your RDBMS sequence generator.</p>
<p>The query that run in ORACLE is:</p>
<p>INSERT INTO my_entity (id, name) VALUES (hibernate_sequence.nextval, :p0) returning id into :nhIdOutParam</p>
<p>The &ldquo;hibernate_sequence&rdquo; is the default name for a sequence where no alternative name is provided trough the mapping. As you can see, in this case, the &ldquo;sequence&rdquo; are working like &ldquo;identity&rdquo;, the value of the POID is retrieved immediately and the generator has the same problem of &ldquo;identity&rdquo;.</p>
<h4>trigger-identity</h4>
<p>The &ldquo;trigger-identity&rdquo; is a NHibernate specific feature where the POID is generated by the RDBMS at the INSERT query trough a BEFORE INSERT trigger. In this case you can use any supported type, including custom type, with the limitation of &ldquo;single-column&rdquo; (so far).</p>
<p>The query in ORACLE is:</p>
<p>INSERT INTO my_entity (Name) VALUES (:p0) returning Id into :nhIdOutParam</p>
<p>As you can see the query is very similar to the query used to work with &ldquo;identity&rdquo;; the &ldquo;Id&rdquo; field is not present in the FieldsNameList nor in VALUES list and the value of the POID is retrieved immediately. What the trigger are doing to generate the &ldquo;Id&rdquo; field value is out-side of NH scope.</p>
<h4>select</h4>
<p>The &ldquo;select&rdquo; generator is a deviation of the &ldquo;trigger-identity&rdquo;. This generator work together with <strong><a href="http://www.hibernate.org/hib_docs/v3/reference/en-US/html_single/#mapping-declaration-naturalid">natural-id</a></strong> feature. The difference &ldquo;trigger-identity&rdquo; is that the POID value is retrieved by a SELECT using the <strong>natural-id</strong> fields as filter. In practice giving</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyEntity</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">my_entity</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">select</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">natural-id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">name</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">natural-id</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>and having a trigger to generate the POID, the queries runs in ORACLE are:</p>
<ol>
<li>INSERT INTO my_entity (name) VALUES (:p0) </li>
<li>SELECT id FROM my_entity WHERE name = :p0 </li>
</ol>
<p>The POID still retrieved immediately.</p>
<h4>identity</h4>
<p>The &ldquo;identity&rdquo; generator is well known by NH&lt;-&gt;MsSQL users but, before NH2.1.0, can&rsquo;t be used for others RDBMS if the RDBMS don&rsquo;t support native identity-generator. What happen if you have one multi-RDBMS-application and your DBA want use an identity-style generator in each RDBMS ? Which is your work with mappings files for NHibernate ? Well&hellip; we have changed the meaning of &ldquo;identity&rdquo;. In NH2.1.0 defining &lt;generator class="identity"/&gt; your are saying : &ldquo;I want work with an identity-style generator; check my dialect to know which is the correct generator for identity&rdquo;.</p>
<p>By default, when you specify &ldquo;identity&rdquo;, NH run the follow:</p>
<pre class="code"><span style="color: blue">if </span>(SupportsIdentityColumns)<br />{<br /><span style="color: blue">return typeof</span>(<span style="color: #2b91af">IdentityGenerator</span>);<br />}<br /><span style="color: blue">else if </span>(SupportsSequences)<br />{<br /><span style="color: blue">return typeof</span>(<span style="color: #2b91af">SequenceIdentityGenerator</span>);<br />}<br /><span style="color: blue">else<br /></span>{<br /><span style="color: blue">return typeof</span>(<span style="color: #2b91af">TriggerIdentityGenerator</span>);<br />}</pre>
<p>If you need a different behavior you can inherit from the default dialect, for your RDBMS, and override the property <strong>IdentityStyleIdentifierGeneratorClass</strong>.</p>
<h4>Conclusion</h4>
<p>Now you have a more easy way to break the unit-of-work pattern, and to nullify the batcher, for all NH&rsquo;s supported dialects: specify &ldquo;identity&rdquo; as your identifier generator.</p>]]></content>
      <post-name type="text"><![CDATA[nh2 1 0 new generators]]></post-name>
      <categories>
        <category ref="1043" />
        <category ref="1092" />
        <category ref="1125" />
      </categories>
      <comments>
        <comment id="342" date-created="2009-05-30T13:28:26" date-modified="2009-05-30T13:28:26" approved="true" user-name="zoechi" user-url="http://nhforge.org/members/zoechi/default.aspx">
          <title type="text"><![CDATA[re: NH2.1.0: New generators]]></title>
          <content type="text"><![CDATA[I wonder while the HiLo generator is working in such a weird way.

The next_hi column is incremented only by 1 no matter which value is set for max_lo.
The generated ids are somewhat of a multiply of next_hi and max_lo.

Why isn't the the last reserved id or alternatively the next available id stored in the HiLo table next_hi column
incremented by max_lo on each access?
This way it would be easy to share the number sequence for id generation with other applications sharing the same database.

The max_lo may be set differently in each class mapping file.
Which one is effectively taken for the calculation of the generated id?

I have found very few posts complaining about this (the first one about 2004) and consider it a bug, as I do.
I wonder why this isn't a problem for more other NHibernate users.


]]></content>
        </comment>
        <comment id="394" date-created="2009-06-26T21:29:09" date-modified="2009-06-26T21:29:09" approved="true" user-name="swtmin" user-url="http://">
          <title type="text"><![CDATA[re: NH2.1.0: New generators]]></title>
          <content type="text"><![CDATA[I have tried using trigger-identity with Oracle, and the SQL generated is missing the RETURNING keyword, so it fails.

Example:
INSERT INTO BANK_ACK_FILE (DATA, UPLOAD_ID, SUB_TYPE_ID, ENTITY_ID, DATA_TYPE_ID) VALUES (:p0, :p1, :p2, :p3, :p4);:p0 = 'Iz in your bank ack phile. Now can haz loan?', :p1 = 1, :p2 = 2006, :p3 = 3070, :p4 = 1019, :nhIdOutParam = NULL

Note the presence of the Id out parameter, but again the RETURNING syntax is missing.

Mapping file has:
    <id name="Id" column="ID" type="Int64">
		<generator class="trigger-identity">
		</generator>
	</id>

Am I doing something wrong, or is this a bug?]]></content>
        </comment>
        <comment id="396" date-created="2009-06-26T22:32:55" date-modified="2009-06-26T22:32:55" approved="true" user-name="swtmin" user-url="http://">
          <title type="text"><![CDATA[re: NH2.1.0: New generators]]></title>
          <content type="text"><![CDATA[Should probably have include my config:
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-configuration xmlns="urn:nhibernate-configuration-2.2" >
    <session-factory>
        <property name="connection.provider">NHibernate.Connection.DriverConnectionProvider</property>
        <property name="connection.driver_class">NHibernate.Driver.OracleDataClientDriver</property>
        <property name="connection.connection_string">Data Source=dev;User ID=xxxx;password=******;Connection Timeout=45;Max Pool Size=25;Incr Pool Size=2; Decr Pool Size=2</property>
        <property name="show_sql">false</property>
        <property name="dialect">NHibernate.Dialect.Oracle10gDialect</property>
        <property name="connection.release_mode">after_transaction</property>
        <property name="proxyfactory.factory_class">NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle</property>
        <mapping assembly="Sfs.Efc.Core.DataModel"/>
    </session-factory>
</hibernate-configuration>]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="435" date-created="2009-07-20T23:44:41" date-modified="2009-07-20T23:44:41" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="173" date-created="2009-02-10T07:17:00" date-modified="2009-02-10T07:17:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/10/unhaddins-persistence-conversation-part-2-configuring-the-conversation.aspx" type="normal" hasexcerpt="false" views="4063">
      <title type="text"><![CDATA[uNHAddins Persistence Conversation – Part 2: Configuring the conversation]]></title>
      <content type="text"><![CDATA[<p>In the <a href="http://gustavoringel.blogspot.com/2009/02/unhaddins-persistence-conversation-part.html" target="_blank">first post</a> I showed how to configure the uNHAddins conversation. Now I will show how to use the PersistenceConversation aspects to manage a uNHAddins conversation.</p>
<p>A class which will rule a conversation should be marked as [PersistenceConversational] every public method that is part of a conversation should be marked as [PersistenceConversation]. </p>
<p>In the example code we have the interface </p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> IModifyOrderModel</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">{</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  PurchaseOrder FindOrderOrCreateNew(<span style="color: #0000ff;">string</span> number, DateTime dateTime);</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">void</span> Persist(PurchaseOrder order);</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">void</span> AbortConversation();</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">}</pre>
</pre>
<p>
which is implemented by the ModifyOrderModel class:</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">[PersistenceConversational]</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> ModifyOrderModel : IModifyOrderModel</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">{</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">readonly</span> IOrderRepository orderRepository;</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p><span style="color: #0000ff;">public</span> ModifyOrderModel(IOrderRepository orderRepository)</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p>{</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p><span style="color: #0000ff;"><span style="color: #333333;">  </span>this</span>.orderRepository = orderRepository;</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p>}</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p>[PersistenceConversation(ConversationEndMode = EndMode.Abort)]</p></blockquote></pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><blockquote><p><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> AbortConversation()</p></blockquote></pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><blockquote><p>{<span style="color: #008000;"><span style="color: #333333;">  </span>// Rollback the use case </span>}</p></blockquote></pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><blockquote><p>[PersistenceConversation<span style="color: #0000ff;">]</span></p><p><span style="color: #0000ff;">public</span> PurchaseOrder FindOrderOrCreateNew(<span style="color: #0000ff;">string</span> number, DateTime dateTime)</p><p>{</p><p style="padding-left: 30px;">var order = orderRepository.GetOrderByNumberAndDate(number, dateTime.Date);<span style="color: #0000ff;"><br /></span></p><p style="padding-left: 30px;"><span style="color: #0000ff;">if</span> (order == <span style="color: #0000ff;">null</span>)</p></blockquote></pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><blockquote><p style="padding-left: 30px;">{</p><p style="padding-left: 60px;">order = <span style="color: #0000ff;">new</span> PurchaseOrder { Date = dateTime, Number = number }; </p><p style="padding-left: 30px;">}</p><p><span style="color: #0000ff;">  return</span> order;</p><p>}</p></blockquote></pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace">          [PersistenceConversation(ConversationEndMode = EndMode.End)]</pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><span style="color: #0000ff;"><span style="color: #333333;">          </span>public</span> <span style="color: #0000ff;">void</span> Persist(PurchaseOrder order)</pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace">         {</pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace"><blockquote><p>orderRepository.MakePersistent(order);</p><p>}</p><p>}</p></blockquote></pre>
</pre>
<p>This class manages the order modification conversation. As you see we don&rsquo;t have references to NHibernate at this point. We do have an IOrderRepository which is going to provide the data we need for the conversation.</p>
<p>The implementation of the repository in the example is very simple, one important thing to notice is that we are injecting an ISessionFactory:</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> OrderRepository : Repository&lt;PurchaseOrder&gt;, IOrderRepository</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">{</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p><span style="color: #0000ff;">public</span> OrderRepository(ISessionFactory sessionFactory) : <span style="color: #0000ff;">base</span>(sessionFactory) { }</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p><span style="color: #0000ff;">public</span> PurchaseOrder GetOrderByNumberAndDate(<span style="color: #0000ff;">string</span> number, DateTime dateTime)</p></blockquote></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><blockquote><p style="padding-left: 30px;">{ var query = Session.GetNamedQuery("<span style="color: #8b0000;">GetOrderByNumberAndDate</span>").SetParameter("<span style="color: #8b0000;">number</span>", number).SetParameter("<span style="color: #8b0000;">dateTime</span>", dateTime); <span style="color: #0000ff;"><br /></span></p><p style="padding-left: 30px;"><span style="color: #0000ff;">return</span> query.UniqueResult&lt;PurchaseOrder&gt;();</p><p>}</p></blockquote></pre>
</pre>
<p>
The Repository&lt;T&gt; is a very thin class which gives minimum CRUD implementations using NH. The interesting part is how we are getting a session:</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">protected</span> ISession Session</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">{</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">get</span> { <span style="color: #0000ff;">return</span> factory.GetCurrentSession(); }</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">}</pre>
</pre>
<p>From the doc: GetCurrentSession() Obtains the current session. The definition of what exactly "current" means controlled by the <a href="http://www.hibernate.org/hib_docs/v3/api/org/hibernate/context/CurrentSessionContext.html"><code>CurrentSessionContext</code></a> impl configured for use</p>
<p>In our case if you remember from the <a href="http://gustavoringel.blogspot.com/2009/02/unhaddins-persistence-conversation-part.html" target="_blank">first post</a> we are using the uNHAddins <a href="http://www.hibernate.org/hib_docs/v3/api/org/hibernate/context/CurrentSessionContext.html"><code>ThreadLocalConversationalSessionContext</code></a>, which in general is good enough for a Windows Forms Application.</p>
<p>
You may have noticed a property ConversationalEndMode in the PersistenceConversation attribute, for now there are three options:</p>
<p>EndMode.Continue: Can start a conversation and lives it alive.</p>
<p>EndMode.End: Flushes the session and commits current transactions, then it disposes the session</p>
<p>EndMode.Abort: Disposes the session (without accepting the changes)</p>
<p>
Basically this is it. In the <a href="http://unhaddins.googlecode.com/svn/trunk/Examples/uNHAddins.Examples.SessionManagement/" target="_blank">example code</a> you can find an application using MVP with this ideas. Feel free to comment / ask in the <a href="http://groups.google.com/group/unhaddins" target="_blank">uNHAddins forum</a> about it.</p>]]></content>
      <post-name type="text"><![CDATA[unhaddins persistence conversation part 2 configuring the conversation]]></post-name>
      <categories>
        <category ref="1029" />
        <category ref="1089" />
        <category ref="1107" />
        <category ref="1127" />
      </categories>
      <authors>
        <author id="2130" date-created="2008-08-30T23:23:03" date-modified="2009-02-22T10:18:57" approved="true" email="gustavo.ringel@gmail.com">
          <title type="text"><![CDATA[Gustavo]]></title>
        </author>
      </authors>
    </post>
    <post id="174" date-created="2009-02-15T17:47:00" date-modified="2009-02-15T17:47:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/15/nh-forge-news.aspx" type="normal" hasexcerpt="false" views="1361">
      <title type="text"><![CDATA[NH-Forge News]]></title>
      <content type="text"><![CDATA[<p>As you can see in this last moth something are changing in <a href="/">NH-Forge</a>.</p>
<p>A big THANK YOU and a lot of KUDOS to <a href="http://www.tobinharris.com/">Tobin Harris</a> for his effort.</p>]]></content>
      <post-name type="text"><![CDATA[nh forge news]]></post-name>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="175" date-created="2009-02-18T15:00:00" date-modified="2009-02-18T15:00:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/18/nhibernate-validator-fluent-interface-configuration.aspx" type="normal" hasexcerpt="false" views="5211">
      <title type="text"><![CDATA[NHibernate.Validator: fluent-interface configuration]]></title>
      <content type="text"><![CDATA[<p>As announced in the <a href="http://fabiomaulo.blogspot.com/2009/02/nhvloquacious-fluent-configuration-for.html">this post</a> NHibernate.Validator (NHV for friends) has its own embedded configuration based on fluent-interface (<strong>Loquacious</strong> for friends). This new feature will be general-available with the next version <strong>NHV1.2.0</strong>.</p>
<h4>The NHV configuration</h4>
<p>As test and because the new configuration is &ldquo;Loquacious&rdquo; enough I&rsquo;m going to expose some examples without explication.</p>
<p>Example 1:</p>
<pre class="code"><span style="color: blue">var </span>configure = <span style="color: blue">new </span><span style="color: #2b91af">FluentConfiguration</span>();<br />configure.Register(<br />  <span style="color: #2b91af">Assembly</span>.GetExecutingAssembly().GetTypes()<br />      .Where(t =&gt; t.Namespace.Equals(<span style="color: #a31515">"Company.Product.YourNamespace"</span>))<br />      .ValidationDefinitions())<br />  .SetDefaultValidatorMode(<span style="color: #2b91af">ValidatorMode</span>.UseExternal);<br /><br />ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br />ve.Configure(configure);</pre>
<p>Example 2:</p>
<pre class="code"><span style="color: blue">var </span>configure = <span style="color: blue">new </span><span style="color: #2b91af">FluentConfiguration</span>();<br />configure.Register(<br />  <span style="color: #2b91af">Assembly</span>.Load(<span style="color: #a31515">"Company.Product"</span>)<br />  .ValidationDefinitions()<br />  .Where(t =&gt; t.Namespace.Equals(<span style="color: #a31515">"Company.Product.YourNamespace"</span>))<br />  )<br />.SetDefaultValidatorMode(<span style="color: #2b91af">ValidatorMode</span>.UseExternal)<br />.IntegrateWithNHibernate.ApplyingDDLConstraints().And.RegisteringListeners();<br /><br />ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br />ve.Configure(configure);</pre>
<p>The only thing you can&rsquo;t configure, using <span style="color: #2b91af">FluentConfiguration</span>, is the <em>SharedEngineProvider</em> because it is configurable only trough application config (by the way, from what I saw on the NET, an explication about what is the SharedEngineProvider is needed).</p>
<p>For the configuration, I have add two extensions methods, both named <em>ValidationDefinitions()</em>, to <span style="color: #2b91af">Assembly</span> and to <span style="color: #2b91af">IEnumerable</span>&lt;System.<span style="color: #2b91af">Type</span>&gt;.</p>
<h4>The configuration of class validation</h4>
<p>Example v1:</p>
<pre class="code"><span style="color: blue">public </span>AddressDef()<br />{<br />  Define(x =&gt; x.Country)<br />      .MaxLength(20).And<br />      .NotNullable();<br />  Define(x =&gt; x.floor)<br />      .IncludedBetween(-2, 50).WithMessage(<span style="color: #a31515">"{floor.out.of.range}"</span>);<br />  Define(x =&gt; x.Id)<br />      .IncludedBetween(1, 2000);<br />  Define(x =&gt; x.Line1)<br />      .NotNullable();<br />  Define(x =&gt; x.State)<br />      .NotNullable().And<br />      .MaxLength(3);<br />  Define(x =&gt; x.Zip)<br />      .NotNullable().And<br />      .MaxLength(5).WithMessage(<span style="color: #a31515">"{long}"</span>).And<br />      .MatchWith(<span style="color: #a31515">"[0-9]+"</span>);<br />  Define(x =&gt; x.InternalValid)<br />      .IsTrue();<br />}</pre>
<p>What happen at design-time ? Some images are more clear than 100 words&hellip;</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DateTimePropVS_5F00_55A70EE6.png"><img border="0" width="415" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DateTimePropVS_5F00_thumb_5F00_1570F56C.png" alt="DateTimePropVS" height="121" title="DateTimePropVS" /></a></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DateTimePropVS_5F00_55A70EE6.png"></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/IntegerPropVS_5F00_23433B67.png"><img border="0" width="472" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/IntegerPropVS_5F00_thumb_5F00_05D0EA5B.png" alt="IntegerPropVS" height="166" title="IntegerPropVS" /></a></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/IntegerPropVS_5F00_23433B67.png"></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DecimalPropVS_5F00_536D16DB.png"><img border="0" width="471" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DecimalPropVS_5F00_thumb_5F00_2109435C.png" alt="DecimalPropVS" height="167" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="DecimalPropVS" /></a></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DecimalPropVS_5F00_536D16DB.png"></a> <a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/StrPropVS_5F00_6EA56FDC.png"><img border="0" width="591" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/StrPropVS_5F00_thumb_5F00_07350D2D.png" alt="StrPropVS" height="201" title="StrPropVS" /></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EnumerablePropVS_5F00_62A37FA8.png"><img border="0" width="624" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EnumerablePropVS_5F00_thumb_5F00_10249F6C.png" alt="EnumerablePropVS" height="198" title="EnumerablePropVS" /></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EntityRelationPropVS_5F00_529741A2.png"><img border="0" width="591" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EntityRelationPropVS_5F00_thumb_5F00_4458C8B2.png" alt="EntityRelationPropVS" height="120" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="EntityRelationPropVS" /></a>&nbsp;&nbsp;</p>
<p>The first advantage of fluent-interface-configuration appear clear: a very little example is that you <strong>can&rsquo;t</strong> define an integer property as not-nullable.</p>
<p>For instance validators here is the example using Attributes and its equivalent using fluent-configuration:</p>
<p>
Example v2: 
</p>
<pre class="code">[<span style="color: #2b91af">AssertAnimal</span>]<br /><span style="color: blue">public class </span><span style="color: #2b91af">Suricato<br /></span>{<br />}<br /><br /><span style="color: blue">public class </span><span style="color: #2b91af">SuricatoDef</span>:<span style="color: #2b91af">ValidationDef</span>&lt;<span style="color: #2b91af">Suricato</span>&gt;<br />{<br />  <span style="color: blue">public </span>SuricatoDef()<br />  {<br />      ValidateInstance.Using(<span style="color: blue">new </span><span style="color: #2b91af">AssertAnimalAttribute</span>());<br />  }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>Extending constraints configuration</h4>
<p>Who know NHV know that we have some country-specific validators. Country-specific-validator is a clear example about how extend the framework.</p>
<p>The follow is the implementation of NHibernate.Validator.Specific.It (validators available for Italy):</p>
<pre class="code"><span style="color: blue">public static class </span><span style="color: #2b91af">ItLoquaciousExtensions<br /></span>{<br />  <span style="color: blue">public static </span><span style="color: #2b91af">IRuleArgsOptions </span>IsCodiceFiscale(<span style="color: blue">this </span><span style="color: #2b91af">IStringConstraints </span>definition)<br />  {<br />      <span style="color: blue">return </span>((<span style="color: #2b91af">IConstraints</span>)definition).AddWithFinalRuleArgOptions(<span style="color: blue">new </span><span style="color: #2b91af">CodiceFiscaleAttribute</span>());<br />  }<br /><br />  <span style="color: blue">public static </span><span style="color: #2b91af">IRuleArgsOptions </span>IsPartitaIva(<span style="color: blue">this </span><span style="color: #2b91af">IStringConstraints </span>definition)<br />  {<br />      <span style="color: blue">return </span>((<span style="color: #2b91af">IConstraints</span>)definition).AddWithFinalRuleArgOptions(<span style="color: blue">new </span><span style="color: #2b91af">PartitaIvaAttribute</span>());<br />  }<br /><br />  <span style="color: blue">public static </span><span style="color: #2b91af">IRuleArgsOptions </span>IsPartitaIva(<span style="color: blue">this </span><span style="color: #2b91af">IIntegerConstraints </span>definition)<br />  {<br />      <span style="color: blue">return </span>((<span style="color: #2b91af">IConstraints</span>)definition).AddWithFinalRuleArgOptions(<span style="color: blue">new </span><span style="color: #2b91af">PartitaIvaAttribute</span>());<br />  }<br />}</pre>
<p>And obviously, at design-time, it appear like this:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/It_5F00_IntegerPropVS_5F00_26E677A6.png"><img border="0" width="517" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/It_5F00_IntegerPropVS_5F00_thumb_5F00_0D7E746C.png" alt="It_IntegerPropVS" height="181" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="It_IntegerPropVS" /></a> </p>
<h4>Conclusions</h4>
<p>Sometimes NHV is not so well know by NHibernate users (NHV has 5% of NH downloads). If you are using some other validation framework, in applications where you are using NHibernate, you should check if the validator are initializing collections and relations (proxy)&hellip; perhaps we should write something else about how NHV work together with NHibernate.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator fluent interface configuration]]></post-name>
      <categories>
        <category ref="1128" />
        <category ref="1129" />
      </categories>
      <trackbacks>
        <trackback id="207" date-created="2009-03-16T13:41:45" date-modified="2009-03-16T13:41:45" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/03/16/nhibernate-validator-1-2-alpha1-released.aspx">
          <title type="text"><![CDATA[NHibernate Validator 1.2 alpha1 released]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="176" date-created="2009-02-19T21:10:00" date-modified="2009-02-19T21:10:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/19/nhibernate-burrow-1-0-2-ga-is-released.aspx" type="normal" hasexcerpt="false" views="3886">
      <title type="text"><![CDATA[NHibernate.Burrow 1.0.2 GA is released!]]></title>
      <content type="text"><![CDATA[<p>NHibernate.Burrow is a light weight middleware developed to support .Net applications using NHibernate (maybe also referred as NH in this article) as ORM framework by providing advanced and smart session/transaction management and other facilitates. Documentation and examples are available at http://NHForge.net Any feedback can be sent to NHibernate user group(http://groups.google.com/group/nhusers). Issues can be submitted to http://http://jira.nhforge.org/ They will be greatly appreciated. Please go to http://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=272688 to download</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate burrow 1 0 2 ga is released]]></post-name>
      <categories>
        <category ref="1113" />
      </categories>
      <comments>
        <comment id="373" date-created="2009-06-15T08:19:09" date-modified="2009-06-15T08:19:09" approved="true" user-name="africazheng" user-url="http://nhforge.org/members/africazheng/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Burrow 1.0.2 GA is released!]]></title>
          <content type="text"><![CDATA[hi,Burrow is great.

And now I have a question about burrow when I used it in my asp.net project.

I use jquery post a asp.net form to save some info, just like the following:
$(document).ready(function() {
    var options = {
        beforeSubmit: showRequest,
        success: showResponse,
        url: "Handler/AddCustomerHandler.ashx",
        data: {func:"SaveCustomer"}
    };

    $('#aspnetForm').submit(function() {
        $(this).ajaxSubmit(options);        
    });

});
n the ashx file,I need access form data and save them.when I just save the Customer (use customerDao),it's success.But when I save the Customer info and save Customer phone info in the save time( use CustomerDao and CustoemrPhoneDao),the page client can not access any response text.

 public void ProcessRequest(HttpContext context)
  {
   .....................................
     if (function == "SaveCustomer")
        {
            Customer customer = SaveCustomer(context);
            context.Response.Write(customer.Serialno.ToString() + " - " + customer.Name);
        }
    .............................
}

  private Customer SaveCustomer(HttpContext context)
  {
    string customerName = context.Request.Form["customer_name"];
        string customerCategory = context.Request.Form["customer_category"];

       ..............................
      //set some properties
     ...................................

 CustomerDao customerDao = new CustomerDao();
        customerDao.Save(customer);

        CustomerPhoneDao phoneDao = new CustomerPhoneDao();
        CustomerPhone phone = new CustomerPhone();

        ..........................
       set some properties
       ........................................
        phone.Customer = customer;
        phoneDao.Save(phone);

        return customer;
}

btw:
at unit test ,the same time to save two entity is passed.So I have no idea now ~
]]></content>
        </comment>
        <comment id="374" date-created="2009-06-15T14:05:22" date-modified="2009-06-15T14:05:22" approved="true" user-name="kailuowang" user-url="http://nhforge.org/members/kailuowang/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Burrow 1.0.2 GA is released!]]></title>
          <content type="text"><![CDATA[africazheng, you have to make sure that you see error messages. 
In your unit test, did you use Burrow? If not please do.  please check burrow faq for how. 

]]></content>
        </comment>
        <comment id="588" date-created="2010-01-04T23:26:36" date-modified="2010-01-04T23:26:36" approved="true" user-name="Banks" user-url="http://nhforge.org/members/Banks/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Burrow 1.0.2 GA is released!]]></title>
          <content type="text"><![CDATA[Documentation and examples are available at http://NHForge.net]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2123" date-created="2008-08-30T15:08:45" date-modified="2010-01-04T23:29:30" approved="true" email="kailuo.wang@gmail.com">
          <title type="text"><![CDATA[kailuowang]]></title>
        </author>
      </authors>
    </post>
    <post id="177" date-created="2009-02-22T05:18:00" date-modified="2009-02-22T05:18:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/22/encrypting-password-or-other-strings-in-nhibernate.aspx" type="normal" hasexcerpt="false" views="5890">
      <title type="text"><![CDATA[Encrypting password (or other strings) in NHibernate]]></title>
      <content type="text"><![CDATA[<p>As you can read in every forum the solution to encrypting/decrypting a password is using an IUserType. Implementing an IUserType in NH is somewhat easy, so we added to uNHAddins a user type which will do the encryption.</p>
<p>The source code can be grabbed from <a href="http://code.google.com/p/unhaddins/" target="_blank">uNHAddins</a> <a href="http://unhaddins.googlecode.com/svn/trunk/" target="_blank">trunk</a>.</p>
<p>If you use it &ldquo;as is&rdquo; you will get an encryption using the symmetric algorithm DESCryptoServiceProvider. There is no special decision for this but to have some default option to do the job.</p>
<p>There are several ways to use the user type, the most common but less recommended (unless you are using it only once):</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span>=<span style="color: #0000ff;">"Password"</span> <span style="color: #ff0000;">type</span>=<span style="color: #0000ff;">"</span><span style="color: #0000ff;">uNHAddIns.UserTypes.EncryptedString, uNHAddins</span><span style="color: #0000ff;">"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</pre>
<p>
The preferred way will be using &lt;typedef&gt; to define the user type as in the following:</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">typedef</span> <span style="color: #ff0000;">class</span>=<span style="color: #0000ff;">"uNHAddIns.UserTypes.EncryptedString, uNHAddIns"</span> <span style="color: #ff0000;">name</span>=<span style="color: #0000ff;">"Encrypted"</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">param</span> <span style="color: #ff0000;">name</span>=<span style="color: #0000ff;">"encryptor"</span><span style="color: #0000ff;">&gt;</span>uNhAddIns.UserTypes.uNHAddinsEncryptor, uNhAddIns<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">param</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">param</span> <span style="color: #ff0000;">name</span>=<span style="color: #0000ff;">"encryptionKey"</span><span style="color: #0000ff;">&gt;</span>myRGBKey<span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">param</span><span style="color: #0000ff;">&gt;</span></pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">typedef</span><span style="color: #0000ff;">&gt;</span></pre>
</pre>
<p>The parameters are optional but give you an easy option to extend the user type to use your own algorithm.</p>
<p>The encryptor paramater expects an implementation of IEncryptor, if you don&rsquo;t set it you get the uNHAddinsEncryptor implementation. Implementing the interface is very easy you just need to say how you encrypt and decrypt and if you want to use an external key set in the typedef parameters then you can get this using the EncryptionKey property.</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> IEncryptor</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">{</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">string</span> Encrypt(<span style="color: #0000ff;">string</span> password);</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">  <span style="color: #0000ff;">string</span> Decrypt(<span style="color: #0000ff;">string</span> encryptedPassword);</pre>
<pre style="margin: 0em; width: 100%; background-color: #ffffff;" size="12px" face="consolas,'Courier New',courier,monospace">  <span style="color: #0000ff;">string</span> EncryptionKey { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }</pre>
<pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;">}</pre>
</pre>
<p>Using it now in your code is as easy as:</p>
<pre><pre style="margin: 0em; font-size: 12px; width: 100%; font-family: consolas,'Courier New',courier,monospace; background-color: #ffffff;"><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">property</span> <span style="color: #ff0000;">name</span>=<span style="color: #0000ff;">"Password"</span> <span style="color: #ff0000;">type</span>=<span style="color: #0000ff;">"Encrypted"</span> <span style="color: #0000ff;">/&gt;</span></pre>
</pre>
<p>The Password property keeps being implemented as a string, so you don&rsquo;t touch your existing code.</p>]]></content>
      <post-name type="text"><![CDATA[encrypting password or other strings in nhibernate]]></post-name>
      <authors>
        <author id="2130" date-created="2008-08-30T23:23:03" date-modified="2009-02-22T10:18:57" approved="true" email="gustavo.ringel@gmail.com">
          <title type="text"><![CDATA[Gustavo]]></title>
        </author>
      </authors>
    </post>
    <post id="178" date-created="2009-02-22T05:18:00" date-modified="2009-02-22T05:18:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/22/unhaddins-conversation-additions.aspx" type="normal" hasexcerpt="false" views="1631">
      <title type="text"><![CDATA[uNHAddins conversation additions]]></title>
      <content type="text"><![CDATA[<p>Well <a href="http://www.fabiomaulo.blogspot.com/" target="_blank">Fabio</a> and i discussed some ideas&hellip;as always i only started thinking about how to implement them and he already had a complete solution for the things being discussed.</p>
<p>At least to feel I collaborate I will resume some of the things Fabio had been working on. </p>
<p>I added the new features to my <a href="http://unhaddins.googlecode.com/svn/trunk/Examples/uNHAddins.Examples.SessionManagement/" target="_blank">sample project</a> which was previously described <a href="http://gustavoringel.blogspot.com/2009/02/unhaddins-persistence-conversation-part_08.html" target="_blank">here</a> so i could play a little with tests. I also did it only looking at the code and svn log to feel how descriptive it was by itself.</p>
<p>Well, there are some things very new and some things that where missing an implementation...</p>
<p>First of all the <span style="color: #000000;">MethodsIncludeMode</span> property for the <span style="color: #000000;">PersistenceConversational</span> attribute is working, you can set it to <span style="font-style: italic">Implicit </span>or <span style="font-style: italic">Explicit</span>. <span style="font-style: italic">Implicit </span>will asume every public virtual method is part of a persistence conversation and will use the defaults if you don&rsquo;t mark it as <span style="color: #000000;">PersistenceConversation </span>with your own properties. <span style="font-style: italic">Explicit </span>will consider only methods marked by you as part of the conversation.</p>
<p>Next we had a <span style="color: #000000;">DefaultEndMode </span>which was there but was not plugged in, now you can use it so every conversation will use as the default, if you want to do crazy things like set every method with <span style="color: #000000;">EndMode</span>.End, well, it is easy to do it even if not so right :)</p>
<p>Last but not least we can now set a <span style="color: #000000;">ConversationConfigurationInterceptor </span>either explicitly or injecting it using meantime the CastleAdapter. This means for example I can subscribe to every event of the conversation and explicitly do something if needed without doing a lot of work like i did in <a href="http://gustavoringel.blogspot.com/2009/02/changing-default-conversation-factory.html">this post</a></p>
<p>The way to set an explicit Interceptor is having a class that inherits from <span style="color: #000000;">IConversationCreationInterceptor </span>which will have to implement the Configure method which receives a conversation, there you attach your events to the conversation and it is done. In the [<span style="color: #000000;">PersistenceConversational</span>] attribute you just set <span style="font-style: italic; color: #000000;">ConversationCreationInterceptor </span><span style="font-style: italic">= typeof(MyInterceptor)</span></p>
<p>The DI way is creating a generic interceptor class that inherits from <span style="color: #000000;">IConversationCreationInterceptorConvention</span>&lt;T&gt; where T : class, the implementation is the same and it can be associated to a model implementing a generic class which receives a model and implements the interface. This will work if the property <span style="color: #000000;">UseConversationCreationInterceptorConvention of PersistenceConversational is </span>set to true (which is the default).</p>
<p>Well you can look at the code to see it working.</p>]]></content>
      <post-name type="text"><![CDATA[unhaddins conversation additions]]></post-name>
      <authors>
        <author id="2130" date-created="2008-08-30T23:23:03" date-modified="2009-02-22T10:18:57" approved="true" email="gustavo.ringel@gmail.com">
          <title type="text"><![CDATA[Gustavo]]></title>
        </author>
      </authors>
    </post>
    <post id="179" date-created="2009-02-22T20:12:58" date-modified="2009-02-22T20:12:58" approved="true" post-url="/blogs/nhibernate/archive/2009/02/22/nhibernate_2D00_hql_2D00_ast_2D00_parser.aspx" type="normal" hasexcerpt="false" views="3267">
      <title type="text"><![CDATA[NHibernate HQL AST Parser]]></title>
      <content type="text"><![CDATA[<p><a href="http://blogs.imeta.co.uk/sstrong/Default.aspx">Steve</a> from <a href="http://imeta.co.uk/">iMeta</a> has been doing a <em>lot</em> of work on the HQL AST Parser. For a long time, that has been a really troublesome pain point for us, since this is a prerequisite for a lot of other features. It is also one of two parts of NHibernate that <em>really </em>need significant refactoring because the way they are built right now make it hard to do stuff (the second being the semantic model for the mapping, which the Fluent NHibernate guys are working on).</p>  <p>Just to give you two features that should make you drool which depends on this work:</p>  <ul>   <li>Full Linq implementation </li>    <li>Set based DML operations on top of the domain model </li> </ul>  <p>In true Open Source manner, you can view the work being done right now: <a href="http://unhaddins.googlecode.com/svn/trunk">http://unhaddins.googlecode.com/svn/trunk</a>, Checkout the ANTRL-HQL project.</p>  <p>This is something that several members of the NHibernate project has tried doing in the past, but the scope of the work is very big, and require full time work for an extended period of time. <a href="http://imeta.co.uk">iMeta</a> has been sponsoring Steve’s work on NHibernate, which make this possible. </p>  <p>I have been going through the code, and I am literally jumping up and down in excitement. It is still <em>very</em> early, but it is already clear that Steve has taken us much farther than before, and it is possible to see the end. The most significant milestone has been reached, and we are currently able to execute ( a very simple ) query and get the results back:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2050794E.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="112" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_245D57D1.png" width="485" border="0" /></a> </p>  <p>Yes, it also integrates with NH Prof :-)</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate-hql-ast-parser]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1112" />
        <category ref="1130" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="180" date-created="2009-02-26T14:46:00" date-modified="2009-02-26T14:46:00" approved="true" post-url="/blogs/nhibernate/archive/2009/02/26/diving-in-nhibernate-validator.aspx" type="normal" hasexcerpt="false" views="6266">
      <title type="text"><![CDATA[Diving in NHibernate.Validator]]></title>
      <content type="text"><![CDATA[<p>Surfing in the NET, to find some NHibernate.Validator (NHV) example, I saw that there are various things not so clear about how NHV is working. In this post I&rsquo;ll try to give you a more deep explication.</p>
<h4>Class validation definition</h4>
<p>In these examples I will use the follow simple class :</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Customer<br /></span>{<br /><span style="color: blue">public string </span>FirstName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><span style="color: blue">public string </span>LastName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><span style="color: blue">public string </span>CreditCard { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>Using Attributes the definition look like the follow:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Customer<br /></span>{<br />[<span style="color: #2b91af">Length</span>(Min = 3, Max = 20)]<br /><span style="color: blue">public string </span>FirstName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><br />[<span style="color: #2b91af">Length</span>(Min=3, Max = 60)]<br /><span style="color: blue">public string </span>LastName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><br />[<span style="color: #2b91af">CreditCardNumber</span>]<br /><span style="color: blue">public string </span>CreditCard { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>Using XML mapping the configuration is :</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Customer</span>"<span style="color: blue">&gt;<br />&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">FirstName</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">length </span><span style="color: red">min</span><span style="color: blue">=</span>"<span style="color: blue">3</span>" <span style="color: red">max</span><span style="color: blue">=</span>"<span style="color: blue">20</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">LastName</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">length </span><span style="color: red">min</span><span style="color: blue">=</span>"<span style="color: blue">3</span>" <span style="color: red">max</span><span style="color: blue">=</span>"<span style="color: blue">60</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">CreditCard</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">creditcardnumber</span><span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<br /><a href="http://11011.net/software/vspaste"></a><strong><span style="text-decoration: underline;">NOTE:</span></strong> In this example I will use the NHV convention for XML Validation-Definition that mean the mapping file is an embedded resource, is in the same folder (namespace) of the class and its name is the name of the class followed by &ldquo;.nhv.xml&rdquo; (in this case Customer.nhv.xml).&nbsp; </p>
<p>Using fluent-interface configuration :</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">CustomerDef</span>: <span style="color: #2b91af">ValidationDef</span>&lt;<span style="color: #2b91af">Customer</span>&gt;<br />{<br /><span style="color: blue">public </span>CustomerDef()<br />{<br />   Define(x =&gt; x.FirstName).LengthBetween(3, 20);<br />   Define(x =&gt; x.LastName).LengthBetween(3, 60);<br />   Define(x =&gt; x.CreditCard).IsCreditCardNumber();<br />}<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>As you can see you have 3 ways to define validation constraints for a class. For each class, you must use at least one validation definition and at most two; this mean that you can even mix the &ldquo;Attribute way&rdquo; with one of the &ldquo;External&rdquo; ways (here <span style="text-decoration: underline;">&ldquo;external&rdquo;</span> mean that the validation is defined <span style="text-decoration: underline;">out-side</span> the class).</p>
<h4>The ValidatorEngine</h4>
<p>At first, the ValidatorEngine, is your entry-point. If you are using <a href="http://msdn.microsoft.com/en-us/library/aa288059(VS.71).aspx">Attributes</a>, you can do something like this:</p>
<pre class="code"><span style="color: blue">public void </span>WithOutConfigureTheEngine()<br />{<br /><span style="color: blue">var </span>customer = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"F"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: blue">var </span>ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer), <span style="color: #2b91af">Is</span>.False);<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>What happen behind the scene is:</p>
<p>JITClassMappingFactory:Reflection applied for Customer 
  <br />ReflectionClassMapping:For class Customer Adding member FirstName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member LastName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member CreditCard to dictionary with attribute CreditCardNumberAttribute</p>
<p>As you can see NHV is investigating the class to know all attributes. Now the same example <strong>using two instances of ValidatorEngine</strong></p>
<pre class="code"><span style="color: blue">var </span>customer = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"F"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: blue">var </span>ve1 = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br /><span style="color: #2b91af">Assert</span>.That(ve1.IsValid(customer), <span style="color: #2b91af">Is</span>.False);<br /><span style="color: blue">var </span>ve2 = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br /><span style="color: #2b91af">Assert</span>.That(ve2.IsValid(customer), <span style="color: #2b91af">Is</span>.False);</pre>
<p>What happen behind is:</p>
<p>JITClassMappingFactory:Reflection applied for Customer 
  <br />ReflectionClassMapping:For class Customer Adding member FirstName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member LastName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member CreditCard to dictionary with attribute CreditCardNumberAttribute</p>
<p>JITClassMappingFactory:Reflection applied for Customer 
  <br />ReflectionClassMapping:For class Customer Adding member FirstName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member LastName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member CreditCard to dictionary with attribute CreditCardNumberAttribute</p>
<p>Ups&hellip; NHV is investigating the same class two times.</p>
<p>Now again the same example but using <strong>only one ValidatorEngine instance</strong>:</p>
<pre class="code"><span style="color: blue">var </span>customer1 = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"F"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: blue">var </span>ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer1), <span style="color: #2b91af">Is</span>.False);<br /><span style="color: blue">var </span>customer2 = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"Fabio"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer2), <span style="color: #2b91af">Is</span>.True);</pre>
<p>Here we are validating two instances of Customer class <strong>using the same ValidatorEngine</strong> and what happen behind is:</p>
<p>JITClassMappingFactory:Reflection applied for Customer 
  <br />ReflectionClassMapping:For class Customer Adding member FirstName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member LastName to dictionary with attribute LengthAttribute 
  <br />ReflectionClassMapping:For class Customer Adding member CreditCard to dictionary with attribute CreditCardNumberAttribute</p>
<p>As you can see, the class Customer, was investigated <strong>only one time</strong>, NHV are using reflection <strong>only one time</strong>.</p>
<p><em>Conclusion</em>: <strong>For performance issue, the ValidatorEngine instance should have the same lifecycle of your application</strong>.</p>
<h4>The XML convention</h4>
<p>As you probably know, I like, very much, all framework complying with rule &ldquo;DON&rsquo;T TOUCH MY CODE&rdquo; (more quite &ldquo;no invasive framework&rdquo;). With NHV you can define an &ldquo;external&rdquo; XML file as validation definition. The convention, come in place, when you configure the ValidatorEngine to use an &ldquo;External&rdquo; source for validation-definitions. The configuration in the application config file is:</p>
<pre class="code">    <span style="color: blue">&lt;</span><span style="color: #a31515">nhv-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>'<span style="color: blue">urn:nhv-configuration-1.0</span>'<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>'<span style="color: blue">default_validator_mode</span>'<span style="color: blue">&gt;</span>UseExternal<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">nhv-configuration</span><span style="color: blue">&gt;<br /></span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>Given the above first class and embedding the file Customer.nhv.xml in the same namespace, I&rsquo;m going to run the follow test:</p>
<pre class="code"><span style="color: blue">var </span>ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br />ve.Configure();<br /><br /><span style="color: blue">var </span>customer1 = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"F"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer1), <span style="color: #2b91af">Is</span>.False);<br /><span style="color: blue">var </span>customer2 = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"Fabio"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer2), <span style="color: #2b91af">Is</span>.True);</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>What happen behind the scene is:</p>
<p>JITClassMappingFactory: - XML convention applied for Customer 
  <br />XmlClassMapping: - Looking for rules for property : FirstName 
  <br />XmlClassMapping: - Adding member FirstName to dictionary with attribute LengthAttribute 
  <br />XmlClassMapping: - Looking for rules for property : LastName 
  <br />XmlClassMapping: - Adding member LastName to dictionary with attribute LengthAttribute 
  <br />XmlClassMapping: - Looking for rules for property : CreditCard 
  <br />XmlClassMapping: - Adding member CreditCard to dictionary with attribute CreditCardNumberAttribute</p>
<p>As you can see, this time, the JITClassMappingFactory (JIT = Just In Time), are using <span style="color: #2b91af">XmlClassMapping</span> instead <span style="color: #2b91af">ReflectionClassMapping</span>. Again the validation definition investigation will be done only one time per <span style="color: #2b91af">ValidatorEngine</span> instance. </p>
<p>If you use XML you can even work without use the convention; in this case you must provide a more complete <span style="color: #800000">nhv-configuration</span> section declaring where are mappings files.</p>
<h4>The Fluent-Interface</h4>
<p>Details about configuration via fluent-interface are available <a href="http://fabiomaulo.blogspot.com/2009/02/nhibernatevalidator-fluent-interface.html">here</a>. To complete the example series, the test is this:</p>
<pre class="code"><span style="color: blue">var </span>config = <span style="color: blue">new </span><span style="color: #2b91af">FluentConfiguration</span>();<br />config<br />.SetDefaultValidatorMode(<span style="color: #2b91af">ValidatorMode</span>.UseExternal)<br />.Register&lt;<span style="color: #2b91af">CustomerDef</span>, <span style="color: #2b91af">Customer</span>&gt;();<br /><span style="color: blue">var </span>ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br />ve.Configure(config);<br /><br /><span style="color: blue">var </span>customer1 = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"F"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer1), <span style="color: #2b91af">Is</span>.False);<br /><span style="color: blue">var </span>customer2 = <span style="color: blue">new </span><span style="color: #2b91af">Customer </span>{ FirstName = <span style="color: #a31515">"Fabio"</span>, LastName = <span style="color: #a31515">"Fermani" </span>};<br /><span style="color: #2b91af">Assert</span>.That(ve.IsValid(customer2), <span style="color: #2b91af">Is</span>.True);</pre>
<p>What happen behind is:</p>
<p>OpenClassMapping:- For class Customer Adding member FirstName to dictionary with attribute LengthAttribute 
  <br />OpenClassMapping:- For class Customer Adding member LastName to dictionary with attribute LengthAttribute 
  <br />OpenClassMapping:- For class Customer Adding member CreditCard to dictionary with attribute CreditCardNumberAttribute 
  <br />StateFullClassMappingFactory:- Adding external definition for Customer</p>
<p>Here the JITClassMappingFactory don&rsquo;t is working; NHV is using the <span style="color: #2b91af">StateFullClassMappingFactory</span> during configuration, the JITClassMappingFactory will come in play only after <em>configuration-time</em>. Again the validation definition investigation will be done only one time per <span style="color: #2b91af">ValidatorEngine</span> instance.</p>
<h4>The SharedEngineProvider</h4>
<p>Perhaps this is the real motivation of this post. As I said above, <strong>the ValidatorEngine, should have the same lifecycle of your application</strong>, the v<em>alidation</em> is a cross-cutting-concern and you need to use it from different tiers. In my opinion the better definition of SharedEngineProvider is :</p>
<p><strong>The SharedEngineProvider is the service locator for the ValidatorEngine</strong>.</p>
<p>If you are using NHibernate.Validator, especially with its integration with NHibernate, <strong><span style="text-decoration: underline;">you should define an implementation of ISharedEngineProvider </span></strong>to ensure that, in all your tiers, you are using exactly the same constraints and to avoid more than one ValidatorEngine instances.</p>
<p>The interface is really trivial:</p>
<pre class="code"><span style="color: gray">/// &lt;summary&gt;<br />/// </span><span style="color: green">Contract for Shared Engine Provider<br /></span><span style="color: gray">/// &lt;/summary&gt;<br /></span><span style="color: blue">public interface </span><span style="color: #2b91af">ISharedEngineProvider<br /></span>{<br /><span style="color: gray">/// &lt;summary&gt;<br />/// </span><span style="color: green">Provide the shared engine instance.<br /></span><span style="color: gray">/// &lt;/summary&gt;<br />/// &lt;returns&gt;</span><span style="color: green">The validator engine.</span><span style="color: gray">&lt;/returns&gt;<br /></span><span style="color: #2b91af">ValidatorEngine </span>GetEngine();<br />}</pre>
<p>To configure the SharedEngineProvider you can use the application config or the NHibernate.Validator.Cfg.<span style="color: #2b91af">Environment</span> class before any other task (regarding NHV). Any other configuration will be ignored (in fact you don&rsquo;t have anything to configure the SharedEngineProvider trough <span style="color: #2b91af">FluentConfiguration</span>). </p>
<p>A good way to implements a SharedEngineProvider is using your preferred <a href="http://en.wikipedia.org/wiki/Inversion_of_control">IoC container</a>, or using <a href="http://www.codeplex.com/CommonServiceLocator">CommonServiceLocator</a>. The SharedEngineProvider is used, where available, by the two listeners for NHibernate integration. A generic configuration look like:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">nhv-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>'<span style="color: blue">urn:nhv-configuration-1.0</span>'<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">shared_engine_provider </span><span style="color: red">class</span><span style="color: blue">=</span>'<span style="color: blue">NHibernate.Validator.Event.NHibernateSharedEngineProvider, NHibernate.Validator</span>'<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">nhv-configuration</span><span style="color: blue">&gt;<br /></span></pre>
<p>You should change the class if you want use your own implementation of ISharedEngineProvider. <strong>The usage of your own implementation is strongly recommended</strong> especially in WEB and even more if you are using an IoC container.</p>
<p><a href="http://fabiomaulo.blogspot.com/">Fabio Maulo.</a></p>]]></content>
      <post-name type="text"><![CDATA[diving in nhibernate validator]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1050" />
        <category ref="1128" />
        <category ref="1129" />
      </categories>
      <trackbacks>
        <trackback id="181" date-created="2009-02-26T18:18:15" date-modified="2009-02-26T18:18:15" approved="true" url="http://myasianholidays.com/insead-diving-trip-to-sipadan-malaysia-in-2008-part-2-of-2/">
          <title type="text"><![CDATA[INSEAD Diving trip to Sipadan Malaysia in 2008 - Part 2 of 2]]></title>
        </trackback>
        <trackback id="182" date-created="2009-02-27T02:51:38" date-modified="2009-02-27T02:51:38" approved="true" url="http://scuba123easy.info/?p=5922">
          <title type="text"><![CDATA[Diving in NHibernate.Validator - NHibernate blog - NHibernate Forge | Scuba 123 Easy]]></title>
        </trackback>
        <trackback id="208" date-created="2009-03-16T13:41:46" date-modified="2009-03-16T13:41:46" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/03/16/nhibernate-validator-1-2-alpha1-released.aspx">
          <title type="text"><![CDATA[NHibernate Validator 1.2 alpha1 released]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="184" date-created="2009-03-02T21:36:00" date-modified="2009-03-02T21:36:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/02/rolling-out-an-update-of-castle-just-got-a-whole-lot-easier.aspx" type="normal" hasexcerpt="false" views="2653">
      <title type="text"><![CDATA[Rolling out an update of Castle just got a whole lot easier]]></title>
      <content type="text"><![CDATA[<div><span id="misspell-cursor" class="unmark"></span>I
just released yesterday, that the recent change to NHibernate that removed all dependency from any kind of &ldquo;Proxy framework&rdquo;, has made it a whole lot easier to <span class="mark" id="misspell-1">rollout</span> a fresh build of the Castle trunk to the Enterprise.</div>
<div></div>
<div>(see <a target="_self" href="/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx">this post</a> that describes the change that I'm talking about)</div>
<div></div>
<div>Prior to this change, <span class="mark" id="misspell-2">NHibernate</span>
had a hard dependency on Castle. The problem however, was that some of
the projects in Castle also has (and still does) have a dependency on <span class="mark" id="misspell-3">NHibernate</span>. This circular dependency lead to the following build cycle:<br /><br />1) Download Castle<br />2) Download NH-source of the release (here you need the sources of NH)<br />3) build Castle.Core + Castle.<span class="mark" id="misspell-4">DynamicProxy</span>2 (because NH2.0.1 has a reference to both)<br />4) copy Castle.Core.dll + Castle.DynamicProxy2.dll to <span class="mark" id="misspell-5">nhibernate</span>\lib\net\2.0 and <span class="mark" id="misspell-6">nhibernate</span>\lib\net\3.5<br />5) build <span class="mark" id="misspell-7">NHibernate</span><br />6) build all other Castle stuff<br /><br />(thanks to Fabio <span class="mark" id="misspell-8">Maulo</span> who described this to me)<br /><br /><span class="mark" id="misspell-9">Ok</span>,
so these build steps can be automated (and I believe Rhino.Tools has
such a script). The real problem however, is that in order to <span class="mark" id="misspell-10">rollout</span> a fresh build of castle you <strong>HAD </strong>to re-build <span class="mark" id="misspell-11">NHibernate</span> (or face having to deploy assembly binding re-directs) if both Castle and <span class="mark" id="misspell-12">NHibernate</span> are used within the same solution.<br /><br />In <span class="mark" id="misspell-13">practice</span> the pain did not stop there. Being forced to rebuild <span class="mark" id="misspell-14">NHibernate</span>, you had to then ensure that these updated <span class="mark" id="misspell-15">NHibernate</span> assemblies were rolled out to all your other projects that required <span class="mark" id="misspell-16">NHibernate</span>. Either that or face having to maintain multiple versions of <span class="mark" id="misspell-17">NHibernate</span> / Castle across multiple source control repositories.<br /><br />All because you wanted to update Castle!<br /><br />This is a thing of the past for NH2.1.0 (or the current version of the NH trunk). Now, to <span class="mark" id="misspell-18">rollout</span> a fresh build of the Castle trunk you do the following:<br /><br />1) Download Castle<br />2) Download NHibernate.ByteCode.Castle (it has 3 classes)<br />3) build whole Castle<br />4) build NHibernate.ByteCode.Castle<br /><br />The key thing to note is that you don't have to rebuild <span class="mark" id="misspell-19">NHibernate</span> - thanks guys!<br /><br />Christian</div>]]></content>
      <post-name type="text"><![CDATA[rolling out an update of castle just got a whole lot easier]]></post-name>
      <authors>
        <author id="2566" date-created="2009-03-01T23:01:40" date-modified="2009-03-01T23:01:40" approved="true" email="christian.crowhurst@btinternet.com">
          <title type="text"><![CDATA[christianacca]]></title>
        </author>
      </authors>
    </post>
    <post id="185" date-created="2009-03-03T21:00:00" date-modified="2009-03-03T21:00:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/03/nhibernate-with-spring-net.aspx" type="normal" hasexcerpt="false" views="7381">
      <title type="text"><![CDATA[NHibernate with Spring.NET]]></title>
      <content type="text"><![CDATA[<p>A new Dynamic-Proxy provider is available in NHibernate trunk (<a href="/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx">here</a> the others two)</p>
<p><a href="http://eeichinger.blogspot.com/">Erich Eichinger</a> (Spring.NET team member) sent us the implementation of <strong>NHibernate.ByteCode.Spring</strong>.</p>
<p>The property to configure is</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">proxyfactory.factory_class</span>"<span style="color: blue">&gt;</span></pre>
<pre class="code"><span style="color: blue"></span>NHibernate.ByteCode.Spring.ProxyFactoryFactory, NHibernate.ByteCode.Spring</pre>
<pre class="code"><span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;
</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The advantage to use the same engine of your preferred IoC/DI/AOP framework is pretty clear: everything is fully integrated (you can configure some aspect and you have it working when the proxy is generated trough NHibernate).</p>
<p>Now you have three options for dynamic proxy generation:</p>
<p><a href="http://www.castleproject.org/">Castle</a>, <a href="http://code.google.com/p/linfu/">LinFu</a> and <a href="http://www.springframework.net/">Spring</a>.</p>
<p>What next ? Probably <a href="http://www.codeplex.com/unity">Unity</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate with spring net]]></post-name>
      <categories>
        <category ref="1025" />
        <category ref="1053" />
        <category ref="1089" />
        <category ref="1095" />
        <category ref="1117" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="188" date-created="2009-03-12T00:44:00" date-modified="2009-03-12T00:44:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/11/nhibernate-and-ms-sql-server-2008-date-time-datetime2-and-datetimeoffset.aspx" type="normal" hasexcerpt="false" views="20454">
      <title type="text"><![CDATA[NHibernate and Ms Sql Server 2008: Date, Time, DateTime2 and DateTimeOffset]]></title>
      <content type="text"><![CDATA[<p>Ms Sql Server 2008 come with a lot of features talking about Date/Time. Besides the already known DbType.DateTime, now we have new types:</p>
<ul>
<li><i><b>Date </b></i></li>
<li><i><b>Time </b></i></li>
<li><i><b>DateTime2 </b></i></li>
<li><i><b>DateTimeOffset</b></i> </li>
</ul>
<p>NHibernate 2.1 introduce changes to support this types out-of-the-box. This table show all the details about how to configurate your system: classes, mappings:</p>
<table border="1" cellpadding="2" cellspacing="0" width="614">
<tbody>
<tr>
<td valign="top" width="155">
<p align="center"><b>CLR Type </b></p>
</td>
<td valign="top" width="111">
<p align="center"><b>DbType </b></p>
</td>
<td valign="top" width="152">
<p align="center"><b>Sql Server Type</b></p>
</td>
<td valign="top" width="194">
<p align="center"><b>NHibernate type</b></p>
</td>
</tr>
<tr>
<td valign="top" width="155">
<p align="center">System.DateTime</p>
</td>
<td valign="top" width="111">
<p align="center">DateTime</p>
</td>
<td valign="top" width="152">
<p align="center">datetime</p>
</td>
<td valign="top" width="194">
<p align="center">datetime</p>
</td>
</tr>
<tr>
<td valign="top" width="155">
<p align="center">System.DateTime</p>
</td>
<td valign="top" width="111">
<p align="center">DateTime2</p>
</td>
<td valign="top" width="152">
<p align="center">datetime2</p>
</td>
<td valign="top" width="194">
<p align="center">datetime2</p>
</td>
</tr>
<tr>
<td valign="top" width="155">
<p align="center">System.DateTime</p>
</td>
<td valign="top" width="111">
<p align="center">Date</p>
</td>
<td valign="top" width="152">
<p align="center">date</p>
</td>
<td valign="top" width="194">
<p align="center">date</p>
</td>
</tr>
<tr>
<td valign="top" width="155">
<p align="center">System.TimeSpan</p>
</td>
<td valign="top" width="111">
<p align="center">Time</p>
</td>
<td valign="top" width="152">
<p align="center">time</p>
</td>
<td valign="top" width="194">
<p align="center">TimeAsTimeSpan</p>
</td>
</tr>
<tr>
<td valign="top" width="155">
<p align="center">System.DateTime</p>
</td>
<td valign="top" width="111">
<p align="center">Time</p>
</td>
<td valign="top" width="152">
<p align="center">time</p>
</td>
<td valign="top" width="194">
<p align="center">time</p>
</td>
</tr>
<tr>
<td valign="top" width="155">
<p align="center">System.DateTimeOffset</p>
</td>
<td valign="top" width="111">
<p align="center">DateTimeOffset</p>
</td>
<td valign="top" width="152">
<p align="center">datetimeoffset</p>
</td>
<td valign="top" width="194">
<p align="center">datetimeoffset</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>When we talk about &ldquo;NHibernate type&rdquo;, we are refering to what you&rsquo;ve to put into your mappings, i.e: <i><b>&lt;property name=&rdquo;OnlineMeeting&rdquo; type=&rdquo;datetimeoffset&rdquo;/&gt;</b> </i>. </p>
<p>To use this features and more you&rsquo;ve to use the dialect <b><i>NHibernate.Dialect.MsSql2008Dialect</i></b>. </p>
<p>The dialect changes include these types and changes to <b>Hql functions</b> that return the current system timestamp.</p>
<ul>
<li><b>current_timestamp</b>: Now returns the current system timestamp as a DateTime2 value. It uses <i>sysdatetime</i> Sql Server function at background.</li>
<li><b>current_timestamp_offset</b>: New function!. Returns the current system timestamp with the offset as a DateTimeOffset value. It uses <i>sysdatetimeoffset</i> Sql Server function at background.</li>
</ul>
<p>The idea of this post isn&rsquo;t to explain every new type and what it can do, otherwise is to show you what have to do in your classes, queries or mappings to configure your date/time types with NHibernate. Besides, to know every detail of these types you can visit this useful <a href="http://msdn.microsoft.com/en-us/library/bb675168.aspx">.NET Framework Developer's Guide</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and ms sql server 2008 date time datetime2 and datetimeoffset]]></post-name>
      <categories>
        <category ref="1073" />
        <category ref="1092" />
        <category ref="1131" />
        <category ref="1132" />
        <category ref="1133" />
        <category ref="1134" />
      </categories>
      <trackbacks>
        <trackback id="434" date-created="2009-07-20T23:44:38" date-modified="2009-07-20T23:44:38" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="189" date-created="2009-03-13T13:04:00" date-modified="2009-03-13T13:04:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/13/registering-freetext-or-contains-functions-into-a-nhibernate-dialect.aspx" type="normal" hasexcerpt="false" views="11579">
      <title type="text"><![CDATA[Registering FREETEXT or CONTAINS functions into a NHibernate dialect]]></title>
      <content type="text"><![CDATA[<p>Ms Sql Server FREETEXT and CONTAINS functions are used into FullText search capabilities to querying. These functions are of course natives to this particular RDBMS and even comes a with particular structure: they don&rsquo;t return a value. So far, till NH 2.0, you couldn&rsquo;t do it because a little parser issue, but from <b>NHibernate 2.1</b> in forward you&rsquo;re enable register them.</p>
<p>First of all, we define the new dialect with the new functions in order that when we run a query, NHibernate can recognize those functions and can transform to native-sql, in this case, Transact-SQL.</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">using</span> NHibernate.Dialect;
<span class="kwrd">using</span> NHibernate.Dialect.Function;

<span class="kwrd">namespace</span> MyCompany.Data
{
    <span class="kwrd">public</span> <span class="kwrd">class</span> MyDialect : MsSql2008Dialect
    {
        <span class="kwrd">public</span> MyDialect()
        {
            RegisterFunction(<span class="str">"freetext"</span>, <span class="kwrd">new</span> StandardSQLFunction(<span class="str">"freetext"</span>, <span class="kwrd">null</span>));
            RegisterFunction(<span class="str">"contains"</span>, <span class="kwrd">new</span> StandardSQLFunction(<span class="str">"contains"</span>, <span class="kwrd">null</span>));
        }
    }
}</pre>
<p>Note that we are using <b>StandardSQLFunction</b>, we can also use <b>SQLFunctionTemplate</b> or implement our <b>ISQLFunction</b> class with all the constraints (ie: parameter number accepted) we need.</p>
<p>Once our new dialect is ready let&rsquo;s call it from our <i>hibernate.cfg.xml</i> file, then NHibernate can know that this dialect will be inject. Suppose <b>MyDialect</b> is placed into the assembly <b>MyCompany.Data</b>, so the configuration file should look like this:</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span> <span class="attr">encoding</span><span class="kwrd">="utf-8"</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">hibernate-configuration</span>  <span class="attr">xmlns</span><span class="kwrd">="urn:nhibernate-configuration-2.2"</span> <span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">session-factory</span> <span class="attr">name</span><span class="kwrd">="NH"</span><span class="kwrd">&gt;</span>        
        <b><span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="dialect"</span><span class="kwrd">&gt;</span>MyCompany.Data.MyDialect, MyCompany.Data<span class="kwrd">&lt;/</span><span class="html">property</span><span class="kwrd">&gt;</span></b>
        <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="connection.connection_string"</span><span class="kwrd">&gt;</span>
            Data Source=(local)\sqlexpress;Initial Catalog=test;Integrated Security = true
        <span class="kwrd">&lt;/</span><span class="html">property</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="proxyfactory.factory_class"</span><span class="kwrd">&gt;</span>NHibernate.ByteCode.LinFu.ProxyFactoryFactory, NHibernate.ByteCode.LinFu<span class="kwrd">&lt;/</span><span class="html">property</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">session-factory</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">hibernate-configuration</span><span class="kwrd">&gt;</span></pre>
<p>Everything is ready, you just have to do this 2 steps and the functions are ready to use it, then we can query using them.</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">session.CreateQuery(<span class="str">"from Documento where freetext(Texto,:keywords)"</span>)
    .SetString(<span class="str">"keywords"</span>,<span class="str">"hey apple car"</span>)
    .List();</pre>
<pre class="csharpcode">Note the above query is HQL, so NHibernate knows about <b>freetext</b> and can operate with it.</pre>]]></content>
      <post-name type="text"><![CDATA[registering freetext or contains functions into a nhibernate dialect]]></post-name>
      <categories>
        <category ref="1076" />
        <category ref="1092" />
        <category ref="1135" />
        <category ref="1136" />
      </categories>
      <comments>
        <comment id="395" date-created="2009-06-26T21:30:36" date-modified="2009-06-26T21:30:36" approved="true" user-name="jobou" user-url="http://nhforge.org/members/jobou/default.aspx">
          <title type="text"><![CDATA[re: Registering FREETEXT or CONTAINS functions into a NHibernate dialect]]></title>
          <content type="text"><![CDATA[Hi, I have tried to use Nhibernate ( 2.1.0.1001 ) and ActiveRecord (1.0.3) to use Sql Server 2005 Full-Text Search just like you are using it but I receive an error and I cannot fix it.

I think that the SQL function are not registered because I receive the same error if I put the dialect MsSql2005Dialect to my custom dialect or my custom dialect.

ERROR : 

 NHibernate.QueryException : Incorrect query syntax [FROM ChronoSteril.Application.Model.Instrument as Instrument where contains(Instrument.DescriptionEnFrancais,'something')]
  ----> System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: index
	at NHibernate.Hql.Classic.QueryTranslator.Compile()
	at NHibernate.Hql.Classic.QueryTranslator.Compile(IDictionary`2 replacements, Boolean scalar)
	at NHibernate.Engine.Query.HQLQueryPlan..ctor(String hql, String collectionRole, Boolean shallow, IDictionary`2 enabledFilters, ISessionFactoryImplementor factory)
	at NHibernate.Engine.Query.QueryPlanCache.GetHQLQueryPlan(String queryString, Boolean shallow, IDictionary`2 enabledFilters)
	at NHibernate.Impl.AbstractSessionImpl.GetHQLQueryPlan(String query, Boolean shallow)
	at NHibernate.Impl.AbstractSessionImpl.CreateQuery(String queryString)
	C:\jbouillon\ATMS\trunk\ChronoSteril.NET\ChronoSteril.Application.IntegrationTests\Repositories\InstrumentRepositoryFixture.cs(189,0): at ChronoSteril.Application.IntegrationTests.Repositories.InstrumentRepositoryFixture.FindInstrumentFts(String searchString)
	C:\jbouillon\ATMS\trunk\ChronoSteril.NET\ChronoSteril.Application.IntegrationTests\Repositories\InstrumentRepositoryFixture.cs(175,0): at ChronoSteril.Application.IntegrationTests.Repositories.InstrumentRepositoryFixture.FindFtsByDescription_avec_recherche_par_description_en_anglais_lorsque_existe_1_instrument_et_1_instruments_correspond_a_la_recherche_expect_retourne_1_instrument()
	--ArgumentOutOfRangeException
	at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
	at System.ThrowHelper.ThrowArgumentOutOfRangeException()
	at System.Collections.Generic.List`1.get_Item(Int32 index)
	at NHibernate.Hql.Classic.WhereParser.CloseExpression(QueryTranslator q, String lcToken)
	at NHibernate.Hql.Classic.WhereParser.Token(String token, QueryTranslator q)
	at NHibernate.Hql.Classic.WhereParser.End(QueryTranslator q)
	at NHibernate.Hql.Classic.ClauseParser.EndChild(QueryTranslator q)
	at NHibernate.Hql.Classic.ClauseParser.End(QueryTranslator q)
	at NHibernate.Hql.Classic.PreprocessingParser.End(QueryTranslator q)
	at NHibernate.Hql.Classic.ParserHelper.Parse(IParser p, String text, String seperators, QueryTranslator q)
	at NHibernate.Hql.Classic.QueryTranslator.Compile()

----------------------------------------------------------------------------

public static IList FindInstrumentFts(string searchString)
{

ISession session = ActiveRecordMediator.GetSessionFactoryHolder().CreateSession(typeof (Instrument));

session.CreateQuery("FROM Instrument as Instrument where contains(Instrument.DescriptionEnFrancais,'something')")
			        .List();
}

----------------------------------------------------------------------
using NHibernate.Dialect;
using NHibernate.Dialect.Function;

namespace ChronoSteril.Application.IntegrationTests
{
    public class SQLServer2005DialectWithFTS : MsSql2005Dialect
    {
        public SQLServer2005DialectWithFTS()
        {
                RegisterFunction("freetext", new StandardSQLFunction("freetext", null));
                RegisterFunction("contains", new StandardSQLFunction("contains", null));
        }
    }
}

------------------------------------------------------------------


]]></content>
        </comment>
        <comment id="399" date-created="2009-07-01T19:15:39" date-modified="2009-07-01T19:15:39" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: Registering FREETEXT or CONTAINS functions into a NHibernate dialect]]></title>
          <content type="text"><![CDATA[I see you're using the Classic-Query-Translator and it's working this feature for that case:
https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk/nhibernate/src/NHibernate.Test/NHSpecificTest/NH645/HQLFunctionFixture.cs

If you still getting problems with this, submit a ticket to our Jira: jira.nhforge.org]]></content>
        </comment>
        <comment id="536" date-created="2009-10-26T19:59:48" date-modified="2009-10-26T19:59:48" approved="true" user-name="mhnyborg" user-url="http://nhforge.org/members/mhnyborg/default.aspx">
          <title type="text"><![CDATA[re: Registering FREETEXT or CONTAINS functions into a NHibernate dialect]]></title>
          <content type="text"><![CDATA[Is it possible to use CONTAINSTABLE and RANK with HQL.
The native sql goes like this:
 string sql = string.Format(@"SELECT * 
                                   FROM tblSite AS S 
                                   inner join tblStatus ST on S.CalculatedStatusId = ST.StatusId 
                                   INNER JOIN CONTAINSTABLE (tblSite, ({0}), :SearchString) AS KEY_TBL 
                                   ON S.siteId = KEY_TBL.[KEY]
                                   WHERE KEY_TBL.RANK > 10
                                   ORDER BY KEY_TBL.RANK DESC", searchFields);

the tblSite and tblStatus is mapped. The problem is the KEY_TBL created from the CONTAINSTABLE function.

Hope you can help. The end goal is to have the result mapped to class Sitebase.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="191" date-created="2009-03-13T19:18:00" date-modified="2009-03-13T19:18:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/13/an-improvement-on-sessionfactory-initialization.aspx" type="normal" hasexcerpt="false" views="18380">
      <title type="text"><![CDATA[An improvement on SessionFactory Initialization]]></title>
      <content type="text"><![CDATA[<div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:3b4c0626-425a-42e1-8d34-4ea8a11191ad" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"><b>UPDATE: I have just committed the PersistentConfigurationBuilder for Castle NHibernate Facility. Thank you Jonathon Rossi for informing me!</b><a href="http://technorati.com/tags/nhibernate" rel="tag"></a></div>
<p>We have received several complaints about slowness of SessionFactory initialization when there&rsquo;s hundreds of entities, and <a href="http://ayende.com/Blog/" target="_blank">Ayende</a> has replied <a href="http://ayende.com/Blog/archive/2007/10/26/Real-World-NHibernate-Reducing-startup-times-for-large-amount-of.aspx" target="_blank">one of them here</a>. It even gets worse if you&rsquo;re using it in a web environment. You may think that it is not a problem since SessionFactory is initialized once in a web environment, but the major impact is not on production but development. Think how many times you start your application a day. </p>
<p>The problem is not really with NHibernate but with <b>xml validation</b> against the schema. Here are some profiler results for SessionFactory initialization with one thousand entities:</p>
<p><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7E21FC61.png" border="0" width="627" height="191" /> </p>
<p>As you see, the adding XML resources takes the most time and the reason behind this is the schema validation. There is also an I/O cost involved (1040 resources should be read by NHibernate). There are several ways to get rid of it, one being the <b>serialization of configuration</b>. I spend 3 days (statics prevented me from spotting some bugs in the code) on this and I believe it pretty much works for every configuration. Another way of doing this is the merging of HBM files, which I believe faster than Serialization as Deserialization also takes some amount.</p>
<p>Now the results for the one using the Deserialized Configuration.</p>
<p><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_04953058.png" border="0" width="626" height="87" /> </p>
<p>A nice feature of dotTrace allows us to compare the performance improvements over the old way.</p>
<p><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_459389EF.png" border="0" width="630" height="192" /> </p>
<p>We got <b>10 seconds rescued!</b> Yay!</p>
<p>Now I am going to show how I used this feature in Castle NHibernate Facility. We have IConfigurationBuilder that is used to integrate various Configuration sources (such as FluentNHibernate). </p>
<p>First of all I must ensure that if any of the files that are used to create the Configuration change, we shouldn&rsquo;t use the serialized configuration, instead the Configuration should be re-created. </p>
<pre class="code"><span style="color: blue;">public override </span><span style="color: #2b91af;">Configuration </span>GetConfiguration(<span style="color: #2b91af;">IConfiguration </span>config)<br />{<br />    log.Debug(<span style="color: #a31515;">"Building the Configuration"</span>);<br /><br />    <span style="color: blue;">string </span>fileName = config.Attributes[<span style="color: #a31515;">"fileName"</span>];<br /><br />    <span style="color: #2b91af;">IConfiguration </span>dependsOn = config.Children[<span style="color: #a31515;">"dependsOn"</span>];<br />    <span style="color: #2b91af;">IList</span>&lt;<span style="color: blue;">string</span>&gt; list = <span style="color: blue;">new </span><span style="color: #2b91af;">List</span>&lt;<span style="color: blue;">string</span>&gt;();<br /><br />    <span style="color: blue;">foreach </span>(<span style="color: blue;">var </span>on <span style="color: blue;">in </span>dependsOn.Children)<br />        list.Add(on.Value);<br /><br />    <span style="color: #2b91af;">Configuration </span>cfg;<br />    <span style="color: blue;">if </span>(IsNewConfigurationRequired(fileName, list))<br />    {<br />        log.Debug(<span style="color: #a31515;">"Configuration is either old or some of the dependencies have changed"</span>);<br />        <span style="color: blue;">using</span>(<span style="color: blue;">var </span>fileStream = <span style="color: blue;">new </span><span style="color: #2b91af;">FileStream</span>(fileName, <span style="color: #2b91af;">FileMode</span>.OpenOrCreate))<br />        {<br />            cfg = <span style="color: blue;">base</span>.GetConfiguration(config);<br />            <span style="color: blue;">this</span>.WriteConfigurationToStream(fileStream, cfg);<br />        }<br />    }<br />    <span style="color: blue;">else<br />    </span>{<br />        <span style="color: blue;">using </span>(<span style="color: blue;">var </span>fileStream = <span style="color: blue;">new </span><span style="color: #2b91af;">FileStream</span>(fileName, <span style="color: #2b91af;">FileMode</span>.OpenOrCreate))<br />        {<br />            cfg = <span style="color: blue;">this</span>.GetConfigurationFromStream(fileStream);<br />        }<br />    }<br />    <span style="color: blue;">return </span>cfg;<br />}<br /><br /><br /><br /></pre>
<pre class="code"><span style="color: blue;">protected virtual bool </span>IsNewConfigurationRequired(<span style="color: blue;">string </span>fileName,<span style="color: #2b91af;">IList</span>&lt;<span style="color: blue;">string</span>&gt; dependencies)<br />{<br />    <span style="color: blue;">if </span>(!<span style="color: #2b91af;">File</span>.Exists(fileName))<br />        <span style="color: blue;">return true</span>;<br />    <span style="color: #2b91af;">FileInfo </span>fi = <span style="color: blue;">new </span><span style="color: #2b91af;">FileInfo</span>(fileName);<br />    <span style="color: #2b91af;">DateTime </span>lastModified = fi.LastWriteTime;<br />    <span style="color: blue;">bool </span>requiresNew=<span style="color: blue;">false</span>;<br />    <span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; dependencies.Count &amp;&amp; !requiresNew; i++)<br />    {<br />        <span style="color: #2b91af;">FileInfo </span>dependency = <span style="color: blue;">new </span><span style="color: #2b91af;">FileInfo</span>(dependencies[i]);<br />        <span style="color: #2b91af;">DateTime </span>dependencyLastModified = dependency.LastWriteTime;<br />        requiresNew |= dependencyLastModified &gt; lastModified;<br />    }<br />    <span style="color: blue;">return </span>requiresNew;<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a><a href="http://11011.net/software/vspaste"></a></p>
<p>&nbsp;</p>
<p>Code doesn&rsquo;t look really good, I guess, so I am open to any suggestions on improvement. The code is not yet in Castle Codebase, as our NH dependency on trunk is not the latest (and i am too lazy to update it). When I find time, I may update the dependency if others agree. 
  <br />
  <br /><b>There is one thing that you have to be careful about. You must be aware that if you&rsquo;re using IUserType, IInterceptor, ISqlFunction etc, all of those should be Serializable too!</b></p>]]></content>
      <post-name type="text"><![CDATA[an improvement on sessionfactory initialization]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1092" />
      </categories>
      <comments>
        <comment id="192" date-created="2009-03-14T07:40:16" date-modified="2009-03-14T07:40:16" approved="true" user-name="Jonathon Rossi" user-url="http://">
          <title type="text"><![CDATA[re: An improvement on SessionFactory Initialization]]></title>
          <content type="text"><![CDATA[I updated NHibernate on the Castle trunk to r4123 a few days ago. I can't see any since then you would need.]]></content>
        </comment>
        <comment id="193" date-created="2009-03-14T09:45:21" date-modified="2009-03-14T09:45:21" approved="true" user-name="Tuna Toksoz" user-url="http://nhforge.org/members/tehlike/default.aspx">
          <title type="text"><![CDATA[re: An improvement on SessionFactory Initialization]]></title>
          <content type="text"><![CDATA[I should have missed this, Jonathon. Thanks for the information!]]></content>
        </comment>
        <comment id="194" date-created="2009-03-14T21:31:59" date-modified="2009-03-14T21:31:59" approved="true" user-name="Tuna Toksoz" user-url="http://devlicio.us/blogs/tuna_toksoz">
          <title type="text"><![CDATA[re: An improvement on SessionFactory Initialization]]></title>
          <content type="text"><![CDATA[I have committed the changes. Thank you Jonathon!]]></content>
        </comment>
        <comment id="371" date-created="2009-06-13T11:57:29" date-modified="2009-06-13T11:57:29" approved="true" user-name="antoschka" user-url="http://">
          <title type="text"><![CDATA[re: An improvement on SessionFactory Initialization]]></title>
          <content type="text"><![CDATA[you didn't explain much about the way how accelerated the startup, in a scenario not using castle. What do you mean by "serialization of configuration". Could you explain a little more on that.

I face a lot of problems during startup of an application. I still use hbms for mapping (seperate ones for each entity). What do you recommand to speed up the starting process?

Thanks for your reply

antoschka]]></content>
        </comment>
        <comment id="372" date-created="2009-06-13T12:02:35" date-modified="2009-06-13T12:02:35" approved="true" user-name="Tuna Toksoz" user-url="http://tunatoksoz.com">
          <title type="text"><![CDATA[re: An improvement on SessionFactory Initialization]]></title>
          <content type="text"><![CDATA[Hi @antoschka
This is not specific to castle. All you need is to have a configuration that has mappings loaded, then you'll need to serialize it into a file. This is for the first time. Later all you need to do is deserialize the configuration and you'll be good to go.]]></content>
        </comment>
        <comment id="862" date-created="2011-04-11T11:43:21" date-modified="2011-04-11T11:43:21" approved="true" user-name="hace" user-url="http://www.mellekoning.nl">
          <title type="text"><![CDATA[re: An improvement on SessionFactory Initialization]]></title>
          <content type="text"><![CDATA[Small issue in the code above:

FileInfo dependency = new FileInfo(dependencies);

should be:

FileInfo dependency = new FileInfo(dependencies[i]);]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="509" date-created="2009-09-19T05:31:25" date-modified="2009-09-19T05:31:25" approved="true" url="http://www.lucisferre.net/archive/2009/09/08/speed-up-nhibernate-startup-with-object-serialization.aspx">
          <title type="text"><![CDATA[Speed up nHibernate startup with object serialization]]></title>
        </trackback>
        <trackback id="513" date-created="2009-09-19T19:49:06" date-modified="2009-09-19T19:49:06" approved="true" url="http://www.lucisferre.net/archive/2009/06/18/speed-up-nhibernate-startup-with-object-serialization.aspx">
          <title type="text"><![CDATA[Speed up nHibernate startup with object serialization]]></title>
        </trackback>
        <trackback id="522" date-created="2009-10-05T16:33:52" date-modified="2009-10-05T16:33:52" approved="true" url="http://www.lucisferre.org/post/2009/06/18/Speed-up-nHibernate-startup-with-object-serialization.aspx">
          <title type="text"><![CDATA[Speed up nHibernate startup with object serialization]]></title>
        </trackback>
        <trackback id="622" date-created="2010-04-01T09:36:16" date-modified="2010-04-01T09:36:16" approved="true" url="http://weblogs.asp.net/ricardoperes/archive/2010/03/31/speeding-up-nhibernate-startup-time.aspx">
          <title type="text"><![CDATA[Speeding Up NHibernate Startup Time]]></title>
        </trackback>
        <trackback id="631" date-created="2010-05-11T23:51:15" date-modified="2010-05-11T23:51:15" approved="true" url="http://www.lucisferre.net/post/2009/06/18/Speed-up-nHibernate-startup-with-object-serialization.aspx">
          <title type="text"><![CDATA[Speed up nHibernate startup with object serialization]]></title>
        </trackback>
        <trackback id="1101" date-created="2014-09-27T10:56:47" date-modified="2014-09-27T10:56:47" approved="true" url="http://www.maiersbaeckerei.de/cgi-bin/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.eventbrite.com%2Fo%2Ftaj-7037662187%3Echeap+online+shopping+sites%3C%2Fa%3E">
          <title type="text"><![CDATA[talking to]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="195" date-created="2009-03-15T13:29:00" date-modified="2009-03-15T13:29:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/15/nhibernate-2-1-0-on-the-road.aspx" type="normal" hasexcerpt="false" views="9274">
      <title type="text"><![CDATA[NHibernate 2.1.0 on the road]]></title>
      <content type="text"><![CDATA[<p>NHibernate 2.1.0.Alpha1 is released today. </p>
<p>It is comparable to Hibernate 3.2.6 in terms of features.&nbsp; </p>
<p><strong>Don&rsquo;t forget to read release note and, over all, don&rsquo;t forget to choose your preferred dynamic-proxy system for lazy loading.</strong></p>
<p>Some details, about the new configuration constraint, are available <a href="/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0 on the road]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
      </categories>
      <comments>
        <comment id="200" date-created="2009-03-15T23:06:39" date-modified="2009-03-15T23:06:39" approved="true" user-name="lb008d" user-url="http://nhforge.org/members/lb008d/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0 on the road]]></title>
          <content type="text"><![CDATA[I just downloaded this to hopefully fix a bug I'm experiencing (NH-1297) and the "Required_Bins" directory has "NHibernate.Test.dll" in it instead of "NHibernate.dll"

Going to compile from source ...]]></content>
        </comment>
        <comment id="201" date-created="2009-03-16T03:54:38" date-modified="2009-03-16T03:54:38" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0 on the road]]></title>
          <content type="text"><![CDATA[fixed thanks.]]></content>
        </comment>
        <comment id="202" date-created="2009-03-16T05:33:48" date-modified="2009-03-16T05:33:48" approved="true" user-name="lb008d" user-url="http://nhforge.org/members/lb008d/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0 on the road]]></title>
          <content type="text"><![CDATA[Thanks Fabio!]]></content>
        </comment>
        <comment id="205" date-created="2009-03-16T11:55:23" date-modified="2009-03-16T11:55:23" approved="true" user-name="Paulo Roberto Quicoli" user-url="http://nhforge.org/members/quicoli/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0 on the road]]></title>
          <content type="text"><![CDATA[thanks!!!!]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="197" date-created="2009-03-15T20:18:05" date-modified="2009-03-15T20:18:05" approved="true" url="http://dotnetshoutout.com/NHibernate-210-on-the-road-NHibernate-blog">
          <title type="text"><![CDATA[NHibernate 2.1.0 on the road - NHibernate blog]]></title>
        </trackback>
        <trackback id="204" date-created="2009-03-16T08:15:37" date-modified="2009-03-16T08:15:37" approved="true" url="http://blog.cwa.me.uk/2009/03/16/the-morning-brew-307/">
          <title type="text"><![CDATA[Reflective Perspective - Chris Alcock  &amp;raquo; The Morning Brew #307]]></title>
        </trackback>
        <trackback id="209" date-created="2009-03-16T14:51:36" date-modified="2009-03-16T14:51:36" approved="true" url="http://darioquintana.com.ar/blogging/?p=61">
          <title type="text"><![CDATA[New NHibernate and NHibernate Validator releases at Dario Quintana]]></title>
        </trackback>
        <trackback id="211" date-created="2009-03-16T15:20:00" date-modified="2009-03-16T15:20:00" approved="true" url="http://blog.darioquintana.com.ar/2009/03/16/new-nhibernate-and-nhibernate-validator-releases/">
          <title type="text"><![CDATA[Nuevas releases de NHibernate y NHibernate Validator at Espacio de Dario Quintana]]></title>
        </trackback>
        <trackback id="619" date-created="2010-03-04T17:26:02" date-modified="2010-03-04T17:26:02" approved="true" url="http://www.youtube.com/user/SomaOnline">
          <title type="text"><![CDATA[Cyclobenzaprine buy prescription soma zanaflex.]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="206" date-created="2009-03-16T13:35:00" date-modified="2009-03-16T13:35:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/16/nhibernate-validator-1-2-alpha1-released.aspx" type="normal" hasexcerpt="false" views="2573">
      <title type="text"><![CDATA[NHibernate Validator 1.2 alpha1 released]]></title>
      <content type="text"><![CDATA[<p>Glad to announce this great release of NHibernate Validator 1.2 alpha1.</p>
<p>See this post for examples:</p>
<ul>
<li><a href="/blogs/nhibernate/archive/2009/02/18/nhibernate-validator-fluent-interface-configuration.aspx">NHibernate.Validator: fluent-interface configuration</a></li>
<li><a href="/blogs/nhibernate/archive/2009/02/26/diving-in-nhibernate-validator.aspx">Diving in NHibernate.Validator</a><br /></li>
</ul>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 alpha1 released]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1036" />
        <category ref="1111" />
        <category ref="1129" />
      </categories>
      <trackbacks>
        <trackback id="210" date-created="2009-03-16T14:51:39" date-modified="2009-03-16T14:51:39" approved="true" url="http://darioquintana.com.ar/blogging/?p=61">
          <title type="text"><![CDATA[New NHibernate and NHibernate Validator releases at Dario Quintana]]></title>
        </trackback>
        <trackback id="212" date-created="2009-03-16T15:20:05" date-modified="2009-03-16T15:20:05" approved="true" url="http://blog.darioquintana.com.ar/2009/03/16/new-nhibernate-and-nhibernate-validator-releases/">
          <title type="text"><![CDATA[Nuevas releases de NHibernate y NHibernate Validator at Espacio de Dario Quintana]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="214" date-created="2009-03-20T07:49:00" date-modified="2009-03-20T07:49:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/20/nhibernate-poid-generators-revealed.aspx" type="normal" hasexcerpt="false" views="38662">
      <title type="text"><![CDATA[NHibernate POID Generators revealed]]></title>
      <content type="text"><![CDATA[<p><b>(Disclaimer: This post will be more or less a paraphrase of <a href="http://fabiomaulo.blogspot.com/2009/02/nh210-generators-behavior-explained.html" target="_blank">Fabio Maulo&rsquo;s post</a>, and I hope I can improve it a bit)</b></p>
<p>This topic is something that I wanted to write because I wasn&rsquo;t aware of the drawbacks of &ldquo; native/identity<a href="http://nhforge.org"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; margin-left: 0px; margin-right: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image8_5F00_3AC8A74C.png" align="right" border="0" width="244" height="137" /></a>&rdquo; generator has unt<a href="http://fabiomaulo.blogspot.com" target="_blank"></a>il <a href="http://fabiomaulo.blogspot.com" target="_blank">Fabio</a> told me. Now it is my turn to spread the information to those who aren&rsquo;t aware too. I even made a small poll via twitter, to see who uses what, and the result turns out to be that majority of people <b>use identity/native </b>for some reasons.</p>
<p>NHibernate has several object identifier generators for entities. Each of them has their cons and pros as anything else does. </p>
<p>We can basically seperate generators into two: PostInsertGenerator and ORM Style generators ( you can also call them identity style vs orm stlye generators). impact on your&nbsp; I will investigate them in their categories.</p>
<p><b>ORM Style Generators</b>&nbsp; </p>
<p>ORM style generator can generate the identifiers before objects are sent to database. This is advantageous because you don&rsquo;t need to go to database in order to have the ID, then set a relation based on this id. It also promotes Unit-Of-Work since you don&rsquo;t need to go to database everytime an object is added/updated instead you do those at the moment of commit. Those generators are what WE SUGGEST.</p>
<p>Currently NHibernate provides several ORM style generators, some of them are listed below.</p>
<ul>
<li><b>Guid        <br /></b>Generates id&rsquo;s by calling Guid.NewGuid(). Main drawback of this is with indexes. We know that Guids are more or less random(or pseudo-random let&rsquo;s say) and this randomness creates fragmentation in database index. If you also think that the field is a PK, then it becomes more dramatic since they are stored in sorted manner.       </li>
<li><b>Guid.Comb        <br /></b>A very clever improvement over the Guid way. It creates guid based on the system time, and the guid it creates is database friendly. It doesn&rsquo;t cause fragmentation in the table. You can see it from here       <br />      <br /><img title="I wonder if anybody reads the ALT of images?" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="I wonder if anybody reads the ALT of images?" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2A6D2F93.png" border="0" width="562" height="394" />&nbsp; <br />(Image taken from <a href="http://pamirerdem.blogspot.com/" target="_blank">Pamir Erdem&rsquo;s blog</a>)       <br />The effect of SequentialNewId() for default value has more or less the same effect of Guid.Comb       </li>
<li><b>HiLo/Sequence HiLo</b>       <br />This one is the one I like the most. It is both index friendly and user friendly. A HiLo id has 2 parts as the name suggests they are Hi and Lo. Each session factory gets the Hi value from database (with locking enabled), and lo values are managed by the session factory on its own. This algorithm also scales really well. All factories gets the Hi value only once. This reduces the the database traffic that aims to get the Hi values. </li>
</ul>
<p><b>Post Insert Generators / Identity Style Generators</b></p>
<p>Post insert generators, as the name suggest, assigns the id&rsquo;s after the entity is stored in the database. A select statement is executed against database. They have many drawbacks, and in my opinion they must be used only on brownfield projects. Those generators are what WE DO NOT SUGGEST as NH Team.</p>
<p>Some of the drawbacks are the following</p>
<ol>
<li>Unit Of Work is broken with the use of those strategies. It doesn&rsquo;t matter if you&rsquo;re using FlushMode.Commit, each Save results in an insert statement against DB. As a best practice, we should defer insertions to the commit, but using a post insert generator makes it commit on save (which is what UoW doesn&rsquo;t do). </li>
<li>Those strategies nullify batcher, you can&rsquo;t take the advantage of sending multiple queries at once(as it must go to database at the time of Save) </li>
</ol>
<p>There are several Post Insert Generator strategies (hey 2.1 has even more!) some of which are listed below(there are many, check <a href="http://fabiomaulo.blogspot.com/2009/02/nh210-new-generators.html" target="_blank">Fabio&rsquo;s post here</a>)</p>
<ol>
<li><b>Identity        <br /></b>Identity generator uses the value that is generated by MsSQL "identity&rdquo; stuff. However, it&rsquo;s meaning in the mapping changes depending on the dialect. For example, if database supports MsSQL like identity, then it will be used, if it supports sequences, then sequences will be used, etc. <a href="https://connect.microsoft.com/SQLServer/feedback/ViewFeedback.aspx?FeedbackID=328811" target="_blank">Something I learnt today</a> from the NHUsers group is that MSSQL may sometimes return invalid SCOPE_IDENTITY() value.       </li>
<li><b>Guid.Native        <br /></b>If I am to speak in terms of MsSQL terminology, it uses the NEWID() function to get a uniqueidentifier. </li>
</ol>
<p><b>Comparison</b></p>
<p>I hear you say &ldquo;you speak too much, all those doesn&rsquo;t tell much, show me the code!&rdquo; There it is, the comparison of post insert generators vs ORM style generators.</p>
<p>I will first start with demonstrating how they break UoW, then continue with Batcher! (did you know that NH uses NonBatchingBatcher by default? ;) )</p>
<p>The code under test is simple</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>Should_not_insert_entity_in_a_transaction_HiLo()<br />{<br />    <span style="color: blue">var </span>post = <span style="color: blue">new </span><span style="color: #2b91af">PostWithHiLo </span>{Title = <span style="color: #a31515">"Identity Generators Revealed"</span>};<br />    <span style="color: blue">var </span>postComment = <span style="color: blue">new </span><span style="color: #2b91af">PostCommentWithHiLo </span>{ Post = post, Comment = <span style="color: #a31515">"Comment" </span>};<br />    <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>session = factory.OpenSession())<br />    <span style="color: blue">using </span>(<span style="color: blue">var </span>tran = session.BeginTransaction())<br />    {<br />        session.Save(post); <span style="color: green">//No commit here<br />        </span>session.Save(postComment);<br />        <span style="color: blue">long </span>insertCount = factory.Statistics.EntityInsertCount;<br />        <span style="color: #2b91af">Assert</span>.That(insertCount, <span style="color: #2b91af">Is</span>.EqualTo(0), <span style="color: #a31515">"Shouldn't insert entity in a transaction before commit."</span>);<br />    }<br />}<br /><br />[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>Should_not_insert_entity_in_a_transaction_Identity()<br />{<br />    <span style="color: blue">var </span>post = <span style="color: blue">new </span><span style="color: #2b91af">PostWithIdentity </span>{Title = <span style="color: #a31515">"Identity Generators Revealed"</span>};<br />    <span style="color: blue">var </span>postComment = <span style="color: blue">new </span><span style="color: #2b91af">PostCommentWithIdentity </span>{Post = post, Comment = <span style="color: #a31515">"Comment"</span>};<br />    <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>session = factory.OpenSession())<br />    <span style="color: blue">using </span>(<span style="color: blue">var </span>tran = session.BeginTransaction())<br />    {<br />        session.Save(post);<br />        session.Save(postComment);<br />        <span style="color: blue">long </span>insertCount = factory.Statistics.EntityInsertCount;<br />        <span style="color: #2b91af">Assert</span>.That(insertCount, <span style="color: #2b91af">Is</span>.EqualTo(0), <span style="color: #a31515">"Shouldn't insert entity in a transaction before commit."</span>);<br />    }<br />}</pre>
<p>Now, let&rsquo;s try it. What do you expect in both cases? Should both test pass? The test with <b>identity strategy fails</b> as it tries to insert the entity even before calling a commit.</p>
<p>Now here is the explanation for the batcher:</p>
<pre class="code"><span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>session = factory.OpenSession())<br /><span style="color: blue">using </span>(<span style="color: blue">var </span>tran = session.BeginTransaction())<br />{<br />    <span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; 3; i++)<br />    {<br />        <span style="color: blue">var </span>post = <span style="color: blue">new </span><span style="color: #2b91af">PostWithHiLo </span>{Title = <span style="color: blue">string</span>.Format(<span style="color: #a31515">"Identity Generators Revealed {0}"</span>, i)};<br />        session.Save(post);<br />    }<br />    tran.Commit();<br />}</pre>
<p>The upper code sends queries to database only once. However, if you&rsquo;re using the Identity style generators, then you&rsquo;re in trouble.</p>
<p><b>Conclusion</b></p>
<p>You should know what you&rsquo;re gaining and what you&rsquo;re losing when using an identifier strategies. In case of a greenfield application, my choice would be to use HiLo as it is more user friendly(and this is what NH team suggests actually), and Guid.Comb in case a replication kinda thing is required. Most probably I wouldn&rsquo;t use Identity. However, on a brownfield application, where you can&rsquo;t really change the DB schema for some reason, than Identity should be used as a last resort. </p>
<p>I&rsquo;d like to end this post with two sayings that I hear/see from Fabio</p>
<p><b>Human knowledge belongs to the world! 
    <br />Quality is not achieved by chance!</b></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate poid generators revealed]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1137" />
        <category ref="1138" />
      </categories>
      <comments>
        <comment id="216" date-created="2009-03-20T11:43:47" date-modified="2009-03-20T11:43:47" approved="true" user-name="Paulo Roberto Quicoli" user-url="http://nhforge.org/members/quicoli/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Greate explanation !]]></content>
        </comment>
        <comment id="217" date-created="2009-03-20T15:16:09" date-modified="2009-03-20T15:16:09" approved="true" user-name="mhnyborg" user-url="http://nhforge.org/members/mhnyborg/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[I have googled for an implementation of seghilo and witout success.

Can use show me the table structure and the extra code you need to write to make it work.

Thanks]]></content>
        </comment>
        <comment id="218" date-created="2009-03-20T21:43:21" date-modified="2009-03-20T21:43:21" approved="true" user-name="Tuna Toksoz" user-url="http://nhforge.org/members/tehlike/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[@Paulo Thanks
@mhnyborg Try setting your generator class in the mapping to   <generator class="hilo"/>. NH should create the table.]]></content>
        </comment>
        <comment id="219" date-created="2009-03-21T23:06:58" date-modified="2009-03-21T23:06:58" approved="true" user-name="Tolomaus" user-url="http://nhforge.org/members/Tolomaus/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Hi Tuna,

> each Save results in an insert statement against DB

I don't have the NHibernate code around at the moment, but I'm in the impression that in one of the recent versions a Persist() method was added to the session API, in accordance with the java version. Calling this method instead of Save() on a transient entity should delay the insert statement to where it actually belongs: at commit time.

Here is the link to the java API: http://www.hibernate.org/hib_docs/v3/api/org/hibernate/Session.html

The identity being the default PK in many databases, it should be easy to use in NHibernate in my opinion.

Kind regards,

Tolomaüs]]></content>
        </comment>
        <comment id="221" date-created="2009-03-23T14:33:26" date-modified="2009-03-23T14:33:26" approved="true" user-name="Tobin Harris" user-url="http://nhforge.org/members/tobinharris/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Clear post, and I loved the extra detail on the index fragmentation. I hadn't considered that. ]]></content>
        </comment>
        <comment id="232" date-created="2009-04-07T09:36:02" date-modified="2009-04-07T09:36:02" approved="true" user-name="ro.ferraris" user-url="http://nhforge.org/members/ro.ferraris/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Hi Tuna,
First of all thanks for the very interesting post.
After that a question about HiLo.

I've used it in a project where the DBMS is MySql and all work well as long as I use NHibernate.ISession.BeginTransaction, but when in a particular case I use a SysstemTransaction.TransacitonScope the HiLo doesn't work.

In fact during a save operation I receive a InvalidOperationException "Nested transactions are not supported". 
It's possible to use HiLo in this context?

In NH source code I found that TableGenerator.Generate method make an exception for SQLLite in creating a new Transaction, do you think it's possible to include a control about the use of TransactionScope in this method?

Best Regards]]></content>
        </comment>
        <comment id="233" date-created="2009-04-07T15:21:28" date-modified="2009-04-07T15:21:28" approved="true" user-name="Tuna Toksoz" user-url="http://nhforge.org/members/tehlike/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Hi ro.ferraris

Which version of NH are you using? I don't have a mysql running under my hands, but we haven't heard any problems so far. 
]]></content>
        </comment>
        <comment id="239" date-created="2009-04-08T08:20:46" date-modified="2009-04-08T08:20:46" approved="true" user-name="ro.ferraris" user-url="http://nhforge.org/members/ro.ferraris/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Hi Tune,
currently I'm using 1.2.0.3002.

The problem is MySql in conjunction with the use of a TransactionScope.

MySQL doesn't support nested transactions, and creating a new connection in a current TransactionScope automatically add it to the TransactionScope, the following new transaction is nested in the one used in TransactionScope, so the error from MySQL.

Yesterday I've implemented a custom generator copying HiloGenerator and TableGenerator and simply turning off the connection generation in Generate method, like for SQLLite.

I'm trying to investigate if there is a method to exclude a Connection from a TransactionScope, because I understand that theorretically is right to generate new Ids in a separate transaction, but I don't know if thati is possible.

Thanks for the answer.

Roby]]></content>
        </comment>
        <comment id="242" date-created="2009-04-08T15:21:39" date-modified="2009-04-08T15:21:39" approved="true" user-name="Tuna Toksoz" user-url="http://nhforge.org/members/tehlike/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[1.2. is pretty old and there have been some improvements on NH regarding to transaction scope. Can you try if it is a problem with 2.1(the trunk)?

BTW, in your generator, you can access to connection provider( don't remember the exact name) or you can get the connection and open a new connection so that it will be outside of the transaction thingy.]]></content>
        </comment>
        <comment id="245" date-created="2009-04-09T07:49:22" date-modified="2009-04-09T07:49:22" approved="true" user-name="ro.ferraris" user-url="http://nhforge.org/members/ro.ferraris/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Thank Tuna for the answer.

At the momento I use this workaround of custom generator because I've a deadline, but I think that for the next week I can do some other attempt (also trying NH 2.1) and I soon as possible I'll let you know about it.

Kind Regards,
   Roby
]]></content>
        </comment>
        <comment id="264" date-created="2009-04-17T09:33:21" date-modified="2009-04-17T09:33:21" approved="true" user-name="ro.ferraris" user-url="http://nhforge.org/members/ro.ferraris/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Hi Tuna, 
I've produced a sample solution that use NH 2.0.1 and the behaviour is the same.
The use of a TransactionScope is incompatible with HiLo generator when using MySQL as a database.
To solve this problem I've changed the Generate method of NHibernate.Id.TableGenerator changing

bool isSQLite = session.Factory.Dialect is SQLiteDialect;

in 

bool dontUseNewConnection = session.Factory.Dialect is SQLiteDialect ||
                session.Factory.Dialect is MySQLDialect && 
                System.Transactions.Transaction.Current != null;

I don't know if this could be a general solution, but in my case it works.

Do you think it is better to open a new issue on NHibernate?

Kind Regards,
  Roby

]]></content>
        </comment>
        <comment id="265" date-created="2009-04-17T16:20:27" date-modified="2009-04-17T16:20:27" approved="true" user-name="Tuna Toksoz" user-url="http://nhforge.org/members/tehlike/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[Hi Roby,

Yes, please create a jira for that.]]></content>
        </comment>
        <comment id="408" date-created="2009-07-14T18:19:25" date-modified="2009-07-14T18:19:25" approved="true" user-name="Steve Strong" user-url="http://nhforge.org/members/srstrong/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[We normally use GUIDs, and aim for sequential ones where possible since the index fragmentation is a real killer on high throughput systems.  However, does anyone have a good GUID generation strategy when there are multiple app servers?  Obviously a post-insert approach would work, but we'd like to avoid that for all the reasons stated above.  Currently, we have a GUID generation service that is shared between all of the app servers, but it is clearly a single point of failure...]]></content>
        </comment>
        <comment id="1000" date-created="2011-11-07T22:49:36" date-modified="2011-11-07T22:49:36" approved="true" user-name="Maxim" user-url="http://nhforge.org/members/Maxim/default.aspx">
          <title type="text"><![CDATA[re: NHibernate POID Generators revealed]]></title>
          <content type="text"><![CDATA[I would like very much to use "hilo" generator but there is no any example how to create "specific" table and which values pass to it. 
<id name="Id" >
      <column name="CatId" sql-type="Int64" not-null="true"/>
      <generator class="hilo"/>
</id>
Doesn't create anything in the database. 
Guid.Comb - gives 96% of fragmentation when I added in a loop 20K cat objects (from your tutorial). Could you please make an example of "hilo" implementation? Thanks.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="215" date-created="2009-03-20T10:32:22" date-modified="2009-03-20T10:32:22" approved="true" url="http://ayende.com/Blog/archive/2009/03/20/nhibernate-avoid-identity-generator-when-possible.aspx">
          <title type="text"><![CDATA[NHibernate: Avoid identity generator when possible]]></title>
        </trackback>
        <trackback id="407" date-created="2009-07-14T14:30:39" date-modified="2009-07-14T14:30:39" approved="true" url="http://www.lostechies.com/blogs/derickbailey/archive/2009/07/14/database-id-int-vs-bigint-vs-guid.aspx">
          <title type="text"><![CDATA[Database ID: Int vs. BigInt vs. GUID]]></title>
        </trackback>
        <trackback id="409" date-created="2009-07-14T19:34:12" date-modified="2009-07-14T19:34:12" approved="true" url="http://dotnetshoutout.com/NHibernate-POID-Generators-revealed-NHibernate-blog-NHibernate-Forge">
          <title type="text"><![CDATA[NHibernate POID Generators revealed - NHibernate blog - NHibernate Forge]]></title>
        </trackback>
        <trackback id="410" date-created="2009-07-15T14:00:43" date-modified="2009-07-15T14:00:43" approved="true" url="http://www.lostechies.com/blogs/derickbailey/archive/2009/07/15/storage-size-and-performance-implications-of-a-guid-pk.aspx">
          <title type="text"><![CDATA[Storage Size And Performance Implications Of A GUID PK]]></title>
        </trackback>
        <trackback id="1050" date-created="2014-09-14T15:24:54" date-modified="2014-09-14T15:24:54" approved="true" url="http://teamenergizer.myorganogold.com">
          <title type="text"><![CDATA[Organo Gold]]></title>
        </trackback>
        <trackback id="1098" date-created="2014-09-26T21:59:28" date-modified="2014-09-26T21:59:28" approved="true" url="http://e-schmitz.info/bou.php?a%5B%5D=%3Ca+href%3Dhttps%3A%2F%2Ftenpojimusyo.jp%2Fschedule%2Fcgi-bin%2Finfo.php%3Fa%255B%255D%3D%253Ca%2Bhref%253Dhttp%253A%252F%252Fwww.youtube.com%252Fwatch%253Fv%253DCUBw1oIAV3M%253Echeck%2Bout%2Bcheap%2Bsewing%2Bmachines%2Buk%253C%252Fa%253E%3ECheap+Sewing+Machines%3C%2Fa%3E">
          <title type="text"><![CDATA[cheapest commercial sewing machines]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="220" date-created="2009-03-22T14:23:22" date-modified="2009-03-22T14:23:22" approved="true" post-url="/blogs/nhibernate/archive/2009/03/22/nh_2D00_1711_2D00_ndash_2D00_inappropriate_2D00_error_2D00_handling_2D00_with_2D00_nh_2D00_2.1_2D00_alpha_2D00_1.aspx" type="normal" hasexcerpt="false" views="1473">
      <title type="text"><![CDATA[NH-1711 – Inappropriate error handling with NH 2.1 Alpha 1 when distributed transaction fails can cause application crashes]]></title>
      <content type="text"><![CDATA[<p>The <a href="http://nhjira.koah.net/browse/NH-1711">actual problem</a> <em>has been fixed</em> and it will be part of NH 2.1 Alpha 2. That is why we call them alphas, after all :-)</p>  <p>The actual bug is pretty convulsed mess, to be frank. And it is no wonder that it slipped by me. Yes, I am the one responsible for that, so I guess I am making excuses. Let me tell you about the actual scenario. When you are using NHibernate 2.1 Alpha 1 (it does <em>not</em> affect NHibernate 2.0 or 2.0.1) with a System.Transaction.Transaction, there is a slightly different code path that we have to go through, because the actual work that has to be done is no longer controlled by NHibernate, but by the DTC infrastructure.</p>  <p>So far, so good. The problem is that <em>most</em> of the time, this is done on the same thread as the application that we are running on. There are cases, specifically, when using a DTC with multiple durable enlistments, that the actual work is done on a worker thread. The problem is that if there is an error during <em>that</em> phase, for example, if we are trying to execute invalid command, or run into transaction deadlock, NHibernate wouldn’t properly handle this error, and it would bubble up. The result of unhandled thread exception is, of course, an application crash.</p>  <p>That is considered to be a bad thing, I understand, so after being able to isolate the problem, I went ahead and fix this. You can get the trunk now and get the fix, or wait until Alpha 2 is released.</p>  <p><strong>Who is impacted by this? </strong></p>  <p>You have to use multiple different durable enlistments inside a distributed transaction for the error condition to even be applicable. The problem is that there is one very common scenario that will run into this every single time. The .NET Service Buses all wrap their processing in a TransactionScope, and then tend to have multiple durable enlistments (the DB and MSMQ). This means that if you are using NServiceBus, Rhino ServiceBus or MassTransit alongside with NHibernate 2.1 Alpha1, you are probably impacted by this issue.</p>  <p>As I mentioned, a fix has already been committed (r4149) and it will be part of NHibernate 2.1 Alpah2.</p>]]></content>
      <post-name type="text"><![CDATA[nh-1711-ndash-inappropriate-error-handling-with-nh-2.1-alpha-1]]></post-name>
      <categories>
        <category ref="1139" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="223" date-created="2009-03-29T17:01:00" date-modified="2009-03-29T17:01:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/29/nhibernate-2-1-0-alpha2-is-released.aspx" type="normal" hasexcerpt="false" views="2364">
      <title type="text"><![CDATA[NHibernate 2.1.0.Alpha2 is released]]></title>
      <content type="text"><![CDATA[<p>&nbsp;</p>
<p>Ok friends here we go...</p>
<p>Download NHibernate 2.1.0.Alpha2: https://sourceforge.net/project/showfiles.php?group_id=73818</p>
<p>&nbsp;</p>
<p>Hopefully this deploy will have less problems than previous [:)]</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0 alpha2 is released]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
      </categories>
      <comments>
        <comment id="225" date-created="2009-03-29T19:56:43" date-modified="2009-03-29T19:56:43" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0.Alpha2 is released]]></title>
          <content type="text"><![CDATA[This is an updated table with the date/time types, check it out.
http://nhforge.org/blogs/nhibernate/archive/2009/03/11/nhibernate-and-ms-sql-server-2008-date-time-datetime2-and-datetimeoffset.aspx]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="224" date-created="2009-03-29T19:47:00" date-modified="2009-03-29T19:47:00" approved="true" post-url="/blogs/nhibernate/archive/2009/03/29/nhibernate-validator-1-2-alpha3.aspx" type="normal" hasexcerpt="false" views="2240">
      <title type="text"><![CDATA[NHibernate Validator 1.2 alpha3]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" /></p>
<p>Download NHibernate Validator 1.2 alpha3 with sources and binaries <a href="http://is.gd/pxyc">here</a></p>
<p>This release is an update to use it with NHibernate 2.1alpha2. For those who have NH.Validator 1.2alpha1 this is a mandatory update.</p>
<p>Enjoy it !</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 alpha3]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1092" />
        <category ref="1111" />
        <category ref="1129" />
      </categories>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="229" date-created="2009-04-03T00:07:00" date-modified="2009-04-03T00:07:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/02/nhibernate-validator-and-asp-net-mvc.aspx" type="normal" hasexcerpt="false" views="8709">
      <title type="text"><![CDATA[NHibernate Validator and Asp.Net MVC]]></title>
      <content type="text"><![CDATA[<h4>&nbsp;<a href="http://darioquintana.googlecode.com/files/MvcNhvExample.zip">Download the example here.</a></h4>
<p>Asp.Net MVC has a cool way to add validation errors from the model and display them all into the View. It&rsquo;s actually using the ModelState. As you may know NHibernate Validator (NHV) is a framework to validate entities, so what about if we let the validation to the framework that can manage it? So the integration of NHV to Asp.Net MVC is easy. I created a new Asp.Net MVC project and added some files to my solution to make they look like this: <img src="http://darioquintana.com.ar/files/MvcNhv00.png" style="display: block; float: none; margin-left: auto; margin-right: auto" /></p>
<p>First I added the libraries needed to NHV (this libraries we need in case to use NHibernate too, otherwise you don&rsquo;t need Linfu stuff to get proxies working). The libraries are: </p>
<p><img src="http://darioquintana.com.ar/files/MvcNhv05.png" /> </p>
<p>Once the libraries are referenced, NHV need to be initialized, actually in this example that initialization will consist in a Validator Engine provider, capable to be accessed from everywhere into our web-application. A good point do this, is in the Global.asax. The next method <i>InitializeValidator</i> it&rsquo;s called from the <i>Application_Start</i>.</p>
<p><img src="http://darioquintana.com.ar/files/MvcNhv03.jpg" /></p>
<p>Then I created a new View Manage.aspx, actually the view is a copy, with modifications, of Register.aspx View. Such View should looks like this one. As you may see, seems like there are some messages of validation, means, a validation that didn&rsquo;t pass.&nbsp; Now let&rsquo;s see the code to explore the minimal code to introduce NHibernate Validator as a Framework to Validate our MVC application.</p>
<p><img src="http://darioquintana.com.ar/files/MvcNhv01.jpg" /></p>
<p>First of all, our entity Customer, which reflex the view with a Name and a Email properties, should looks like this with the NHV attributes. Remember that NHV can be configured using Attributes (default), Xml or Fluent-Interfaces, and accept mix configurations too.</p>
<p><img src="http://darioquintana.com.ar/files/MvcNhv04.png" /></p>
<p>Second, we need the integration point between NHibernate Validator and Asp.Net MVC, and that point consist just in a little piece of code that make the validation and modifies the current state of the model. We need just a few lines:</p>
<p><img src="http://darioquintana.com.ar/files/MvcNhv01.png" /></p>
<p>The picture shows an extension method which first of all, get a new ValidatorEngine instance, which is a singleton in whole web application. Actually, to use a ValidatorEngine we need just one instance, because NHV make a lot of useful caching and it configure itself in the way we are using it. Then we validate the entity and get all the InvalidValues of the object. If the entity is in invalid state (break one rule defined), NHV we well generate a InvalidValue array with all errors we should show to the user. Iterate through all the items and we add them all to the ModelState. Once we add one model error, the model is no longer valid.</p>
<p>Once we have our extension, let&rsquo;s use it.</p>
<p><img src="http://darioquintana.com.ar/files/MvcNhv02.png" /></p>
<p>Validate Method is the extension we made before, and that method is going to modify the ModelState if it&rsquo;s needed.</p>
<p>And that&rsquo;s all folks, hope this helps.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator and asp net mvc]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1129" />
        <category ref="1140" />
        <category ref="1141" />
      </categories>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="230" date-created="2009-04-03T15:01:00" date-modified="2009-04-03T15:01:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/03/ensuring-updates-on-flush.aspx" type="normal" hasexcerpt="false" views="7207">
      <title type="text"><![CDATA[Ensuring updates on Flush]]></title>
      <content type="text"><![CDATA[<p>Two assertions:</p>
<ul>
<li>I like the dirty check of NHibernate because I can work without worry about explicit updates. </li>
<li>I don&rsquo;t like the dirty check of NHibernate because I can&rsquo;t have full control about updates and the dirty-check, in my application, is slow. </li>
</ul>
<p>Both true ? Can we implements something to prevent Auto-Dirty-Check on flush ?</p>
<h4>Domain</h4>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Domain_5F00_003F435D.png"><img border="0" width="496" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Domain_5F00_thumb_5F00_28DDAF64.png" alt="Domain" height="466" style="border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px" title="Domain" /></a></p>
<h4>Test</h4>
<h5>Part of the configuration</h5>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">generate_statistics</span>"<span style="color: blue">&gt;</span>true<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>I&rsquo;m using NHibernate <a href="/blogs/nhibernate/archive/2008/10/26/exploring-nhibernate-statistics-part-1-simple-data-fetching.aspx">SessionFactory statistics</a> to check some operation.</p>
<h5>Populating DB</h5>
<pre class="code"><span style="color: blue">public void </span>FillDb()<br />{<br />sessionFactory.EncloseInTransaction(session =&gt;<br />{<br />    <span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; 100; i++)<br />    {<br />        <span style="color: blue">var </span>reptileFamily = <span style="color: #2b91af">ReptileFamilyBuilder<br />            </span>.StartRecording()<br />            .WithChildren(2)<br />            .Build();<br /><br />        session.Save(ReptilesfamilyEntityName, reptileFamily);<br />    }<br /><br />    <span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; 100; i++)<br />    {<br />        <span style="color: blue">var </span>humanFamily = <span style="color: #2b91af">HumanFamilyBuilder<br />            </span>.StartRecording()<br />            .WithChildren(1)<br />            .Build();<br /><br />        session.Save(HumanfamilyEntityName, humanFamily);<br />    }<br />});<br />}</pre>
<p>In a transaction I&rsquo;m creating 100 <span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt; and 100 <span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;. Each <span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt; has a father, a mother and two children (total 5 entities). Each <span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt; has a father, a mother and one children (total 4 entities). The DB will have 900 entities states (the Family is mapped to use <span style="text-decoration: underline;">all cascade</span>).</p>
<h5>The test</h5>
<pre class="code"><span style="color: blue">public void </span>ShouldNotAutoUpdate()<br />{<br />FillDb();<br /><br /><span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessionFactory.OpenSession())<br /><span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />{<br />    <span style="color: blue">var </span>reptiles = s.CreateQuery(<span style="color: #a31515">"from ReptilesFamily"</span>)<br />        .Future&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;&gt;();<br /><br />    <span style="color: blue">var </span>humans = s.CreateQuery(<span style="color: #a31515">"from HumanFamily"</span>)<br />        .Future&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;&gt;();<br /><br />    ModifyAll(reptiles);<br />    ModifyAll(humans);<br /><br />    sessionFactory.Statistics.Clear();<br /><br />    s.Update(ReptilesfamilyEntityName, reptiles.First());<br />    s.Update(HumanfamilyEntityName, humans.First());<br /><br />    tx.Commit();<br />}<br /><br />sessionFactory.Statistics.EntityUpdateCount<br />    .Should().Be.Equal(7);<br /><br />CleanDb();<br />}</pre>
<p>After populate the DB I&rsquo;m loading and modifying all instances of <span style="color: #2b91af">Human</span> and <span style="color: #2b91af">Reptile</span> (that mean 400 entities of Reptile and 300 entities of Human). The result is that I have 900 entities loaded and 700 modified in a session.</p>
<p>In the two session.Update I&rsquo;m calling explicitly the update only for the first <span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt; and the first <span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt; (that mean only for 7 entities).</p>
<p>The test assertion is:</p>
<pre class="code">sessionFactory.Statistics.EntityUpdateCount<br />.Should().Be.Equal(7);</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The summary is that even if I have 700 modified entities,&nbsp; NHibernate should update only 7 entities because I call explicitly Update only for two families.</p>
<h4>How change the default behavior</h4>
<p>If you are familiar with NH2.0.0 and above you can imagine which will be the place where look&hellip; yes, <strong>Events/Listeners</strong>.</p>
<p>As first the configuration where you can see which events I&rsquo;m using and which listeners and in which order will be executed.</p>
<pre class="code">        <span style="color: blue">&lt;</span><span style="color: #a31515">event </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">delete</span>"<span style="color: blue">&gt;<br /><br />            &lt;</span><span style="color: #a31515">listener<br />                </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">DisableAutoDirtyCheck.PreDeleteEventListener, DisableAutoDirtyCheck</span>"<span style="color: blue">/&gt;<br /><br />            &lt;</span><span style="color: #a31515">listener<br />                </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">NHibernate.Event.Default.DefaultDeleteEventListener, NHibernate</span>"<span style="color: blue">/&gt;<br /><br />        &lt;/</span><span style="color: #a31515">event</span><span style="color: blue">&gt;<br /><br />        &lt;</span><span style="color: #a31515">event </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">update</span>"<span style="color: blue">&gt;<br /><br />            &lt;</span><span style="color: #a31515">listener<br />                </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">DisableAutoDirtyCheck.PreUpdateEventListener, DisableAutoDirtyCheck</span>"<span style="color: blue">/&gt;<br /><br />            &lt;</span><span style="color: #a31515">listener<br />                </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">NHibernate.Event.Default.DefaultUpdateEventListener, NHibernate</span>"<span style="color: blue">/&gt;<br />        &lt;/</span><span style="color: #a31515">event</span><span style="color: blue">&gt;<br /><br />        &lt;</span><span style="color: #a31515">listener<br />            </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">DisableAutoDirtyCheck.PostLoadEventListener, DisableAutoDirtyCheck</span>"<br />            <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">post-load</span>"<span style="color: blue">/&gt;<br /></span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h5>Tricks</h5>
<p>The real Dirty-Check happen in the <span style="color: #2b91af">DefaultFlushEntityEventListener</span> using the <em>session state</em>. All entities loaded, in what is commonly named session-cache, are loaded in the <span style="text-decoration: underline;">Session.PersistenceContext</span>. To be very short the PersistenceContext is a set of <span style="color: #2b91af">EntityEntry</span>. An <span style="color: #2b91af">EntityEntry</span> is the responsible to maintain <strong>the state and the Status</strong> of an entity.</p>
<p>The real trick behind all this matter is this extension:</p>
<pre class="code"><span style="color: blue">public static class </span><span style="color: #2b91af">Extensions<br /></span>{<br /><span style="color: blue">private static readonly </span><span style="color: #2b91af">FieldInfo </span>statusFieldInfo =<br />    <span style="color: blue">typeof </span>(<span style="color: #2b91af">EntityEntry</span>).GetField(<span style="color: #a31515">"status"</span>,<span style="color: #2b91af">BindingFlags</span>.NonPublic | <span style="color: #2b91af">BindingFlags</span>.Instance);<br /><br /><span style="color: blue">public static void </span>BackSetStatus(<span style="color: blue">this </span><span style="color: #2b91af">EntityEntry </span>entry, <span style="color: #2b91af">Status </span>status)<br />{<br />    statusFieldInfo.SetValue(entry, status);<br />}<br />}</pre>
<h5>Listeners implementation</h5>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">PostLoadEventListener </span>: <span style="color: #2b91af">IPostLoadEventListener<br /></span>{<br /><span style="color: blue">public void </span>OnPostLoad(<span style="color: #2b91af">PostLoadEvent </span>@event)<br />{<br />    <span style="color: #2b91af">EntityEntry </span>entry = @event.Session.PersistenceContext.GetEntry(@event.Entity);<br />    entry.BackSetStatus(<span style="color: #2b91af">Status</span>.ReadOnly);<br />}<br />}</pre>
<p>After load an entity, the instance is marked as <strong>ReadOnly</strong> but maintaining the <em>loaded-state </em>(maintain the loaded state is the reason to use the above trick).</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">PreUpdateEventListener </span>: <span style="color: #2b91af">ISaveOrUpdateEventListener<br /></span>{<br /><span style="color: blue">public static readonly </span><span style="color: #2b91af">CascadingAction </span>ResetReadOnly = <span style="color: blue">new </span><span style="color: #2b91af">ResetReadOnlyCascadeAction</span>();<br /><br /><span style="color: blue">public void </span>OnSaveOrUpdate(<span style="color: #2b91af">SaveOrUpdateEvent </span>@event)<br />{<br />    <span style="color: blue">var </span>session = @event.Session;<br />    <span style="color: #2b91af">EntityEntry </span>entry = session.PersistenceContext.GetEntry(@event.Entity);<br />    <span style="color: blue">if </span>(entry != <span style="color: blue">null </span>&amp;&amp; entry.Persister.IsMutable &amp;&amp; entry.Status == <span style="color: #2b91af">Status</span>.ReadOnly)<br />    {<br />        entry.BackSetStatus(<span style="color: #2b91af">Status</span>.Loaded);<br />        CascadeOnUpdate(@event, entry.Persister, @event.Entity);<br />    }<br />}<br /><br /><span style="color: blue">private static void </span>CascadeOnUpdate(<span style="color: #2b91af">SaveOrUpdateEvent </span>@event, <span style="color: #2b91af">IEntityPersister </span>persister, <span style="color: blue">object </span>entity)<br />{<br />    <span style="color: #2b91af">IEventSource </span>source = @event.Session;<br />    source.PersistenceContext.IncrementCascadeLevel();<br />    <span style="color: blue">try<br />    </span>{<br />        <span style="color: blue">new </span><span style="color: #2b91af">Cascade</span>(ResetReadOnly, <span style="color: #2b91af">CascadePoint</span>.BeforeFlush, source).CascadeOn(persister, entity);<br />    }<br />    <span style="color: blue">finally<br />    </span>{<br />        source.PersistenceContext.DecrementCascadeLevel();<br />    }<br />}<br />}</pre>
<p>When an entity is explicitly updated, before execute the default behavior I&rsquo;m restoring the <strong>Status</strong> of the loaded entity (obviously for all the entities loaded an involved in cascade actions).</p>
<h4>Conclusion</h4>
<p>Can we have full control over NHibernate&rsquo;s updates&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp; <strong>Yes, we can!! </strong>;-)</p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/DisableAutoDirtyCheck/DisableAutoDirtyCheck">here</a>.</p>
<p><a target="_blank" href="http://fabiomaulo.blogspot.com/">My blog.</a></p>]]></content>
      <post-name type="text"><![CDATA[ensuring updates on flush]]></post-name>
      <categories>
        <category ref="1047" />
        <category ref="1089" />
      </categories>
      <trackbacks>
        <trackback id="569" date-created="2009-12-18T03:35:04" date-modified="2009-12-18T03:35:04" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[nh credit repair]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="234" date-created="2009-04-08T02:07:13" date-modified="2009-04-08T02:07:13" approved="true" post-url="/blogs/nhibernate/archive/2009/04/08/nhibernate-mapping-lt-property-gt.aspx" type="normal" hasexcerpt="false" views="11170">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;property/&gt;]]></title>
      <content type="text"><![CDATA[<p>I am going to post a few things about NHibernate, going in depth into seemingly understood mapping. We will start with the most basic of them all: &lt;property/&gt;</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span>
        <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;propertyName&quot;</span>                 (<span style="color: #ff0000">1</span>)
        <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;column_name&quot;</span>                (<span style="color: #ff0000">2</span>)
        <span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;typename&quot;</span>                     (<span style="color: #ff0000">3</span>)
        <span style="color: #ff0000">update</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                 (<span style="color: #ff0000">4</span>)
        <span style="color: #ff0000">insert</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                 (<span style="color: #ff0000">4</span>)
        <span style="color: #ff0000">formula</span>=<span style="color: #0000ff">&quot;arbitrary SQL expression&quot;</span>  (<span style="color: #ff0000">5</span>)
        <span style="color: #ff0000">access</span>=<span style="color: #0000ff">&quot;field|property|ClassName&quot;</span>   (<span style="color: #ff0000">6</span>)
        <span style="color: #ff0000">optimistic</span>-<span style="color: #ff0000">lock</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>        (<span style="color: #ff0000">7</span>)
        <span style="color: #ff0000">generated</span>=<span style="color: #0000ff">&quot;never|insert|always&quot;</span>     (<span style="color: #ff0000">8</span>)
<span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>1) is pretty obvious, it is the name of the property on the persistent class.</p>

<p>2) should be obvious as well, this is the column name in the database, which by default is the name of the property. This allows us to map a property to a column, and adds a small optimization if you have one to one mapping.</p>

<p>3) type is interesting. This is the CLR type of the property that we map, but it can also be used to customize the way that NHibernate works with our data types by specifying a custom IUserType.</p>

<p>4) should NHibernate update this property in the database when updating the object? Let us look at an example:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Title&quot;</span> <span style="color: #ff0000">update</span>=<span style="color: #0000ff">&quot;false&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>Given this mapping, and the following code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var blog = session.Get&lt;Blog&gt;(6);
	blog.Title = &quot;<span style="color: #8b0000">changed</span>&quot;;

	tx.Commit();
}</pre>
</blockquote>

<p>NHibernate will <em>not</em> try to update the row:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6AEE3708.png"><img height="87" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0380650A.png" width="533" border="0" /></a> </p>

<p>Note that we have no update here, even though we updated the actual property value, and usually NHibernate will save that value.</p>

<p>5) insert behaves in much the same way, disabling inserts for a property. For example:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;AllowsComments&quot;</span> <span style="color: #ff0000">insert</span>=<span style="color: #0000ff">&quot;false&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>And this code:</p>

<blockquote>
  <pre><span style="color: #0000ff">object</span> id;
<span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	id = session.Save(<span style="color: #0000ff">new</span> Blog
	{
		AllowsComments = <span style="color: #0000ff">true</span>,
		CreatedAt = DateTime.Now,
		Subtitle = &quot;<span style="color: #8b0000">test</span>&quot;,
		Title = &quot;<span style="color: #8b0000">test</span>&quot;
	});

	tx.Commit();
}</pre>
</blockquote>

<p>Produces:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3C2D9FC8.png"><img height="110" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_6DBB9E0E.png" width="588" border="0" /></a> </p>

<p>Note that we don't insert the AllowComments column. And if we try to update this entity:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var blog = session.Get&lt;Blog&gt;(id);
	blog.AllowsComments = <span style="color: #0000ff">false</span>;
	blog.Title = &quot;<span style="color: #8b0000">blah</span>&quot;;

	tx.Commit();
}</pre>
</blockquote>

<p>We would get...</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2D1BE250.png"><img height="110" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_49B85E23.png" width="470" border="0" /></a> </p>

<p>An update of AllowComments, but not of Title.</p>

<p>5) formula is a way to specify any arbitrary SQL that we want to associate with a property. Obviously, this is a read only value, and it is something that we would use on fairly rare occasions. Nevertheless, it can be pretty useful at times. Let us take a look at the mapping:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CountOfPosts&quot;</span>
	<span style="color: #ff0000">formula</span>=<span style="color: #0000ff">&quot;(select count(*) from Posts where Posts.Id = Id)&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>And selecting an entity will now result in:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3E253195.png"><img height="188" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5D6A6919.png" width="373" border="0" /></a></p>

<p>Note that the formula was slightly preprocessed in order to make it work as a subquery.</p>

<p>6) access determines how we are going to actually set and get the actual value with NHibernate. We aren't limited to a simple public property, in fact, we can use: private variables, private auto property variable, custom implementation, field, and many more. This isn't actually very interesting at the moment to me, so I am just going to mention it and move on.</p>

<p>7) optimistic-lock is pretty complex, I am afraid. Mostly because it is a way to interact with the &lt;version/&gt; option of NHibernate. NHibernate has intrinsic support for optimistic concurrency, but sometimes there are reasons that you <em>don't </em>want to change the value of the version of the entity if a particular value changed. This is the role that optimistic-lock plays. </p>

<p>It will probably be better when we see the code. Let us take the following entity definition:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Blog&quot;</span>
	   <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Blogs&quot;</span><span style="color: #0000ff">&gt;</span>
  
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">version</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Version&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Title&quot;</span> <span style="color: #ff0000">update</span>=<span style="color: #0000ff">&quot;false&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Subtitle&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;AllowsComments&quot;</span> <span style="color: #ff0000">insert</span>=<span style="color: #0000ff">&quot;false&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CreatedAt&quot;</span> <span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CountOfPosts&quot;</span>
		<span style="color: #ff0000">formula</span>=<span style="color: #0000ff">&quot;(select count(*) from Posts where Posts.Id = Id)&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And now execute the following code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var blog = session.Get&lt;Blog&gt;(1);
	blog.Subtitle = &quot;<span style="color: #8b0000">new value 6</span>&quot;;
	tx.Commit();
}</pre>
</blockquote>

<p>The SQL that is going to be executed is:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7CAFA09D.png"><img height="138" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0E229227.png" width="431" border="0" /></a> </p>

<p>Note that we increment the value of the version column. But, if we specify optimistic-lock=&quot;false&quot;...</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Subtitle&quot;</span>
	<span style="color: #ff0000">optimistic</span>-<span style="color: #ff0000">lock</span>=<span style="color: #0000ff">&quot;false&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>We will get:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3FB0906D.png"><img height="139" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_77F19836.png" width="405" border="0" /></a> </p>

<p>Note that in this case, we do <em>not</em> increase the value of the version column.</p>

<p>8) generated is an instruction to NHibernate that the value of this property is set by the database, usually using a default value (in which case you'll use &quot;insert&quot;) or a trigger (in which case you'll use &quot;always&quot;).</p>

<p>When we use it like this:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;AllowsComments&quot;</span> <span style="color: #ff0000">generated</span>=<span style="color: #0000ff">&quot;insert&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>And execute the following code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	session.Save(<span style="color: #0000ff">new</span> Blog
	{
		CreatedAt = DateTime.Now,
		Title = &quot;<span style="color: #8b0000">hello</span>&quot;,
		Subtitle = &quot;<span style="color: #8b0000">world</span>&quot;,
	});
	tx.Commit();
}</pre>
</blockquote>

<p>We will get an insert followed immediately by a select:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_055A3BEE.png"><img height="39" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_74E1CAF2.png" width="317" border="0" /></a> \</p>

<p>And the select is:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_723B9FF2.png"><img height="79" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0F444EBB.png" width="308" border="0" /></a> </p>

<p>So we have to get it back from the database before we can actually make any sort of use of it.</p>

<p>And that was my in depth tour into &lt;property/&gt;, more will probably follow...</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt property gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="240" date-created="2009-04-08T09:32:04" date-modified="2009-04-08T09:32:04" approved="true" user-name="ssteinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Thanks a lot Ayende! I'm looking forward to your next mapping blog :-)]]></content>
        </comment>
        <comment id="241" date-created="2009-04-08T12:36:17" date-modified="2009-04-08T12:36:17" approved="true" user-name="YJingLee" user-url="http://nhforge.org/members/YJingLee/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Thanks you post]]></content>
        </comment>
        <comment id="244" date-created="2009-04-09T07:31:00" date-modified="2009-04-09T07:31:00" approved="true" user-name="Kytto" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[There is some difference about performance if the optional parameters are specified or not? For example is it better specified every time the type, column, insert, update..., also are like the default? Until now I explicit everything because if the default change between two version my mapping continue to work, but only for this.
]]></content>
        </comment>
        <comment id="246" date-created="2009-04-09T12:58:46" date-modified="2009-04-09T12:58:46" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[@Cristiano it's the same... also using defaults your eyes hurts less :-)]]></content>
        </comment>
        <comment id="309" date-created="2009-05-18T09:18:50" date-modified="2009-05-18T09:18:50" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Hi Guys , If attribute "Formula" returns more than one Row how best we can handle this in Mappings?

Can we use an Array type so that i can hold multiple rows to the mapped field ?

]]></content>
        </comment>
        <comment id="310" date-created="2009-05-18T09:30:07" date-modified="2009-05-18T09:30:07" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[You will get an error, there is no way SQL can return several rows inside a column]]></content>
        </comment>
        <comment id="311" date-created="2009-05-18T12:53:50" date-modified="2009-05-18T12:53:50" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[@Ayende
Thanks for the Reply Ayende

In my application i am using a property as shown below:
<property name="x" access="field" formula="(select T.Col1 from Table_1 T where T.col2>0 )" type="Decimal"/>

My formula="(select T.Col1 from Table_1 T where T.col2>0 )"  would result in more than one row (i mean multiple values)

In this scenario how could i use the  property ?

Do i need to change the type to Array 

if so could you pls let guide me .]]></content>
        </comment>
        <comment id="312" date-created="2009-05-18T13:01:40" date-modified="2009-05-18T13:01:40" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[It is not possible.
Try to execute this SQL, and you'll get an error at the database level.]]></content>
        </comment>
        <comment id="313" date-created="2009-05-18T14:06:15" date-modified="2009-05-18T14:06:15" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[@Ayende  
Yeah exactly i am getting Error 
So ,We cannot use a Formula in NHibernate if SQL  yields more than one row or value 
If i am not  right in interpreting this please correct me]]></content>
        </comment>
        <comment id="314" date-created="2009-05-18T14:28:53" date-modified="2009-05-18T14:28:53" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[The problem is not with NH
The problem is that what you are trying to do isn't valid SQL in the relational model.]]></content>
        </comment>
        <comment id="320" date-created="2009-05-19T04:03:56" date-modified="2009-05-19T04:03:56" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[@Ayende  
Thanks ]]></content>
        </comment>
        <comment id="330" date-created="2009-05-26T10:13:50" date-modified="2009-05-26T10:13:50" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[@Ayende  
I dont know will it make sense to me posting this question here

i have a scenario like this

<bag name="Collection1" cascade="all" inverse ="true">
<key column="Col_ID"/>
<one-to-many class="Collection1MappingClass" not-found="ignore"/>
</bag>

if i want only the collection of one particular column in "Collection1" table do i need to use <element> tag instead of <one -to many> or can i use both inside the bag.]]></content>
        </comment>
        <comment id="331" date-created="2009-05-27T12:25:54" date-modified="2009-05-27T12:25:54" approved="true" user-name="bunceg" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Jumping on Ayende's blog but I think this sort of query should be raised in the general help forum that you can find under "Groups". it's probably better than adding a growing list of "how do I do this" questions to the blog post.]]></content>
        </comment>
        <comment id="449" date-created="2009-07-23T14:01:47" date-modified="2009-07-23T14:01:47" approved="true" user-name="NHibernate_Mapping_Queries" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Hi Ayende and bunceg 

i have an issue with <property> mappings

i am facing some precision problems with Oracle Number datatype and NHibernate Double datatype (prperty type is Double for the Oracle Column)

When i retrive the Oracle Number through NHibernate the value is appended by some more precision values .

Why is this happening in NHibernate is there any issue with the DataTypes i used?]]></content>
        </comment>
        <comment id="450" date-created="2009-07-23T14:34:52" date-modified="2009-07-23T14:34:52" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Srinivas,
You need to specify precision in the property tag.
Please ask the question in nh users, for more details.]]></content>
        </comment>
        <comment id="451" date-created="2009-07-23T15:58:11" date-modified="2009-07-23T15:58:11" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;property/&gt;]]></title>
          <content type="text"><![CDATA[Thanks Ayende for the quick reply ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="237" date-created="2009-04-08T14:20:00" date-modified="2009-04-08T14:20:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/08/nhibernate-mapping-lt-component-gt.aspx" type="normal" hasexcerpt="false" views="2125">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;component/&gt;]]></title>
      <content type="text"><![CDATA[<p>&lt;component/&gt; is an interesting feature of NHibernate, which map more or less directly into the notion of a Value Type in DDD. This is a way to create an object model with higher granularity than the physical data model.</p>  <p>For example, let us take the following table:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0947AA33.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="197" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5B819380.png" width="202" border="0" /></a> </p>  <p>And this object model:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_28B41DBD.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="198" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4240CC4C.png" width="451" border="0" /></a> </p>  <p>They are quite different, where the physical data model put all the data in a single table, we want to treat them in our object model as two separate classes. This is where &lt;component/&gt; comes into play:</p>  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
	<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Name&quot;</span> <span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">component</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Address&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Line1&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Line2&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;City&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Country&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;ZipCode&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">component</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>

<p>This mapping will translate between the physical data model and the object model. And the mapping is complete, so even queries are done in the way you would expect it:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_15508AD3.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="147" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_289662D4.png" width="268" border="0" /></a> </p>

<p>And then we let NHibernate sort it out and give us our pretty object graph.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt component gt]]></post-name>
      <comments>
        <comment id="247" date-created="2009-04-10T22:36:58" date-modified="2009-04-10T22:36:58" approved="true" user-name="Pablo Marambio" user-url="http://http:/pablomarambio.cl">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;component/&gt;]]></title>
          <content type="text"><![CDATA[Nice.This is quite useful for my object versioning solution, which goes like this: generating a "Past" entity for each entity that needs versioning.

In this case, the "Actual" and "Past" entities are completely different objects, so they go in diferent tables. I decided not to make them child objects of a common parent class, so Components are helping me to reduce code redudancy: Every attribute in the "Actual" entity is coded inside a component, which is also used in the "Past" entity.
]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="235" date-created="2009-04-09T03:22:00" date-modified="2009-04-09T03:22:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/09/nhibernate-mapping-lt-many-to-one-gt.aspx" type="normal" hasexcerpt="false" views="12963">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;many-to-one/&gt;]]></title>
      <content type="text"><![CDATA[<p>Next up for inspection is the &lt;many-to-one/&gt; element. This element is defined as:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">many</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span>
        <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PropertyName&quot;</span>                                (<span style="color: #ff0000">1</span>)
        <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;column_name&quot;</span>                               (<span style="color: #ff0000">2</span>)
        <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;ClassName&quot;</span>                                  (<span style="color: #ff0000">3</span>)
        <span style="color: #ff0000">cascade</span>=<span style="color: #0000ff">&quot;all|none|save-update|delete&quot;</span>              (<span style="color: #ff0000">4</span>)
        <span style="color: #ff0000">fetch</span>=<span style="color: #0000ff">&quot;join|select&quot;</span>                                (<span style="color: #ff0000">5</span>)
        <span style="color: #ff0000">update</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                                (<span style="color: #ff0000">6</span>)
        <span style="color: #ff0000">insert</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                                (<font color="#ff0000">7</font>)
        <span style="color: #ff0000">property</span>-<span style="color: #ff0000">ref</span>=<span style="color: #0000ff">&quot;PropertyNameFromAssociatedClass&quot;</span>     (<font color="#ff0000">8</font>)
        <span style="color: #ff0000">access</span>=<span style="color: #0000ff">&quot;field|property|nosetter|ClassName&quot;</span>         (<font color="#ff0000">9</font>)
        <span style="color: #ff0000">unique</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                                (<font color="#ff0000">10</font>)
        <span style="color: #ff0000">optimistic</span>-<span style="color: #ff0000">lock</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                       (<span style="color: #ff0000">11</span>)
        <span style="color: #ff0000">not</span>-<span style="color: #ff0000">found</span>=<span style="color: #0000ff">&quot;ignore|exception&quot;</span>                       (<span style="color: #ff0000">12</span>)
<span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>Much of the attributes on this element are identical to the ones that I outlined in the post about <a href="http://ayende.com/Blog/archive/2009/04/07/nhibernate-mapping-ltpropertygt.aspx">&lt;property/&gt;</a>. 1, 2, 3, 6, 7, 9 and 11 are identical, and I am not going to cover them.</p>

<p>4) cascade is interesting, it controls one of the more interesting NHibernate features, persistence by reachability.I outlined all the possible options in 2006, so I <a href="http://ayende.com/Blog/archive/2006/12/02/NHibernateCascadesTheDifferentBetweenAllAlldeleteorphansAndSaveupdate.aspx">wouldn’t repeat them</a> again.</p>

<p>5) fetch is <em>really </em>interesting. Let us take a look at an entity definition, and explore how modifying it can alter NHibernate’s behavior.</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Post&quot;</span>
		 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span><span style="color: #0000ff">&gt;</span>
  
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Title&quot;</span> <span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">many</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Blog&quot;</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And we have the following code to exercise NHibernate:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var post = session.Get&lt;Post&gt;(1);
	Console.WriteLine(post.Title);
	tx.Commit();
}</pre>
</blockquote>

<p>This would result in the following SQL.</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_128440AF.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="109" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_71FF91AD.png" width="281" border="0" /></a>&#160;</p>

<p>But interesting things happen when we start playing with the fetch attribute. Note that by default the fetch attribute is defaulting to “select”, so setting it to that value is merely making things explicit, but setting it to fetch=”join”, like this:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">many</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Blog&quot;</span> 
	<span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span>
	<span style="color: #ff0000">fetch</span>=<span style="color: #0000ff">&quot;join&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>Would result in the following SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0A91BFAF.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="260" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4BC259B7.png" width="371" border="0" /></a> </p>

<p></p>

<p>We eagerly load the Blog association, in this case.</p>

<p>8) property-ref is a legacy feature, it is meant to allow you to create many-to-one associations when the association is not done on the primary key of the association. In general, I would strongly suggest avoiding it.</p>

<p>9) unique is relevant only if you use NHibernate to specify your schema. This would generate a unique constraint when we generate the DDL.</p>

<p>12) not-found is another legacy feature, it controls how NHibernate behaves when it finds an invalid foreign key. That is, a value that points to an entity that doesn’t exist. By default, this would trigger an error, as this generally indicate a problem with the database, but with legacy database, you can tell it to set the property value to null instead.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt many to one gt]]></post-name>
      <comments>
        <comment id="243" date-created="2009-04-09T04:29:56" date-modified="2009-04-09T04:29:56" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;many-to-one/&gt;]]></title>
          <content type="text"><![CDATA[very good for the wiki reference. It need only a copy&paste of the HTML.
http://nhforge.org/wikis/reference2-0en/default.aspx
]]></content>
        </comment>
        <comment id="724" date-created="2010-10-16T07:29:15" date-modified="2010-10-16T07:29:15" approved="true" user-name="adherence" user-url="http://nhforge.org/members/adherent_2D00_islam/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;many-to-one/&gt;]]></title>
          <content type="text"><![CDATA[nice blog. i tried this but not working :(
 please check my problem on

 http://forums.asp.net/p/1612888/4126755.aspx#4126755

please help me out ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="236" date-created="2009-04-10T04:43:00" date-modified="2009-04-10T04:43:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/10/nhibernate-mapping-inheritance.aspx" type="normal" hasexcerpt="false" views="10987">
      <title type="text"><![CDATA[NHibernate Mapping – Inheritance]]></title>
      <content type="text"><![CDATA[<p>I wanted to explore a few options regarding the way we can map inheritance using NHibernate. Here is the model that we are going to use:<a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6D1D2D68.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="329" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_34972EB0.png" width="379" border="0" /></a> </p>  <p>And the code that we are going to execute:</p>  <blockquote>   <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	session.CreateCriteria(<span style="color: #0000ff">typeof</span>(Party)).List();
	session.CreateCriteria(<span style="color: #0000ff">typeof</span>(Company)).List();
	session.CreateCriteria(<span style="color: #0000ff">typeof</span>(Person)).List();
	tx.Commit();
}</pre>
</blockquote>

<p>From now on we are going to simply play with the mapping options to see what we can come up with. We will start with a very simple discriminator based mapping (table per hierarchy):</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Party&quot;</span>
			 <span style="color: #ff0000">abstract</span>=<span style="color: #0000ff">&quot;true&quot;</span>
			 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Parties&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">discriminator</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;Discriminator&quot;</span>
			<span style="color: #ff0000">not</span>-<span style="color: #ff0000">null</span>=<span style="color: #0000ff">&quot;true&quot;</span>
			<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;System.String&quot;</span><span style="color: #0000ff">/&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">subclass</span>
		<span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
		<span style="color: #ff0000">discriminator</span>-<span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;Person&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;FirstName&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">subclass</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">subclass</span>
		<span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Company&quot;</span>
		<span style="color: #ff0000">discriminator</span>-<span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;Company&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CompanyName&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">subclass</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Which result in the following table structure:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_5A8F6FB7.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="176" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7078E207.png" width="352" border="0" /></a> </p>

<p>And the SQL that was generated is:</p>

<p>Select Party</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_623CF9C8.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="105" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3A990E4F.png" width="330" border="0" /></a> </p>

<p>Select Company</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2F05E1C1.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="86" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5DEB2456.png" width="296" border="0" /></a></p>

<p>Select Person</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4FAF3C17.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="89" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_417353D8.png" width="282" border="0" /></a> </p>

<p>But that is just one option. Let us see what happen if we try the table per concrete class option:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
	<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;FirstName&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>

<span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Company&quot;</span>
	<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Companies&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CompanyName&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Which result in the following table structure:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_5A0581D9.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="93" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0BFFB315.png" width="520" border="0" /></a> </p>

<p>And the following queries:</p>

<p>Select Party</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_16BF9B1B.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="78" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0883B2DC.png" width="304" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7A47CA9C.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="76" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_292D0D32.png" width="286" border="0" /></a> </p>

<p>No, that is not a mistake, we issue two SQL queries to load all possible parties.</p>

<p></p>

<p>Select Company</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_16BF9B1B.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="78" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0883B2DC.png" width="304" border="0" /></a> </p>

<p>Select Person</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7A47CA9C.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="76" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_292D0D32.png" width="286" border="0" /></a> </p>

<p>The inheritance strategy is table per subclass:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Party&quot;</span>
		<span style="color: #ff0000">abstract</span>=<span style="color: #0000ff">&quot;true&quot;</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Parties&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">joined</span>-<span style="color: #ff0000">subclass</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span>
		<span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;PartyId&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;FirstName&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">joined</span>-subclass<span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">joined</span>-<span style="color: #ff0000">subclass</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Companies&quot;</span>
		<span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Company&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;PartyId&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CompanyName&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">joined</span>-subclass<span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Which result in the following table structure:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_09149126.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="268" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_13D4792C.png" width="498" border="0" /></a> </p>

<p>And the queries:</p>

<p>Select Party</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_177524BA.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="219" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_60312E2F.png" width="355" border="0" /></a> </p>

<p>This is slightly tricky, basically, we get the class based on whatever we have a row in the appropriate table.</p>

<p>Select Company</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_1152F981.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="105" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_70CE4A7F.png" width="309" border="0" /></a> </p>

<p>Select Person</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_50499B7E.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="107" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_2D1C30CC.png" width="291" border="0" /></a> </p>

<p>The final option is using unioned subclasses, which looks like this:</p>

<blockquote>
  <p>&#160;</p>

  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Party&quot;</span>
		<span style="color: #ff0000">abstract</span>=<span style="color: #0000ff">&quot;true&quot;</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Parties&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;hilo&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">union</span>-<span style="color: #ff0000">subclass</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span>
		<span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;FirstName&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">union</span>-subclass<span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">union</span>-<span style="color: #ff0000">subclass</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Companies&quot;</span>
		<span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Company&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CompanyName&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">union</span>-subclass<span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Note that it is not possible to use identity with union-subclasses, so I switched to hilo, which is generally much more recommended anyway.</p>

<p>The table structure is similar to what we have seen before:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_05E47848.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="93" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_74FFD457.png" width="520" border="0" /></a> </p>

<p>But the querying is drastically different:</p>

<p>Select Party</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_54E7584B.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="245" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_2624305A.png" width="322" border="0" /></a> </p>

<p>Select Company</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7356BA96.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="79" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_627216A6.png" width="317" border="0" /></a> </p>

<p>Select Person</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_667EF529.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="78" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_6D348F5D.png" width="296" border="0" /></a> </p>

<p>The benefit over standard table per concrete class is that in this scenario, we can query over the entire hierarchy in a single query, rather than having to issue separate query per class.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping inheritance]]></post-name>
      <categories>
        <category ref="1089" />
      </categories>
      <trackbacks>
        <trackback id="590" date-created="2010-01-05T09:00:50" date-modified="2010-01-05T09:00:50" approved="true" url="http://www.cnblogs.com/genson/archive/2010/01/05/1639768.html">
          <title type="text"><![CDATA[Nhibernate继承]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="238" date-created="2009-04-11T05:23:00" date-modified="2009-04-11T05:23:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/11/nhibernate-mapping-lt-dynamic-component-gt.aspx" type="normal" hasexcerpt="false" views="3672">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;dynamic-component/&gt;]]></title>
      <content type="text"><![CDATA[<p>Like the &lt;component/&gt; mapping, &lt;dynamic-component/&gt; allows us to treat parts of the entity table in a special way. In this case, it allow us to push properties from the mapping into a dictionary, instead of having to have the entity have properties for it. </p>  <p>This is very useful when we need to build dynamically extended entities, where the client can add columns on the fly. </p>  <p>Let us take this entity as an example:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0A4B790D.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="162" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3BDC0804.png" width="163" border="0" /></a> </p>  <p>And this table:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3FE8E687.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="114" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_1A7EF319.png" width="202" border="0" /></a></p>  <p>Where we want to have the SSN accessible from our entity, but without modifying its structure. We can do this using &lt;dynamic-component/&gt;:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Name&quot;</span> <span style="color: #0000ff">/&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">dynamic</span>-<span style="color: #ff0000">component</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Attributes&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;SSN&quot;</span>
			<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;System.String&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">dynamic</span>-component<span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And the query just treat this as yet another column in the table:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0A06821E.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="94" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_57A53F4F.png" width="230" border="0" /></a></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt dynamic component gt]]></post-name>
      <comments>
        <comment id="276" date-created="2009-04-25T12:06:11" date-modified="2009-04-25T12:06:11" approved="true" user-name="mamadero" user-url="http://www.miguelmadero.com">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;dynamic-component/&gt;]]></title>
          <content type="text"><![CDATA[This sounds really cool, I imagine how this could be used with TypeDescriptors in WPF or Converters in Silverlight to databind to "dynamically" created properties. ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="248" date-created="2009-04-13T18:09:00" date-modified="2009-04-13T18:09:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/13/nhibernate-s-future-queries-and-their-fallback-behavior.aspx" type="normal" hasexcerpt="false" views="2700">
      <title type="text"><![CDATA[NHibernate’s Future Queries And Their Fallback Behavior]]></title>
      <content type="text"><![CDATA[<p>I've blogged about NHibernate's Future queries a <a href="http://davybrion.com/blog/2009/01/nhibernate-and-future-queries/">couple</a> <a href="http://davybrion.com/blog/2009/01/nhibernate-and-future-queries-part-2/">of</a> <a href="http://davybrion.com/blog/2009/04/transparent-query-batching-through-your-repository/">times</a> already.  But as you know, NHibernate aims to offer you a way to write your code completely independent of the actual database you're using.  So what happens if you run your code, which is using the Future and FutureValue features, on a database that doesn't support batched queries?  Previously, this would fail with a NotSupportedException being thrown.
</p>
<p>As of today, (revision 4177 if you want to be specific) this is no longer the case.  If you use the Future or FutureValue methods of either ICriteria or IQuery, and the database doesn't support batching queries, NHibernate will fall back to simply executing the queries immediately, as the following tests show:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: #2b91af; }
.cb2 { color: blue; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span class="cb1">Test</span>]</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">public</span> <span class="cb2">void</span> FutureOfCriteriaFallsBackToListImplementationWhenQueryBatchingIsNotSupported()</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">using</span> (<span class="cb2">var</span> session = sessions.OpenSession())</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">var</span> results = session.CreateCriteria&lt;<span class="cb1">Person</span>&gt;().Future&lt;<span class="cb1">Person</span>&gt;();</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; results.GetEnumerator().MoveNext();</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: #2b91af; }
.cb2 { color: blue; }
.cb3 { color: #a31515; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span class="cb1">Test</span>]</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">public</span> <span class="cb2">void</span> FutureValueOfCriteriaCanGetSingleEntityWhenQueryBatchingIsNotSupported()</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">int</span> personId = CreatePerson();</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">using</span> (<span class="cb2">var</span> session = sessions.OpenSession())</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">var</span> futurePerson = session.CreateCriteria&lt;<span class="cb1">Person</span>&gt;()</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .Add(<span class="cb1">Restrictions</span>.Eq(<span class="cb3">"Id"</span>, personId))</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; .FutureValue&lt;<span class="cb1">Person</span>&gt;();</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">Assert</span>.IsNotNull(futurePerson.Value);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>
There are more tests obviously, but you get the point.  The interesting part about these tests is how i disabled query batching support.  I only have Sql Server and MySQL running on this machine, and they both support query batching.  I didn't really feel like installing a database that doesn't support it, so i just took advantage of NHibernate's extensibility.  Since most of us run the NHibernate tests on Sql Server, i inherited from the Sql Server Driver and made sure that it would report to NHibernate that it didn't support query batching:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #2b91af; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; <span class="cb1">public</span> <span class="cb1">class</span> <span class="cb2">TestDriverThatDoesntSupportQueryBatching</span> : <span class="cb2">SqlClientDriver</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">public</span> <span class="cb1">override</span> <span class="cb1">bool</span> SupportsMultipleQueries</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">get</span> { <span class="cb1">return</span> <span class="cb1">false</span>; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; }</p>
</div>
<p>
Easy huh? Then i just inherited from the TestCase class we have in the NHibernate.Tests project which offers a virtual method where you can modify the NHibernate configuration for the current fixture:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #2b91af; }
.cb3 { color: #a31515; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">protected</span> <span class="cb1">override</span> <span class="cb1">void</span> Configure(<span class="cb2">Configuration</span> configuration)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; configuration.Properties[<span class="cb2">Environment</span>.ConnectionDriver] = </p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb3">"NHibernate.Test.NHSpecificTest.Futures.TestDriverThatDoesntSupportQueryBatching, NHibernate.Test"</span>;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">base</span>.Configure(configuration);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>
Now NHibernate thinks that query batching isn't supported, yet the above tests still work.  Mission accomplished :)</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate s future queries and their fallback behavior]]></post-name>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="249" date-created="2009-04-13T20:00:18" date-modified="2009-04-13T20:00:18" approved="true" post-url="/blogs/nhibernate/archive/2009/04/13/nhibernate-mapping-lt-set-gt.aspx" type="normal" hasexcerpt="false" views="10844">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;set/&gt;]]></title>
      <content type="text"><![CDATA[<p>And now it is time to go to the &lt;set/&gt; and explore it. Most of the collections in NHibernate follow much the same rules, so I am not going to go over them in details:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span>
    <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;propertyName&quot;</span>                                         (<span style="color: #ff0000">1</span>)
    <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;table_name&quot;</span>                                          (<span style="color: #ff0000">2</span>)
    <span style="color: #ff0000">schema</span>=<span style="color: #0000ff">&quot;schema_name&quot;</span>                                        (<span style="color: #ff0000">3</span>)
    <span style="color: #ff0000">lazy</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                                           (<span style="color: #ff0000">4</span>)
    <span style="color: #ff0000">inverse</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                                        (<span style="color: #ff0000">5</span>)
    <span style="color: #ff0000">cascade</span>=<span style="color: #0000ff">&quot;all|none|save-update|delete|all-delete-orphan&quot;</span>     (<span style="color: #ff0000">6</span>)
    <span style="color: #ff0000">sort</span>=<span style="color: #0000ff">&quot;unsorted|natural|comparatorClass&quot;</span>                     (<span style="color: #ff0000">7</span>)
    <span style="color: #ff0000">order</span>-<span style="color: #ff0000">by</span>=<span style="color: #0000ff">&quot;column_name asc|desc&quot;</span>                             (<span style="color: #ff0000">8</span>)
    <span style="color: #ff0000">where</span>=<span style="color: #0000ff">&quot;arbitrary sql where condition&quot;</span>                       (<span style="color: #ff0000">9</span>)
    <span style="color: #ff0000">fetch</span>=<span style="color: #0000ff">&quot;select|join|subselect&quot;    </span>                           (<span style="color: #ff0000">10</span>)
    <span style="color: #ff0000">batch</span>-<span style="color: #ff0000">size</span>=<span style="color: #0000ff">&quot;N&quot;</span>                                              (<span style="color: #ff0000">11</span>)
    <span style="color: #ff0000">access</span>=<span style="color: #0000ff">&quot;field|property|ClassName&quot;</span>                           (<span style="color: #ff0000">12</span>)
    <span style="color: #ff0000">optimistic</span>-<span style="color: #ff0000">lock</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                                (<span style="color: #ff0000">13</span>)
    <span style="color: #ff0000">outer-join</span>=<span style="color: #0000ff">&quot;auto|true|false&quot;</span>                                (<span style="color: #ff0000">14</span>)
<span style="color: #0000ff">&gt;</span>

    <span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> .... <span style="color: #0000ff">/&gt;</span>
    <span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> .... <span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>1) is the collection property name, just like &lt;property/&gt; or &lt;many-to-one/&gt; are the value property names.</p>

<p>2) table is obviously the table name in which the values for this association exists.</p>

<p>3) schema is the schema in which that table lives.</p>

<p>4) lazy controls whatever this collection will be lazy loaded or not. By default it is set to true. Let us see how this work:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>With the following code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var blog = session.Get&lt;Blog&gt;(1);
	<span style="color: #0000ff">foreach</span> (var post <span style="color: #0000ff">in</span> blog.Posts)
	{
		Console.WriteLine(post.Title);
	}
	tx.Commit();
}</pre>
</blockquote>

<p>This produces the following statements:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_14392DB0.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="195" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_19431D72.png" width="373" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_660974B9.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="138" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_37D72B12.png" width="262" border="0" /></a> </p>

<p>We need two select statements to load the data.</p>

<p>However, if we change the set definition to:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">lazy</span>=<span style="color: #0000ff">&quot;false&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>We… would get the exact same output. Why <em>is </em>that? </p>

<p>The answer is quite simple, lazy only control whatever the collection will be loaded lazily or not. It does <em>not</em> control <em>how </em>we load it. The default is to use a second select for that, because that tend to be more efficient in the general case, since this avoid the possibility of a Cartesian product. There are other options, of course.</p>

<p>If we just set lazy to false, it means that when we load the entity, we load the collection. The reason that we see the same output from SQL perspective is that we don’t have a time perspective of that. With lazy set to true, the collection will only be loaded in the foreach. With lazy set to true, the collection will be loaded on the Get call.</p>

<p>You are probably interested in outer-join, which we can set to true, which will give us:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">outer</span>-<span style="color: #ff0000">join</span>=<span style="color: #0000ff">&quot;true&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And would result in the following SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_1E058594.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="291" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5F361F9C.png" width="384" border="0" /></a> </p>

<p>Here we get both the blog and its posts in a single query to the server. </p>

<p>The reason that lazy is somewhat complicated is that there are quite a bit of options to select from when choosing the fetching strategy for the collection, and in general, it is suggested that you would not set this in the mapping, because that is usually too generic. It is preferred to control this at a higher level, when you are actually making use of the entities.</p>

<p>5) inverse is something that I talk about extensively <a href="http://nhprof.com/Learn/Alert?name=SuperfluousManyToOneUpdate">here</a>, so I’ll not repeat this.</p>

<p>6) cascade is also something that I already <a href="http://ayende.com/Blog/archive/2006/12/02/NHibernateCascadesTheDifferentBetweenAllAlldeleteorphansAndSaveupdate.aspx">talked about</a></p>

<p>7) sort gives you a way to sort the values in the collection, by providing a comparator. Note that this is done <em>in memory, </em>not in the database. The advantage is that it will keep thing sorted even for values that you add to the collection in memory.</p>

<p>8) order-by gives you the ability to sort the values directly from the database. </p>

<p>Note that both 7 &amp; 8 does not work with generic sets and that in general, you don’t want to rely on those ordering properties, you want to use the natural properties of the selected collection. Sets are, by definition, unordered set of unique elements. But generic sorted bags does work:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">bag</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">order</span>-<span style="color: #ff0000">by</span>=<span style="color: #0000ff">&quot;Title ASC&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">bag</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And would produce in the following SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4734CFE5.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="153" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_465EFAAC.png" width="290" border="0" /></a>&#160;</p>

<p>9) where allow us to use some arbitrary SQL expression to limit the values in the collection. Usually this is used to filter out things like logically deleted rows. Here is a silly example:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span>
		  <span style="color: #ff0000">where</span>=<span style="color: #0000ff">&quot;(len(Title) &gt; 6)&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Which would result in:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7376782B.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="152" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_00DF1BE3.png" width="295" border="0" /></a> </p>

<p>Note that there is important subtlety here, if you intend to use this collection with eager loading, you must make sure that your where clause can handle null values appropriately (in the case of an outer join).</p>

<p>10) fetch controls how we get the values from the database. There are three values, select, join and subselect. The default is select, and you are already familiar with it. Setting it to join would result in:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">fetch</span>=<span style="color: #0000ff">&quot;join&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And the following code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var blog = session.CreateCriteria(<span style="color: #0000ff">typeof</span>(Blog))
		.SetMaxResults(5)
		.List&lt;Blog&gt;()[0];
	<span style="color: #0000ff">foreach</span> (var post <span style="color: #0000ff">in</span> blog.Posts)
	{
		Console.WriteLine(post.Title);
	}
	tx.Commit();
}</pre>
</blockquote>

<p>Will give us:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_723700AE.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="224" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5F1864B3.png" width="378" border="0" /></a> </p>

<p>Setting it to subselect will show something quite a bit more interesting:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_64F598FD.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="54" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5DD8ED36.png" width="483" border="0" /></a> </p>

<p>We have two queries, the first to load the blogs, and the second one:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4F9D04F7.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="150" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_610FF680.png" width="352" border="0" /></a> </p>

<p>In this case, we load all the related posts using a subselect. This is probably one of the more efficient ways of doing this. We load all the posts for all the blogs in a single query. That assumes, of course, that we actually want to use all those posts. In the code seen above, this is actually a waste, since we only ever access the first blog Posts collection.</p>

<p>11) batch-size is another way of controlling how we load data from the database. It is similar to fetch, but it gives us more control. Let us see how it actually work in action before we discuss it.</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Posts&quot;</span> <span style="color: #ff0000">batch</span>-<span style="color: #ff0000">size</span>=<span style="color: #0000ff">&quot;5&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;BlogId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Post&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And this code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var blogs = session.CreateCriteria(<span style="color: #0000ff">typeof</span>(Blog))
		.SetMaxResults(30)
		.List&lt;Blog&gt;();
	<span style="color: #0000ff">foreach</span> (var post <span style="color: #0000ff">in</span> blogs.SelectMany(x=&gt;x.Posts))
	{
		Console.WriteLine(post.Title);
	}
	tx.Commit();
}</pre>
</blockquote>

<p>Produces:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_44959551.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="146" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_310D5712.png" width="651" border="0" /></a> </p>

<p></p>

<p></p>

<p></p>

<p></p>

<p>Fist we load the blogs, and we load 30 of them. Now, when we access any of the unloaded collections, something very interesting is going to happen. NHibernate is going to search for up to batch-size unloaded collections of the same type and try to load them all in a single query. The idea is that we take a SELECT N+1 situation and turn that into a SELECT N/batch-size + 1 situation.</p>

<p>In this case, it will turn a 31 queries situation into a 7 queries situation. And we can increase the batch size a bit to reduce this even further. As usual, we have to balance the difference between local and global optimizations. If we make batch-size too large, we load too much data, if we make it too small, we still have too many queries.</p>

<p>This is one of the reasons that I consider those fancy options important, but not as important as setting the fetching strategy for each scenario independently. That is usually a much better strategy overall.</p>

<p>12) access was already discussed <a href="http://ayende.com/Blog/archive/2009/04/07/nhibernate-mapping-ltpropertygt.aspx">elsewhere</a>.</p>

<p>13) optimistic-lock was already discussed <a href="http://ayende.com/Blog/archive/2009/04/07/nhibernate-mapping-ltpropertygt.aspx">elsewhere</a>.</p>

<p>14) outer-join was discussed above, when we talked about lazy.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt set gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="255" date-created="2009-04-15T02:15:10" date-modified="2009-04-15T02:15:10" approved="true" user-name="zephyrrr" user-url="http://nhforge.org/members/zephyrrr/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;set/&gt;]]></title>
          <content type="text"><![CDATA[i still wonder what's the relation of "lazy", "fetch" and "outer-join", especially "fetch" and "outer-join" which can both set join. ]]></content>
        </comment>
        <comment id="277" date-created="2009-04-25T13:01:02" date-modified="2009-04-25T13:01:02" approved="true" user-name="mamadero" user-url="http://nhforge.org/members/mamadero/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;set/&gt;]]></title>
          <content type="text"><![CDATA[Com'on isn't fair, you're giving me a lot to read :(
I read one post and you refere me to 5 more. Is this ever going to end? 

Great posts BTW!!!!]]></content>
        </comment>
        <comment id="329" date-created="2009-05-26T09:23:10" date-modified="2009-05-26T09:23:10" approved="true" user-name="Srinivas_NHibernate_Rookie" user-url="http://nhforge.org/members/Srinivas_5F00_NHibernate_5F00_Rookie/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;set/&gt;]]></title>
          <content type="text"><![CDATA[Is <key column=""/> always a Foreign Key in the Collection table?
]]></content>
        </comment>
        <comment id="611" date-created="2010-02-16T14:07:17" date-modified="2010-02-16T14:07:17" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;set/&gt;]]></title>
          <content type="text"><![CDATA[Great Post!

I wonder what happens with fetch="subselect" if you had a very complex query before to load the entities (or a lot of queries, for instance from another N+1 situation). How will NH create the subquery? will batch-size be more efficient for such situations?]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="250" date-created="2009-04-14T22:40:00" date-modified="2009-04-14T22:40:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/15/nhibernate-mapping-concurrency.aspx" type="normal" hasexcerpt="false" views="24516">
      <title type="text"><![CDATA[NHibernate Mapping - Concurrency]]></title>
      <content type="text"><![CDATA[<p>NHibernate has several concurrency models that you can use:</p>  <ul>   <li>None </li>    <li>Optimistic      <ul>       <li>Dirty </li>        <li>All </li>     </ul>   </li>    <li>Versioned      <ul>       <li>Numeric </li>        <li>Timestamp </li>        <li>DB timestamp </li>     </ul>   </li>    <li>Pessimistic </li> </ul>  <p>We will explore each of those in turn.</p>  <p>None basically means that we fall back to the transaction semantics that we use in the database. The database may throw us out, but aside from that, we don’t really care much about things.</p>  <p>Optimistic is more interesting. It basically states that if we detect a change in the entity, we cannot update it. Let us see a simple example of using optimistic dirty checking for changed fields only:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
			 <span style="color: #ff0000">optimistic</span>-<span style="color: #ff0000">lock</span>=<span style="color: #0000ff">&quot;dirty&quot;</span>
			 <span style="color: #ff0000">dynamic</span>-<span style="color: #ff0000">update</span>=<span style="color: #0000ff">&quot;true&quot;</span>
			 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Using this with this code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var person = session.Get&lt;Person&gt;(1);
	person.Name = &quot;<span style="color: #8b0000">other</span>&quot;;
	tx.Commit();
}</pre>
</blockquote>

<p>Will result in:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_720B8098.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="95" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_2C1F6EDA.png" width="268" border="0" /></a> </p>

<p>Note that we have so specify dynamic-update to true. This is required because doing so will generally cause much greater number of query plan to exist in the database cache.</p>

<p>Setting optimistic-lock to all would result in:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_686D5526.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="178" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_718192BA.png" width="336" border="0" /></a> </p>

<p>If the update fails because the row was updated, we will get a StaleObjectException. Like all exceptions, this will make the session ineligible for use, and you would have to create a new session to handle it.</p>

<p>Usually a better strategy is to use an explicit version column. We can do it by specifying &lt;version/&gt;:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">version</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Version&quot;</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;Version&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>And that would result in:</p>

<p></p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2A56097F.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="107" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7570B654.png" width="248" border="0" /></a> </p>

<p>As you can probably guess, if the version doesn’t match, we will get StaleObjectException.</p>

<p>Instead of using numeric values, we can use a timestamp:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">version</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Version&quot;</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;Version&quot;</span> <span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;timestamp&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>In this case, the property type should be DateTime, and the resulting SQL would be:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2C08A45D.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="109" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_1501D534.png" width="390" border="0" /></a> </p>

<p>This is, of course, a less safe way of doing things, and I recommend that you would use a numeric value instead.</p>

<p>Another option is to use the database facilities to handle that. in MS SQL Server, this is the TimeStamp column, which is a 8 byte binary that is changed any time that the row is updated.</p>

<p>We do this by changing the type of the Version property to byte array, and changing the mapping to:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">version</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Version&quot;</span>
				 <span style="color: #ff0000">generated</span>=<span style="color: #0000ff">&quot;always&quot;</span>
				 <span style="color: #ff0000">unsaved</span>-<span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;null&quot;</span>
				 <span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;BinaryBlob&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">column</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Version&quot;</span>
					<span style="color: #ff0000">not</span>-<span style="color: #ff0000">null</span>=<span style="color: #0000ff">&quot;false&quot;</span>
					<span style="color: #ff0000">sql</span>-<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;timestamp&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">version</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Executing the code listed above will result in:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6DEEC804.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="175" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_037128C2.png" width="342" border="0" /></a> </p>

<p>We use the value of the timestamp to ensure that we aren’t overwriting the row data after it was changed. The database will ensure that the row timestamp will change whenever the row itself is updated. This plays well with system where you may need to update the underlying tables outside of NHibernate.</p>

<p>Pessimistic concurrency is also expose with NHibernate, by using the overloads that takes a LockMode. This is done in a database independent way, using each database facilities and syntax.</p>

<p>For example, let us example the following code:</p>

<pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var person = session.Get&lt;Person&gt;(1,LockMode.Upgrade);
	person.Name = &quot;<span style="color: #8b0000">other</span>&quot;;
	tx.Commit();
}</pre>

<p>This will result in the following SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_1B2D818A.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="176" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_772A419E.png" width="352" border="0" /></a> </p>

<p>We can also issue a separate command to the database to obtain a lock on the row representing the entity:</p>

<pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var person = session.Get&lt;Person&gt;(1);
	session.Lock(person, LockMode.Upgrade);
	person.Name = &quot;<span style="color: #8b0000">other</span>&quot;;
	tx.Commit();
}</pre>

<p>The Get() would generate a standard select, without the locks, but the Lock() method would generate the following SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_330E85A7.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="81" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_061E442E.png" width="291" border="0" /></a> </p>

<p>The behavior for conflict in this case is very simple, we wait. If we wait for too long, the timeout will expire and we will get a timeout exception, because we could not obtain the lock.</p>

<p>That is consistent with how we would use pessimistic concurrency elsewhere.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping concurrency]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="280" date-created="2009-04-28T20:21:27" date-modified="2009-04-28T20:21:27" approved="true" user-name="JuanCho" user-url="http://nhforge.org/members/JuanCho/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[Is this post specifically for NH v2.1? I get schema validation errors when I try to define a column element inside the version one:

<version name="Version" type="BinaryBlob">
	<column name="Version"	
                      sql-type="timestamp"/>
</version>]]></content>
        </comment>
        <comment id="281" date-created="2009-04-29T03:24:55" date-modified="2009-04-29T03:24:55" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[Juan,
Yes, this was done for NH 2.1]]></content>
        </comment>
        <comment id="286" date-created="2009-04-29T14:51:08" date-modified="2009-04-29T14:51:08" approved="true" user-name="JuanCho" user-url="http://nhforge.org/members/JuanCho/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[Thanks, I can also confirm that after using NH 2.1, I was able to make it work with oracle via ORA_ROWSCN. 

If anybody is heading this route (supported in oracle 9+) keep in mind the tables need to be created with ROWDEPENDENCIES to guarantee unique row version

With this, oracle will keep the version of the row, similar to the timestamp feature on sql server. You now, don't need to worry about manually incrementing the value of a custom version column anymore (via sequence, trigger, nhibernate, etc). It will be handled by oracle, enabling non-nhibernate processes to interact with the data and keeping the NH concurrency under control.

NH 2.1 specific:
    <version name="Version" type="Int32" generated="always" >      
  	  <column name="ORA_ROWSCN" sql-type="Int32" />
    </version>

NH 2.0 Specifc
<version name="Version" type="Int32" generated="always" column="ORA_ROWSCN"/>

You can find more details on this oracle feature at: 
http://asktom.oracle.com/pls/asktom/f?p=100:11:0::::P11_QUESTION_ID:517105100346104196]]></content>
        </comment>
        <comment id="287" date-created="2009-04-29T19:55:19" date-modified="2009-04-29T19:55:19" approved="true" user-name="JuanCho" user-url="http://nhforge.org/members/JuanCho/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[Just added a wiki entry...
http://nhforge.org/wikis/howtonh/nhibernate-concurrency-with-oracle-s-ora-rowscn.aspx]]></content>
        </comment>
        <comment id="326" date-created="2009-05-23T19:09:31" date-modified="2009-05-23T19:09:31" approved="true" user-name="bai" user-url="http://nhforge.org/members/bai/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[Hi there, thanks for shareing.

I have a little problem getting dynamic-update="true" to work on my test project. It has no effect unless I also specify select-before-update="true"

Any ideas why ? ]]></content>
        </comment>
        <comment id="327" date-created="2009-05-23T23:40:08" date-modified="2009-05-23T23:40:08" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[No, I don't.
Code + mapping would help, please post it to nh users]]></content>
        </comment>
        <comment id="802" date-created="2011-02-23T19:38:57" date-modified="2011-02-23T19:38:57" approved="true" user-name="abhaymamid" user-url="http://nhforge.org/members/abhaymamid/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[Hi There,

objNSession = NHibernateHelper.GetCurrentSession();
                objNSession.Lock(item, LockMode.None);

The second code line above throws an exception,

"cannot lock an unsaved transient instance: Boeing.IRSP.BL.BusinessLogic.Admin.DL"

Can you please help me. It's burning.]]></content>
        </comment>
        <comment id="1018" date-created="2013-05-31T02:03:06" date-modified="2013-05-31T02:03:06" approved="true" user-name="virusswb" user-url="http://nhforge.org/members/virusswb/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[the version node in nh3.3 is not enable, which node do we selected?
thank you.]]></content>
        </comment>
        <comment id="1019" date-created="2013-05-31T03:01:05" date-modified="2013-05-31T03:01:05" approved="true" user-name="virusswb" user-url="http://nhforge.org/members/virusswb/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - Concurrency]]></title>
          <content type="text"><![CDATA[i find the reason.
the version tag must keep up with id tag.
thank you.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="552" date-created="2009-12-02T02:13:48" date-modified="2009-12-02T02:13:48" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[nh credit repair]]></title>
        </trackback>
        <trackback id="1043" date-created="2014-09-12T14:21:31" date-modified="2014-09-12T14:21:31" approved="true" url="http://84.19.184.35/php.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.kiwibox.com%2Ftoshawessel%2Fblog%2Fentry%2F117409987%2Fgood-plastic-surgery-advice-for-that-concerned-consumer%2F%3FpPage%3D0%3Emore+about+This+Video%3C%2Fa%3E">
          <title type="text"><![CDATA[more about This Article]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="251" date-created="2009-04-15T22:47:00" date-modified="2009-04-15T22:47:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/16/nhibernate-mapping-lt-database-object-gt.aspx" type="normal" hasexcerpt="false" views="3508">
      <title type="text"><![CDATA[NHibernate mapping - &lt;database-object/&gt;]]></title>
      <content type="text"><![CDATA[<p>I, like many, have grown used to NHibernate’s schema generation capabilities. Those make working with databases such a pleasure that I cannot imagine trying without them.</p>  <p>However, at some point, even NHibernate’s smarts reach an end, and such an occasion requires the use of direct SQL to manipulate the database directly. A good example of that would be:</p>  <blockquote>   <pre><span style="color: #008000">&lt;!-- SQL Server need this index --&gt;</span>
<span style="color: #0000ff">&lt;</span><span style="color: #800000">database</span>-<span style="color: #ff0000">object</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">create</span><span style="color: #0000ff">&gt;</span>
	CREATE INDEX PeopleByCityAndLastName ...
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">create</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">drop</span><span style="color: #0000ff">&gt;</span>
	DROP INDEX PeopleByCityAndLastName 
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">drop</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">dialect</span>-<span style="color: #ff0000">scope</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;NHibernate.Dialect.MsSql2000Dialect&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">dialect</span>-<span style="color: #ff0000">scope</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;NHibernate.Dialect.MsSql2005Dialect&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">dialect</span>-<span style="color: #ff0000">scope</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;NHibernate.Dialect.MsSql2008Dialect&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">database</span>-object<span style="color: #0000ff">&gt;</span>

<span style="color: #008000">&lt;!-- Oracle need this stats only --&gt;</span>
<span style="color: #0000ff">&lt;</span><span style="color: #800000">database</span>-<span style="color: #ff0000">object</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">create</span><span style="color: #0000ff">&gt;</span>
	CREATE STATISTICS PeopleByCityAndLastName ...
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">create</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">drop</span><span style="color: #0000ff">&gt;</span>
	DROP STATISTICS PeopleByCityAndLastName 
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">drop</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">dialect</span>-<span style="color: #ff0000">scope</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;NHibernate.Dialect.OracleDialect&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">dialect</span>-<span style="color: #ff0000">scope</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;NHibernate.Dialect.Oracle9Dialect&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">database</span>-object<span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>As you can see, this allows us to execute database specific SQL, using the dialect scope. It is not a common feature, but it can be incredibly useful.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt database object gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="984" date-created="2011-09-13T00:24:24" date-modified="2011-09-13T00:24:24" approved="true" user-name="Alexandre Lindolfo Vianna" user-url="http://nhforge.org/members/Alexandre/default.aspx">
          <title type="text"><![CDATA[re: NHibernate mapping - &lt;database-object/&gt;]]></title>
          <content type="text"><![CDATA[Hello, 
I'm looking for a solution that would let me specify the Oracle column 
comment in the mapping file. Below is an attempt using <database- 
object> but I got that error... 
21:13:38.714 DEBUG [SchemaExport.Execute] Sistema: 
    comment on column Cone_Slab.Id_Cone_Slab IS 'Identificador do 
registro'; comment on column Cone_Slab.Id_Slab IS 'Identificador da 
placa'; 
21:13:38.734 WARN [SchemaExport.Execute] Sistema: Unsuccessful: 
comment on column Cone_Slab.Id_Cone_Slab IS 'Identificador do 
registro'; comment on column Cone_Slab.Id_Slab IS 'Identificador da 
placa'; 
21:13:38.735 WARN [SchemaExport.Execute] Sistema: ORA-00911: caractere 
inválido 
  <class name="ConeSlab" table="Cone_Slab" lazy="false"> 
    <id name="Id" column="Id_Cone_Slab" type="Int32"> 
      <generator class="hilo"/> 
    </id> 
    <many-to-one name="Cone" column="Id_Cone" class="Cone" 
cascade="none" fetch="join" not-null="true"/> 
    <many-to-one name="Slab" column="Id_Slab" class="Slab" 
cascade="none" fetch="join" not-null="true"/> 
  </class> 
  <database-object> 
    <create>comment on column Cone_Slab.Id_Cone IS 'Identificador do 
cone'; comment on column Cone_Slab.Id_Slab IS 'Identificador da 
placa';</create> 
    <drop></drop> 
  </database-object> 
How can I fix this? ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="252" date-created="2009-04-16T22:55:00" date-modified="2009-04-16T22:55:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/17/nhibernate-mapping-named-queries-lt-query-gt-and-lt-sql-query-gt.aspx" type="normal" hasexcerpt="false" views="18154">
      <title type="text"><![CDATA[NHibernate Mapping – Named queries &lt;query/&gt; and &lt;sql-query/&gt;]]></title>
      <content type="text"><![CDATA[<p>Queries are <a href="http://ayende.com/Blog/archive/2007/03/09/Querying-is-a-business-concern.aspx">business</a> <a href="http://ayende.com/Blog/archive/2007/03/12/Querying-Is-A-Business-Concern-Sample.aspx">logic</a>, as such, they can be pretty complex, and they also tend to be pretty perf sensitive. As such, you usually want to have a good control over any complex queries. You can do that by extracting your queries to the mapping, so they don’t reside, hardcoded, in the code:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">query</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PeopleByName&quot;</span><span style="color: #0000ff">&gt;</span>
	from Person p
	where p.Name like :name
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">query</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And you can execute it with:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	session.GetNamedQuery(&quot;<span style="color: #8b0000">PeopleByName</span>&quot;)
		.SetParameter(&quot;<span style="color: #8b0000">name</span>&quot;, &quot;<span style="color: #8b0000">ayende</span>&quot;)
		.List();
	tx.Commit();
}</pre>
</blockquote>

<p>PeopleByName is a pretty standard query, and executing this code will result in:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_736FFE74.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="190" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_31494399.png" width="340" border="0" /></a> </p>

<p>Now, let us say that we discovered some performance problem in this query, and we want to optimize it. But the optimization is beyond what we can do with HQL, we have to drop to a database specific SQL for that. Well, that is not a problem, &lt;sql-query/&gt; is coming to the rescue.</p>

<p>All you need is to replace the query above with:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">sql</span>-<span style="color: #ff0000">query</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PeopleByName&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">return</span> <span style="color: #ff0000">alias</span>=<span style="color: #0000ff">&quot;person&quot;</span>
					<span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Person&quot;</span><span style="color: #0000ff">/&gt;</span>
	SELECT {person.*}
	FROM People {person} WITH(nolock)
	WHERE {person}.Name LIKE :name
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">sql</span>-query<span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And you are set. You don’t need to make any changes to the code, but the resulting SQL would be:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_13FB9DE2.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="189" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_72377763.png" width="323" border="0" /></a> </p>

<p>Fun, isn’t it?</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping named queries lt query gt and lt sql query gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="282" date-created="2009-04-29T11:37:33" date-modified="2009-04-29T11:37:33" approved="true" user-name="Eddie Gems" user-url="http://nhforge.org/members/Eddie-Gems/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping – Named queries &lt;query/&gt; and &lt;sql-query/&gt;]]></title>
          <content type="text"><![CDATA[What about an optimization via native SQL query loading of complex entityes? With one-to-one and one-to-many relations?

I have such long query and I need to set oracle hint to it (/*+ ORDERED */) but I don't want to rewrite query with 20 joins (I use not-lazy loading because I know that all the data I need on the entity page).]]></content>
        </comment>
        <comment id="284" date-created="2009-04-29T12:07:34" date-modified="2009-04-29T12:07:34" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping – Named queries &lt;query/&gt; and &lt;sql-query/&gt;]]></title>
          <content type="text"><![CDATA[Eddie,
Take a look at the loader element with query-ref

http://ayende.com/Blog/archive/2006/09/18/UsingNHibernateWithStoredProcedures.aspx
]]></content>
        </comment>
        <comment id="478" date-created="2009-08-19T04:56:06" date-modified="2009-08-19T04:56:06" approved="true" user-name="Joon" user-url="http://nhforge.org/members/Joon/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping – Named queries &lt;query/&gt; and &lt;sql-query/&gt;]]></title>
          <content type="text"><![CDATA[Hi Ayende,

  What if I want to include a db function that is not part of Person table but in a property of person class.

  For eg:

    <sql-query name="PeopleByName">
    	<return alias="person" class="Person"/>
    	SELECT {person.*}, length({person}.Name) as Length
    	FROM People {person} WITH(nolock)
    	WHERE {person}.Name LIKE :name
    </sql-query>

  The length is one of the property in the Person class, but the value can't be mapped with the above sql.

  It will work if I add a "Length" property in the mapping xml, but all other types of query will fail because this column can't be found in the table. 

  Your help is greatly appreciated.

Regards,
Joon

]]></content>
        </comment>
        <comment id="479" date-created="2009-08-19T05:04:18" date-modified="2009-08-19T05:04:18" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping – Named queries &lt;query/&gt; and &lt;sql-query/&gt;]]></title>
          <content type="text"><![CDATA[Joon,
That is why you have formula for on properties]]></content>
        </comment>
        <comment id="481" date-created="2009-08-19T06:02:37" date-modified="2009-08-19T06:02:37" approved="true" user-name="Joon" user-url="http://nhforge.org/members/Joon/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping – Named queries &lt;query/&gt; and &lt;sql-query/&gt;]]></title>
          <content type="text"><![CDATA[Thanks a lot Ayende, you hit the point.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="266" date-created="2009-04-18T00:05:00" date-modified="2009-04-18T00:05:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/17/tuning-nhibernate-tolerant-querycache.aspx" type="normal" hasexcerpt="false" views="6545">
      <title type="text"><![CDATA[Tuning NHibernate: Tolerant QueryCache]]></title>
      <content type="text"><![CDATA[<p>[From <a href="http://fabiomaulo.blogspot.com/">My Blog</a>]</p>
<p>Before reading this post you should know something about <a href="/doc/nh/en/index.html#performance-querycache">QueryCache</a> and its imply tuning NH.</p>
<p>Resuming:</p>
<ul>
<li>Using <strong><span style="color: #2b91af">IQuery</span>.SetCacheable(<span style="color: #0000ff">true</span>)</strong> you can put/get the entirely result of a query from the cache. </li>
<li>The cache is automatically invalidated when the <em>query-space</em> change (mean that the cache will be throw when an Insert/Update/Delete is executed for one of the Tables involved in the query). </li>
<li>Using <strong><span style="color: #2b91af">IQuery</span>.SetCacheMode(<span style="color: #2b91af">CacheMode</span>.Refresh)</strong> you can force the cache refresh (for example if you need to refresh the cache after a Delete/Insert). </li>
</ul>
<h4>The Case</h4>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/eBayShot_5F00_5611DE5B.png"><img border="0" width="688" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/eBayShot_5F00_thumb_5F00_73AB6B6D.png" alt="eBayShot" height="505" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="eBayShot" /></a> </p>
<p>(the picture is a <a href="http://www.ebay.com/">e-Bay</a> snapshot)</p>
<p>Take a look to the left side. Near each option you can see a number and I&rsquo;m pretty sure that it not reflect exactly the state in the DB. That number is only <em>&ldquo;an orientation&rdquo;</em> for the user probably calculated few minutes before. </p>
<p>Now, think about the SQLs, behind the scene, and how many and how much heavy they are. A possible example for <em>&ldquo;Album Type&rdquo;, </em>using HQL, could look like:</p>
<p><em>select musicCD.AlbumType.Name, count(*) from MusicCD musicCD where musicCD.Genre = &lsquo;Classical&rsquo; group by musicCD.AlbumType.Name</em></p>
<p>How much time need each &ldquo;Refine search&rdquo; ?</p>
<p>Ah&hellip; but there is no problem, I&rsquo;m using NHibernate and its QueryCache&hellip; hmmmm&hellip;</p>
<p>Now, suppose that each time you click an article you are incrementing the number of visits of that article. What happen to your <em>QueryCache</em> ? yes, each click the <em>QueryCache</em> will be invalidated and thrown (the same if some users in the world insert/update/delete something in the tables involved).</p>
<h4>The Tolerant QueryCache abstract</h4>
<p>The Tolerant QueryCache should be an implementation of <span style="color: #2b91af">IQueryCache</span> which understands, through its configuration properties, that updates, to certain tables, should not invalidate the cache of queries based on those tables.</p>
<p>Taken the above example mean that an update to <em>MusicCD </em>does not invalidate all &ldquo;<em>Refine search</em>&rdquo; queries, if we are caching those statistics heavy queries.</p>
<h4>The integration point</h4>
<p>Well&hellip; at this point you should know how much NHibernate is extensible and &ldquo;injectable&rdquo;.</p>
<p>For each <em>cache-region</em> NHibernate create an instance of <span style="color: #2b91af">IQueryCache</span> trough an implementation of <span style="color: #2b91af">IQueryCacheFactory</span> and, as you could imagine, the <span style="color: #2b91af">IQueryCacheFactory</span> concrete implementation can be injected trough session-factory configuration.</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">cache.query_cache_factory</span>"<span style="color: blue">&gt;</span>YourQueryCacheFactory<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>At this point we know all we should do to have our <span style="color: #2b91af">TolerantQueryCache</span> :</p>
<ol>
  <br />
<li>Some configuration classes to configure tolerated tables for certain regions. </li>
<li>An implementation of <span style="color: #2b91af">IQueryCacheFactory</span> to use the <span style="color: #2b91af">TolerantQueryCache</span> for certain regions. </li>
<li>The implementation of <span style="color: #2b91af">TolerantQueryCache</span>. </li>
</ol>
<h4>The Test</h4>
<p>Here is only the integration test; all implementations are available in <a href="http://code.google.com/p/unhaddins/">uNhAddIns</a>.</p>
<h5>Domain</h5>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">MusicCD<br /></span>{<br /> <span style="color: blue">public virtual string </span>Name { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public class </span><span style="color: #2b91af">Antique<br /></span>{<br /> <span style="color: blue">public virtual string </span>Name { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MusicCD</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">MusicCDs</span>"<span style="color: blue">&gt;<br /> &lt;</span><span style="color: #a31515">id </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />     &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br /> &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br /> &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Antique</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">Antiques</span>"<span style="color: blue">&gt;<br /> &lt;</span><span style="color: #a31515">id </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />     &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br /> &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br /> &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<h5>Configuration</h5>
<pre class="code"><span style="color: blue">public override void </span>Configure(NHibernate.Cfg.<span style="color: #2b91af">Configuration </span>configuration)<br />{<br /> <span style="color: blue">base</span>.Configure(configuration);<br /> configuration.SetProperty(<span style="color: #2b91af">Environment</span>.GenerateStatistics, <span style="color: #a31515">"true"</span>);<br /> configuration.SetProperty(<span style="color: #2b91af">Environment</span>.CacheProvider,<br />     <span style="color: blue">typeof</span>(<span style="color: #2b91af">HashtableCacheProvider</span>).AssemblyQualifiedName);<br /><br /> configuration.QueryCache()<br />     .ResolveRegion(<span style="color: #a31515">"SearchStatistics"</span>)<br />     .Using&lt;<span style="color: #2b91af">TolerantQueryCache</span>&gt;()<br />     .TolerantWith(<span style="color: #a31515">"MusicCDs"</span>);<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The configuration is only for the <em>&ldquo;SearchStatistics&rdquo;</em> region so others regions will work with the default NHibernate implementation. <strong>NOTE</strong>: the <span style="color: #2b91af">HashtableCacheProvider</span> is valid only for tests.</p>
<h5>The test</h5>
<pre class="code"><span style="color: green">// Fill DB<br /></span>SessionFactory.EncloseInTransaction(session =&gt;<br />{<br /> <span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; 10; i++)<br /> {<br />     session.Save(<span style="color: blue">new </span><span style="color: #2b91af">MusicCD </span>{ Name = <span style="color: #a31515">"Music" </span>+ (i / 2) });<br />     session.Save(<span style="color: blue">new </span><span style="color: #2b91af">Antique </span>{ Name = <span style="color: #a31515">"Antique" </span>+ (i / 2) });<br /> }<br />});<br /><br /><span style="color: green">// Queries<br /></span><span style="color: blue">var </span>musicQuery =<br /> <span style="color: blue">new </span><span style="color: #2b91af">DetachedQuery</span>(<span style="color: #a31515">"select m.Name, count(*) from MusicCD m group by m.Name"</span>)<br /> .SetCacheable(<span style="color: blue">true</span>)<br /> .SetCacheRegion(<span style="color: #a31515">"SearchStatistics"</span>);<br /><br /><span style="color: blue">var </span>antiquesQuery =<br /> <span style="color: blue">new </span><span style="color: #2b91af">DetachedQuery</span>(<span style="color: #a31515">"select a.Name, count(*) from Antique a group by a.Name"</span>)<br /> .SetCacheable(<span style="color: blue">true</span>)<br /> .SetCacheRegion(<span style="color: #a31515">"SearchStatistics"</span>);<br /><br /><span style="color: green">// Clear SessionFactory Statistics<br /></span>SessionFactory.Statistics.Clear();<br /><br /><span style="color: green">// Put in second-level-cache<br /></span>SessionFactory.EncloseInTransaction(session =&gt;<br />{<br /> musicQuery.GetExecutableQuery(session).List();<br /> antiquesQuery.GetExecutableQuery(session).List();<br />});<br /><br /><span style="color: green">// Asserts after execution<br /></span>SessionFactory.Statistics.QueryCacheHitCount<br /> .Should(<span style="color: #a31515">"not hit the query cache"</span>).Be.Equal(0);<br /><br />SessionFactory.Statistics.QueryExecutionCount<br /> .Should(<span style="color: #a31515">"execute both queries"</span>).Be.Equal(2);<br /><br /><span style="color: green">// Update both tables<br /></span>SessionFactory.EncloseInTransaction(session =&gt;<br />{<br /> session.Save(<span style="color: blue">new </span><span style="color: #2b91af">MusicCD </span>{ Name = <span style="color: #a31515">"New Music" </span>});<br /> session.Save(<span style="color: blue">new </span><span style="color: #2b91af">Antique </span>{ Name = <span style="color: #a31515">"New Antique" </span>});<br />});<br /><br /><span style="color: green">// Clear SessionFactory Statistics again<br /></span>SessionFactory.Statistics.Clear();<br /><br /><span style="color: green">// Execute both queries again<br /></span>SessionFactory.EncloseInTransaction(session =&gt;<br />{<br /> musicQuery.GetExecutableQuery(session).List();<br /> antiquesQuery.GetExecutableQuery(session).List();<br />});<br /><br /><span style="color: green">// Asserts after execution<br /></span>SessionFactory.Statistics.QueryCacheHitCount<br /> .Should(<span style="color: #a31515">"Hit the query cache"</span>).Be.Equal(1);<br /><br />SessionFactory.Statistics.QueryExecutionCount<br /> .Should(<span style="color: #a31515">"execute only the query for Antiques"</span>).Be.Equal(1);</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>Fine! I have changed both tables but in the second execution the result for MusicCD come from the Cache.</p>
<p>&nbsp;</p>
<p>Code available <a href="http://code.google.com/p/unhaddins/">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[tuning nhibernate tolerant querycache]]></post-name>
      <categories>
        <category ref="1019" />
        <category ref="1089" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="253" date-created="2009-04-19T01:31:00" date-modified="2009-04-19T01:31:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/19/nhibernate-mapping-lt-one-to-one-gt.aspx" type="normal" hasexcerpt="false" views="11637">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;one-to-one/&gt;]]></title>
      <content type="text"><![CDATA[<p>In the database world, we have three kind of associations: 1:m, m:1, m:n.</p>  <p>However, occasionally we want to have a one to one relationship. We could simulate it easily enough on the database side using two many to one relations, but that would require us to add the association column to both tables, and things gets… tricky when it comes the time to insert or update to the database, because of the cycle that this creates.</p>  <p>NHibernate solves the problem by introducing a one-to-one mapping association, which allow you to define the two relationships based on a single column in the database, which controls the two way association.</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span>
        <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PropertyName&quot;</span>                                (<span style="color: #ff0000">1</span>)
        <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;ClassName&quot;</span>                                  (<span style="color: #ff0000">2</span>)
        <span style="color: #ff0000">cascade</span>=<span style="color: #0000ff">&quot;all|none|save-update|delete&quot;</span>              (<span style="color: #ff0000">3</span>)
        <span style="color: #ff0000">constrained</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                           (<span style="color: #ff0000">4</span>)
        <span style="color: #ff0000">fetch</span>=<span style="color: #0000ff">&quot;join|select&quot;</span>                                (<span style="color: #ff0000">5</span>)
        <span style="color: #ff0000">property</span>-<span style="color: #ff0000">ref</span>=<span style="color: #0000ff">&quot;PropertyNameFromAssociatedClass&quot;</span>     (<span style="color: #ff0000">6</span>)
        <span style="color: #ff0000">access</span>=<span style="color: #0000ff">&quot;field|property|nosetter|ClassName&quot;</span>         (<span style="color: #ff0000">7</span>)
<span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>1, 2, 3, 6, 7 were all discussed elsewhere, so I’ll skip them and move directly to showing how this can be used.</p>

<p>We have the follow object model:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6CCFFEAD.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="167" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_6F9AD502.png" width="451" border="0" /></a> </p>

<p>And the database model:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_1CB25282.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="114" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5C7EC9B8.png" width="570" border="0" /></a> </p>

<p></p>

<p>Note that while in the object model we have a bidirectional mapping, in the database we have only a single reference on the employees table. In the relational model, all associations are naturally bidirectional, but that is not true on the object model. In order to bridge this inconsistency, we map them as:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Employee&quot;</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Employees&quot;</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;native&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Role&quot;</span><span style="color: #0000ff">/&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">many</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
		<span style="color: #ff0000">unique</span>=<span style="color: #0000ff">&quot;true&quot;</span>
		<span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;Person&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>

<span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
		<span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;native&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Name&quot;</span> <span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Employee&quot;</span>
			<span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Employee&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>We have a unique many-to-one association from Employee to Person, but a one to one from Person to Employee. This will reuse the many-to-one association defined in the Employee mapping.</p>

<p>Let see how this works for saving and loading the data:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var person = <span style="color: #0000ff">new</span> Person
	{
		Name = &quot;<span style="color: #8b0000">test</span>&quot;,
	};
	var employee = <span style="color: #0000ff">new</span> Employee
	{
		Person = person,
		Role = &quot;<span style="color: #8b0000">Manager</span>&quot;
	};
	person.Employee = employee;<br />        session.Save(person);<br />        session.Save(employee);
	tx.Commit();
}

<span style="color: #008000">// person to employee</span>
<span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var employee = session.Get&lt;Person&gt;(1).Employee;
	Console.WriteLine(employee.Role);
	tx.Commit();
}

<span style="color: #008000">// employee to person</span>
<span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var person = session.Get&lt;Employee&gt;(1).Person;
	Console.WriteLine(person.Name);
	tx.Commit();
}</pre>
</blockquote>

<p>And the SQL that would be generated would be:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3232228E.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="232" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7F64ACCA.png" width="591" border="0" /></a> </p>

<p>This is quite interesting. We can see that we insert the entities as we expect, but when we pull a person out, we do a join to the employee, to get the one-to-one association. For that matter, even in the second scenario, we do a join to get the associated employee.</p>

<p>The reason that we have to do it is quite interesting as well. NHibernate makes some guarantees about the way the object model and the database model map to one another. And one of those guarantees is that if there is no association in the database, we will get back a null in the object model.</p>

<p>Generally, this works very well, since we can tell whatever an association exists or not using the value in the table (for many-to-one associations). But for one-to-one association, if we want to keep this guarantee, we have to check the associated table to verify if we need to have a null or a proxy there. That is somewhat annoying, but we can get around that by specifying constrained=”true”. This tell NHibernate that in this case, whenever there is a Person, there <em>must</em> also be a matching Employee value. We can specify it like this:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">one</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Employee&quot;</span> 
	<span style="color: #ff0000">constrained</span>=<span style="color: #0000ff">&quot;true&quot;</span>
	<span style="color: #ff0000">foreign</span>-<span style="color: #ff0000">key</span>=<span style="color: #0000ff">&quot;none&quot;</span>
	<span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;Employee&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
</blockquote>

<p>Something else to note is that we must specify this with foreign-key=”none”, because otherwise NHibernate’s Schema Export feature would create two foreign keys for us, which would create a circular reference that wouldn’t allow us to insert anything into the database.</p>

<p>When setting this, we can see that there is a dramatic change in NHibernate’s behavior:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2B3CB2CD.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="253" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_637DBA96.png" width="528" border="0" /></a> </p>

<p>Instead of generating joins, NHibernate now uses standard selects to get the data. And we don’t have to pre-populate the information on loading the entity, we can delay that as we usually do with NHibernate.</p>

<p>And the last thing that we will explore for &lt;one-to-one/&gt; is the fetch attribute. It defaults to select, so we have already seen how that works, but when we set fetch=”join”, we get an interesting flashback. Well, almost:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_1BBEC260.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="229" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3B03F9E4.png" width="530" border="0" /></a> </p>

<p>Again, we use a join to get the value upfront, but since we are now using constrained=”true”, we can use an inner join instead of a left outer join, which is more efficient in most cases.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt one to one gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="283" date-created="2009-04-29T12:03:45" date-modified="2009-04-29T12:03:45" approved="true" user-name="Eddie Gems" user-url="http://nhforge.org/members/Eddie-Gems/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;one-to-one/&gt;]]></title>
          <content type="text"><![CDATA[In your examples we map Person property of Employee class  via column PERSON of EMPLOYEE table.So when we want to get employee from DB we create such query: select * from EMPLOYEE e join PERSON p on p.Id = e.Person. Right? I think yes.

So. When we load person + employee we need to use such query: select * from PERSON p left join EMPLOYEE e on e.Person = p.Id, but in your mapping for Person class we saw that Employee mapped to Person via primary keys, i.e. Employee.Id = Person.Id, and I think this is an error.

And in your article is nothing about "property-ref" attribute. As I understand from documentation it's destination is a little bit odd for me. I try to explain/

I case of your mappings I think that the right way to define mapping for one-to-one relation to employee from Person class would:
<one-to-one name="Employee" class="Employee" property-ref="Person" />

but what if we don't want property Person at the Employee class? What we need specify in the "property-ref" attribute?

My opinion is that we need "column" attribute for on-to-one element at the mapping.

Cheers )]]></content>
        </comment>
        <comment id="285" date-created="2009-04-29T12:11:56" date-modified="2009-04-29T12:11:56" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;one-to-one/&gt;]]></title>
          <content type="text"><![CDATA[Eddie,
If you want a column attribute, you might as well use the (much) simpler many-to-one.]]></content>
        </comment>
        <comment id="766" date-created="2011-01-18T03:36:20" date-modified="2011-01-18T03:36:20" approved="true" user-name="GLMnet" user-url="http://nhforge.org/members/GLMnet/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;one-to-one/&gt;]]></title>
          <content type="text"><![CDATA[I agree with Eddie, this example should be fixed. It is clear in the second sql sreenshot that Person column is not used:

SELECT .. FROM People person0_ WHERE person0.Id = 1
// We get a person which id is 1
SELECT .. FROM Employees employee0_ WHERE employee0.Id = 1 
// now that 1 is the Person id, but is "joined" with employee id, so this works by coincidence. 
The query should be:
SELECT .. FROM Employees employee0_ WHERE employee0.Person = 1 

To get NH do that you should do the property-ref thing.]]></content>
        </comment>
        <comment id="767" date-created="2011-01-18T03:36:49" date-modified="2011-01-18T03:36:49" approved="true" user-name="GLMnet" user-url="http://nhforge.org/members/GLMnet/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;one-to-one/&gt;]]></title>
          <content type="text"><![CDATA[I agree with Eddie, this example should be fixed. It is clear in the second sql sreenshot that Person column is not used:

SELECT .. FROM People person0_ WHERE person0.Id = 1
// We get a person which id is 1
SELECT .. FROM Employees employee0_ WHERE employee0.Id = 1 
// now that 1 is the Person id, but is "joined" with employee id, so this works by coincidence. 
The query should be:
SELECT .. FROM Employees employee0_ WHERE employee0.Person = 1 

To get NH do that you should do the property-ref thing.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="254" date-created="2009-04-20T01:56:00" date-modified="2009-04-20T01:56:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/20/nhibernate-mapping-lt-join-gt.aspx" type="normal" hasexcerpt="false" views="9646">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;join/&gt;]]></title>
      <content type="text"><![CDATA[<p>We have previously explored the <a href="http://ayende.com/Blog/archive/2009/04/19/nhibernate-mapping-ltone-to-onegt.aspx">one-to-one</a> mapping, which let you create 1:1 association in the database, but there is actually another way to map several tables to an object model. We aren’t constrained by the database model, and we can merge several tables into a single entity. </p>  <p>We do that using the &lt;join/&gt; element:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">join</span>
        <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;tablename&quot;</span>                        (<span style="color: #ff0000">1</span>)
        <span style="color: #ff0000">schema</span>=<span style="color: #0000ff">&quot;owner&quot;</span>                           (<span style="color: #ff0000">2</span>)
        <span style="color: #ff0000">catalog</span>=<span style="color: #0000ff">&quot;catalog&quot;</span>                        (<span style="color: #ff0000">3</span>)
        <span style="color: #ff0000">fetch</span>=<span style="color: #0000ff">&quot;join|select&quot;</span>                      (<span style="color: #ff0000">4</span>)
        <span style="color: #ff0000">inverse</span>=<span style="color: #0000ff">&quot;true|false&quot;</span>                     (<span style="color: #ff0000">5</span>)
        <span style="color: #ff0000">optional</span>=<span style="color: #0000ff">&quot;true|false&quot;</span><span style="color: #0000ff">&gt;</span>                   (6)

        <span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> ... <span style="color: #0000ff">/&gt;</span>

        <span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> ... <span style="color: #0000ff">/&gt;</span>
        ...
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">join</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Let us explore this a bit, assuming the we have the following database model:&quot;</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_617B3C4E.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="177" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4BB67553.png" width="543" border="0" /></a> </p>

<p>And what we want is to map this to the following object model:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_1D5F8057.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="235" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3348F2A7.png" width="163" border="0" /></a> </p>

<p>We can do this will the following mapping:</p>

<blockquote>
  <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Person&quot;</span>
	 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;People&quot;</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;identity&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Name&quot;</span> <span style="color: #0000ff">/&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">join</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Addresses&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;PersonId&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Line1&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Line2&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;City&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Country&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;ZipCode&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">join</span><span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>And getting a Person will now result in the following SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_45281725.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="187" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0011DAA0.png" width="349" border="0" /></a> </p>

<p>NHibernate will now take care of mapping everything to its place, and making sure that everything works just right.</p>

<p>By now you should be able to figure out what fetch means, and inverse should also be familiar. Optional is interesting, what is basically says is that we should always use an outer join to get the values from the Addresses table and if all the mapped properties are null, it wouldn’t create a new row in the Addresses table.</p>

<p>On the face of it, it looks like a nice way to merge tables together, but that isn’t actually the primary reason for this feature. You can use it for that, for sure, but that is mostly useful in legacy databases. In most cases, your object model should be <em>more</em> granular than the database model, not the other way around.</p>

<p>The really interesting part about this feature is that it allows us to mix &amp; match inheritance strategies. It let us create a table per hierarchy that store all the extra fields on another table, for example. That significantly reduce the disadvantage of using a table per hierarchy or table per subclass, since we can tell very easily what is the type of the class that we are using, and act appropriately.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt join gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="256" date-created="2009-04-21T03:29:00" date-modified="2009-04-21T03:29:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/21/nhibernate-mapping-lt-any-gt.aspx" type="normal" hasexcerpt="false" views="3347">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;any/&gt;]]></title>
      <content type="text"><![CDATA[<p>Sometimes, well known associations just don’t cut it. We sometimes need to be able to go not to a single table, but to a collection of table. For example, let us say that an order can be paid using a credit card or a wire transfer. The data about those are stored in different tables, and even in the object model, there is no inheritance association them.</p>  <p>From the database perspective, it looks like this:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_180D51B5.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="134" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_66A68F74.png" width="838" border="0" /></a> </p>  <p>As you can see, based on the payment type, we need to get the data from a different table. That is somewhat of a problem for the standard NHibernate mapping, which is why we have &lt;any/&gt; around.</p>  <p>Just to close the circle before we get down into the mapping, from the object model perspective, it looks like this:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6A473B02.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="289" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_305A88C7.png" width="403" border="0" /></a> </p>  <p>In other words, this is a non polymorphic association, because there is no mapped base class for the association. In fact, we could have used System.Object instead, but even for a sample, I don’t like it.</p>  <p>The mapping that we use are:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Order&quot;</span>
			 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;Orders&quot;</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;native&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>

	<span style="color: #0000ff">&lt;</span><span style="color: #800000">any</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Payment&quot;</span> <span style="color: #ff0000">id</span>-<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;System.Int64&quot;</span> <span style="color: #ff0000">meta</span>-<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;System.String&quot;</span> <span style="color: #ff0000">cascade</span>=<span style="color: #0000ff">&quot;all&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">meta</span>-<span style="color: #ff0000">value</span> <span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;CreditCard&quot;</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;CreditCardPayment&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">meta</span>-<span style="color: #ff0000">value</span> <span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;Wire&quot;</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;WirePayment&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">column</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PaymentType&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">column</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PaymentId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">any</span><span style="color: #0000ff">&gt;</span>

<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>

<span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CreditCardPayment&quot;</span>
			 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;CreditCardPayments&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;native&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;IsSuccessful&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Amount&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;CardNumber&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span>

<span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;WirePayment&quot;</span>
			 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;WirePayments&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Id&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;native&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;IsSuccessful&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Amount&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;BankAccountNumber&quot;</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Pay special attention to the &lt;any/&gt; element. Any &lt;meta-value/&gt; declaration is setting up the association between the type as specified in the PaymentType column and the actual class name that it maps to. The only limitation is that all the mapped class must have the same data type for the primary key column.</p>

<p>Let us look at what this will give us:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var order = <span style="color: #0000ff">new</span> Order
	{
		Payment = <span style="color: #0000ff">new</span> CreditCardPayment
		{
			Amount = 5,
			CardNumber = &quot;<span style="color: #8b0000">1234</span>&quot;,
			IsSuccessful = <span style="color: #0000ff">true</span>
		}
	};
	session.Save(order);
	tx.Commit();
}</pre>
</blockquote>

<p>Which produces:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0B5F58FF.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="123" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_63BB6D85.png" width="378" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_231BB1C7.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="106" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0D545A1B.png" width="348" border="0" /></a> </p>

<p>And for selecting, it works just the way we would expect it to:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var person = session.Get&lt;Order&gt;(1L).Payment;
	Console.WriteLine(person.Amount);
	tx.Commit();
}</pre>
</blockquote>

<p>The generated SQL is:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3A6BD79A.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="104" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_27B96E94.png" width="335" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_19115360.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="119" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0A69382C.png" width="397" border="0" /></a> </p>

<p>An interesting limitation is that you cannot do an eager load on &lt;any/&gt;, considering the flexibility of the feature, I am most certainly willing to accept that limitation.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt any gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="270" date-created="2009-04-22T10:01:05" date-modified="2009-04-22T10:01:05" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;any/&gt;]]></title>
          <content type="text"><![CDATA[This may be a stupid question, but how does it know to use the PaymentType column and not the PaymentId column for the meta-data?

Suppose PaymentId was also a string based column. What then?

I can't see where you state PaymentType is the meta-data column to use.]]></content>
        </comment>
        <comment id="271" date-created="2009-04-22T14:47:14" date-modified="2009-04-22T14:47:14" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;any/&gt;]]></title>
          <content type="text"><![CDATA[bunceg,
This is decided by the position.
The first column is the type, the second is the id.]]></content>
        </comment>
        <comment id="288" date-created="2009-04-30T10:35:00" date-modified="2009-04-30T10:35:00" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Mapping - &lt;any/&gt;]]></title>
          <content type="text"><![CDATA[btw. Thanks for this - I actually needed this today to fix a problem another programmer had come across :)]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="257" date-created="2009-04-22T03:52:00" date-modified="2009-04-22T03:52:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/22/nhibernate-mapping-lt-many-to-any-gt.aspx" type="normal" hasexcerpt="false" views="3545">
      <title type="text"><![CDATA[NHibernate Mapping - &lt;many-to-any/&gt;]]></title>
      <content type="text"><![CDATA[<p>&lt;many-to-any/&gt; is the logical extension of the &lt;any/&gt; feature that NHibernate has. At the time of this writing, if you do a Google search on &lt;many-to-any/&gt;, the first result is <a href="http://ayende.com/Blog/archive/2005/10/07/ObscureNHibernateFeature.aspx">this post</a>. It was written by me, in 2005, and contains absolutely <em>zero</em> useful information. Time to fix that.</p>  <p>Following up on the <a href="http://ayende.com/Blog/archive/2009/04/21/nhibernate-mapping-ltanygt.aspx">&lt;any/&gt;</a> post, let us say that we need to map not a single heterogeneous association, but a multiple heterogeneous one, such as this:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0B0F7595.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="289" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_02448EAB.png" width="403" border="0" /></a> </p>  <p>In the database, it would appear as:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_15F408F0.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="318" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_750326F9.png" width="674" border="0" /></a> </p>  <p>How can we map such a thing?</p>  <p>Well, that turn out to be pretty easy to do:</p>  <blockquote>   <pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;Payments&quot;</span> <span style="color: #ff0000">table</span>=<span style="color: #0000ff">&quot;OrderPayments&quot;</span> <span style="color: #ff0000">cascade</span>=<span style="color: #0000ff">&quot;all&quot;</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">&quot;OrderId&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">many</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">any</span> <span style="color: #ff0000">id</span>-<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;System.Int64&quot;</span>
			<span style="color: #ff0000">meta</span>-<span style="color: #ff0000">type</span>=<span style="color: #0000ff">&quot;System.String&quot;</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">meta</span>-<span style="color: #ff0000">value</span> <span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;CreditCard&quot;</span>
			<span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;CreditCardPayment&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">meta</span>-<span style="color: #ff0000">value</span> <span style="color: #ff0000">value</span>=<span style="color: #0000ff">&quot;Wire&quot;</span>
			<span style="color: #ff0000">class</span>=<span style="color: #0000ff">&quot;WirePayment&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">column</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PaymentType&quot;</span> 
			<span style="color: #ff0000">not</span>-<span style="color: #ff0000">null</span>=<span style="color: #0000ff">&quot;true&quot;</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">column</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">&quot;PaymentId&quot;</span>
			<span style="color: #ff0000">not</span>-<span style="color: #ff0000">null</span>=<span style="color: #0000ff">&quot;true&quot;</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">many</span>-to-any<span style="color: #0000ff">&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>

<p>Now, let us look at how we use this when we insert values:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var order = <span style="color: #0000ff">new</span> Order
	{
		Payments = <span style="color: #0000ff">new</span> HashSet&lt;IPayment&gt;
        {
        	<span style="color: #0000ff">new</span> CreditCardPayment
        	{
        		Amount = 6,
                CardNumber = &quot;<span style="color: #8b0000">35434</span>&quot;,
                IsSuccessful = <span style="color: #0000ff">true</span>
        	},
            <span style="color: #0000ff">new</span> WirePayment
            {
            	Amount = 3,
                BankAccountNumber = &quot;<span style="color: #8b0000">25325</span>&quot;,
                IsSuccessful = <span style="color: #0000ff">false</span>
            }
        }
	};
	session.Save(order);
	tx.Commit();
}</pre>
</blockquote>

<p>This will produce some very interesting SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_5007F731.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="106" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_73C3AF7C.png" width="326" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_5E688AC5.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="119" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_1DC8CF07.png" width="400" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6AFB5943.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="121" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_156A1B12.png" width="398" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_30A504C4.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="109" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5B13C692.png" width="436" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_21271457.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="112" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_6E599E93.png" width="411" border="0" /></a> </p>

<p>I think that the SQL make it pretty clear what is going on here, so let us move to a more fascinating topic, what does NHibernate do when we <em>read</em> them?</p>

<p>Here is the code:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var session = sessionFactory.OpenSession())
<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
{
	var order = session.Get&lt;Order&gt;(1L);
	<span style="color: #0000ff">foreach</span> (var payment <span style="color: #0000ff">in</span> order.Payments)
	{
		Console.WriteLine(payment.Amount);
	}
	tx.Commit();
}</pre>
</blockquote>

<p>And the SQL:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_18C86062.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="103" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_712474E8.png" width="355" border="0" /></a> </p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p></p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_45763B9D.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="107" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_41F7AAB3.png" width="332" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_5D329465.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="118" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_476B3CB9.png" width="386" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4DB4A3F8.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="119" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3B023AF2.png" width="429" border="0" /></a> </p>

<p>As you can see, this is about as efficient as you can get. We load the order, we check what tables we need to check, and the we select from each of the tables that we found to get the actual values in the association.</p>

<p>True heterogeneous association, not used very often, but when you need it, you really <em>love</em> it when you do.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate mapping lt many to any gt]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="258" date-created="2009-04-23T04:11:00" date-modified="2009-04-23T04:11:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/23/nhibernate-tidbit-using-lt-set-gt-without-referencing-iesi-collections.aspx" type="normal" hasexcerpt="false" views="2471">
      <title type="text"><![CDATA[NHibernate Tidbit – using &lt;set/&gt; without referencing Iesi.Collections]]></title>
      <content type="text"><![CDATA[<p>Some people don’t like having to reference Iesi.Collections in order to use NHibernate &lt;set/&gt; mapping. With NHibernate 2.1, this is possible, since we finally have a set type in the actual BCL. We still don’t have an ISet&lt;T&gt; interface, unfortunately, but that is all right, we can get by with ICollection&lt;T&gt;.</p>  <p>In other words, any ISet&lt;T&gt; association that you have can be replaced with an ICollection&lt;T&gt; and instead of initializing it with Iesi.Collections.Generic.HashedSet&lt;T&gt;, you can initialize it with System.Collections.Generic.HashSet&lt;T&gt;.</p>  <p>Note that you still need to deploy Iesi.Collections with your NHibernate application, but that is all, you can remove the association to Iesi.Collections and use only BCL types in your domain model, with not external references.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate tidbit using lt set gt without referencing iesi collections]]></post-name>
      <categories>
        <category ref="1027" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="273" date-created="2009-04-24T06:46:00" date-modified="2009-04-24T06:46:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/24/new-ast-parser-as-default-in-2-1.aspx" type="normal" hasexcerpt="false" views="1946">
      <title type="text"><![CDATA[New AST Parser as default in 2.1]]></title>
      <content type="text"><![CDATA[<p>Our newest commiter Steve Strong has been working on a new AST parser for HQL. The new AST parser currently passes NH Test suite, however it may have some bugs that are not covered by NH Test suite.We now have to decide whether to include new parser as default in 2.1 distribution and we care for your thoughts. </p>
<p><a href="https://spreadsheets.google.com/viewform?formkey=cnZEUTV6V1pPU01GS016cVI5R0gxbXc6MA..">Here is the link where you can vote for this issue.</a></p>
<p><b>An important note by Ayende:</b></p>
<p><b>It is important to note that no matter how this survey goes, you are
always going to be able to revert back to the old parser by setting a
single config value.</b></p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[new ast parser as default in 2 1]]></post-name>
      <comments>
        <comment id="274" date-created="2009-04-24T07:59:37" date-modified="2009-04-24T07:59:37" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: New AST Parser as default in 2.1]]></title>
          <content type="text"><![CDATA[It is important to note that no matter how this survey goes, you are always going to be able to revert back to the old parser by setting a single config value.]]></content>
        </comment>
        <comment id="275" date-created="2009-04-24T13:36:43" date-modified="2009-04-24T13:36:43" approved="true" user-name="Joe" user-url="http://nhforge.org/members/jyoung/default.aspx">
          <title type="text"><![CDATA[re: New AST Parser as default in 2.1]]></title>
          <content type="text"><![CDATA[Could you highlight the differences between the new and old AST Parser? I think that would help people cast a more informed vote.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="259" date-created="2009-04-24T12:28:00" date-modified="2009-04-24T12:28:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/24/nhibernate-2nd-level-cache.aspx" type="normal" hasexcerpt="false" views="8575">
      <title type="text"><![CDATA[NHibernate 2nd Level Cache]]></title>
      <content type="text"><![CDATA[<p>NHibernate has a builtin support for caching. It sounds like a trivial feature at first, until you realize how significant it is that the underlying data access infrastructure already implements it. It means that you don’t have to worry about thread safety, propagating changes in a farm, built smart cache invalidation strategies or deal with all of the messy details that are usually along for the ride when you need to implement a non trivial infrastructure piece.</p>  <p>And no, it isn’t as simple as just shoving a value to the cache.</p>  <p>I spent quite a bit of time talking about this <a href="http://ayende.com/Blog/archive/2008/11/13/advance-nhibernate-workshop-video.aspx">here</a>, so I wouldn’t go about all the cache internals and how they work, but I’ll mention the highlights. NHibernate internally has the following sub caches:</p>  <ul>   <li>Entity Cache </li>    <li>Collection Cache </li>    <li>Query Cache </li>    <li>Timestamp Cache </li> </ul>  <p>NHibernate make use of all of them in a fairly complex way to ensure that even though we are using the cache, we are still presenting a consistent view of the cache as a mirror of the database. The actual details of how we do it can be found <a href="http://ayende.com/Blog/archive/2008/01/24/NHibernate-and-the-second-level-cache-tips.aspx">here</a>.</p>  <p>Another thing that NHibernate does for us when we update the cache is try to maintain the consistent view of the world even when using replicated caches used in a farm scenarios. This requires some support from the caching infrastructure, such as the ability to perform a hard lock on the values. Of the free caching providers for NHibernate, only Velocity support this, which means that when we evaluate a cache provider for NHibernate to be used, we need to take this into account.</p>  <p>In general, we can pretty much ignore this, but it does have some interesting implications with regards to what are the isolation guarantees that we can make based on the cache implementation that we use, the number of machines we use and the cache concurrency strategy that we use.</p>  <p>You can read about this <a href="http://nhforge.org/doc/nh/en/index.html#performance-cache-readonly">here</a> and <a href="http://www.hibernate.org/hib_docs/reference/en/html/performance-cache.html">here</a>.</p>  <p>One thing that you should be aware of is that NHibernate currently doesn’t have transaction cache concurrency story, mostly because there is no cache provider that can give us that. As such, be aware that if you require serializable isolation level to work with your entities, you cannot use the 2nd level cache. The 2nd level cache currently guarantee only read committed (and <em>almost</em> guarantee repeatable read if this is the isolation level that you use in the database). Note that this guarantee is made for read-write cache concurrency mode only.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2nd level cache]]></post-name>
      <categories>
        <category ref="1019" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="260" date-created="2009-04-27T05:33:00" date-modified="2009-04-27T05:33:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/27/nhibernate-futures.aspx" type="normal" hasexcerpt="false" views="6715">
      <title type="text"><![CDATA[NHibernate Futures]]></title>
      <content type="text"><![CDATA[<p>One of the nicest new features in NHibernate 2.1 is the Future&lt;T&gt;() and FutureValue&lt;T&gt;() functions. They essentially function as a way to defer query execution to a later date, at which point NHibernate will have more information about what the application is supposed to do, and optimize for it accordingly. This build on an existing feature of NHibernate, Multi Queries, but does so in a way that is easy to use and almost seamless.</p>  <p>Let us take a look at the following piece of code:</p>  <blockquote>   <pre><span style="color: #0000ff">using</span> (var s = sf.OpenSession())
<span style="color: #0000ff">using</span> (var tx = s.BeginTransaction())
{
	var blogs = s.CreateCriteria&lt;Blog&gt;()
		.SetMaxResults(30)
		.List&lt;Blog&gt;();
	var countOfBlogs = s.CreateCriteria&lt;Blog&gt;()
		.SetProjection(Projections.Count(Projections.Id()))
		.UniqueResult&lt;<span style="color: #0000ff">int</span>&gt;();

	Console.WriteLine(&quot;<span style="color: #8b0000">Number of blogs: {0}</span>&quot;, countOfBlogs);
	<span style="color: #0000ff">foreach</span> (var blog <span style="color: #0000ff">in</span> blogs)
	{
		Console.WriteLine(blog.Title);
	}

	tx.Commit();
}</pre>
</blockquote>

<p>This code would generate two queries to the database:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_404AC599.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="99" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4E41B6E9.png" width="798" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_12187BF2.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="132" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7193CCF0.png" width="415" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_70BDF7B7.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="77" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_49863F33.png" width="292" border="0" /></a> </p>

<p>Two queries to the database is a expensive, we can see that it took us 114ms to get the data from the database. We can do better than that, let us tell NHibernate that it is free to do the optimization in any way that it likes, I have marked the changes in red:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var s = sf.OpenSession())
<span style="color: #0000ff">using</span> (var tx = s.BeginTransaction())
{
	var blogs = s.CreateCriteria&lt;Blog&gt;()
		.SetMaxResults(30)
		<strong><font color="#ff0000">.Future&lt;Blog&gt;();</font></strong>
	var countOfBlogs = s.CreateCriteria&lt;Blog&gt;()
		.SetProjection(Projections.Count(Projections.Id()))
		<strong><font color="#ff0000">.FutureValue&lt;<span style="color: #0000ff">int</span>&gt;();</font></strong>

	Console.WriteLine(&quot;<span style="color: #8b0000">Number of blogs: {0}</span>&quot;, countOfBlogs<strong><font color="#ff0000">.Value</font></strong>);
	<span style="color: #0000ff">foreach</span> (var blog <span style="color: #0000ff">in</span> blogs)
	{
		Console.WriteLine(blog.Title);
	}

	tx.Commit();
}</pre>
</blockquote>

<p>Now, we seem a different result:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_38A19B43.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="96" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5E99DC4A.png" width="795" border="0" /></a> </p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_453469C1.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="163" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_445E9488.png" width="394" border="0" /></a> </p>

<p>Instead of going to the database twice, we only go <em>once</em>, with both queries at once. The speed difference is quite dramatic, 80 ms instead of 114 ms, so we saved about 30% of the total data access time and a total of 34 ms.</p>

<p>To make things even more interesting, it gets better the more queries that you use. Let us take the following scenario. We want to show the front page of a blogging site, which should have:</p>

<ul>
  <li>A grid that allow us to page through the blogs.</li>

  <li>Most recent posts.</li>

  <li>All categories</li>

  <li>All tags</li>

  <li>Total number of comments</li>

  <li>Total number of posts</li>
</ul>

<p>For right now, we will ignore caching, and just look at the queries that we need to handle. I think that you can agree that this is not an unreasonable amount of data items to want to show on the main page. For that matter, just look at <em>this</em> page, and you can probably see as much data items or more.</p>

<p>Here is the code using the Future options:</p>

<blockquote>
  <pre><span style="color: #0000ff">using</span> (var s = sf.OpenSession())
<span style="color: #0000ff">using</span> (var tx = s.BeginTransaction())
{
	var blogs = s.CreateCriteria&lt;Blog&gt;()
		.SetMaxResults(30)
		.Future&lt;Blog&gt;();

	var posts = s.CreateCriteria&lt;Post&gt;()
		.AddOrder(Order.Desc(&quot;<span style="color: #8b0000">PostedAt</span>&quot;))
		.SetMaxResults(10)
		.Future&lt;Post&gt;();

	var tags = s.CreateCriteria&lt;Tag&gt;()
		.AddOrder(Order.Asc(&quot;<span style="color: #8b0000">Name</span>&quot;))
		.Future&lt;Tag&gt;();

	var countOfPosts = s.CreateCriteria&lt;Post&gt;()
		.SetProjection(Projections.Count(Projections.Id()))
		.FutureValue&lt;<span style="color: #0000ff">int</span>&gt;();

	var countOfBlogs = s.CreateCriteria&lt;Blog&gt;()
		.SetProjection(Projections.Count(Projections.Id()))
		.FutureValue&lt;<span style="color: #0000ff">int</span>&gt;();

	var countOfComments = s.CreateCriteria&lt;Comment&gt;()
		.SetProjection(Projections.Count(Projections.Id()))
		.FutureValue&lt;<span style="color: #0000ff">int</span>&gt;();

	Console.WriteLine(&quot;<span style="color: #8b0000">Number of blogs: {0}</span>&quot;, countOfBlogs.Value);

	Console.WriteLine(&quot;<span style="color: #8b0000">Listing of blogs</span>&quot;);
	<span style="color: #0000ff">foreach</span> (var blog <span style="color: #0000ff">in</span> blogs)
	{
		Console.WriteLine(blog.Title);
	}

	Console.WriteLine(&quot;<span style="color: #8b0000">Number of posts: {0}</span>&quot;, countOfPosts.Value);
	Console.WriteLine(&quot;<span style="color: #8b0000">Number of comments: {0}</span>&quot;, countOfComments.Value);
	Console.WriteLine(&quot;<span style="color: #8b0000">Recent posts</span>&quot;);
	<span style="color: #0000ff">foreach</span> (var post <span style="color: #0000ff">in</span> posts)
	{
		Console.WriteLine(post.Title);
	}

	Console.WriteLine(&quot;<span style="color: #8b0000">All tags</span>&quot;);
	<span style="color: #0000ff">foreach</span> (var tag <span style="color: #0000ff">in</span> tags)
	{
		Console.WriteLine(tag.Name);
	}

	tx.Commit();
}</pre>
</blockquote>

<p>This generates the following:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_03BED8CA.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="132" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_05258C4D.png" width="789" border="0" /></a> </p>

<p>And the actual SQL that is sent to the database is:</p>

<blockquote>
  <pre><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=top&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">top</a> 30 this_.Id             <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Id5_0_,
              this_.Title          <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Title5_0_,
              this_.Subtitle       <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Subtitle5_0_,
              this_.AllowsComments <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> AllowsCo4_5_0_,
              this_.CreatedAt      <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> CreatedAt5_0_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a>   Blogs this_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a>   <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=top&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">top</a> 10 this_.Id       <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Id7_0_,
                this_.Title    <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Title7_0_,
                this_.<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Text&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">Text</a>     <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=Text&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">Text</a>7_0_,
                this_.PostedAt <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> PostedAt7_0_,
                this_.BlogId   <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> BlogId7_0_,
                this_.UserId   <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> UserId7_0_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a>     Posts this_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ORDER&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">ORDER</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=BY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">BY</a> this_.PostedAt <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=desc&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">desc</a>
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a>   this_.Id       <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Id4_0_,
         this_.Name     <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> Name4_0_,
         this_.ItemId   <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> ItemId4_0_,
         this_.ItemType <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> ItemType4_0_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a>     Tags this_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=ORDER&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">ORDER</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=BY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">BY</a> this_.Name <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=asc&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">asc</a>
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=count&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">count</a>(this_.Id) <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> y0_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a>   Posts this_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=count&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">count</a>(this_.Id) <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> y0_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a>   Blogs this_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=SELECT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">SELECT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=count&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">count</a>(this_.Id) <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=as&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">as</a> y0_
<a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=FROM&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">FROM</a>   Comments this_</pre>
</blockquote>

<p>That is great, but what would happen if we would use List and UniqueResult instead of Future and FutureValue?</p>

<p>I’ll not show the code, since I think it is pretty obvious how it will look like, but this is the result:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_61F8219A.png"><img title="image" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" height="180" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_70C4E823.png" width="795" border="0" /></a> </p>

<p>Now it takes 348ms to execute vs. 259ms using the Future pattern.</p>

<p></p>

<p></p>

<p>It is still in the 25% – 30% speed increase, but take note about the difference in <em>time</em>. Before, we saved 34 ms. Now, we saved 89 ms. </p>

<p>Those are pretty significant numbers, and those are against a very small database that I am running locally, against a database that is on another machine, the results would have been even more dramatic.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate futures]]></post-name>
      <categories>
        <category ref="1124" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="261" date-created="2009-04-28T07:32:00" date-modified="2009-04-28T07:32:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/28/nhibernate-unit-testing.aspx" type="normal" hasexcerpt="false" views="3696">
      <title type="text"><![CDATA[NHibernate Unit Testing]]></title>
      <content type="text"><![CDATA[<p>When using NHibernate we generally want to test only three things, that properties are persisted, that cascade works as expected and that queries return the correct result. In order to do all of those, we generally have to talk to a real database, trying to fake any of those at this level is futile and going to be very complicated.</p>  <p>We can either use a standard RDBMS or use an in memory database such as SQLite in order to get very speedy tests.</p>  <p>I have a pretty big implementation of a base class for unit testing NHibernate in Rhino Commons, but that has so many features that I forget how to use it sometimes. Most of those features, by the way, are now null &amp; void because we have <a href="http://nhprof.com/">NH Prof</a>, and can easily see what is going on without resorting to the SQL Profiler. </p>  <p>At any rate, here is a very simple implementation of that base class, which gives us the ability to execute NHibernate tests in memory.</p>  <blockquote>   <pre><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> InMemoryDatabaseTest : IDisposable
{
	<span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> Configuration Configuration;
	<span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> ISessionFactory SessionFactory;
	<span style="color: #0000ff">protected</span> ISession session;

	<span style="color: #0000ff">public</span> InMemoryDatabaseTest(Assembly assemblyContainingMapping)
	{
		<span style="color: #0000ff">if</span> (Configuration == <span style="color: #0000ff">null</span>)
		{
			Configuration = <span style="color: #0000ff">new</span> Configuration()
				.SetProperty(Environment.ReleaseConnections,&quot;<span style="color: #8b0000">on_close</span>&quot;)
				.SetProperty(Environment.Dialect, <span style="color: #0000ff">typeof</span> (SQLiteDialect).AssemblyQualifiedName)
				.SetProperty(Environment.ConnectionDriver, <span style="color: #0000ff">typeof</span>(SQLite20Driver).AssemblyQualifiedName)
				.SetProperty(Environment.ConnectionString, &quot;<span style="color: #8b0000">data source=:memory:</span>&quot;)
				.SetProperty(Environment.ProxyFactoryFactoryClass, <span style="color: #0000ff">typeof</span> (ProxyFactoryFactory).AssemblyQualifiedName)
				.AddAssembly(assemblyContainingMapping);

			SessionFactory = Configuration.BuildSessionFactory();
		}

		session = SessionFactory.OpenSession();

		<span style="color: #0000ff">new</span> SchemaExport(Configuration).Execute(<span style="color: #0000ff">true</span>, <span style="color: #0000ff">true</span>, <span style="color: #0000ff">false</span>, <span style="color: #0000ff">true</span>, session.Connection, Console.Out);
	}

	<span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Dispose()
	{
		session.Dispose();
	}
}</pre>
</blockquote>

<p>This just set up the in memory database, the mappings, and create a session which we can now use. Here is how we use this base class:</p>

<blockquote>
  <pre><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> BlogTestFixture : InMemoryDatabaseTest
{
	<span style="color: #0000ff">public</span> BlogTestFixture() : <span style="color: #0000ff">base</span>(<span style="color: #0000ff">typeof</span>(Blog).Assembly)
	{
	}

	[Fact]
	<span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> CanSaveAndLoadBlog()
	{
		<span style="color: #0000ff">object</span> id;

		<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
		{
			id = session.Save(<span style="color: #0000ff">new</span> Blog
			{
				AllowsComments = <span style="color: #0000ff">true</span>,
				CreatedAt = <span style="color: #0000ff">new</span> DateTime(2000,1,1),
				Subtitle = &quot;<span style="color: #8b0000">Hello</span>&quot;,
				Title = &quot;<span style="color: #8b0000">World</span>&quot;,
			});

			tx.Commit();
		}

		session.Clear();


		<span style="color: #0000ff">using</span> (var tx = session.BeginTransaction())
		{
			var blog = session.Get&lt;Blog&gt;(id);

			Assert.Equal(<span style="color: #0000ff">new</span> DateTime(2000, 1, 1), blog.CreatedAt);
			Assert.Equal(&quot;<span style="color: #8b0000">Hello</span>&quot;, blog.Subtitle);
			Assert.Equal(&quot;<span style="color: #8b0000">World</span>&quot;, blog.Title);
			Assert.True(blog.AllowsComments);

			tx.Commit();
		}
	}
}</pre>
</blockquote>

<p>Pretty simple, ah?</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate unit testing]]></post-name>
      <categories>
        <category ref="1100" />
      </categories>
      <comments>
        <comment id="278" date-created="2009-04-28T14:56:01" date-modified="2009-04-28T14:56:01" approved="true" user-name="Fred Morrison" user-url="http://nhforge.org/members/fmorriso/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Unit Testing]]></title>
          <content type="text"><![CDATA[Is there any type of free alternative to NH Prof?  After all, the whole point of using things like NHibernate is that they don't cost money, so it's quite naturual that we would look for a profiler that is also does not cost money.]]></content>
        </comment>
        <comment id="279" date-created="2009-04-28T19:28:21" date-modified="2009-04-28T19:28:21" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Unit Testing]]></title>
          <content type="text"><![CDATA[Fred, 
A few points.
a) No, there isn't. You can try use the log file, but the level of experience is on a totally different planet.
b) I fail to see the logic in saying that NHibernate's entire eco system should be free.]]></content>
        </comment>
        <comment id="324" date-created="2009-05-21T18:06:19" date-modified="2009-05-21T18:06:19" approved="true" user-name="Optimus" user-url="http://nhforge.org/members/optimus/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Unit Testing]]></title>
          <content type="text"><![CDATA["the whole point of using things like NHibernate is that they don't cost money".

Oh yeah! This is *CLEARLY*, *ENTIRELY* the *WHOLE* point. 

The entire NH developer community would like to thank you for your incredible lack of tact.]]></content>
        </comment>
        <comment id="325" date-created="2009-05-21T22:34:17" date-modified="2009-05-21T22:34:17" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Unit Testing]]></title>
          <content type="text"><![CDATA[@Fred
Sure there is!
The NHibernate log give you all you need... after that you should reorganize info and know what mean each thing you are seeing. This is completely free of charge.

If you want that somebody else do the same work for you and then give you some advise and waring about how you are using NH 
 you have various alternative starting from NH-Prof to consult some professional; as you can imagine this is not for free.

If you want all for free, please, do something with the supermarket where I'm going; they asking me money for each thing I'm buying.

Thanks.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="471" date-created="2009-08-16T10:34:20" date-modified="2009-08-16T10:34:20" approved="true" url="http://theblackhatmillionaire.com/">
          <title type="text"><![CDATA[work from home]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="263" date-created="2009-04-29T15:04:00" date-modified="2009-04-29T15:04:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/29/nhibernate-ipreupdateeventlistener-amp-ipreinserteventlistener.aspx" type="normal" hasexcerpt="false" views="5090">
      <title type="text"><![CDATA[NHibernate IPreUpdateEventListener &amp; IPreInsertEventListener]]></title>
      <content type="text"><![CDATA[<p>NHibernate’s listeners architecture bring with it a lot of power to the game, but understanding how to use it some of the listeners properly may require some additional knowledge. In this post, I want to talk specifically about the pre update hooks that NHibernate provides.</p>  <p>Those allow us to execute our custom logic before the update / insert is sent to the database. On the face of it, it seems like a trivial task, but there are some subtleties that we need to consider when we use them.</p>  <p>Those hooks run awfully late in the processing pipeline, that is part of what make them so useful, but because they run so late, when we use them, we have to be aware to what we are doing with them and how it impacts the rest of the application.</p>  <p>Those two interface define only one method each:</p>  <p>bool OnPreUpdate(PreUpdateEvent @event) and bool OnPreInsert(PreInsertEvent @event), respectively.</p>  <p>Each of those accept an event parameter, which looks like this:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2BCDB47B.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="217" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_30D5138C.png" width="331" border="0" /></a> </p>  <p>Notice that we have <em>two</em> representations of the entity in the event parameter. One is the entity instance, located in the Entity property, but the second is the dehydrated entity <em>state</em>, which is located in the State property.</p>  <p>In NHibernate, when we talk about the state of an entity we usually mean the values that we loaded or saved from the database, not the entity instance itself. Indeed, the State property is an array that contains the parameters that we will push into the ADO.Net Command that will be executed as soon as the event listener finish running. </p>  <p>Updating the state array is a little bit annoying, since we have to go through the persister to find appropriate index in the state array, but that is easy enough.</p>  <p>Here comes the subtlety, however. We <em>cannot</em> just update the entity state. The reason for that is quite simple, the entity state was extracted from the entity and place in the entity state, any change that we make to the entity state would <em>not </em>be reflected in the entity itself. That may cause the database row and the entity instance to go out of sync, and make cause a whole bunch of <em>really</em> nasty problems that you wouldn’t know where to begin debugging.</p>  <p>You have to update both the entity and the entity state in these two event listeners (this is not necessarily the case in other listeners, by the way). Here is a simple example of using these event listeners:</p>  <blockquote>   <pre><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> AuditEventListener : IPreUpdateEventListener, IPreInsertEventListener
{
	<span style="color: #0000ff">public</span> <span style="color: #0000ff">bool</span> OnPreUpdate(PreUpdateEvent @<span style="color: #0000ff">event</span>)
	{
		var audit = @<span style="color: #0000ff">event</span>.Entity <span style="color: #0000ff">as</span> IHaveAuditInformation;
		<span style="color: #0000ff">if</span> (audit == <span style="color: #0000ff">null</span>)
			<span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>;

		var time = DateTime.Now;
		var name = WindowsIdentity.GetCurrent().Name;

		Set(@<span style="color: #0000ff">event</span>.Persister, @<span style="color: #0000ff">event</span>.State, &quot;<span style="color: #8b0000">UpdatedAt</span>&quot;, time);
		Set(@<span style="color: #0000ff">event</span>.Persister, @<span style="color: #0000ff">event</span>.State, &quot;<span style="color: #8b0000">UpdatedBy</span>&quot;, name);

		audit.UpdatedAt = time;
		audit.UpdatedBy = name;

		<span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>;
	}

	<span style="color: #0000ff">public</span> <span style="color: #0000ff">bool</span> OnPreInsert(PreInsertEvent @<span style="color: #0000ff">event</span>)
	{
		var audit = @<span style="color: #0000ff">event</span>.Entity <span style="color: #0000ff">as</span> IHaveAuditInformation;
		<span style="color: #0000ff">if</span> (audit == <span style="color: #0000ff">null</span>)
			<span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>;


		var time = DateTime.Now;
		var name = WindowsIdentity.GetCurrent().Name;

		Set(@<span style="color: #0000ff">event</span>.Persister, @<span style="color: #0000ff">event</span>.State, &quot;<span style="color: #8b0000">CreatedAt</span>&quot;, time);
		Set(@<span style="color: #0000ff">event</span>.Persister, @<span style="color: #0000ff">event</span>.State, &quot;<span style="color: #8b0000">UpdatedAt</span>&quot;, time);
		Set(@<span style="color: #0000ff">event</span>.Persister, @<span style="color: #0000ff">event</span>.State, &quot;<span style="color: #8b0000">CreatedBy</span>&quot;, name);
		Set(@<span style="color: #0000ff">event</span>.Persister, @<span style="color: #0000ff">event</span>.State, &quot;<span style="color: #8b0000">UpdatedBy</span>&quot;, name);

		audit.CreatedAt = time;
		audit.CreatedBy = name;
		audit.UpdatedAt = time;
		audit.UpdatedBy = name;

		<span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>;
	}

	<span style="color: #0000ff">private</span> <span style="color: #0000ff">void</span> Set(IEntityPersister persister, <span style="color: #0000ff">object</span>[] state, <span style="color: #0000ff">string</span> propertyName, <span style="color: #0000ff">object</span> <span style="color: #0000ff">value</span>)
	{
		var index = Array.IndexOf(persister.PropertyNames, propertyName);
		<span style="color: #0000ff">if</span> (index == -1)
			<span style="color: #0000ff">return</span>;
		state[index] = <span style="color: #0000ff">value</span>;
	}
}</pre>
</blockquote>

<p>And the result is <em>pretty</em> neat, I must say.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate ipreupdateeventlistener amp ipreinserteventlistener]]></post-name>
      <categories>
        <category ref="1047" />
      </categories>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="267" date-created="2009-04-30T06:55:00" date-modified="2009-04-30T06:55:00" approved="true" post-url="/blogs/nhibernate/archive/2009/04/30/nhibernate-the-difference-between-get-load-and-querying-by-id.aspx" type="normal" hasexcerpt="false" views="4311">
      <title type="text"><![CDATA[NHibernate – The difference between Get, Load and querying by id]]></title>
      <content type="text"><![CDATA[<p>One of the more common mistakes that I see people doing with NHibernate is related to how they are loading entities by the primary key. This is because there are important differences between the three options.</p>  <p>The most common mistake that I see is using a query to load by id. in particular when using Linq for NHibernate.</p>  <blockquote>   <pre>var customer = (
	select customer from s.Linq&lt;Customer&gt;()
	where customer.Id = customerId
	select customer
	).FirstOrDefault();</pre>
</blockquote>

<p>Every time that I see something like that, I wince a little inside. The reason for that is quite simple. This is doing a query by primary key. The key word here is a query.</p>

<p>This means that we have to hit the database in order to get a result for this query. Unless you are using the query cache (which by default you won’t), this force a query on the database, bypassing both the first level identity map and the second level cache.</p>

<p>Get&#160; and Load are here for a reason, they provide a way to get an entity by primary key. That is important for several aspects, most importantly, it means that NHibernate can apply quite a few optimizations for this process.</p>

<p>But there is another side to that, there is a significant (and subtle) difference between Get and Load.</p>

<p>Load will <em>never</em> return null. It will always return an entity or throw an exception. Because that is the contract that we have we it, it is permissible for Load to <em>not</em> hit the database when you call it, it is free to return a proxy instead.</p>

<p>Why is this useful? Well, if you <em>know</em> that the value exist in the database, and you don’t want to pay the extra select to have that, but you want to get that value so we can add that reference to an object, you can use Load to do so:</p>

<blockquote>
  <pre>s.Save(
	<span style="color: #0000ff">new</span> Order
	{
		Amount = amount,
		customer = s.Load&lt;Customer&gt;(1)
	}
);</pre>
</blockquote>

<p>The code above will <em>not</em> result in a select to the database, but when we commit the transaction, we will set the CustomerID column to 1. This is how NHibernate maintain the OO facade when giving you the same optimization benefits of working directly with the low level API.</p>

<p>Get, however, is different. Get will return null if the object does not exist. Since this is its contract, it <em>must </em>return either the entity or null, so it cannot give you a proxy if the entity is not known to exist. Get will usually result in a select against the database, but it will check the session cache and the 2nd level cache first to get the values first.</p>

<p>So, next time that you need to get some entity by its primary key, just remember the differences…</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate the difference between get load and querying by id]]></post-name>
      <categories>
        <category ref="1112" />
      </categories>
      <trackbacks>
        <trackback id="1097" date-created="2014-09-26T21:29:37" date-modified="2014-09-26T21:29:37" approved="true" url="http://www.e-anim.com/test/drag001/wonderlandtoyschnauzers.com/cgi-bin/fpg.cgi?a%5B%5D=more+about+expedia+last+minute+packages%3B+%3Ca+href%3Dhttp%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DY-tG3bqA2Rc%3Eclick+through+the+up+coming+web+site%3C%2Fa%3E%2C">
          <title type="text"><![CDATA[My Source]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="268" date-created="2009-05-01T08:28:00" date-modified="2009-05-01T08:28:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/01/nhibernate-validator.aspx" type="normal" hasexcerpt="false" views="6067">
      <title type="text"><![CDATA[NHibernate Validator]]></title>
      <content type="text"><![CDATA[<p>Validation is one of those things that goes hand in hand with data access. I guess it is not much of surprise that one of the contrib projects for NHibernate is extensive validation support.</p>  <p>True, there are about as many validation frameworks as there are ToDo applications, but NHibernate Validator bring something special to the table, it brings tight integration with NHibernate itself and:</p>  <blockquote>   <p>“…multi-layered data validation, where constraints are expressed in a single place and checked in various different layers of the application.”</p> </blockquote>  <p>I am sorry, I just love this quote. :-)</p>  <p>Anyway, let me jump right it and show you what I mean by that.</p>  <p>We can initialize the validation framework using <a href="http://nhforge.org/wikis/validator/nhibernate-validator-1-0-0-documentation.aspx">several ways</a>, but probably the easier would be:</p>  <blockquote>   <pre>var configuration = <span style="color: #0000ff">new</span> Configuration()
	.Configure(&quot;<span style="color: #8b0000">hibernate.cfg.xml</span>&quot;);

var engine = <span style="color: #0000ff">new</span> ValidatorEngine();
engine.Configure(<span style="color: #0000ff">new</span> NHVConfigurationBase());

ValidatorInitializer.Initialize(configuration, engine);</pre>
</blockquote>

<p>And now, all we need to do is set the validation attributes on our the entities, and we are done:</p>

<blockquote>
  <pre>[NotNullNotEmpty]
[Length(25)]
<span style="color: #0000ff">public</span> <span style="color: #0000ff">virtual</span> <span style="color: #0000ff">string</span> Title</pre>
</blockquote>

<p>At this point, several very interesting things are going to happen. First, if we ask NHibernate to generate the schema for us we are going to get the following:</p>

<table cellspacing="0" cellpadding="2" width="400" border="0"><tbody>
    <tr>
      <td valign="top" width="200">Before using NHV</td>

      <td valign="top" width="200">After using NHV</td>
    </tr>

    <tr>
      <td valign="top" width="200">
        <pre><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=create&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">create</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=table&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">table</a> Blogs (
  Id <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">INT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=IDENTITY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">IDENTITY</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NOT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NOT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NULL</a>,
   <strong>Title </strong><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NVARCHAR&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99"><strong>NVARCHAR</strong></a><strong>(255) </strong><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99"><strong>null</strong></a><strong>,</strong>
   Subtitle <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NVARCHAR&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NVARCHAR</a>(255) <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">null</a>,
   AllowsComments <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=BIT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">BIT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">null</a>,
   CreatedAt <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=DATETIME&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">DATETIME</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">null</a>,
   <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=primary&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">primary</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=key&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">key</a> (Id)
)</pre>
      </td>

      <td valign="top" width="200">
        <pre><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=create&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">create</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=table&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">table</a> Blogs (
   Id <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=INT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">INT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=IDENTITY&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">IDENTITY</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NOT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NOT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NULL&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NULL</a>,
   <strong>Title </strong><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NVARCHAR&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99"><strong>NVARCHAR</strong></a><strong>(25) </strong><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=not&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99"><strong>not</strong></a><strong> </strong><a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99"><strong>null</strong></a><strong>,</strong>
   Subtitle <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=NVARCHAR&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">NVARCHAR</a>(255) <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">null</a>,
   AllowsComments <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=BIT&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">BIT</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">null</a>,
   CreatedAt <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=DATETIME&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">DATETIME</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=null&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">null</a>,
   <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=primary&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">primary</a> <a style="color: #0000ff" href="http://search.microsoft.com/default.asp?so=RECCNT&amp;siteid=us%2Fdev&amp;p=1&amp;nq=NEW&amp;qu=key&amp;IntlSearch=&amp;boolean=PHRASE&amp;ig=01&amp;i=09&amp;i=99">key</a> (Id)
)</pre>
      </td>
    </tr>
  </tbody></table>

<p>Note the title column, where before we used the default values (null and 255) we are now using the values defined in the validation scheme. That is what we mean when we say that we can get pretty multi layered data validation.</p>

<p>That is not the end of it, however, NHibernate Validator is hooking up into the NHibernate engine, and if we tried to save the following, we will get a validation exception:</p>

<blockquote>
  <pre>s.Save(<span style="color: #0000ff">new</span> Blog
{
	Title = <span style="color: #0000ff">new</span> <span style="color: #0000ff">string</span>('*',255),
});</pre>
</blockquote>

<p>And, obviously, we support a way to extract all the validation errors from the entity:</p>

<blockquote>
  <pre>var invalidValues = engine.Validate(blog);
<span style="color: #0000ff">foreach</span> (var invalidValue <span style="color: #0000ff">in</span> invalidValues)
{
	Console.WriteLine(
        &quot;<span style="color: #8b0000">{0}: {1}</span>&quot;,
		invalidValue.PropertyName, 
		invalidValue.Message);
}</pre>
</blockquote>

<p>NHibernate Validator also support all the other things that you would expect from validation frameworks, the ability to create your own constraints (including the ability to embed them in the database schema!), i18n, XML only configuration, if you want to keep your entities clear of attributes, etc.</p>

<p>This has been truly just a tidbit, to whet your appetite. </p>

<p>You can learn more about NH Validator <a href="http://nhforge.org/wikis/validator/nhibernate-validator-1-0-0-documentation.aspx">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1129" />
      </categories>
      <comments>
        <comment id="322" date-created="2009-05-20T01:50:23" date-modified="2009-05-20T01:50:23" approved="true" user-name="playtime" user-url="http://nhforge.org/members/playtime/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator]]></title>
          <content type="text"><![CDATA[What is the advantage of using this over the MS Patterns and Practices Validation Block?]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="262" date-created="2009-05-04T08:33:00" date-modified="2009-05-04T08:33:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/04/nhibernate-filters.aspx" type="normal" hasexcerpt="false" views="4738">
      <title type="text"><![CDATA[NHibernate Filters]]></title>
      <content type="text"><![CDATA[<p>One of the more interesting ability of NHibernate is to selectively filter records based on some global filters. This allow us to very easily create global where clauses that we can flip on and off at the touch of a switch. </p>
<p>Let us take a look at see what I mean.</p>
<p>We define the filter effectiveDate:</p>
<blockquote>
<pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">filter</span>-<span style="color: #ff0000">def</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"effectiveDate"</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">filter</span>-<span style="color: #ff0000">param</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"asOfDate"</span> <span style="color: #ff0000">type</span>=<span style="color: #0000ff">"System.DateTime"</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">filter</span>-def<span style="color: #0000ff">&gt;</span></pre>
</blockquote>
<p>A filter definition is most commonly just a set of parameters that we can define, which will later be applied to in the appropriate places. An example of an appropriate place would be Post.PostedAt, we don&rsquo;t want to show any post that was posted at a later time than the effective date. We can define this decision in the mapping, like this:</p>
<blockquote>
<pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">class</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"Post"</span>
		   <span style="color: #ff0000">table</span>=<span style="color: #0000ff">"Posts"</span><span style="color: #0000ff">&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">id</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"Id"</span><span style="color: #0000ff">&gt;</span>
			<span style="color: #0000ff">&lt;</span><span style="color: #800000">generator</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">"identity"</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;/</span><span style="color: #800000">id</span><span style="color: #0000ff">&gt;</span>
		
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"Title"</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"Text"</span><span style="color: #0000ff">/&gt;</span>
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">property</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"PostedAt"</span><span style="color: #0000ff">/&gt;</span>
		
		
		<span style="color: #0000ff">&lt;</span><span style="color: #800000">filter</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"effectiveDate"</span>
						<span style="color: #ff0000">condition</span>=<span style="color: #0000ff">":asOfDate &gt;= PostedAt"</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;/</span><span style="color: #800000">class</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>
<p>And now we can start play:</p>
<blockquote>
<pre>s.CreateCriteria&lt;Post&gt;()
	.SetMaxResults(5)
	.List();

s.EnableFilter("<span style="color: #8b0000">effectiveDate</span>")
	.SetParameter("<span style="color: #8b0000">asOfDate</span>", DateTime.Now);

s.CreateCriteria&lt;Post&gt;()
	.SetMaxResults(5)
	.List();</pre>
</blockquote>
<p>Who do you think this will generate?</p>
<p>Well, the first query is pretty easy to understand:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_52EF04CB.png"><img border="0" width="373" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_58CEC9C6.png" alt="image" height="136" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" title="image" /></a> </p>
<p>But the second one is much more interesting:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_23589852.png"><img border="0" width="447" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_10A62F4C.png" alt="image" height="152" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" title="image" /></a> </p>
<p>We have selectively applied the filter so only posted posted after the 16th can be seen.</p>
<p>This is a very powerful capability to have, since we can use this globally, to define additional condition. For that matter, we can apply it in multiple places, so comments would also be so limited, etc.</p>
<p>For that matter, we can also put filters on associations as well:</p>
<blockquote>
<pre><span style="color: #0000ff">&lt;</span><span style="color: #800000">set</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"Comments"</span>
	 <span style="color: #ff0000">table</span>=<span style="color: #0000ff">"Comments"</span><span style="color: #0000ff">&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">key</span> <span style="color: #ff0000">column</span>=<span style="color: #0000ff">"PostId"</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">one</span>-<span style="color: #ff0000">to</span>-<span style="color: #ff0000">many</span> <span style="color: #ff0000">class</span>=<span style="color: #0000ff">"Comment"</span><span style="color: #0000ff">/&gt;</span>
	<span style="color: #0000ff">&lt;</span><span style="color: #800000">filter</span> <span style="color: #ff0000">name</span>=<span style="color: #0000ff">"effectiveDate"</span>
					<span style="color: #ff0000">condition</span>=<span style="color: #0000ff">":asOfDate &gt;= PostedAt"</span><span style="color: #0000ff">/&gt;</span>
<span style="color: #0000ff">&lt;/</span><span style="color: #800000">set</span><span style="color: #0000ff">&gt;</span></pre>
</blockquote>
<p>And trying to access the Comments collection on a Post would generate the following SQL when the filter is active:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0FD05A13.png"><img border="0" width="509" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_6349BADD.png" alt="image" height="204" style="border-right: 0px; border-top: 0px; display: inline; border-left: 0px; border-bottom: 0px" title="image" /></a> </p>
<p>Nice, isn&rsquo;t it?</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate filters]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1026" />
        <category ref="1050" />
        <category ref="1112" />
      </categories>
      <comments>
        <comment id="290" date-created="2009-05-04T16:10:52" date-modified="2009-05-04T16:10:52" approved="true" user-name="Fred Morrison" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Filters]]></title>
          <content type="text"><![CDATA[Please repost this article.  The condition definition in the XML of the first example is unreadable because it is right-justified and cut off.  The second one is also difficult to read because of a similar right-justification issue.]]></content>
        </comment>
        <comment id="291" date-created="2009-05-04T22:51:04" date-modified="2009-05-04T22:51:04" approved="true" user-name="Ayende" user-url="http://nhforge.org/members/Ayende/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Filters]]></title>
          <content type="text"><![CDATA[Fred,
They are not right justified, they are indented.
You can also try reading it here:
http://ayende.com/Blog/archive/2009/05/04/nhibernate-filters.aspx
]]></content>
        </comment>
        <comment id="298" date-created="2009-05-06T18:57:09" date-modified="2009-05-06T18:57:09" approved="true" user-name="Fred Morrison" user-url="http://nhforge.org/members/fmorriso/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Filters]]></title>
          <content type="text"><![CDATA[Thanks.  The alternate location is much more readable.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2197" date-created="2008-09-04T15:48:22" date-modified="2009-08-19T05:01:00" approved="true" email="ayende@ayende.com">
          <title type="text"><![CDATA[Ayende]]></title>
        </author>
      </authors>
    </post>
    <post id="293" date-created="2009-05-05T13:54:00" date-modified="2009-05-05T13:54:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/05/nh2-1-executable-hql.aspx" type="normal" hasexcerpt="false" views="5557">
      <title type="text"><![CDATA[NH2.1: Executable HQL]]></title>
      <content type="text"><![CDATA[<p>[<a href="http://fabiomaulo.blogspot.com/">from my blog</a>]</p>
<p>Mapping:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">SimpleClass</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">TSIMPLE</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">id </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">native</span>" <span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>Class:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">SimpleClass<br /></span>{<br />  <span style="color: blue">public virtual string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>DB fill:</p>
<pre class="code"><span style="color: blue">using </span>(<span style="color: blue">var </span>s = OpenSession())<br /><span style="color: blue">using </span>(<span style="color: blue">var </span>tx = s.BeginTransaction())<br />{<br />  s.Save(<span style="color: blue">new </span><span style="color: #2b91af">SimpleClass </span>{Description = <span style="color: #a31515">"simple1"</span>});<br />  s.Save(<span style="color: blue">new </span><span style="color: #2b91af">SimpleClass </span>{Description = <span style="color: #a31515">"simple2"</span>});<br />  tx.Commit();<br />}</pre>
<p>So far doing this:</p>
<pre class="code"><span style="color: blue">using </span>(<span style="color: blue">var </span>s = OpenSession())<br /><span style="color: blue">using </span>(<span style="color: blue">var </span>tx = s.BeginTransaction())<br />{<br />  s.Delete(<span style="color: #a31515">"from SimpleClass"</span>);<br />  tx.Commit();<br />}</pre>
<p>the log is:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/OldDeleteLog_5F00_05C43778.png"><img border="0" width="407" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/OldDeleteLog_5F00_thumb_5F00_2C924DB8.png" alt="OldDeleteLog" height="321" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="OldDeleteLog" /></a> <a href="http://11011.net/software/vspaste"></a></p>
<p>But from today (the day of worker), doing this:</p>
<pre class="code"><span style="color: blue">using </span>(<span style="color: blue">var </span>s = OpenSession())<br /><span style="color: blue">using </span>(<span style="color: blue">var </span>tx = s.BeginTransaction())<br />{<br />  s.CreateQuery(<span style="color: #a31515">"delete from SimpleClass"</span>).ExecuteUpdate();<br />  tx.Commit();<br />}</pre>
<p>the log is :<a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NewDeleteLog_5F00_653CF7C5.png"><img border="0" width="228" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/NewDeleteLog_5F00_thumb_5F00_20FC9079.png" alt="NewDeleteLog" height="64" style="border-top-width: 0px; display: block; border-left-width: 0px; float: none; border-bottom-width: 0px; margin-left: auto; margin-right: auto; border-right-width: 0px" title="NewDeleteLog" /></a> </p>
<p>&nbsp;</p>
<p>what it mean is clear, no ?&nbsp; ;)</p>
<p>Soon some news about bulk insert and update, in HQL.</p>
<p>Now you know <span style="text-decoration: underline;">one of the reasons</span> because NH2.1.0 release, was postponed.</p>]]></content>
      <post-name type="text"><![CDATA[nh2 1 executable hql]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1036" />
        <category ref="1089" />
        <category ref="1092" />
        <category ref="1112" />
        <category ref="1122" />
      </categories>
      <comments>
        <comment id="297" date-created="2009-05-06T18:55:39" date-modified="2009-05-06T18:55:39" approved="true" user-name="Fred Morrison" user-url="http://nhforge.org/members/fmorriso/default.aspx">
          <title type="text"><![CDATA[re: NH2.1: Executable HQL]]></title>
          <content type="text"><![CDATA[A welcome addition.  Good job.  Have a favorite adult beverage and relax for a few hours.]]></content>
        </comment>
        <comment id="299" date-created="2009-05-07T08:37:58" date-modified="2009-05-07T08:37:58" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: NH2.1: Executable HQL]]></title>
          <content type="text"><![CDATA[Good that 2.1 GA was postponed for this, but any news on how it is coming along? Is there an expected date?]]></content>
        </comment>
        <comment id="300" date-created="2009-05-07T12:46:00" date-modified="2009-05-07T12:46:00" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NH2.1: Executable HQL]]></title>
          <content type="text"><![CDATA[not only for this...."one of the reasons" mean that there are some other but it is a matter of the main team.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="302" date-created="2009-05-07T19:17:12" date-modified="2009-05-07T19:17:12" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/05/07/new-kid-on-the-block-and-some-info-on-linq-to-nhibernate.aspx">
          <title type="text"><![CDATA[New Kid on the Block.  And some info on Linq to NHibernate]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="301" date-created="2009-05-07T18:52:00" date-modified="2009-05-07T18:52:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/07/new-kid-on-the-block-and-some-info-on-linq-to-nhibernate.aspx" type="normal" hasexcerpt="false" views="4347">
      <title type="text"><![CDATA[New Kid on the Block.  And some info on Linq to NHibernate]]></title>
      <content type="text"><![CDATA[<p>This is my first post on this site as an NH committer, and I'm very pleased to be part of the team helping move NH forward for the benefit of everyone. &nbsp;Specifically, I've spent the last few months working semi-full time on helping to build a full Linq-to-NHibernate implementation. &nbsp;The bulk of the effort so far has been porting over the Hibernate ANTLR-based HQL parser - see <a href="http://blogs.imeta.co.uk/sstrong/archive/2009/02/22/617.aspx">here</a> for a fairly detailed description of the work that I've been doing. &nbsp;Progress updates so far can be found <a href="http://blogs.imeta.co.uk/sstrong/archive/2009/03/09/628.aspx">here</a>, <a href="http://blogs.imeta.co.uk/sstrong/archive/2009/04/16/680.aspx">here</a> and <a href="http://blogs.imeta.co.uk/sstrong/archive/2009/04/27/688.aspx">here</a>.</p>
<p>For those that don't want to follow all those links, the summary is that the AST parser is largely done (and already being used to great advantage on <a href="/blogs/nhibernate/archive/2009/05/05/nh2-1-executable-hql.aspx">non-Linq related work by Fabio</a>). &nbsp;I'm currently working through building a basic Linq provider. &nbsp;Based on extensive blogs from <a href="http://blogs.msdn.com/mattwar/">Matt Warren</a> &amp; <a href="http://weblogs.asp.net/FBouma/">Frans Bouma</a>, I'm fully expecting to hit a couple of fairly big walls whilst doing this, and the chaps at <a href="http://www.rubicon.eu/de/Home/Default.aspx">Rubicon</a> have a product called <a href="http://www.re-motion.org/">re-linq</a> which may assist with effort. &nbsp;Once I see exactly where the pain points lie, I'll be in a good position to evaluate how to move forward.</p>
<p>Everyone is bound to want to know when this is going to be ready for use - that's a real hard thing to answer right now. &nbsp;It's difficult to foresee exactly how many dragons lie in between me and the goal, plus knowing exactly how much time I can spend on the project is hard. &nbsp;Personally, I'd like to have something looking respectable by June, but don't bet your house on it :)</p>
<p>Anyhow, it's great to be a part of this fantastic product, and I hope the my contribution helps at least some of you out there.</p>
<p>Cheers,</p>
<p>Steve</p>
<p>BTW, as well as this blog, you can also find me at <a href="http://blogs.imeta.co.uk/sstrong">http://blogs.imeta.co.uk/sstrong</a> or on <a href="http://twitter.com/srstrong">http://twitter.com/srstrong</a></p>]]></content>
      <post-name type="text"><![CDATA[new kid on the block and some info on linq to nhibernate]]></post-name>
      <categories>
        <category ref="1130" />
      </categories>
      <comments>
        <comment id="319" date-created="2009-05-18T20:07:09" date-modified="2009-05-18T20:07:09" approved="true" user-name="random0xff" user-url="http://nhforge.org/members/random0xff/default.aspx">
          <title type="text"><![CDATA[re: New Kid on the Block.  And some info on Linq to NHibernate]]></title>
          <content type="text"><![CDATA[Not many comments here...

I just wanted to let you know that I very much appreciate your work! Information about LINQ to NHibernate is hard to find, there are many old blog posts and even abandoned projects/branches out there (on Ayende's blog, on SourceForge). 

I understand from your blog it's a difficult project, best of luck!]]></content>
        </comment>
        <comment id="321" date-created="2009-05-19T23:32:18" date-modified="2009-05-19T23:32:18" approved="true" user-name="Kieran" user-url="http://nhforge.org/members/kieranmaine/default.aspx">
          <title type="text"><![CDATA[re: New Kid on the Block.  And some info on Linq to NHibernate]]></title>
          <content type="text"><![CDATA[This sounds like a good move. How would one get involved with this?]]></content>
        </comment>
        <comment id="397" date-created="2009-06-29T09:49:46" date-modified="2009-06-29T09:49:46" approved="true" user-name="Mendelt" user-url="http://mendeltsiebenga.com">
          <title type="text"><![CDATA[re: New Kid on the Block.  And some info on Linq to NHibernate]]></title>
          <content type="text"><![CDATA[Cool stuff!

How does your work relate to the nhibernate.contrib nhibernate linq provider. Will this eventually replace that implementation or will they be combined?]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="304" date-created="2009-05-08T20:11:56" date-modified="2009-05-08T20:11:56" approved="true" url="http://blogs.ugidotnet.org/makka/archive/2009/05/08/notizie-fresce-su-linq-to-nhibernate.aspx">
          <title type="text"><![CDATA[Notizie fresce su Linq to NHibernate]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2744" date-created="2009-04-30T14:38:23" date-modified="2009-12-17T00:00:43" approved="true" email="steve@srstrong.com">
          <title type="text"><![CDATA[srstrong]]></title>
        </author>
      </authors>
    </post>
    <post id="303" date-created="2009-05-08T13:39:00" date-modified="2009-05-08T13:39:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/08/oh-beautiful-sql.aspx" type="normal" hasexcerpt="false" views="2892">
      <title type="text"><![CDATA[Oh… beautiful SQL]]></title>
      <content type="text"><![CDATA[<p>[<a href="http://fabiomaulo.blogspot.com/" target="_blank">My Blog</a>]</p>
<p>Given a complex mapping like this</p>
<pre class="code"><span style="color:blue;">&lt;</span><span style="color:#a31515;">class </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Animal</span>"<span style="color:blue;">&gt;<br />  &lt;</span><span style="color:#a31515;">id </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">id</span>"<span style="color:blue;">&gt;<br />      &lt;</span><span style="color:#a31515;">generator </span><span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">native</span>"<span style="color:blue;">/&gt;<br />  &lt;/</span><span style="color:#a31515;">id</span><span style="color:blue;">&gt;<br />  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">description</span>"<span style="color:blue;">/&gt;<br />  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">bodyWeight</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">body_weight</span>"<span style="color:blue;">/&gt;<br />  &lt;</span><span style="color:#a31515;">many-to-one </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">mother</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">mother_id</span>"<span style="color:blue;">/&gt;<br />  &lt;</span><span style="color:#a31515;">many-to-one </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">father</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">father_id</span>"<span style="color:blue;">/&gt;<br />  &lt;</span><span style="color:#a31515;">many-to-one </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">zoo</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">zoo_id</span>"<span style="color:blue;">/&gt;<br />  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">serialNumber</span>"<span style="color:blue;">/&gt;<br />  &lt;</span><span style="color:#a31515;">set </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">offspring</span>" <span style="color:red;">order-by</span><span style="color:blue;">=</span>"<span style="color:blue;">father_id</span>"<span style="color:blue;">&gt;<br />      &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">mother_id</span>"<span style="color:blue;">/&gt;<br />      &lt;</span><span style="color:#a31515;">one-to-many </span><span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">Animal</span>"<span style="color:blue;">/&gt;<br />  &lt;/</span><span style="color:#a31515;">set</span><span style="color:blue;">&gt;<br />  &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Reptile</span>"<span style="color:blue;">&gt;<br />      &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">animal</span>"<span style="color:blue;">/&gt;<br />      &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">bodyTemperature</span>"<span style="color:blue;">/&gt;<br />      &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Lizard</span>"<span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">reptile</span>"<span style="color:blue;">/&gt;<br />      &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />  &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />  &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Mammal</span>"<span style="color:blue;">&gt;<br />      &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">animal</span>"<span style="color:blue;">/&gt;<br />      &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">pregnant</span>"<span style="color:blue;">/&gt;<br />      &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">birthdate</span>" <span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">date</span>"<span style="color:blue;">/&gt;<br />      &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">DomesticAnimal</span>"<span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">mammal</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">many-to-one </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">owner</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Cat</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">mammal</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Dog</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">mammal</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />      &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />      &lt;</span><span style="color:#a31515;">joined-subclass </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">Human</span>"<span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">mammal</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">component </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">name</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">first</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">name_first</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">initial</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">name_initial</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">last</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">name_last</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">component</span><span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">nickName</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">height</span>"<span style="color:blue;">/&gt;<br /><br />          &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">intValue</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">floatValue</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">bigDecimalValue</span>"<span style="color:blue;">/&gt;<br />          &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">bigIntegerValue</span>"<span style="color:blue;">/&gt;<br /><br />          &lt;</span><span style="color:#a31515;">bag </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">friends</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">human1</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">many-to-many </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">human2</span>" <span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">Human</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">bag</span><span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">map </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">family</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">human1</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">map-key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">relationship</span>" <span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">string</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">many-to-many </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">human2</span>" <span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">Human</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">map</span><span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">bag </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">pets</span>" <span style="color:red;">inverse</span><span style="color:blue;">=</span>"<span style="color:blue;">true</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">owner</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">one-to-many </span><span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">DomesticAnimal</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">bag</span><span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">set </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">nickNames</span>" <span style="color:red;">lazy</span><span style="color:blue;">=</span>"<span style="color:blue;">false</span>" <span style="color:red;">table</span><span style="color:blue;">=</span>"<span style="color:blue;">human_nick_names</span>" <span style="color:red;">sort</span><span style="color:blue;">=</span>"<span style="color:blue;">natural</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">human</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">element </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">nick_name</span>" <span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">string</span>" <span style="color:red;">not-null</span><span style="color:blue;">=</span>"<span style="color:blue;">true</span>"<span style="color:blue;">/&gt;<br />          &lt;/</span><span style="color:#a31515;">set</span><span style="color:blue;">&gt;<br />          &lt;</span><span style="color:#a31515;">map </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">addresses</span>" <span style="color:red;">table</span><span style="color:blue;">=</span>"<span style="color:blue;">addresses</span>"<span style="color:blue;">&gt;<br />              &lt;</span><span style="color:#a31515;">key </span><span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">human</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">map-key </span><span style="color:red;">type</span><span style="color:blue;">=</span>"<span style="color:blue;">string</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">type</span>"<span style="color:blue;">/&gt;<br />              &lt;</span><span style="color:#a31515;">composite-element </span><span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">Address</span>"<span style="color:blue;">&gt;<br />                  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">street</span>"<span style="color:blue;">/&gt;<br />                  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">city</span>"<span style="color:blue;">/&gt;<br />                  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">postalCode</span>"<span style="color:blue;">/&gt;<br />                  &lt;</span><span style="color:#a31515;">property </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">country</span>"<span style="color:blue;">/&gt;<br />                  &lt;</span><span style="color:#a31515;">many-to-one </span><span style="color:red;">name</span><span style="color:blue;">=</span>"<span style="color:blue;">stateProvince</span>" <span style="color:red;">column</span><span style="color:blue;">=</span>"<span style="color:blue;">state_prov_id</span>" <span style="color:red;">class</span><span style="color:blue;">=</span>"<span style="color:blue;">StateProvince</span>"<span style="color:blue;">/&gt;<br />              &lt;/</span><span style="color:#a31515;">composite-element</span><span style="color:blue;">&gt;<br />          &lt;/</span><span style="color:#a31515;">map</span><span style="color:blue;">&gt;<br />      &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />  &lt;/</span><span style="color:#a31515;">joined-subclass</span><span style="color:blue;">&gt;<br />&lt;/</span><span style="color:#a31515;">class</span><span style="color:blue;">&gt;</span></pre>
<p>Which should be the result of&nbsp;s.CreateQuery(<span style="color:#800000;">"delete Animal"</span>).ExecuteUpdate() ?</p>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>Oh&hellip; beautiful SQL</p>
<p>create table #Animal (id BIGINT not null)&nbsp;</p>
<p>insert into #Animal SELECT animal0_.id as id FROM Animal animal0_</p>
<p>DELETE FROM Human WHERE (mammal) IN (select id from #Animal)<br /><br />DELETE FROM Dog WHERE (mammal) IN (select id from #Animal)<br /><br />DELETE FROM Cat WHERE (mammal) IN (select id from #Animal)<br /><br />DELETE FROM DomesticAnimal WHERE (mammal) IN (select id from #Animal)<br /><br />DELETE FROM Mammal WHERE (animal) IN (select id from #Animal)<br /><br />DELETE FROM Lizard WHERE (reptile) IN (select id from #Animal)<br /><br />DELETE FROM Reptile WHERE (animal) IN (select id from #Animal)<br /><br />DELETE FROM Animal WHERE (id) IN (select id from #Animal)<br /><br />drop table #Animal</p>
<p>Do you see the temp table ? Do you see the order of queries ?</p>
<p><strong>&ldquo;se me cay&oacute; una lagrima&rdquo;</strong></p>]]></content>
      <post-name type="text"><![CDATA[oh beautiful sql]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
        <category ref="1122" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="305" date-created="2009-05-13T05:00:00" date-modified="2009-05-13T05:00:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/13/nhibernate-2-1-0-executable-queries.aspx" type="normal" hasexcerpt="false" views="5232">
      <title type="text"><![CDATA[NHibernate 2.1.0 : Executable queries]]></title>
      <content type="text"><![CDATA[<p>[<a href="http://fabiomaulo.blogspot.com/">My blog</a>]</p>
<p>I&rsquo;m proud to announce NH2.1.0 is passing all tests (same of H3.3.1) for bulk actions using HQL.</p>
<p>Some HQL examples:</p>
<p><span style="color: #800000">insert into Animal (description, bodyWeight, mother) select description, bodyWeight, mother from Human</span></p>
<p><span style="color: #800000">insert into Pickup (id, Vin, Owner) select id, Vin, Owner from Car</span></p>
<p><span style="color: #800000">insert into Animal (description, bodyWeight) select h.description, h.bodyWeight from Human h where h.mother.mother is not null</span></p>
<p><span style="color: #800000">update Human h set h.description = 'updated' where exists (select f.id from h.friends f where f.name.last = 'Public' )</span></p>
<p><span style="color: #800000">update versioned IntegerVersioned set name = :name</span></p>
<p><span style="color: #800000">update Human set name.first = :correction where id = :id</span></p>
<p><span style="color: #800000">update Animal a set a.mother = (from Animal where id = 1) where a.id = 2</span></p>
<p><span style="color: #800000">update Animal set description = :newDesc where description = :desc</span></p>
<p><span style="color: #800000">update Animal set bodyWeight = bodyWeight + :w1 + :w2</span></p>
<p><span style="color: #800000">delete SimpleEntityWithAssociation e where size(e.AssociatedEntities ) = 0 and e.Name like '%'</span></p>
<p><span style="color: #800000">delete Animal where mother is not null</span></p>
<p><span style="color: #800000">delete from EntityWithCrazyCompositeKey e where e.Id.Id = 1 and e.Id.OtherId = 2</span></p>
<p>To understand what that mean think about that all executable-queries are working with &lt;<span style="color: #800000">subclass</span>&gt;, &lt;<span style="color: #800000">joined-subclass</span>&gt;, &lt;<span style="color: #800000">subclass</span>&gt; + &lt;<span style="color: #800000">join</span>&gt;, &lt;<span style="color: #800000">union-subclass</span>&gt;, various POID generators, versioned entities ad son on.</p>
<p>For example using the mapping of <a href="http://fabiomaulo.blogspot.com/2009/05/oh-beautiful-sql.html">this post</a> executing this</p>
<pre class="code"><span style="color: #a31515">insert into Animal (description, bodyWeight) select h.description, h.bodyWeight from Human h where h.mother.mother is not null</span></pre>
<p>the SQL is</p>
<p><span style="font-family: courier new">insert&nbsp; <br />&nbsp;&nbsp;&nbsp; into 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Animal 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( description, body_weight ) select 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; human0_2_.description as col_0_0_, 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; human0_2_.body_weight as col_1_0_&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; from 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Human human0_&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inner join 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mammal human0_1_&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on human0_.mammal=human0_1_.animal&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inner join 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Animal human0_2_&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on human0_.mammal=human0_2_.id, 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Animal animal1_&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; where 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; human0_2_.mother_id=animal1_.id&nbsp; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and ( 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.mother_id is not null 
    <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )</span></p>
<p>&hellip; stock&hellip; stumb&hellip; stumb&hellip; stumb&hellip; stack&hellip; sfrfrfrfrfrfr &hellip; (the sound of &ldquo;goriziana&rdquo;).</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0 executable queries]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1092" />
        <category ref="1112" />
        <category ref="1122" />
      </categories>
      <comments>
        <comment id="343" date-created="2009-05-30T13:39:11" date-modified="2009-05-30T13:39:11" approved="true" user-name="zoechi" user-url="http://devde.bewellup.com">
          <title type="text"><![CDATA[re: NHibernate 2.1.0 : Executable queries]]></title>
          <content type="text"><![CDATA[I found that NH 2.1.0 1003 has problems when an entity class is named "Object".
I got an ANTLR exeption. Sorry but I don't have more specific exeption info at hand.
I know Object is a suboptimal name for an Entity, but this was not my decision. After renaming the class it worked fine.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="433" date-created="2009-07-20T23:44:35" date-modified="2009-07-20T23:44:35" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="306" date-created="2009-05-17T19:56:00" date-modified="2009-05-17T19:56:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/17/nhibernate-2-1-0-hql-with-clause.aspx" type="normal" hasexcerpt="false" views="14949">
      <title type="text"><![CDATA[NHibernate 2.1.0: HQL With clause]]></title>
      <content type="text"><![CDATA[<p>[<a href="http://fabiomaulo.blogspot.com/" target="_blank">My blog</a>]</p>
<p>A simple SQL:</p>
<p><span style="color: #800080">SELECT * FROM Animal AS a1 </span></p>
<p><span style="color: #800080">INNER JOIN Animal AS a2 on a1.mother_id = a2.ID and a1.body_weight &lt; :aLimit</span></p>
<p>Another:</p>
<p><span style="color: #800080">SELECT * FROM Animal AS a1 INNER JOIN Animal AS a2 on a1.mother_id = a2.ID </span></p>
<p><span style="color: #800080">WHERE a1.body_weight &lt; :aLimit</span></p>
<p>Which is the difference in term of results ? There isn&rsquo;t.</p>
<p>Some DB engine don&rsquo;t make difference, between the two SQLs, even in term of execution plan but&hellip; you know, there are some RDBMS not so smart (guess which one [:#]&nbsp;).</p>
<p>With the new HQL parser, based on ANTLR, we are supporting a new clause named &ldquo;with&rdquo;.</p>
<p>The HQL:</p>
<p><span style="color: #800000">from Animal a inner join a.mother as m <strong><span style="color: #800000">with</span></strong> m.bodyWeight &lt; :someLimit</span></p>
<p>The result SQL using <a href="http://fabiomaulo.blogspot.com/2009/05/oh-beautiful-sql.html">this mapping</a> :</p>
<p><span style="color: #800080">select      <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.id as id14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.id as id14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.description as descript2_14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.body_weight as body3_14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.mother_id as mother4_14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.father_id as father5_14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.zoo_id as zoo6_14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_.serialNumber as serialNu7_14_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_1_.bodyTemperature as bodyTemp2_15_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_3_.pregnant as pregnant17_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_3_.birthdate as birthdate17_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_4_.owner as owner18_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.name_first as name2_21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.name_initial as name3_21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.name_last as name4_21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.nickName as nickName21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.height as height21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.intValue as intValue21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.floatValue as floatValue21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.bigDecimalValue as bigDecim9_21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal0_7_.bigIntegerValue as bigInte10_21_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_2_.reptile is not null then 2       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_5_.mammal is not null then 5       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_6_.mammal is not null then 6       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_4_.mammal is not null then 4       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_7_.mammal is not null then 7       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_1_.animal is not null then 1       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_3_.animal is not null then 3       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal0_.id is not null then 0       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end as clazz_0_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.description as descript2_14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.body_weight as body3_14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.mother_id as mother4_14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.father_id as father5_14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.zoo_id as zoo6_14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.serialNumber as serialNu7_14_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_1_.bodyTemperature as bodyTemp2_15_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_3_.pregnant as pregnant17_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_3_.birthdate as birthdate17_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_4_.owner as owner18_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.name_first as name2_21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.name_initial as name3_21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.name_last as name4_21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.nickName as nickName21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.height as height21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.intValue as intValue21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.floatValue as floatValue21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.bigDecimalValue as bigDecim9_21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_7_.bigIntegerValue as bigInte10_21_1_,       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_2_.reptile is not null then 2       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_5_.mammal is not null then 5       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_6_.mammal is not null then 6       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_4_.mammal is not null then 4       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_7_.mammal is not null then 7       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_1_.animal is not null then 1       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_3_.animal is not null then 3       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when animal1_.id is not null then 0       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end as clazz_1_       <br />&nbsp;&nbsp;&nbsp; from       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Animal animal0_       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reptile animal0_1_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_1_.animal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lizard animal0_2_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_2_.reptile       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mammal animal0_3_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_3_.animal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DomesticAnimal animal0_4_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_4_.mammal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cat animal0_5_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_5_.mammal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dog animal0_6_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_6_.mammal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Human animal0_7_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.id=animal0_7_.mammal       <br />&nbsp;&nbsp;&nbsp; inner join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Animal animal1_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.mother_id=animal1_.id       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and (       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.body_weight&lt;@p0       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Reptile animal1_1_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_1_.animal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lizard animal1_2_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_2_.reptile       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mammal animal1_3_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_3_.animal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DomesticAnimal animal1_4_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_4_.mammal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cat animal1_5_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_5_.mammal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dog animal1_6_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_6_.mammal       <br />&nbsp;&nbsp;&nbsp; left outer join       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Human animal1_7_       <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal1_.id=animal1_7_.mammal;       <br />&nbsp;&nbsp;&nbsp; @p0 = 1</span></p>
<p>First&hellip; easy HQL with complex mapping mean complex SQL but&hellip; not a big pain for NH&rsquo;s users [;)]</p>
<p>Note this:</p>
<p><strong><span style="color: #800080">inner join        <br />&nbsp;&nbsp;&nbsp; Animal animal1_         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on animal0_.mother_id=animal1_.id         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and (         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; animal1_.body_weight&lt;@p0         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )</span> </strong></p>
<p>stock_stack&hellip;&hellip;stumb&hellip;sfrfrfrfrfrfr (biglia, sponda e filotto).</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0 hql with clause]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1092" />
        <category ref="1122" />
      </categories>
      <comments>
        <comment id="307" date-created="2009-05-17T22:42:34" date-modified="2009-05-17T22:42:34" approved="true" user-name="jsevcik" user-url="http://nhforge.org/members/jsevcik/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0: HQL With clause]]></title>
          <content type="text"><![CDATA["there are some RDBMS not so smart (guess which one)"
Which one ? :)]]></content>
        </comment>
        <comment id="337" date-created="2009-05-28T09:19:59" date-modified="2009-05-28T09:19:59" approved="true" user-name="gunteman" user-url="http://nhforge.org/members/gunteman/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0: HQL With clause]]></title>
          <content type="text"><![CDATA[The real relevance comes with an OUTER JOIN, doesn't it?]]></content>
        </comment>
        <comment id="338" date-created="2009-05-28T12:57:46" date-modified="2009-05-28T12:57:46" approved="true" user-name="bunceg" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate 2.1.0: HQL With clause]]></title>
          <content type="text"><![CDATA[umm... sorry am I missing something?

Very impressive SQL generation but what's the difference between WITH and WHERE in this case?]]></content>
        </comment>
        <comment id="339" date-created="2009-05-28T13:52:13" date-modified="2009-05-28T13:52:13" approved="true" user-name="Min.Han" user-url="http://nhforge.org/members/Min.Han/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0: HQL With clause]]></title>
          <content type="text"><![CDATA[Thank you for the WITH clause.

@bunceg, WITH let's you specify additional clauses on the JOINS. There are certain cases where you want to be able to do that.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="432" date-created="2009-07-20T23:44:33" date-modified="2009-07-20T23:44:33" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="308" date-created="2009-05-18T04:31:00" date-modified="2009-05-18T04:31:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/18/nhibernate-validator-quickstart.aspx" type="normal" hasexcerpt="false" views="7029">
      <title type="text"><![CDATA[NHibernate Validator Quickstart]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" /></p>
<p>The NHibernate Validator Team had prepared examples to you be able to use this validation framework in a easy way. With four examples we are covering the following topics:</p>
<p>&nbsp;</p>
<h3>1) Winforms</h3>
<p>In this example you will how you can easily integrate NHibernate Validator and some helper clases with System.Windows.Forms.</p>
<h3>2) NHibernate Integration</h3>
<p>Trying to integrate NHibernate Validator with NHibernate? Not a problem. In this example you will how really get these 2 great frameworks working together. NHibernate Validator let you intercept Saves and Updates from NHibernate validating your entities before these changes take place. Note you have to create a database based on the configured connection string.</p>
<h3>3) Asp.Net MVC</h3>
<p>Asp.Net MVC has a cool way to add validation errors from model and display them all into the View. This example cover the easy integration between these frameworks. Note, you need Asp.Net MVC installed into your machine.<a title="Download Asp.net MVC" href="http://www.asp.net/mvc/">Download Asp.net MVC</a></p>
<h3>4) Entity Validator</h3>
<p>Sometimes you need to validate a property which depends of another(s) property(ies). The most common example is when you have to validate a range of dates. This example cover this funcionality and show to us how to configurate it using attributes, xml and fluent.</p>
<p>&nbsp;</p>
<h2><a href="https://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=275108">Download it here</a></h2>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator quickstart]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1129" />
        <category ref="1143" />
        <category ref="1144" />
      </categories>
      <comments>
        <comment id="315" date-created="2009-05-18T18:12:44" date-modified="2009-05-18T18:12:44" approved="true" user-name="sravansurabhi" user-url="http://nhforge.org/members/sravansurabhi/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator Quickstart]]></title>
          <content type="text"><![CDATA[This is really good. Just curious to know when can we expect the Validation Framework to work with WPF]]></content>
        </comment>
        <comment id="316" date-created="2009-05-18T18:22:13" date-modified="2009-05-18T18:22:13" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator Quickstart]]></title>
          <content type="text"><![CDATA[NHV is ready, somebody with WPF skills has to write an example/framework on top NHV to support integration. Btw, without a framework you can still using NHV on WPF.]]></content>
        </comment>
        <comment id="317" date-created="2009-05-18T18:47:59" date-modified="2009-05-18T18:47:59" approved="true" user-name="sravansurabhi" user-url="http://nhforge.org/members/sravansurabhi/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator Quickstart]]></title>
          <content type="text"><![CDATA[Thanks a lot. It will be good if we have an example similar to WinForms example.]]></content>
        </comment>
        <comment id="318" date-created="2009-05-18T18:50:29" date-modified="2009-05-18T18:50:29" approved="true" user-name="sravansurabhi" user-url="http://nhforge.org/members/sravansurabhi/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator Quickstart]]></title>
          <content type="text"><![CDATA[NHibernate.Validator.Binding project in winForms exampe works only with WinForms. I am expecting a similar project for WPF.]]></content>
        </comment>
        <comment id="543" date-created="2009-11-16T06:27:16" date-modified="2009-11-16T06:27:16" approved="true" user-name="Rodrigo Juarez" user-url="http://nhforge.org/members/Rodrigo-Juarez/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator Quickstart]]></title>
          <content type="text"><![CDATA[The source code for NHibernate.Validator.Binding is only in the example? It will be part of the bin distribution?]]></content>
        </comment>
        <comment id="544" date-created="2009-11-16T10:20:21" date-modified="2009-11-16T10:20:21" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator Quickstart]]></title>
          <content type="text"><![CDATA[It's only in the example and won't be part of the distribution.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="323" date-created="2009-05-21T11:48:00" date-modified="2009-05-21T11:48:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/21/using-the-guid-comb-identifier-strategy.aspx" type="normal" hasexcerpt="false" views="21163">
      <title type="text"><![CDATA[Using The Guid.Comb Identifier Strategy]]></title>
      <content type="text"><![CDATA[<p>As you may have read by now, it's a good idea to <a href="http://ayende.com/Blog/archive/2009/03/20/nhibernate-avoid-identity-generator-when-possible.aspx">avoid identity-style identifier strategies</a> with ORM's.  One of the better alternatives that i kinda like is the guid.comb strategy.  Using regular guids as a primary key value leads to fragmented indexes (due to the randomness of the guid's value) which leads to bad performance.  This is a problem that the guid.comb strategy can solve quite easily for you.
If you want to learn how the guid.comb strategy really works, be sure to check out <a href="http://www.informit.com/articles/article.aspx?p=25862">Jimmy Nilsson's article on it</a>. Basically, this strategy generates sequential guids which solves the fragmented index issue.  You can generate these sequential guids in your database, but the downside of that is that your ORM would still need to insert each record seperately and fetch the generated primary key value each time.  NHibernate includes the guid.comb strategy which will generate the sequential guids before actually inserting the records in your database.
This obviously has some great benefits: 
</p>
<ul>
<li>you don't have to hit the database immediately whenever a record needs to be inserted</li>
<li>you don't need to retrieve a generated primary key value when a record was inserted</li>
<li>you can batch your insert statements</li>
</ul>
<p>
Let's see how we can use this with NHibernate.  First of all, you need to map the identifier of your entity like this:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: blue; }
.cb2 { color: #a31515; }
.cb3 { color: red; }
--></style>
</code></p>
<div class="cf">
<p class="cl"><span class="cb1">&nbsp; &nbsp; &lt;</span><span class="cb2">id</span><span class="cb1"> </span><span class="cb3">name</span><span class="cb1">=</span>"<span class="cb1">Id</span>"<span class="cb1"> </span><span class="cb3">column</span><span class="cb1">=</span>"<span class="cb1">Id</span>"<span class="cb1"> </span><span class="cb3">type</span><span class="cb1">=</span>"<span class="cb1">guid</span>"<span class="cb1"> &gt;</span></p>
<p class="cl"><span class="cb1">&nbsp; &nbsp; &nbsp; &lt;</span><span class="cb2">generator</span><span class="cb1"> </span><span class="cb3">class</span><span class="cb1">=</span>"<span class="cb1">guid.comb</span>"<span class="cb1"> /&gt;</span></p>
<p class="cl"><span class="cb1">&nbsp; &nbsp; &lt;/</span><span class="cb2">id</span><span class="cb1">&gt;</span></p>
</div>
<p>

And that's actually all you have to do.  You don't have to assign the primary key values or anything like that.  You don't need to worry about them at all.  
Take a look at the following test:
<code>
<style type="text/css"><!--
.cf { font-family: Consolas; font-size: 9pt; color: black; background: white; }
.cl { margin: 0px; }
.cb1 { color: #2b91af; }
.cb2 { color: blue; }
.cb3 { color: #a31515; }
.cb4 { color: green; }
--></style>
</code></p>
<div class="cf">
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<span class="cb1">Test</span>]</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">public</span> <span class="cb2">void</span> InsertsAreOnlyExecutedAtTransactionCommit()</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">var</span> insertCountBefore = sessionFactory.Statistics.EntityInsertCount;</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">using</span> (<span class="cb2">var</span> session = sessionFactory.OpenSession())</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">using</span> (<span class="cb2">var</span> transaction = session.BeginTransaction())</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">for</span> (<span class="cb2">int</span> i = 0; i &lt; 50; i++)</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb2">var</span> category = <span class="cb2">new</span> <span class="cb1">ProductCategory</span>(<span class="cb2">string</span>.Format(<span class="cb3">"category {0}"</span>, i + 1));</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb4">// at this point, the entity doesn't have an ID value yet</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">Assert</span>.AreEqual(<span class="cb1">Guid</span>.Empty, category.Id);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; session.Save(category);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb4">// now the entity has an ID value, but we still haven't hit the database yet</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">Assert</span>.AreNotEqual(<span class="cb1">Guid</span>.Empty, category.Id);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb4">// just verifying that we haven't hit the database yet to insert the new categories</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">Assert</span>.AreEqual(insertCountBefore, sessionFactory.Statistics.EntityInsertCount);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; transaction.Commit();</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb4">// only now have the recors been inserted</span></p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class="cb1">Assert</span>.AreEqual(insertCountBefore + 50, sessionFactory.Statistics.EntityInsertCount);</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
<p class="cl">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
</div>
<p>

Interesting, no? The entities have an ID value after they have been 'saved' by NHibernate.  But they haven't actually been saved to the database yet though.  NHibernate always tries to wait as long as possible to hit the database, and in this case it only needs to hit the database when the transaction is committed.  If you've enabled <a href="http://davybrion.com/blog/2008/10/batching-nhibernates-dm-statements/">batching of DML statements</a>, you could severly reduce the number of times you need to hit the database in this scenario.
</p>
<p>And in case you're wondering, the generated guids look like this:
</p>
<p>81cdb935-d371-4285-9dcb-9bdb0122f25f
</p>
<p>a44baf99-58e9-4ad7-9a59-9bdb0122f25f
</p>
<p>a88300c2-6d64-4ae3-a55b-9bdb0122f25f
</p>
<p>032c7884-da2f-4568-b505-9bdb0122f25f
</p>
<p>....
</p>
<p>70d7713c-b38d-4341-953d-9bdb0122f25f
</p>
<p>Notice the last part of the guids... this is what prevents the index fragmentation.
Obviously, this particular test is not a realistic scenario but i'm sure you understand how much of an improvement this identifier strategy could provide throughout an entire application.  The only downside (IMO) is that guid's aren't really human readable so if that is important to you, you should probably look into other identifier strategies.  The HiLo strategy would be particularly interesting in that case, but we'll cover that in a later post ;)</p>]]></content>
      <post-name type="text"><![CDATA[using the guid comb identifier strategy]]></post-name>
      <trackbacks>
        <trackback id="466" date-created="2009-08-13T23:50:30" date-modified="2009-08-13T23:50:30" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/08/13/how-to-using-the-n-stack-part-3.aspx">
          <title type="text"><![CDATA[How-To: Using the N* Stack, part 3]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2135" date-created="2008-08-31T11:00:57" date-modified="2009-01-25T12:08:16" approved="true" email="ralinx@davybrion.com">
          <title type="text"><![CDATA[DavyBrion]]></title>
        </author>
      </authors>
    </post>
    <post id="328" date-created="2009-05-24T14:55:00" date-modified="2009-05-24T14:55:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/24/nhibernate-2-1-0alpha3.aspx" type="normal" hasexcerpt="false" views="2277">
      <title type="text"><![CDATA[NHibernate 2.1.0Alpha3]]></title>
      <content type="text"><![CDATA[<p><b>NHibernate 2.1.0Alpha3 was released today.</b><br /><br /><a target="_blank" href="https://sourceforge.net/project/showfiles.php?group_id=73818">Download NHibernate 2.1.0.Alpha3</a></p>
<p>After download it please take a look to releasenotes.txt file.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0alpha3]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="332" date-created="2009-05-27T13:14:47" date-modified="2009-05-27T13:14:47" approved="true" post-url="/blogs/nhibernate/archive/2009/05/27/top-secret.aspx" type="normal" hasexcerpt="false" views="2921">
      <title type="text"><![CDATA[TOP SECRET]]></title>
      <content type="text"><![CDATA[<p>When you have an issue in NHibernate please send us something like this</p>  <p>public class xparent    <br />{     <br />&#160;&#160;&#160; public virtual long? Id { get; set; }     <br />&#160;&#160;&#160; public virtual long? A { get; set; }     <br />&#160;&#160;&#160; public virtual Iesi.Collections.Generic.ISet&lt;xchild&gt; Children { get; set; }     <br />}     <br />public class xchild     <br />{     <br />&#160;&#160;&#160; public virtual long? Id { get; set; }     <br />&#160;&#160;&#160; public virtual long? B { get; set; }     <br />&#160;&#160;&#160; public virtual xparent Parent { get; set; }     <br />}</p>  <p>&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot; default-cascade=&quot;save-update&quot;&gt;    <br />&#160;&#160;&#160; &lt;class name=&quot;xxx.xparent, xxx&quot; table=&quot;xparent&quot;&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;id name=&quot;Id&quot; column=&quot;Id&quot; type=&quot;Int64&quot;&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;generator class=&quot;identity&quot;/&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;/id&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;property name=&quot;A&quot; type=&quot;Int64&quot;/&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;set name=&quot;Children&quot; inverse=&quot;true&quot;&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;key column=&quot;ParentId&quot;/&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;one-to-many class=&quot;xxx.xchild, xxx&quot;/&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;/set&gt;     <br />&#160;&#160;&#160; &lt;/class&gt;     <br />&#160;&#160;&#160; &lt;class name=&quot;xxx.xchild, xxx&quot; table=&quot;xchild&quot;&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;id name=&quot;Id&quot; column=&quot;Id&quot; type=&quot;Int64&quot;&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;generator class=&quot;identity&quot;/&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;/id&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;property name=&quot;B&quot; type=&quot;Int64&quot;/&gt;     <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160; &lt;many-to-one name=&quot;Parent&quot; column=&quot;ParentId&quot; class=&quot;xxx.xparent, xxx&quot;/&gt;     <br />&#160;&#160;&#160; &lt;/class&gt;     <br />&lt;/hibernate-mapping&gt;</p>  <p>And please don’t send me the code to recreate the issue because it is TOP SECRET, send me only the stack trace of the exception or even better an obfuscated dll and obviously don’t forget to use the nullable type for the Id.</p>  <p>Thanks. </p>]]></content>
      <post-name type="text"><![CDATA[top secret]]></post-name>
      <comments>
        <comment id="334" date-created="2009-05-27T18:08:32" date-modified="2009-05-27T18:08:32" approved="true" user-name="Min.Han" user-url="http://nhforge.org/members/Min.Han/default.aspx">
          <title type="text"><![CDATA[re: TOP SECRET]]></title>
          <content type="text"><![CDATA[<p>What's even better is that people who work on NHibernate might not even be in the same country that you work for.</p>
<p>Wait... You can use a nullable value type for the id?</p>]]></content>
        </comment>
        <comment id="335" date-created="2009-05-27T18:23:57" date-modified="2009-05-27T18:23:57" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: TOP SECRET]]></title>
          <content type="text"><![CDATA[Sure you can, but after that you should ask to yourself for what you are using a nullable type in something will be a PK (especially when, as you can see in the mapping, you are using identity).]]></content>
        </comment>
        <comment id="336" date-created="2009-05-28T08:53:30" date-modified="2009-05-28T08:53:30" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: TOP SECRET]]></title>
          <content type="text"><![CDATA[Names like "xparent" and "xchild" are much too descriptive. Even better are names that are very specific to a certain project and also in a foreign language.

For instance: Class "HqBericht" with the properties "HqMuell", "KlsLassdas" and "HjhNixverstahn" and the Table "PwjHumbug" with the Properties "QuatschMitSosse", "Hampelmann" and "TammiSchnaegg".

The issue reads like this: "Always when I get a list of HqBericht with my (top secret) query and filter for QuatschMitSosse in PwjHumbug that is referenced by the HjhNixverstahn property, I get not what I expect. When I use my filter "Murx" it works, it is the same but additionally I filter for Hampelmann. The bug is, that HjhNixverstahn (what was this again?) is not loaded correctly when not filtered with Hampelmann"...]]></content>
        </comment>
        <comment id="340" date-created="2009-05-28T15:15:06" date-modified="2009-05-28T15:15:06" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: TOP SECRET]]></title>
          <content type="text"><![CDATA[Sure Steve, an issue with a description as your (here) would be even better than my example.]]></content>
        </comment>
        <comment id="341" date-created="2009-05-29T13:59:00" date-modified="2009-05-29T13:59:00" approved="true" user-name="Krzysztof Kozmic" user-url="http://kozmic.pl">
          <title type="text"><![CDATA[re: TOP SECRET]]></title>
          <content type="text"><![CDATA[Stefan

This is trivial - you should group by QuatschMitSosse and then filter by HjhNixverstahn - then it'll work ;)]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="333" date-created="2009-05-30T13:20:00" date-modified="2009-05-30T13:20:00" approved="true" post-url="/blogs/nhibernate/archive/2009/05/30/nhibernate-ioc-integration.aspx" type="normal" hasexcerpt="false" views="5520">
      <title type="text"><![CDATA[NHibernate IoC integration]]></title>
      <content type="text"><![CDATA[<p>[<a target="_blank" href="http://fabiomaulo.blogspot.com/">my Blog</a>]</p>
<p>Do you remember <a target="_blank" href="http://fabiomaulo.blogspot.com/2008/11/entities-behavior-injection.html">this</a> post ?</p>
<p>As you can see you can use Dependency Injection even for entities, but what about all others classes needed by NHibernate ?</p>
<p>Can you inject something in a custom Dialect or in a custom UserType or UserCollectionType or Listener and all others extensions points ?</p>
<p>Sure you can ;)</p>
<p>NHibernate 2.1.0Alpha3, the fresh released today, has <span style="color: #2b91af">IObjectsFactory</span>. As the <em>ProxyFactoryFactory</em>, the <em>ReflectionOptimizer</em> even the <em>ObjectsFactory</em> is a responsibility of the <em>ByteCodeProvider</em>.</p>
<p>To be short&hellip; an implementation of a <span style="color: #2b91af">IUserType</span> now can look like this:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">InjectableStringUserType </span>: <span style="color: #2b91af">IUserType<br /></span>{<br /><span style="color: blue">private readonly </span><span style="color: #2b91af">IDelimiter </span>delimiter;<br /><br /><span style="color: blue">public </span>InjectableStringUserType(<span style="color: #2b91af">IDelimiter </span>delimiter)<br />{<br />    <span style="color: blue">this</span>.delimiter = delimiter;<br />}</pre>
<p>The implementation of <span style="color: #2b91af">IPostInsertEventListener</span> now can look like this:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">YourPostInsertListener </span>: <span style="color: #2b91af">IPostInsertEventListener<br /></span>{<br /><span style="color: blue">private readonly </span><span style="color: #2b91af">IPersistentAuditor </span>auditor;<br /><br /><span style="color: blue">public </span>YourPostInsertListener(<span style="color: #2b91af">IPersistentAuditor </span>auditor)<br />{<br />    <span style="color: blue">this</span>.auditor = auditor;<br />}<br /><br /><span style="color: blue">public void </span>OnPostInsert(<span style="color: #2b91af">PostInsertEvent </span>@event)</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>If you want use Dependency-Injection for both entities and all others NH stuff, in <a target="_blank" href="http://code.google.com/p/unhaddins/">uNhAddIns</a> you can find two full implementation for <a target="_blank" href="http://code.google.com/p/unhaddins/source/browse/#svn/trunk/uNhAddIns/uNhAddIns.CastleAdapters/EnhancedBytecodeProvider">Castle</a> and <a target="_blank" href="http://code.google.com/p/unhaddins/source/browse/#svn/trunk/uNhAddIns/uNhAddIns.SpringAdapters/EnhancedBytecodeProvider">Spring</a>.</p>
<p>Enjoy NHibernate injectability.</p>
<p><span style="webkit-border-horizontal-spacing: 2px; webkit-border-vertical-spacing: 2px"><span style="font-family: 'trebuchet ms'">P.S. Part of it (tests), was a live implementation before start the Alt.NET VAN today.</span></span></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate ioc integration]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1092" />
        <category ref="1104" />
        <category ref="1117" />
      </categories>
      <trackbacks>
        <trackback id="430" date-created="2009-07-20T23:44:25" date-modified="2009-07-20T23:44:25" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="344" date-created="2009-06-02T16:52:00" date-modified="2009-06-02T16:52:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/02/documentation-project-launch.aspx" type="normal" hasexcerpt="false" views="2405">
      <title type="text"><![CDATA[Documentation Project Launch]]></title>
      <content type="text"><![CDATA[<p>I started to restructure and enhance the NHibernate documentation. I want to move from a "Reference Documentation" to a "Programmers Manual". The difference is, that when you read a reference documentation you already know the concepts and only need to know details like xml elements or HQL syntax. A manual should explain the concepts in detail and you should be able to understand it even if you are new to NHibernate.</p>
<p>The current documentation is explaining quite a lot - it is not only a reference. Most of the documentation is already there. But in my opinion it is sometimes on the wrong place.</p>
<p>Let me demonstrate this with some randomly picked examples:</p>
<ul>
<li>Chapter 2.3 "Contextual Sessions": We don't even know, what a session actually is at this point and what it is used for.</li>
<li>Chapter 3.3 "User Provided ADO.NET connection": It is the first chapter about how to optain a connection and it appears to be the easiest and recommended way. This chapter should be last option and there should be a hint that some things won't work with user provided connections (eg. Hi-Lo identities afaik).</li>
<li>Chapter 3.5 "Optional configuration properties": There is a list of all optional properties. This is a "reference" kind of documentation. For instance, all the hibernate.cache.* parameters should be explained in a chapter about NH second level caches, unless the reader can't do anything with the information.</li>
<li>By the way, the possible values for each parameter is documented as "eg: ...". It should be a complete list.</li>
</ul>
<p>And so on.</p>
<p>The new structure how I propose it is available as <a target="_self" title="NHibernate Documentation Structure Proposal" href="/wikis/reference2-0en/nhibernate-documentation-structure-proposal.aspx">draft in the wiki</a>. Please read it and comment to it if you think it should be different. Now it is still easy to change.</p>
<p>It will be quite a bit of work, and I will need some help. Now stop moving the mouse towards the "return" or "close tab" button and keep reading. Thanks. You can even help if you don't have much time and if you are not the Great Master of NHibernate. This is how you can help:</p>
<ul>
<li>Give me some feedback to my plans, on this blog and on the <a title="NHibernate Documentation Structure Proposal" href="/wikis/reference2-0en/nhibernate-documentation-structure-proposal.aspx">structure proposal</a>. This is important to me.</li>
<li>Tell me what you miss in the documentation, or what you would like be changed. Also tell me what you like and should be kept as it is.</li>
<li>I will ask specific questions in further blogs. So please keep reading them :-)</li>
</ul>
<p>Later, I will need some people to:</p>
<ul>
<li>review the docs. For instance, a native English speaker to turn my (and probably others) <a title="Wikipedia on Pidgin" href="http://en.wikipedia.org/wiki/Pidgin">Pidgin</a> English into real English. Or a NH developer who checks if it is actually true.</li>
<li>develop the tools. We are using <a title="DocBook.org" href="/controlpanel/blogs/posteditor.aspx/DocBook.org">DocBook</a>, if you know about XSL:FO or how to configure HTML output, your help will be much appreciated.</li>
<li>develop examples and diagrams. But before we start writing such things, we need to know what has to be demonstrated with it.</li>
</ul>]]></content>
      <post-name type="text"><![CDATA[documentation project launch]]></post-name>
      <categories>
        <category ref="1145" />
      </categories>
      <comments>
        <comment id="345" date-created="2009-06-03T16:50:00" date-modified="2009-06-03T16:50:00" approved="true" user-name="Fred Morrison" user-url="http://nhforge.org/members/fmorriso/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[In addition to Reference type documentation I would like to suggest a "NHibernate Cookbook" type of documentation.  That style of documentation would be patterned after "C# 3.0 Cookbook" (O'Reilly books) in which a single "recipe" is discussed in one or two pages with a "Problem", "Solution" (including code), "Discussion" and "See Also".  Each recipe takes only 2-3 pages total.]]></content>
        </comment>
        <comment id="377" date-created="2009-06-23T05:21:34" date-modified="2009-06-23T05:21:34" approved="true" user-name="Jon" user-url="http://nhforge.org/members/jemiller/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[I'd like to know what happened to the API docs? i.e the ones that integrate into Visual Studio Help. Have they been discontinued? It really makes you wonder about this project under it's new leadership when the documentation is missing.]]></content>
        </comment>
        <comment id="378" date-created="2009-06-23T06:38:37" date-modified="2009-06-23T06:38:37" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[I aim to a printable documentation. API docs are usually not in a printable form. Of course it would also be nice to have it online somewhere. You're welcome to contribute, then you don't need to wonder about this project anymore :-)]]></content>
        </comment>
        <comment id="381" date-created="2009-06-23T21:00:05" date-modified="2009-06-23T21:00:05" approved="true" user-name="Jon" user-url="http://nhforge.org/members/jemiller/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[Don't you already have a script for generating the Visual Studio docs? I'm sure I'm not the only one that found that documentation useful. So, you're saying that at present there are no API docs?]]></content>
        </comment>
        <comment id="385" date-created="2009-06-24T06:35:07" date-modified="2009-06-24T06:35:07" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[Not sure what you mean. The API docs are distributed with the assemblies as xml files. I use them only within visual studio, these tooltip-style boxes. Afaik, there is no generated html around. But I might be wrong.]]></content>
        </comment>
        <comment id="387" date-created="2009-06-24T19:00:22" date-modified="2009-06-24T19:00:22" approved="true" user-name="Jon" user-url="http://nhforge.org/members/jemiller/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[There used to be a .chm file and an installer that would integrate the API documentation with Visual Studio 2008's help viewer. It was nice because it was fully integrated and looked like Microsoft's normal documentation. I think Dynamic Help would work with it also.]]></content>
        </comment>
        <comment id="389" date-created="2009-06-25T12:29:34" date-modified="2009-06-25T12:29:34" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Documentation Project Launch]]></title>
          <content type="text"><![CDATA[Ah, now I understand what you mean. It's a long time since I used an installer of NHibernate :-)

This actually doesn't have to do much with the manual, since there are different people writing it and different tools to create it and finally a different release time. 

Honestly, I have enough work to do on the manual and will not care about API docs in the near future. It's actually just about applying the right tools, but I don't know these tools.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2381" date-created="2008-11-14T10:21:26" date-modified="2011-08-08T19:58:55" approved="true" email="stefan.syz@bluewin.ch">
          <title type="text"><![CDATA[ssteinegger]]></title>
        </author>
      </authors>
    </post>
    <post id="347" date-created="2009-06-04T13:34:00" date-modified="2009-06-04T13:34:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/04/architecture-diagram-rework.aspx" type="normal" hasexcerpt="false" views="6956">
      <title type="text"><![CDATA[Architecture Diagram Rework]]></title>
      <content type="text"><![CDATA[<p>While working on the <a title="NHibernate Documentation Structure Proposal" href="/wikis/reference2-0en/nhibernate-documentation-structure-proposal.aspx">NHibernate Documentation</a>, I&rsquo;m drawing some pretty pictures. I actually never liked the architecture diagrams much, because I never knew what exactly they are trying to show.</p>
<p>The original architecture diagram looks like this:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_0CABFF94.png"><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_45593A52.png" border="0" width="482" height="394" /></a> </p>
<p>I never found this diagram very helpful. (When I started learning NH, Transient Objects and Persistent Objects were very confusing to me. Are this different classes?)</p>
<p>So I decided to rework it. I ended up with something that is not very different from the existing diagrams so:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7E067510.png"><img title="image" style="display: inline; border-width: 0px; border: 0;" alt="New Architecture Diagram" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_719AE298.png" border="0" width="591" height="465" /></a> </p>
<p>I shouldn&rsquo;t cover all the little details of the NHibernate&rsquo;s internal design, just the concepts that are visible to the user.</p>
<p>What do you think: is this kind of useful?</p>]]></content>
      <post-name type="text"><![CDATA[architecture diagram rework]]></post-name>
      <categories>
        <category ref="1145" />
      </categories>
      <comments>
        <comment id="348" date-created="2009-06-04T15:09:25" date-modified="2009-06-04T15:09:25" approved="true" user-name="rcarlomagno" user-url="http://">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[very useful diagram, but just a detail to consider if you want, what about using office's 2007 diagrams? they are visually richer

keep on with this project, it was necessary

if you need some help, i wish to collaborate

]]></content>
        </comment>
        <comment id="349" date-created="2009-06-04T16:27:03" date-modified="2009-06-04T16:27:03" approved="true" user-name="cbolyard" user-url="http://nhforge.org/members/cbolyard/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Very nice!]]></content>
        </comment>
        <comment id="350" date-created="2009-06-04T16:34:42" date-modified="2009-06-04T16:34:42" approved="true" user-name="Fred Morrison" user-url="http://nhforge.org/members/fmorriso/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Your new diagram is much more understandable, but I'm fairly new to NH, so take that for what it's worth.]]></content>
        </comment>
        <comment id="351" date-created="2009-06-04T16:54:57" date-modified="2009-06-04T16:54:57" approved="true" user-name="Simon Martin" user-url="http://nhforge.org/members/SimonMartin/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[I'm also quite new to NH but the new diagram is easier, for me, to understand too]]></content>
        </comment>
        <comment id="352" date-created="2009-06-04T18:39:52" date-modified="2009-06-04T18:39:52" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[The 'Business Logic' could lead to confusion since 'cause there is only one book to design the model of our application. With an square that says: 'Objects Model' OR 'Model' is ok.

BTW, where are the Transients and Persistent objects ? Also we need maybe to mention to the Detached objects]]></content>
        </comment>
        <comment id="353" date-created="2009-06-04T20:28:48" date-modified="2009-06-04T20:28:48" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[@Dario: I'm not sure if I understand what you mean with "only one book to design the model". The Business Model are the entities that are mapped, the Business Logic are services or other classes that implement the logic.

I actually skipped the Transient and Persistent Objects by purpose, for me it was very confusing. And - as you say - not complete, because there are also Detached Objects. But these are object states, IMO this is not part of an architecture diagram. The business objects don't care about their persistency state. 

@rcarlomagno: There are actually three reasons why I wouldn't use office 2007: 1) I don't have it 2) others don't have it and contributing on open source software should be for free :-) 3) With "visually richer" you probably mean "glossy 3d buttons". I don't like glossy 3d buttons. Everyone has glossy 3d buttons. It's like chocolate for breakfast, for lunch and for dinner. I mean, I'm swiss after all, but too much chocolate doesn't make me happier.

And, yes, I need help and your collaboration would be much appreciated. For the moment, I'm building up the structure and getting feedback from the community like this, but later I will need some people for different tasks. I will collection some Email addresses until then and contact everyone that wants to help.]]></content>
        </comment>
        <comment id="354" date-created="2009-06-05T01:40:25" date-modified="2009-06-05T01:40:25" approved="true" user-name="csokun" user-url="http://chornsokun.wordpress.com">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Stefen, what the diff between DB Driver box & ADO.NET? Where all the ODBC & OLEDB gone?]]></content>
        </comment>
        <comment id="355" date-created="2009-06-05T06:35:14" date-modified="2009-06-05T06:35:14" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[@Chorn: The DB Driver is the NHibernate driver which can be configured. ODBC and OLEDB is gone to the not-important-enough-heaven. Again: I didn't try to draw the same picture with more colors, I tried to draw a new picture. Do you think ODBC and OLEDB are important to be mentioned?]]></content>
        </comment>
        <comment id="356" date-created="2009-06-05T17:30:51" date-modified="2009-06-05T17:30:51" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Hi Stefan,
NHibernate doesn't talks in this language: "Business Object" "Business Logic".
The NH language is talked with Persistent, Detached and Transient entities.
The phrase: "only one book to design the model" was wrong: I meant "thereisn't one only book to design the model", sorry about that. Talking about "Business Objects" and "Business Logic" seems you following one book. I know what you mean by using those therms, but you are saying nothing.
Imagine that later came a DDD guy and make another diagram, how suppose the diagram should look like?

Doesn't matter if the terms  Persistent, Detached and Transient entities cause confusion, they ARE very important concepts and shoudn't be removed. If they cause confusion, must re-read them again and again.

Cheers]]></content>
        </comment>
        <comment id="357" date-created="2009-06-06T06:52:28" date-modified="2009-06-06T06:52:28" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Hm, of course I don't want to talk about a certain architecture approach. But to me, Business Objects and Business Logic are very common terms, and also fit to DDD approaches. I tried to show a common application that is NOT influenced by NH. If I would use NH terms in the application layer, it seems as if the application design would highly depend on NH, as if one had to write specific classes ("Persistent Objects" for instance) only for NH. This is not true, it's misleading and confusing.

See http://en.wikipedia.org/wiki/Business_object_(computer_science)
and http://en.wikipedia.org/wiki/Business_logic

If you know better, more common and neutral terms, I'd use them.

The object states ARE very important, but not for the architecture. They are shown in a different diagram and explained separately in detail. I can't show terms from different dimensions in the same diagram.]]></content>
        </comment>
        <comment id="364" date-created="2009-06-09T13:09:16" date-modified="2009-06-09T13:09:16" approved="true" user-name="benhyrman" user-url="http://nhforge.org/members/benhyrman/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[I like it. Understanding transient, persistent, and detached objects are important, but not necessarily from an architectural view. Rather, they're states of an object in it's relation to (or lack of relation with) the Session.

While Business Logic and Business Model are the correct term, they suffer from SemanticDiffusion (martinfowler.com/bliki/SemanticDiffusion.html). Maybe just call it Logic, Model. 

Also, while someone should understand O/R by this point, would it be cleaner to call those NHibernate Mapping Files? Calling them O/R mapping files implies a certain generic flavor of the implementation while it's actually a function of the ORM's needs (ORMs don't use the same maps, not all ORMs need maps)]]></content>
        </comment>
        <comment id="365" date-created="2009-06-10T08:25:33" date-modified="2009-06-10T08:25:33" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[@benhyrman: Thanks for your feedback. Logic and Model might be fine.

I agree with the NHibernate Mapping Files, but I actually also don't like the term "files" there. It should be rather a "NHibernate Mapping Definition" or something. On the other hand, "files" sounds familiar and friendlier.]]></content>
        </comment>
        <comment id="366" date-created="2009-06-11T02:41:19" date-modified="2009-06-11T02:41:19" approved="true" user-name="benhyrman" user-url="http://nhforge.org/members/benhyrman/default.aspx">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Well, how about NHibernate Maps or NHibernate Mappings or well, I'll think about it some more

I think it's a great step forward even as-is.]]></content>
        </comment>
        <comment id="997" date-created="2011-10-28T08:31:16" date-modified="2011-10-28T08:31:16" approved="true" user-name="Andre" user-url="http://">
          <title type="text"><![CDATA[re: Architecture Diagram Rework]]></title>
          <content type="text"><![CDATA[Hi Stefan, Which application did you use to draw your diagrams?]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2381" date-created="2008-11-14T10:21:26" date-modified="2011-08-08T19:58:55" approved="true" email="stefan.syz@bluewin.ch">
          <title type="text"><![CDATA[ssteinegger]]></title>
        </author>
      </authors>
    </post>
    <post id="358" date-created="2009-06-07T15:28:00" date-modified="2009-06-07T15:28:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/07/nhibernate-2-1-0beta1.aspx" type="normal" hasexcerpt="false" views="2709">
      <title type="text"><![CDATA[NHibernate 2.1.0Beta1]]></title>
      <content type="text"><![CDATA[<p><strong>NHibernate 2.1.0Beta1 was released today.</strong>     <br />    <br /><a target="_blank" href="https://sourceforge.net/project/showfiles.php?group_id=73818">Download NHibernate 2.1.0.Beta1</a></p>
<p>After download it please take a look to releasenotes.txt file.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0beta1]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
        <category ref="1092" />
      </categories>
      <comments>
        <comment id="359" date-created="2009-06-07T15:31:26" date-modified="2009-06-07T15:31:26" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 2.1.0Beta1]]></title>
          <content type="text"><![CDATA[Thanks a lot, Fabio. I will check it out as soon a possible.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="360" date-created="2009-06-07T17:03:00" date-modified="2009-06-07T17:03:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/07/nhibernate-cache-providers-2-1-0alpha1.aspx" type="normal" hasexcerpt="false" views="2053">
      <title type="text"><![CDATA[NHibernate Cache Providers 2.1.0Alpha1]]></title>
      <content type="text"><![CDATA[<p><strong>NHibernate Caches 2.1.0Alpha1 was released today.</strong>&nbsp;</p>
<p><a target="_blank" href="https://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=286204">Download NHibernate Caches 2.1.0Alpha1</a>.</p>
<p>Enjoy it together with NHibernate2.1.0.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate cache providers 2 1 0alpha1]]></post-name>
      <categories>
        <category ref="1019" />
        <category ref="1036" />
      </categories>
      <comments>
        <comment id="361" date-created="2009-06-07T18:32:12" date-modified="2009-06-07T18:32:12" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Cache Providers 2.1.0Alpha1]]></title>
          <content type="text"><![CDATA[Someone seems to be quite busy this weekend! Thanks for the incredible work.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="367" date-created="2009-06-11T13:50:40" date-modified="2009-06-11T13:50:40" approved="true" post-url="/blogs/nhibernate/archive/2009/06/11/linq-to-nhibernate-update.aspx" type="normal" hasexcerpt="false" views="10543">
      <title type="text"><![CDATA[LINQ to NHibernate Update]]></title>
      <content type="text"><![CDATA[<p>We're long overdue for another update. Progress as been somewhat slower over the last few weeks, largely due to other commitments and holidays meaning that I've probably only spent a total of around 10 days working on this stuff.</p>
<p>Where we are is that I'm pretty comfortable with what needs to happen, and have a fairly clear route for moving forward from my prototype / exploratory coding phase to something that I can actually release to the wild and let folk start playing with.</p>
<p>There are two options as to how this might happen. The first is by utilizing the concepts within the excellent <a href="http://www.codeplex.com/IQToolkit">IQToolkit</a>, which provides a great sample for anyone who wants to explore how to build a Linq to Sql provider. Alas, the code can't be used as it stands, since it's quite closely tied to building and executing SQL and then processing the resulting data rows, which isn't quite what we're trying to achieve here. However, the fundamental concepts and algorithms for handling some of the Linq complexities are certainly valid, and can be ported across to meet our needs relatively simply.</p>
<p>The second option is by building on top of the promising <a href="http://www.re-motion.org/blogs/team/archive/2009/04/23/introducing-re-linq-a-general-purpose-linq-provider-infrastructure.aspx">re-linq</a> project, which performs a similar task to the first half of the IQ Toolkit, in that it takes a Linq expression tree and turns it into something a little more manageable. re-linq doesn't attempt to handle the execution side, so it precisely avoids some of the stuff that I'd need to rip out of the IQ Toolkit.<br /></p>
<p>re-linq is currently undergoing some final refactoring (some of it driven by the potential to use it within this project,so many thanks to them for keeping us in mind!). This is due to be completed in the next 3 or so weeks; once they are done, a final decision as to the exact approach can be taken and I'd expect pretty fast progress from that point.</p>
<p>Obviously, my original guesstimate of a June date is looking seriously in doubt, but I don't think it'll be too much longer. Hang in there folks, I know it's been a long wait but it'll be worth it!</p>
]]></content>
      <post-name type="text"><![CDATA[linq to nhibernate update]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1130" />
      </categories>
      <comments>
        <comment id="368" date-created="2009-06-12T15:12:27" date-modified="2009-06-12T15:12:27" approved="true" user-name="cbolyard" user-url="http://nhforge.org/members/cbolyard/default.aspx">
          <title type="text"><![CDATA[re: LINQ to NHibernate Update]]></title>
          <content type="text"><![CDATA[No pressure!  I'm just glad you are working on it.  It will make the work lives of many people so much nicer.  It may not be enough, but thanks for all your hard work!]]></content>
        </comment>
        <comment id="370" date-created="2009-06-13T06:46:53" date-modified="2009-06-13T06:46:53" approved="true" user-name="bjorn" user-url="http://nhforge.org/members/bai/default.aspx">
          <title type="text"><![CDATA[re: LINQ to NHibernate Update]]></title>
          <content type="text"><![CDATA[Thanks for the update, looking forward to it. Keep up the excellent work!]]></content>
        </comment>
        <comment id="380" date-created="2009-06-23T15:42:40" date-modified="2009-06-23T15:42:40" approved="true" user-name="Darren Kopp" user-url="http://nhforge.org/members/Darren-Kopp/default.aspx">
          <title type="text"><![CDATA[re: LINQ to NHibernate Update]]></title>
          <content type="text"><![CDATA[please please please can i make one request? please support something like this (that you can't do w/ current linq implementation but can w/ linq 2 sql):

from user in session.Linq<User>
from order in session.Linq<Order>
from cart in session.Linq<ShoppingCart>
where cart.User.Id == user.Id && order.CartId == cart.Id

bad example, but the ability to use multiple contexts would be soooo helpful. ]]></content>
        </comment>
        <comment id="398" date-created="2009-06-30T16:56:59" date-modified="2009-06-30T16:56:59" approved="true" user-name="Nick Kellett" user-url="http://nhforge.org/members/NickKellett/default.aspx">
          <title type="text"><![CDATA[re: LINQ to NHibernate Update]]></title>
          <content type="text"><![CDATA[Thanks for the great work Steve! This is very exciting.]]></content>
        </comment>
        <comment id="752" date-created="2010-12-21T03:35:45" date-modified="2010-12-21T03:35:45" approved="true" user-name="Diego AC" user-url="http://">
          <title type="text"><![CDATA[re: LINQ to NHibernate Update]]></title>
          <content type="text"><![CDATA[Hey there! I would like to say thanks for developing things like LinqToNHibernate. You guys ROCK!]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2744" date-created="2009-04-30T14:38:23" date-modified="2009-12-17T00:00:43" approved="true" email="steve@srstrong.com">
          <title type="text"><![CDATA[srstrong]]></title>
        </author>
      </authors>
    </post>
    <post id="369" date-created="2009-06-12T17:30:00" date-modified="2009-06-12T17:30:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/12/from-where-start-to-implements-idatabaseschema.aspx" type="normal" hasexcerpt="false" views="1916">
      <title type="text"><![CDATA[From where start to implements IDataBaseSchema]]></title>
      <content type="text"><![CDATA[<p>The <a target="_blank" href="http://fabiomaulo.blogspot.com/2009/06/auto-quote-tablecolumn-names.html">auto-quote and auto import KeyWords features</a> are now available in NHibernate but only for those dialects are providing an implementation of <span style="color: #2b91af">IDataBaseSchema</span>.</p>
<p>If the NHibernate&rsquo;s dialect, for your favorite RDBMS, does not provide an implementation of <span style="color: #2b91af">IDataBaseSchema</span>, what can you do ?</p>
<h4>Start point</h4>
<p>First of all you need an easy way to know some &ldquo;internals&rdquo; of your DataProvider/RDBMS. The code to extract all information you are needing to implement a <span style="color: #2b91af">IDataBaseSchema</span> is: </p>
<pre class="code"><span style="color: blue">internal class </span><span style="color: #2b91af">Program<br /></span>{<br /> <span style="color: blue">private static void </span>Main(<span style="color: blue">string</span>[] args)<br /> {<br />  <br />     <span style="color: green">// Extract metadata for Oracle<br />     </span>CreateMetadataXml(<span style="color: #a31515">"System.Data.OracleClient"</span>, <span style="color: #a31515">"User Id=NH; Password=nh"</span>);<br /><br />     <span style="color: green">// Extract metadata for MsSQL<br />     </span>CreateMetadataXml(<span style="color: #a31515">"System.Data.SqlClient"</span>, <span style="color: #a31515">@"Data Source=localhost\SQLEXPRESS;Initial Catalog=NHTEST;Integrated Security=True"</span>);<br />  <br />     <span style="color: #2b91af">Console</span>.WriteLine(<span style="color: #a31515">"Work done!"</span>);<br />     <span style="color: #2b91af">Console</span>.ReadLine();<br /> }<br /><br /> <span style="color: blue">private static void </span>CreateMetadataXml(<span style="color: blue">string </span>providerName, <span style="color: blue">string </span>connectionString)<br /> {<br />     <span style="color: #2b91af">DbProviderFactory </span>factory = <span style="color: #2b91af">DbProviderFactories</span>.GetFactory(providerName);<br /><br />     <span style="color: blue">using </span>(<span style="color: #2b91af">DbConnection </span>conn = factory.CreateConnection())<br />     {<br />         <span style="color: blue">try<br />         </span>{<br />             conn.ConnectionString = connectionString;<br />             conn.Open();<br /><br />             <span style="color: green">//Get MetaDataCollections and write to an XML file.<br />             //This is equivalent to GetSchema()<br />             </span><span style="color: #2b91af">DataTable </span>dtMetadata = conn.GetSchema(<span style="color: #2b91af">DbMetaDataCollectionNames</span>.MetaDataCollections);<br />             dtMetadata.WriteXml(providerName + <span style="color: #a31515">"_MetaDataCollections.xml"</span>);<br /><br />             <span style="color: green">//Get Restrictions and write to an XML file.<br />             </span><span style="color: #2b91af">DataTable </span>dtRestrictions = conn.GetSchema(<span style="color: #2b91af">DbMetaDataCollectionNames</span>.Restrictions);<br />             dtRestrictions.WriteXml(providerName + <span style="color: #a31515">"_Restrictions.xml"</span>);<br /><br />             <span style="color: green">//Get DataSourceInformation and write to an XML file.<br />             </span><span style="color: #2b91af">DataTable </span>dtDataSrcInfo = conn.GetSchema(<span style="color: #2b91af">DbMetaDataCollectionNames</span>.DataSourceInformation);<br />             dtDataSrcInfo.WriteXml(providerName + <span style="color: #a31515">"_DataSourceInformation.xml"</span>);<br /><br />             <span style="color: green">//data types and write to an XML file.<br />             </span><span style="color: #2b91af">DataTable </span>dtDataTypes = conn.GetSchema(<span style="color: #2b91af">DbMetaDataCollectionNames</span>.DataTypes);<br />             dtDataTypes.WriteXml(providerName + <span style="color: #a31515">"_DataTypes.xml"</span>);<br /><br />             <span style="color: green">//Get ReservedWords and write to an XML file.<br />             </span><span style="color: #2b91af">DataTable </span>dtReservedWords = conn.GetSchema(<span style="color: #2b91af">DbMetaDataCollectionNames</span>.ReservedWords);<br />             dtReservedWords.WriteXml(providerName + <span style="color: #a31515">"_ReservedWords.xml"</span>);<br />         }<br />         <span style="color: blue">catch </span>(<span style="color: #2b91af">Exception </span>ex)<br />         {<br />             <span style="color: #2b91af">Console</span>.WriteLine(ex.Message);<br />             <span style="color: #2b91af">Console</span>.WriteLine(ex.StackTrace);<br />         }<br />     }<br /> }<br />}</pre>
<p>The code above will create an XML file for each &ldquo;matter&rdquo; involved with <span style="color: #2b91af">IDataBaseSchema</span> implementation.</p>
<h4>What&rsquo;s next</h4>
<p>I don&rsquo;t want to deep in details because each RDBMS may have different info so the only things I can tell you are:</p>
<ul>
<li>There are some base classes that may work, as is, for your RDBMS : <span style="color: #2b91af">AbstractDataBaseSchema</span>, <span style="color: #2b91af">AbstractTableMetadata</span>, <span style="color: #2b91af">AbstractColumnMetaData</span>, <span style="color: #2b91af">AbstractForeignKeyMetadata</span>, <span style="color: #2b91af">AbstractIndexMetadata</span>. </li>
<li>There are some implementations for various RDBMS where you can see which are the difference and where some information, extracted from the code above, was used : FirebirdMetaData.cs, MsSqlCeMetaData.cs, MsSqlMetaData.cs, MySQLMetaData.cs, OracleMetaData.cs, SQLiteMetaData.cs, SybaseAnywhereMetaData.cs. </li>
<li>Tests to pass are contained in NHibernate.Test.Tools.hbm2ddl namespace. </li>
</ul>
<h4>What you should do after implement IDataBaseSchema</h4>
<p>Create a new <a target="_blank" href="http://jira.nhforge.org/">JIRA ticket</a> as:</p>
<ul>
<li>Project : NHibernate </li>
<li>Issue Type: Improvement </li>
<li>Summary : New DataBase schema provider for <em>&ldquo;your preferred RDBMS&rdquo;</em> </li>
<li>Priority : Minor </li>
<li>Component : DataProviders / Dialects </li>
<li>Affects Version : <em>&ldquo;The last released&rdquo;</em> </li>
<li>Description : <em>&ldquo;Few words&rdquo;</em> </li>
<li>Attachment : this is the most important; <span style="text-decoration: underline;"><strong>send us your implementation</strong></span>!! </li>
</ul>
<p>Thanks.</p>]]></content>
      <post-name type="text"><![CDATA[from where start to implements idatabaseschema]]></post-name>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="375" date-created="2009-06-21T13:05:00" date-modified="2009-06-21T13:05:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/21/nhibernate-2-1-0beta2.aspx" type="normal" hasexcerpt="false" views="2825">
      <title type="text"><![CDATA[NHibernate 2.1.0Beta2]]></title>
      <content type="text"><![CDATA[<p>NHibernate 2.1.0 Beta2 is on the road.</p>
<p><a target="_blank" href="https://sourceforge.net/project/showfiles.php?group_id=73818&amp;package_id=73969">Download NHibernate 2.1.0.Beta2</a></p>
<p>After download it please take a look to releasenotes.txt file.</p>
<p>Note:</p>
<p>For those are using sources, there is a new branch named : <strong>2.1.x</strong></p>
<p>All next releases of NH2.1 will be released from the branch.</p>
<p>The trunk, stating from few minutes, will be NH3.0.0 and its target is .NET3.5 (<strong>&ldquo;<em>good bye</em>&rdquo; to .NET2.0 compatibility</strong>).</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 2 1 0beta2]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1092" />
      </categories>
      <comments>
        <comment id="379" date-created="2009-06-23T06:44:41" date-modified="2009-06-23T06:44:41" approved="true" user-name="kir" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate 2.1.0Beta2]]></title>
          <content type="text"><![CDATA[File NHibernate-2.1.0.Beta2-src.zip  are damaged.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="376" date-created="2009-06-21T15:52:00" date-modified="2009-06-21T15:52:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/21/nhibernate-cache-providers-2-1-0beta1.aspx" type="normal" hasexcerpt="false" views="2361">
      <title type="text"><![CDATA[NHibernate Cache Providers 2.1.0Beta1]]></title>
      <content type="text"><![CDATA[<p><strong>NHibernate Caches 2.1.0Beta1 was released today.</strong></p>
<p><a href="https://sourceforge.net/project/showfiles.php?group_id=216446&amp;package_id=286204">Download NHibernate Caches 2.1.0Beta1</a>.</p>
<p>Enjoy it together with NHibernate2.1.0.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate cache providers 2 1 0beta1]]></post-name>
      <categories>
        <category ref="1019" />
        <category ref="1036" />
        <category ref="1111" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="383" date-created="2009-06-24T03:25:00" date-modified="2009-06-24T03:25:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/24/auto-quote-table-column-names.aspx" type="normal" hasexcerpt="false" views="9699">
      <title type="text"><![CDATA[Auto Quote Table/Column names]]></title>
      <content type="text"><![CDATA[<p>Since long time we have a very interesting request on <a target="_blank" href="http://jira.nhforge.org/">NHibernate JIRA</a> (NH-188).</p>
<p>If you are working in a multi-RDBMS application, you are annoyed, for sure, quoting a table-name or a column-name. As a very good persistent-layer this should be a NHibernate&rsquo;s work.</p>
<p>I&rsquo;m happy to announce that the problem is solved (even if, so far, is not done by default).</p>
<p>If you want that NH take the responsibility of properly quote table-name or column-name only where really needed now you can do it in two ways:</p>
<ol>
<li>Trough configuration </li>
<li>Explicitly by code </li>
</ol>
<h4>Trough configuration</h4>
<p>As you probably know NHibernate&rsquo;s configuration has some property oriented to mapping-to-DLL tasks.</p>
<p>For schema integration you can use</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">hbm2ddl.auto</span>"<span style="color: blue">&gt;</span>create-drop<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;</span></pre>
<p>Allowed values for hbm2dll are:</p>
<ul>
<li><span style="color: #800000">update</span> : auto execute <span style="color: #2b91af">SchemaUpdate</span> on BuildSessionFactory </li>
<li><span style="color: #800000">create</span> : auto execute <span style="color: #2b91af">SchemaExport</span> on BuildSessionFactory </li>
<li><span style="color: #800000">create-drop</span> : auto execute <span style="color: #2b91af">SchemaExport</span> on BuildSessionFactory recreating the schema </li>
<li><span style="color: #800000">validate</span> : auto execute <span style="color: #2b91af">SchemaValidator</span> on BuildSessionFactory </li>
</ul>
<p>The new property is:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">hbm2ddl.keywords</span>"<span style="color: blue">&gt;</span>auto-quote<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>Allowed values are:</p>
<ul>
<li><span style="color: #800000">none</span> : disable any operation regarding RDBMS KeyWords </li>
<li><span style="color: #800000">keywords</span> : (<strong>activated by Default</strong>)imports all RDBMS KeyWords where the NH-Dialect can provide the implementation of <span style="color: #2b91af">IDataBaseSchema</span> (so far available for MsSQL, Oracle, Firebird, MsSqlCe, MySQL, SQLite, SybaseAnywhere) </li>
<li><span style="color: #800000">auto-quote</span> : imports all RDBMS KeyWords and auto-quote all table-names/column-names on BuildSessionFactory </li>
</ul>
<h4>Explicitly by code</h4>
<p>When you have an instance of a configured configuration (just before call BuildSessionFactory) you can execute:</p>
<pre class="code"><span style="color: #2b91af">SchemaMetadataUpdater</span>.QuoteTableAndColumns(configuration);</pre>
<p>That&rsquo;s all.</p>
<h4>The advantage</h4>
<p>Take a look to this mapping:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Order</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">native</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Select</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">From</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">And</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Column</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>Well&hellip; now it is working fine without explicitly quote.</p>
<p>Enjoy NHibernate&rsquo;s multi-RDBMS easy support.</p>]]></content>
      <post-name type="text"><![CDATA[auto quote table column names]]></post-name>
      <categories>
        <category ref="1039" />
        <category ref="1089" />
        <category ref="1092" />
      </categories>
      <comments>
        <comment id="386" date-created="2009-06-24T06:41:51" date-modified="2009-06-24T06:41:51" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[What's exactly the difference between keywords and auto-quote? ]]></content>
        </comment>
        <comment id="388" date-created="2009-06-25T10:37:30" date-modified="2009-06-25T10:37:30" approved="true" user-name="rachel123" user-url="http://www.fastrealestate.net/usa/">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[I am very pleased with the thought and don’t feel like adding anything in it. It a perfect answer.

Rachel Kinker
<a href="http://www.fastrealestate.net/usa/" rel="dofollow">loan modification</a>]]></content>
        </comment>
        <comment id="390" date-created="2009-06-25T12:52:50" date-modified="2009-06-25T12:52:50" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[@Stefan
Keywords is by default: NH use the keywords of the dialect to modify a 'formula' template, for example.
auto-quote : imports all RDBMS KeyWords and auto-quote all table-names/column-names you/NH put in the mapping metadata.]]></content>
        </comment>
        <comment id="391" date-created="2009-06-26T06:51:15" date-modified="2009-06-26T06:51:15" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[@Fabio: forgive me my ignorance, I didn't get it. I try to express what I understood. I think I'm quite far.

You say, "keywords" escapes rdbms keywords eg. in formula templates. (I assume a formula template is a text in a "formula" attribute in the mapping file.) For instance, if I write a formula like "index + 2" it turns it to "[index] + 2", is this correct? What happens if I want to use a keyword in the formula? Which other strings does NH change?

"auto-quote" escapes all table names and column names in the mappings. I assume wherever a table name or column name is declared (table and column attributes for instance). Does it also do anything with formulas, filters, native sql (sql-update, sql-insert) and so on? Why does NH need to import database keywords to do this? It just needs to know the column and table names.]]></content>
        </comment>
        <comment id="392" date-created="2009-06-26T12:51:45" date-modified="2009-06-26T12:51:45" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[No, Stefan
formula="SELECT TOP 1 ..."
without keywords will be translated to
SELECT this.TOP 1....]]></content>
        </comment>
        <comment id="532" date-created="2009-10-26T14:55:35" date-modified="2009-10-26T14:55:35" approved="true" user-name="intvoker" user-url="http://nhforge.org/members/intvoker/default.aspx">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[When using PostgreSQL dialect this code:
SchemaMetadataUpdater.QuoteTableAndColumns(configuration);

throws:
System.NotSupportedException: Specified method is not supported.
   at NHibernate.Dialect.Dialect.GetDataBaseSchema(DbConnection connection)
   at NHibernate.Tool.hbm2ddl.SchemaMetadataUpdater.GetReservedWords(Dialect dialect, IConnectionHelper connectionHelper)
   at NHibernate.Tool.hbm2ddl.SchemaMetadataUpdater.GetReservedWords(IDictionary`2 cfgProperties)
   at NHibernate.Tool.hbm2ddl.SchemaMetadataUpdater.QuoteTableAndColumns(Configuration configuration)]]></content>
        </comment>
        <comment id="533" date-created="2009-10-26T15:04:15" date-modified="2009-10-26T15:04:15" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Auto Quote Table/Column names]]></title>
          <content type="text"><![CDATA[@intvoker
Have a look here
http://fabiomaulo.blogspot.com/2009/06/from-where-start-to-implements.html]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="393" date-created="2009-06-26T13:23:00" date-modified="2009-06-26T13:23:00" approved="true" post-url="/blogs/nhibernate/archive/2009/06/26/database-the-eliot-ness-of-it.aspx" type="normal" hasexcerpt="false" views="6013">
      <title type="text"><![CDATA[DataBase; The Eliot Ness of IT ?]]></title>
      <content type="text"><![CDATA[<p>[<a target="_blank" href="http://fabiomaulo.blogspot.com/">My blog</a>]</p>
<p>How many times we heard : </p>
<p>&ldquo;I need to map this situation&hellip;bla&hellip;bla&hellip; Note: I can&rsquo;t touch the DataBase schema.&rdquo;</p>
<p>&ldquo;I don&rsquo;t like composite PK but I can&rsquo;t change the DB schema.&rdquo;</p>
<p>&ldquo;I need to map this situation&hellip;bla&hellip;bla&hellip; Note: legacy DB.&rdquo;</p>
<p>You can see phrases similar to those above in various NHibernate forums in various languages. The fact that questions are sent to a NH&rsquo;s forum mean that somebody are developing a new .NET2.0 or .NET3.5 application using NHibernate with an existing DataBase (I&rsquo;m hoping this is the only possible situation). If a company spent time and money to rewrite an obsolete application for sure is because it is needed.</p>
<p>Let me show another situation: In a new application the first base module was deployed in production. The team now has an existing application with an existing DB and is developing another module. In the second module we realize that some change is needed to the persistence we actually have in production. What the team should do ? Well&hellip;something normal for us is create a &ldquo;migration step&rdquo; for the DB. The same happen again and again in each sprint.</p>
<p>How much different is the situation when the existing DB is five, or more, years old ? (well&hellip; it is different but I&rsquo;m not so sure that the difference is so big).</p>
<p>&ldquo;I can&rsquo;t change the DB because there are other applications using it&rdquo;&hellip; my friend in this case the first step should be write a good service layer to serve &ldquo;externals&rdquo; applications.</p>
<p>Why, write a new .NET3.5 application, shouldn&rsquo;t mean re-think the DB ? The DB is not a part of the old application ?</p>
<p>We are working in software, is the relational DB a piece of granite technology of the past century and nothing more ?</p>
<p>One of my preferred Mentor, illuminate me the way of ORM in these past years, is <a target="_blank" href="http://www.ambysoft.com/scottAmbler.html">Scott W. Ambler</a>. If you want help your DBA to come in the XXI century gives him some of Scott&rsquo;s books. Waiting Christmas point him to <a target="_blank" href="http://www.agiledata.org/essays/databaseRefactoring.html">this article</a> and invite him to follow each singular link; perhaps you will win a friend.</p>
<p><strong><span style="text-decoration: underline;"><span style="font-size: 100%">Dear DBA we are not your enemies, we are both in the same ship.</span></span></strong></p>]]></content>
      <post-name type="text"><![CDATA[database the eliot ness of it]]></post-name>
      <categories>
        <category ref="1089" />
      </categories>
      <trackbacks>
        <trackback id="467" date-created="2009-08-13T23:50:31" date-modified="2009-08-13T23:50:31" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/08/13/how-to-using-the-n-stack-part-3.aspx">
          <title type="text"><![CDATA[How-To: Using the N* Stack, part 3]]></title>
        </trackback>
        <trackback id="545" date-created="2009-11-21T01:31:28" date-modified="2009-11-21T01:31:28" approved="true" url="http://devlicio.us/blogs/anne_epstein/archive/2009/11/20/nhibernate-and-composite-keys.aspx">
          <title type="text"><![CDATA[NHibernate and Composite Keys]]></title>
        </trackback>
        <trackback id="650" date-created="2010-07-01T05:15:35" date-modified="2010-07-01T05:15:35" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2010/06/30/nhibernate-and-composite-keys.aspx">
          <title type="text"><![CDATA[NHibernate and Composite Keys]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="400" date-created="2009-07-05T05:02:00" date-modified="2009-07-05T05:02:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/05/good-morning-nhibernate-2-1-0cr1.aspx" type="normal" hasexcerpt="false" views="4501">
      <title type="text"><![CDATA[Good morning NHibernate 2.1.0CR1]]></title>
      <content type="text"><![CDATA[<p>NHibernate 2.1.0 CR1 is on the road.</p>
<p><a target="_blank" href="https://sourceforge.net/projects/nhibernate/files/">Download NHibernate 2.1.0.CR1</a></p>
<p>After download it please take a look to releasenotes.txt file.</p>
<p>Note:</p>
<p>For those are using sources, there is a new branch named : <strong>2.1.x</strong></p>
<p>All next releases of NH2.1 will be released from the branch.</p>
<p>The series NH2.1.x is the last whose target is. NET2.0</p>]]></content>
      <post-name type="text"><![CDATA[good morning nhibernate 2 1 0cr1]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
        <category ref="1092" />
      </categories>
      <comments>
        <comment id="404" date-created="2009-07-06T10:24:41" date-modified="2009-07-06T10:24:41" approved="true" user-name="Dimonina" user-url="http://nhforge.org/members/Dimonina/default.aspx">
          <title type="text"><![CDATA[re: Good morning NHibernate 2.1.0CR1]]></title>
          <content type="text"><![CDATA[Sorry for may be stupid question. Is LINQ2Nhibernate integrated to this release or is it a standalone plugin?]]></content>
        </comment>
        <comment id="405" date-created="2009-07-06T13:58:39" date-modified="2009-07-06T13:58:39" approved="true" user-name="Dario Quintana" user-url="http://nhforge.org/members/darioquintana/default.aspx">
          <title type="text"><![CDATA[re: Good morning NHibernate 2.1.0CR1]]></title>
          <content type="text"><![CDATA[It's an standalone plugin, and you can find it in the NHibernate.Contrib source code. I'm afraid there isn't a release with this version of NHibernate.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="401" date-created="2009-07-05T12:20:03" date-modified="2009-07-05T12:20:03" approved="true" url="http://blogs.ugidotnet.org/makka/archive/2009/07/05/nhibernate-2.1.0cr1.aspx">
          <title type="text"><![CDATA[NHibernate 2.1.0CR1]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="402" date-created="2009-07-05T15:15:00" date-modified="2009-07-05T15:15:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/05/nhibernate-caches-2-1-0cr1.aspx" type="normal" hasexcerpt="false" views="1981">
      <title type="text"><![CDATA[NHibernate Caches 2.1.0CR1]]></title>
      <content type="text"><![CDATA[<p>
<p><strong>NHibernate Caches 2.1.0CR1 was released today.</strong></p>
<p><a target="_blank" href="https://sourceforge.net/projects/nhcontrib/files/NHibernate.Caches/NHCH2.1.0CR1-bin.zip">Download NHibernate Caches 2.1.0CR1</a>.</p>
<p>Enjoy it together with NHibernate2.1.0.</p>
</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate caches 2 1 0cr1]]></post-name>
      <categories>
        <category ref="1019" />
        <category ref="1036" />
        <category ref="1092" />
      </categories>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="403" date-created="2009-07-05T18:21:00" date-modified="2009-07-05T18:21:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/05/nhibernate-validator-1-2-0-alpha4-released.aspx" type="normal" hasexcerpt="false" views="2056">
      <title type="text"><![CDATA[NHibernate Validator 1.2.0 Alpha4 released]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" /></p>
<p>This release of NHibernate Validator is for use it with NHibernate 2.1CR1. 
</p>
<p>Download binaries, source and examples here: <a href="http://tinyurl.com/ph9q7a">http://tinyurl.com/ph9q7a</a>
</p>
<p>
Read the release notes of this release here: <a href="http://tinyurl.com/olswlw">http://tinyurl.com/olswlw</a></p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 0 alpha4 released]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1036" />
        <category ref="1111" />
        <category ref="1129" />
      </categories>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="411" date-created="2009-07-17T21:30:00" date-modified="2009-07-17T21:30:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/17/nhibernate-configuration.aspx" type="normal" hasexcerpt="false" views="34888">
      <title type="text"><![CDATA[NHibernate Configuration]]></title>
      <content type="text"><![CDATA[<p>[<a target="_blank" href="http://fabiomaulo.blogspot.com/">My blog</a>]</p>
<p>Perhaps not so many people know in how many ways NH can be configured since NH2.0.0. In this post I&rsquo;ll try to summarize some one before implement <em><a target="_blank" href="http://fabiomaulo.blogspot.com/2009/02/nhvloquacious-fluent-configuration-for.html">Loquacious configuration</a></em> in NH3.0.0.</p>
<h4>Xml (default)</h4>
<p>The xml way is the most common used so only some little notes are needed here.</p>
<p>Inside the root node, <span style="color: #800000">hibernate-configuration</span>, you can configure 3 &ldquo;things&rdquo;: the bytecode provider, the reflection optimizer usage and the session-factory.</p>
<p>The bytecode provider and the reflection optimizer can be configured only and exclusively inside the application config (app.config or web.config); outside application config the two configuration are ignored. If you need to configure the bytecode provider or the reflection optimizer the minimal configuration required, inside app.config is, for example:</p>
<pre class="code">    <span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-configuration-2.2</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">bytecode-provider </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">null</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">reflection-optimizer </span><span style="color: red">use</span><span style="color: blue">=</span>"<span style="color: blue">false</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-configuration</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>As you can see the <span style="color: #800000">session-factory</span> section is not present (for this reason I wrote &ldquo;<em>minimal</em>&rdquo;).</p>
<p>The session-factory configuration can be wrote inside or outside the app.config or even in both (inside <strong><span style="text-decoration: underline;">and</span></strong> outside). The minimal configuration required is:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-configuration-2.2</span>"<span style="color: blue">&gt;<br />&lt;</span><span style="color: #a31515">session-factory </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">NHibernate.Test</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">dialect</span>"<span style="color: blue">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">proxyfactory.factory_class</span>"<span style="color: blue">&gt;<br />       </span>NHibernate.ByteCode.LinFu.ProxyFactoryFactory, NHibernate.ByteCode.LinFu<br />   <span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">session-factory</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-configuration</span><span style="color: blue">&gt;</span></pre>
<p>As you can see there are only two properties and, as is, you can&rsquo;t use this configuration because there isn&rsquo;t the connection string.</p>
<p>If you want you can write the minimal configuration inside your application config and merge/override it with the configuration wrote in an external file. I&rsquo;m using this technique everywhere for tests purpose because test suite and production has some common configuration and some other different configuration (for example the <span style="color: #0000ff">current_session_context_class</span>). The code to merge/override the configuration inside app.config with the configuration outside the app.config is:</p>
<pre class="code"><span style="color: blue">var </span>configuration = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>()<br />.Configure()<br />.Configure(yourNhConfPath);</pre>
<p>After this two lines you can continue configuring NHibernate by code (even using the method chaining).</p>
<h4>Xml (custom configSections)</h4>
<p>As usual in NHibernate, you can have a custom <strong><em>Schema</em></strong> for the <span style="color: #800000">hibernate-configuration</span> section. The way is simple:</p>
<pre class="code">    <span style="color: blue">&lt;</span><span style="color: #a31515">configSections</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">section </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">hibernate-configuration</span>"<br />            <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">YourCompany.YourProduct.YourConfigurationSectionHandler, YourAssembly</span>" <span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">configSections</span><span style="color: blue">&gt;<br /></span></pre>
<p>The restriction is :</p>
<ol>
<li>The section name must be &ldquo;hibernate-configuration&rdquo;. </li>
<li>Your ConfigurationSectionHandler must implements <span style="color: #2b91af">IHibernateConfiguration</span>. </li>
</ol>
<p>The reason to write a custom ConfigurationSectionHandler, more than implement something related to <em>Enterprise Library-Configuration Application Block</em>, can be related with the need of some framework (your imagination may work here).</p>
<h4>Xml : <em>The mystery</em></h4>
<p>In these year I saw :</p>
<ul>
<li>everybody using <span style="color: #a31515">property</span> </li>
<li>somebody using the <span style="color: #a31515">mapping</span> section </li>
<li>few people using the <span style="color: #a31515">event</span> and/or the <span style="color: #a31515">listener</span> sections </li>
<li><strong>absolutely nobody using the <span style="color: #a31515">class-cache</span> nor <span style="color: #a31515">collection-cache</span> sections</strong> </li>
</ul>
<p>The two sections related with the second-level-cache configuration are very useful. In general the configuration of the cache is something happening after wrote all mappings; you may have a tests suite that must work without cache and another test suite to check the behavior using second-level-cache. Even if I have changed NH2.1.0 to ignore the cache configuration, inside a class-mapping, when the <span style="color: #0000ff">cache.use_second_level_cache</span> is set to <span style="color: #0000ff">false</span>, the right place to configure the cache, of each class/collection, is inside the session-factory-configuration and not inside the class-mapping itself; you don&rsquo;t need to modify a tested mapping only because cache and you don&rsquo;t need to re-deploy class-mappings only because you need to modify/add the cache configuration of a class/collection.</p>
<h4>Configuration by code</h4>
<p>The whole configuration via XML can be done by pure .NET code.</p>
<p>The bytecode provider can be set before create an instance of the <span style="color: #2b91af">Configuration</span> class:</p>
<pre class="code"><span style="color: #2b91af">Environment</span>.BytecodeProvider = <span style="color: blue">new </span><span style="color: #2b91af">EnhancedBytecode</span>(container);<br /><span style="color: blue">var </span>cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>To set properties in a no strongly typed way (mean by strings) :</p>
<pre class="code">configuration.SetProperty(<span style="color: #2b91af">Environment</span>.GenerateStatistics, <span style="color: #a31515">"true"</span>);<br />configuration.SetProperty(<span style="color: #2b91af">Environment</span>.BatchSize, <span style="color: #a31515">"10"</span>);</pre>
<p>To set listeners in a no strongly typed way (mean by strings) :</p>
<pre class="code">configuration.SetListeners(<span style="color: #2b91af">ListenerType</span>.PreInsert,<br /><span style="color: blue">new</span>[] { <span style="color: #a31515">"YourCompany.YourProduct.YourListener, YourAssembly" </span>});</pre>
<p>To set listeners in strongly typed way :</p>
<pre class="code">configuration.EventListeners.DeleteEventListeners =<br /><span style="color: blue">new</span>[] {<span style="color: blue">new </span><span style="color: #2b91af">ResetReadOnlyEntityDeleteListener</span>()}<br />.Concat(listeners.DeleteEventListeners).ToArray();</pre>
<p>To add class-mappings the <span style="color: #2b91af">Configuration</span> class has various <em>Add*</em> methods :</p>
<p>AddAssembly(<span style="color: #2b91af">Assembly</span> assembly) 
  <br />AddAssembly(<span style="color: #0000ff">string</span> assemblyName) 
  <br />AddClass(System.<span style="color: #2b91af">Type</span> persistentClass) 
  <br />AddDirectory(<span style="color: #2b91af">DirectoryInfo</span> dir) 
  <br />AddFile(<span style="color: #0000ff">string</span> xmlFile) 
  <br />AddFile(<span style="color: #2b91af">FileInfo</span> xmlFile) 
  <br />AddXmlReader(<span style="color: #2b91af">XmlReader</span> hbmReader) 
  <br />AddXml(<span style="color: #0000ff">string</span> xml) 
  <br />AddResource(<span style="color: #0000ff">string</span> path, <span style="color: #2b91af">Assembly</span> assembly) 
  <br />... 
  <br />...</p>
<p><strong>Note</strong> AddXml(<span style="color: #0000ff">string</span> xml) or AddXmlString(<span style="color: #0000ff">string</span> xml) mean that you can add a mapping created at run-time:</p>
<pre class="code"><span style="color: blue">string </span>hbm =<br /><span style="color: #a31515">@"&lt;?xml version='1.0' encoding='utf-8' ?&gt;<br />           &lt;hibernate-mapping xmlns='urn:nhibernate-mapping-2.2'<br />               namespace='NHibernate.DomainModel'<br />               assembly='NHibernate.DomainModel'&gt;<br />               &lt;class name='A' persister='A'&gt;<br />                   &lt;id name='Id'&gt;<br />                       &lt;generator class='native' /&gt;<br />                   &lt;/id&gt;<br />               &lt;/class&gt;<br />           &lt;/hibernate-mapping&gt;"</span>;<br /><br /><span style="color: #2b91af">Configuration </span>cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();<br />cfg.AddXmlString(hbm);</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>To set second-level-cache configuration for classes and collections:</p>
<p>SetCacheConcurrencyStrategy(<span style="color: #0000ff">string</span> clazz, <span style="color: #0000ff">string</span> concurrencyStrategy) 
  <br />SetCacheConcurrencyStrategy(<span style="color: #0000ff">string</span> clazz, <span style="color: #0000ff">string</span> concurrencyStrategy, <span style="color: #0000ff">string</span> region) 
  <br />SetCollectionCacheConcurrencyStrategy(<span style="color: #0000ff">string</span> collectionRole, <span style="color: #0000ff">string</span> concurrencyStrategy)</p>
<h4>The trick of custom Dialect</h4>
<p>Few people know this trick (perhaps only the one I&rsquo;m seeing everyday in the mirror).</p>
<p>Each Dialect has the ability to define its own <em>DefaultProperties</em>. Inside the core, so far, we are using the <em>DefaultProperties</em> property only for few purpose (for example to define the default driver):</p>
<pre class="code">DefaultProperties[<span style="color: #2b91af">Environment</span>.ConnectionDriver] =<br /><span style="color: #a31515">"NHibernate.Driver.SqlClientDriver"</span>;</pre>
<p>If you are not so scared by inherit from a dialect implemented in the core and extends it to register some functions or to change some behavior, you can use it even to define default properties:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">YourCustomDialect </span>: <span style="color: #2b91af">MsSql2005Dialect<br /></span>{<br /><span style="color: blue">public </span>YourCustomDialect()<br />{<br />   DefaultProperties[<span style="color: #2b91af">Environment</span>.QuerySubstitutions] =<br />       <span style="color: #a31515">"wahr 1, falsch 0, ja 'J', nein 'N'"</span>;<br />   DefaultProperties[<span style="color: #2b91af">Environment</span>.ConnectionString] =<br />       <span style="color: #a31515">"your connection string"</span>;<br />   DefaultProperties[<span style="color: #2b91af">Environment</span>.BatchSize] = <span style="color: #a31515">"50"</span>;<br />}<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>What we saw</h4>
<p>Since NH2.0.0GA, you have three or four ways to configure NHibernate with merge/override from different sources.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate configuration]]></post-name>
      <categories>
        <category ref="1019" />
        <category ref="1039" />
        <category ref="1089" />
        <category ref="1128" />
      </categories>
      <comments>
        <comment id="412" date-created="2009-07-18T10:13:26" date-modified="2009-07-18T10:13:26" approved="true" user-name="Symon Rottem" user-url="http://blog.symbiotic-development.com">
          <title type="text"><![CDATA[re: NHibernate Configuration]]></title>
          <content type="text"><![CDATA["absolutely nobody using the class-cache nor collection-cache sections"

Well, not NOBODY...

http://blog.symbiotic-development.com/2008/02/27/more-configuring-nhibernate-caches/

:)

Symon.]]></content>
        </comment>
        <comment id="413" date-created="2009-07-18T11:57:21" date-modified="2009-07-18T11:57:21" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Configuration]]></title>
          <content type="text"><![CDATA[The entirely phrase..
The mystery: In these year I saw absolutely nobody using the class-cache nor collection-cache sections.

well now I can say : I saw one using the class-cache nor collection-cache sections.

hahahaha ;)

In NH3.0 is now available the strongly typed configuration of that section.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="414" date-created="2009-07-19T13:27:00" date-modified="2009-07-19T13:27:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/19/welcome-nh2-1-0.aspx" type="normal" hasexcerpt="false" views="15648">
      <title type="text"><![CDATA[Welcome NH2.1.0]]></title>
      <content type="text"><![CDATA[<p>NHibernate 2.1.0GA was released today.</p>
<p><a target="_blank" href="http://sourceforge.net/projects/nhibernate/files/">Download it!</a></p>
<p><b>After download it please take a look to releasenotes.txt file.</b></p>
<p><span style="text-decoration: underline;">Note: The series NH2.1.x is the last whose target is .NET2.0</span></p>
<p>The reference manual is available for download.</p>
<p>We can&rsquo;t release the API doc because its size. To compile API documentation you need to download sources and call : nant api.</p>]]></content>
      <post-name type="text"><![CDATA[welcome nh2 1 0]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
        <category ref="1092" />
        <category ref="1111" />
        <category ref="1145" />
      </categories>
      <comments>
        <comment id="419" date-created="2009-07-20T13:59:34" date-modified="2009-07-20T13:59:34" approved="true" user-name="XOR" user-url="http://nhforge.org/members/XOR/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Fabio, people demand API reference! :) It is really not that easy to build it for the one who have no buildable NHibernate project set up. Just unpacking sources and invoking NAnt doesn't do the trick. 

It fails with error:
c:\Program Files\NHibernate\doc\documentation.build:
Error loading buildfile.
    Could not find a part of the path 'c:\Program Files\NHibernate\doc\documentation.build'.

But even if it would build, it is just not right to obscure vital information from masses.

Why is it so hard to publish API reference? ]]></content>
        </comment>
        <comment id="420" date-created="2009-07-20T14:04:45" date-modified="2009-07-20T14:04:45" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[as .chm the API reference is 39MB, as site is ~365MB]]></content>
        </comment>
        <comment id="421" date-created="2009-07-20T14:13:42" date-modified="2009-07-20T14:13:42" approved="true" user-name="Dimonina" user-url="http://nhforge.org/members/Dimonina/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Thank you, guys. It would be great if someone will write a big article "New features in 2.1" with examples. Documentation to Nhibernate is still poor, and Ayende sometimes discovers new things to me in his blog.]]></content>
        </comment>
        <comment id="422" date-created="2009-07-20T14:21:15" date-modified="2009-07-20T14:21:15" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[@Dinominia
Ayende's blog and my blog, and this blog is full of posts about new features in NH2.1.0 and if you look my blog you can even find new features of NH3.0.0]]></content>
        </comment>
        <comment id="423" date-created="2009-07-20T14:33:04" date-modified="2009-07-20T14:33:04" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[<p>@XOR</p>
<p>The "vital" information is available in VS if you copy the NHibernate.xml in the same folder where you have NHibernate.dll</p>]]></content>
        </comment>
        <comment id="424" date-created="2009-07-20T16:27:20" date-modified="2009-07-20T16:27:20" approved="true" user-name="Mark Phillips" user-url="http://nhforge.org/members/mphillips/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[unable to download either bin or source.  Error Message is that zip is corrupted.  Have tried multiple times.]]></content>
        </comment>
        <comment id="426" date-created="2009-07-20T21:59:46" date-modified="2009-07-20T21:59:46" approved="true" user-name="bunceg" user-url="http://nhforge.org/members/bunceg/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Fabio,

True... its all in the blogs and it very interesting. But try finding it again afterwards.

If nothing else, add a wki entry (and Ayende who is just as bad) pointing to the blog. The last set of blog entries Ayende on all the settings in the mapping file was incredibly useful (and pointed out some new stuff to me) but its really hard to find this stuff after a few months.]]></content>
        </comment>
        <comment id="427" date-created="2009-07-20T22:06:47" date-modified="2009-07-20T22:06:47" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[@bunceg
Sure, it is true.
For that reason we are giving you NH-Forge.
The NH-Forge wiki is open for NH-Forge's registered users, each user can leave his contribute.
In the wiki there are various sections including wiki-reference, How-To and so on.
]]></content>
        </comment>
        <comment id="438" date-created="2009-07-21T09:12:23" date-modified="2009-07-21T09:12:23" approved="true" user-name="XOR" user-url="http://nhforge.org/members/XOR/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[@Fabio
Is 39 Mb too big for Source Forge? Or for this site? If there is a problem with space, it can be solved by plenty of ways.]]></content>
        </comment>
        <comment id="440" date-created="2009-07-21T13:09:55" date-modified="2009-07-21T13:09:55" approved="true" user-name="alrhr" user-url="http://nhforge.org/members/alrhr/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[I have the problem that XOR desrcibes. I downloaded the sources and  invoked nant api. The result is the error message that parts of the path could not be found.

What do I have to do, so that compilation does not fail?]]></content>
        </comment>
        <comment id="441" date-created="2009-07-21T13:23:58" date-modified="2009-07-21T13:23:58" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Probably download and install SandCastle.
I'll check if SF allow us to upload the API chm.]]></content>
        </comment>
        <comment id="442" date-created="2009-07-21T16:13:09" date-modified="2009-07-21T16:13:09" approved="true" user-name="tbrooks" user-url="http://nhforge.org/members/tbrooks/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[It's not just Sandcastle.  In order to build the reference documentation you need:
1. SandCastle help File Builder from Codeplex
2. SandCastle from Microsoft
3. Java Runtime Environment (JRE)
4. Saxon jars (doesn't have to be installed)
5. HTML Help Workshop 
6. VS Help Integration Kit (VSHIK)

Right now, this is way too complicated to piece together just to build the CHM documentation.  Unfortunately, I'm not willing to install the JRE just to build help documentation.  I'm hoping that someone who has it installed and can build the CHM, can post it on Drop IO or someplace similar if it cannot be hosted here.

At one point, back in 1.2 days, the CHM was hosted at SourceForge.

]]></content>
        </comment>
        <comment id="443" date-created="2009-07-21T16:19:39" date-modified="2009-07-21T16:19:39" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[uffffff!!]]></content>
        </comment>
        <comment id="444" date-created="2009-07-21T16:20:39" date-modified="2009-07-21T16:20:39" approved="true" user-name="tbrooks" user-url="http://nhforge.org/members/tbrooks/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Looks like I was late to the party.  

Fabio, I assume you posted the reference documentation to SourceForge.  Thank you.

My apologies regarding my previous comment, I hadn't realized that it had already been taken care of.]]></content>
        </comment>
        <comment id="445" date-created="2009-07-22T10:32:04" date-modified="2009-07-22T10:32:04" approved="true" user-name="alrhr" user-url="http://nhforge.org/members/alrhr/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Thanks Fabio and all you other guys for the new Version of NHibernate. This is a tremendous piece of work!! I forgot to say that in my last posting. 

Thank you for the apidoc on sourceforge!]]></content>
        </comment>
        <comment id="458" date-created="2009-07-27T15:15:46" date-modified="2009-07-27T15:15:46" approved="true" user-name="Dimonina" user-url="http://nhforge.org/members/Dimonina/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[Found bug in new version, sorry, don't have a login to issue tracker.
We have a query.
select o.ID, o.Name, addr
 from Organization o
 left join fetch o.Address addr

Organization - many-to-one - Address.
Get an error:
Query specified join fetching, but the owner of the fetched association was not present in the select list...
It means that I need to have entire Organization class oin select clause, but I don't. In 2.0 everything works fine (just replaced dlls). What to do?]]></content>
        </comment>
        <comment id="459" date-created="2009-07-28T09:18:33" date-modified="2009-07-28T09:18:33" approved="true" user-name="Dimonina" user-url="http://nhforge.org/members/Dimonina/default.aspx">
          <title type="text"><![CDATA[re: Welcome NH2.1.0]]></title>
          <content type="text"><![CDATA[I've solved it. The new HQL parser is more strict than previous.
The rigth query is:
select o.Id, o.Name, o.Address from Organization o where .....

And also look at these queries:
select o.Id, o.Country.Name, o.Address from Organization o where...
It doesn't work. Generated SQL part would be like this:
... from Organizations o INNER JOIN Address a INNER JOIN Countries c ON a.Id = o.AddressId ON c.Id = o.CountryId...

So the right query is:
select o.Id, cn.Name, o.Address from Organization o inner join o.Country cn where....

And the generated SQL is:
... from Organizations o INNER JOIN Address a ON a.Id = o.AddressId
 INNER JOIN Countries c  ON c.Id = o.CountryId...

Be careful with queries.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="418" date-created="2009-07-20T09:11:30" date-modified="2009-07-20T09:11:30" approved="true" url="http://weblogs.asp.net/sanjeevagarwal/archive/2009/07/20/daily-tech-links-for-net-and-related-technologies-july-18-21-2009.aspx">
          <title type="text"><![CDATA[Daily tech links for .net and related technologies - July 18-21, 2009]]></title>
        </trackback>
        <trackback id="428" date-created="2009-07-20T23:44:20" date-modified="2009-07-20T23:44:20" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
        <trackback id="439" date-created="2009-07-21T10:07:12" date-modified="2009-07-21T10:07:12" approved="true" url="http://blogs.byte-force.com/xor/archive/2009/07/21/nhibernate-2.1.0-is-out.aspx">
          <title type="text"><![CDATA[NHibernate 2.1.0 is out]]></title>
        </trackback>
        <trackback id="446" date-created="2009-07-23T11:12:02" date-modified="2009-07-23T11:12:02" approved="true" url="http://dotnetshoutout.com/Welcome-NH210-NHibernate-blog-NHibernate-Forge">
          <title type="text"><![CDATA[Welcome NH2.1.0 - NHibernate blog - NHibernate Forge]]></title>
        </trackback>
        <trackback id="452" date-created="2009-07-25T15:27:29" date-modified="2009-07-25T15:27:29" approved="true" url="http://kartones.net/blogs/lawebdeprogramacion/archive/2009/07/25/noticias-25-julio-2009.aspx">
          <title type="text"><![CDATA[Noticias 25-Julio-2009]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="415" date-created="2009-07-19T14:24:00" date-modified="2009-07-19T14:24:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/19/nhibernate-caches-2-1-0ga.aspx" type="normal" hasexcerpt="false" views="6236">
      <title type="text"><![CDATA[NHibernate Caches 2.1.0GA]]></title>
      <content type="text"><![CDATA[<p>
<p><strong>NHibernate Caches 2.1.0GA was released today.</strong></p>
<p><a target="_blank" href="https://sourceforge.net/projects/nhcontrib/files/NHibernate.Caches/NHCH2.1.0GA-bin.zip/download">Download NHibernate Caches 2.1.0GA</a>.</p>
<p>Enjoy it together with NHibernate2.1.0GA.</p>
</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate caches 2 1 0ga]]></post-name>
      <categories>
        <category ref="1019" />
        <category ref="1036" />
        <category ref="1092" />
        <category ref="1111" />
      </categories>
      <comments>
        <comment id="492" date-created="2009-08-24T19:13:57" date-modified="2009-08-24T19:13:57" approved="true" user-name="Paulo Roberto Quicoli" user-url="http://nhforge.org/members/quicoli/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Caches 2.1.0GA]]></title>
          <content type="text"><![CDATA[How to use, configure,  Bamboo prevalence as cache?]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="429" date-created="2009-07-20T23:44:23" date-modified="2009-07-20T23:44:23" approved="true" url="http://zvolkov.com/blog/post/2009/07/20/Whats-new-in-NHibernate-21.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 2.1]]></title>
        </trackback>
        <trackback id="447" date-created="2009-07-23T11:13:25" date-modified="2009-07-23T11:13:25" approved="true" url="http://dotnetshoutout.com/NHibernate-Caches-210GA-NHibernate-blog-NHibernate-Forge">
          <title type="text"><![CDATA[NHibernate Caches 2.1.0GA - NHibernate blog - NHibernate Forge]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="425" date-created="2009-07-20T19:35:00" date-modified="2009-07-20T19:35:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/20/nhibernate-validator-1-2-0-beta1-released.aspx" type="normal" hasexcerpt="false" views="3679">
      <title type="text"><![CDATA[NHibernate Validator 1.2.0 Beta1 released]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" /></p>
<p><a href="http://sourceforge.net/projects/nhcontrib/files/">Download binaries, source and examples here</a></p>
<p><a href="https://sourceforge.net/project/shownotes.php?group_id=216446&amp;release_id=698445">
Read the release notes of this release here: </a></p>
<p>Remember you can see examples in our quickstart.</p>
<p>This release of NHibernate Validator is ready to use it with NHibernate 2.1GA. 
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 0 beta1 released]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1036" />
        <category ref="1111" />
        <category ref="1129" />
      </categories>
      <trackbacks>
        <trackback id="448" date-created="2009-07-23T11:14:19" date-modified="2009-07-23T11:14:19" approved="true" url="http://dotnetshoutout.com/NHibernate-Validator-120-Beta1-released-NHibernate-blog-NHibernate-Forge">
          <title type="text"><![CDATA[NHibernate Validator 1.2.0 Beta1 released - NHibernate blog - NHibernate Forge]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="453" date-created="2009-07-26T10:52:00" date-modified="2009-07-26T10:52:00" approved="true" post-url="/blogs/nhibernate/archive/2009/07/26/nhibernate-linq-1-0-ga-released.aspx" type="normal" hasexcerpt="false" views="17465">
      <title type="text"><![CDATA[NHibernate.Linq 1.0.0 GA released]]></title>
      <content type="text"><![CDATA[<p>We have just released the first version of Linq provider for NHibernate.</p>
<p>The current implementation you'll find in the provided links are based on the NHibernate Contrib project which uses Criteria API. It can support almost everything you can do with Criteria API.</p>
<p>You can get the binaries and the source code <a href="http://sourceforge.net/projects/nhibernate/files/">from the files section</a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate linq 1 0 ga released]]></post-name>
      <categories>
        <category ref="1130" />
      </categories>
      <comments>
        <comment id="456" date-created="2009-07-27T04:08:48" date-modified="2009-07-27T04:08:48" approved="true" user-name="marcus" user-url="http://nhforge.org/members/marcus/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Linq 1.0.0 GA released]]></title>
          <content type="text"><![CDATA[Great work to everyone involved in putting this release together! ]]></content>
        </comment>
        <comment id="457" date-created="2009-07-27T05:49:37" date-modified="2009-07-27T05:49:37" approved="true" user-name="Dimonina" user-url="http://nhforge.org/members/Dimonina/default.aspx">
          <title type="text"><![CDATA[re: NHibernate.Linq 1.0.0 GA released]]></title>
          <content type="text"><![CDATA[OMG! I'll try it today! Thanks a lot!
But i don't understand how to use "fetch" in LINQ. Is there any solution in LINQ for HQL's "fetch"?]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="454" date-created="2009-07-26T20:26:39" date-modified="2009-07-26T20:26:39" approved="true" url="http://tunatoksoz.com/post/NHibernate-Linq-Released.aspx">
          <title type="text"><![CDATA[NHibernate Linq Released]]></title>
        </trackback>
        <trackback id="455" date-created="2009-07-26T20:45:49" date-modified="2009-07-26T20:45:49" approved="true" url="http://devlicio.us/blogs/tuna_toksoz/archive/2009/07/26/nhibernate-linq-released.aspx">
          <title type="text"><![CDATA[NHibernate Linq Released]]></title>
        </trackback>
        <trackback id="475" date-created="2009-08-17T21:06:08" date-modified="2009-08-17T21:06:08" approved="true" url="http://weblogs.asp.net/adamgreene/archive/2009/08/17/mvc-ioc-series.aspx">
          <title type="text"><![CDATA[MVC IoC Series]]></title>
        </trackback>
        <trackback id="524" date-created="2009-10-15T18:17:05" date-modified="2009-10-15T18:17:05" approved="true" url="http://www.cnblogs.com/GoodHelper/archive/2009/10/16/linq2nhibernate.html">
          <title type="text"><![CDATA[10分钟搞定Linq to NHibernate]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="460" date-created="2009-08-11T20:02:00" date-modified="2009-08-11T20:02:00" approved="true" post-url="/blogs/nhibernate/archive/2009/08/11/how-to-using-the-n-stack-part-1.aspx" type="normal" hasexcerpt="false" views="6247">
      <title type="text"><![CDATA[How-To: Using the N* stack, part 1]]></title>
      <content type="text"><![CDATA[<p>&nbsp;</p>
<div>
<p>This is the first post in a series where I show you step-by-step how to get your first ASP.NET MVC website up off the ground. By the end of this series, we&rsquo;ll have a working web application for registering community college students. More importantly, you'll have a template you can easily follow for your own projects.</p>
<p>In this first post, I&rsquo;ll show you how to set up your visual studio solution.</p>
<p>In this series, we&rsquo;ll use these tools:</p>
<ul>
<li><strong><a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a></strong>&nbsp;is a free, fully Microsoft-supported product that, unlike ASP.NET WebForms, gives you complete control over your application. You can use the Web Platform Installer or download the MSI installer package directly.</li>
<li><strong><a href="http://www.codeplex.com/MVCContrib" target="_blank">MVCContrib</a></strong>&nbsp;&ndash; This is the contrib project for ASP.NET MVC. It adds additional functionality to and makes ASP.NET MVC easier to use.</li>
<li><strong><a href="http://jquery.com/" target="_blank">jQuery</a></strong>&nbsp;&ndash; This is an open-source javascript library that does just about everything, and supports every major modern browser out there. Yes, you hate javascript. You&rsquo;re going to love jQuery. I promise. This is included in the ASP.NET MVC download.</li>
<li><strong><a href="http://sourceforge.net/projects/nhibernate/" target="_blank">NHibernate 2,1</a></strong>&nbsp;is a well-known, mature, open source object relational mapper (ORM). It helps you get on with writing you application, instead of spending days, weeks, or even months writing a data access layer.</li>
<li><strong><a href="http://fluentnhibernate.org/downloads" target="_blank">Fluent NHibernate</a></strong>&nbsp;&ndash; This is a library for configuring NHibernate using an english-like syntax. It saves you from hacking through dozens of XML configuration files. Scroll to the bottom of the downloads page and get the latest compiled binaries.</li>
<li><strong><a href="http://ninject.org/" target="_blank">Ninject</a></strong>&nbsp;is my personal favorite dependency injection (DI) / inversion of control (IoC) framework. It allows you to automatically wire up services to your objects. If you&rsquo;ve never done DI or IoC before, you&rsquo;re going to have a great &ldquo;ah-ha!&rdquo; moment. We&rsquo;ll be using version 1.</li>
</ul>
<p>You will also need:</p>
<ul>
<li>.NET Framework 3.5 SP1</li>
<li>Visual Studio 2008 SP1. The Web Dev Express version may also work. I haven&rsquo;t tried it.</li>
<li>The latest version of NUnit</li>
<li>Any major database supported by NHibenate. This can range from Oracle to SQL Server to MySQL to SQLite. I&rsquo;ll be using SQL server in my examples, but if you have a favorite, you can easily use that instead.</li>
</ul>
<p>I also suggest you get some kind of source control. You&rsquo;ll want to play around and experiment as we go along.</p>
<p>OK. You&rsquo;ve downloaded all of that? Good. Let&rsquo;s talk terminology for a minute.</p>
<ul>
<li><strong>MVC</strong>&nbsp;stands for&nbsp;<strong>Model-View-Controller</strong>. This separation of responsibilities allows you greater flexibility to adapt and change your application.</li>
<li><strong>Model</strong>&nbsp;&ndash; This term refers to all of your entities &ndash; your business objects. In terms of a billing application, this would be your invoices, invoice items, customers, products, etc. &ndash; all of the &ldquo;real-world things&rdquo; your application represents.</li>
<li><strong>View</strong>&nbsp;&ndash; Each view presents a specific business object in a specific way. For example, you may have a view for editing customer data and another for displaying an invoice. You can also think of views as the pages that make up your application.</li>
<li><strong>Controller</strong>&nbsp;&ndash; Controllers are the glue that bind a view to a specific entity in your model. They are also responsible for all of the flow of your application from page to page.</li>
<li><strong>Inversion of Control</strong>&nbsp;(<strong>IoC</strong>) is the concept that your objects do not explicitly create the services that they need. Instead, they get them from some container of services. Hence, the inversion. Your classes don&rsquo;t specify a specific implementation of the service, only the type of service they need &ndash; an interface. This loose coupling allows you to easily swap out implementations of those services without having to touch every class that uses them. I&rsquo;ve seen two major flavors of IoC: Service Locator and Dependency Injection.</li>
<li>A&nbsp;<strong>Service Locator</strong>&nbsp;is a central container where you specify which implementations of each service your application will use. Your objects request service implementations from the service locator. A service locator is typically a singleton, which is why I don&rsquo;t like it.</li>
<li><strong>Dependency Injection</strong>&nbsp;(<strong>DI</strong>) is a method of wiring your objects to the services they depend on as the object is built. These services are typically passed in as parameters on the object&rsquo;s constructor. The object itself is built by the DI framework, in this case, Ninject. The process of building dependencies can be many layers deep. The<a href="http://dojo.ninject.org/Dependency%20Injection%20By%20Hand.ashx" target="_blank">Ninject Dojo</a>&nbsp;has a great tutorial on dependency injection. If you&rsquo;re new to IoC, it&rsquo;s a great place to start learning. Once you have the &ldquo;ah ha!&rdquo; moment, the migraine will stop and you&rsquo;ll never look at code the same again. I promise.</li>
</ul>
<h3>Setting up the solution</h3>
<p><em>Disclaimer: This is how I have learned to set up my projects. I&rsquo;m sure others have differing opinions. I&rsquo;d love to hear them. I don&rsquo;t claim to be an expert, just a curious professional looking to improve.</em></p>
<p>Setting up the project is fairly straight-forward. We&rsquo;ll do almost everything through Visual Studio. Just follow these steps.</p>
<ol>
<li>
<h4>Create the solution and web project</h4>
<p>In Visual Studio, start a new ASP.NET MVC Web Application. This template is added to Visual Studio when you install ASP.NET MVC. I&rsquo;ll be calling my solution NStackExample.<a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image.png"><br /><img title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb.png" border="0" alt="image" width="534" height="293" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a></p>
<p>There&rsquo;s a few things to note here. First, we&rsquo;re creating a solution directory. Second, notice how we&rsquo;ve appended .Web to the name of our web project, but not the solution.</p>
<p>This web project will contain all of the views. Despite the implied direction from Microsoft through the ASP.NET MVC template, it won&rsquo;t contain the model or the controllers.</p>
</li>
<li>
<h4>Create a library directory</h4>
<p>Inside your solution directory, create a directory for all 3rd party libraries used in your project. I call mine Solution Items. The name you give it isn&rsquo;t as important as the fact that you have one. So, in the example shown above, I would create the directory C:\Users\Jason\Documents\Visual Studio 2008\Projects\NStackExample\Solution items. Copy these 15 assemblies to the library directory:</p>
<ul>
<li>From MVCContrib:
<ul>
<li>MVCContrib.dll</li>
<li>Microsoft.Web.Mvc.dll</li>
<li>System.Web.Abstractions.dll</li>
<li>System.Web.Mvc.dll</li>
<li>System.Web.Routing.dll</li>
</ul>
</li>
<li>From NHibernate:
<ul>
<li>Antlr3.Runtime.dll</li>
<li>Iesi.Collections.dll</li>
<li>log4net.dll</li>
<li>NHibernate.dll</li>
<li>Castle.Core.dll</li>
<li>Castle.DynamicProxy2.dll</li>
<li>NHibernate.Bytecode.Castle.dll</li>
</ul>
</li>
<li>FluentNHibernate.dll from Fluent NHibernate</li>
<li>From Ninject:
<ul>
<li>Ninject.Core.Dll</li>
<li>Ninject.Framework.Mvc.Dll</li>
</ul>
</li>
</ul>
</li>
<li>
<h4>Create the core project</h4>
<p>This is your main project. It will contain your model, as well as interfaces for any services and strategies your application will use. It will not contain the implementation of any of those services. Those go in separate, easily replaceable assemblies.</p>
<p>Add a new &ldquo;Class Library&rdquo; project to your solution. We&rsquo;ll call this project NStackExample.Core.</p>
<p>Now, right click on the project and select properties, then click on the Application tab on the side. In the root namespace field, remove .Core.</p>
<p><img title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb2.png" border="0" alt="image" width="554" height="57" /><br />We&rsquo;re doing this so our entities will be named NStackExample.Entity1, NStackExample.Entity2, etc. but the assembly will be NStackExample.Core.dll, which better describes it&rsquo;s purpose.</p>
</li>
<li>
<h4>Create the controller project</h4>
<p>Next, create another project specifically for the controllers of your MVC project. We&rsquo;re going to call it NStackExample.Controllers. Yes, the Microsoft ASP.NET MVC project template already has a folder for them. We&rsquo;re not going to use that folder because I think they should be better separated from the content of your website.</p>
</li>
<li>
<h4>Clean up your projects</h4>
<p>Delete all of these:</p>
<ul>
<li>The Class.vb or Class.cs files in the Core and Controllers projects.</li>
<li>In the NStackExample.Web project, delete:
<ul>
<li>The Controllers folder and all of it's contents.</li>
<li>The Models folder</li>
<li>The Microsoft AJAX script libraries in the Scripts folder</li>
<li>The Home and Account folders inside the Views folder</li>
<li>The LogOnUserControl in the Views folder</li>
</ul>
</li>
</ul>
<p><img title="image" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb4.png" border="0" alt="image" width="410" height="771" /></p>
</li>
<li>
<h4>Set up your references</h4>
<p>This is pretty straight forward.</p>
<ol>
<li>First, in your web project, remove the references to System.Web.Abstractions, System.Web.Mvc, and System.Web.Routing.</li>
<li>Next, in your web project, from the library directory we created in step 2, add references to these 10 assemblies:
<ul>
<li>log4net.dll</li>
<li>Microsoft.Web.Mvc.dll</li>
<li>MvcContrib.dll</li>
<li>NHibernat.Bytecode.Castle.dll</li>
<li>NHibernate.dll</li>
<li>Ninject.Core.dll</li>
<li>Ninject.Framework.Mvc.dll</li>
<li>System.Web.Abstractions.dll</li>
<li>System.Web.Mvc.dll</li>
<li>System.Web.Routing.dll</li>
</ul>
</li>
<li>In the web project, add references to the controllers project and the core project.</li>
<li>In the controllers project, add references to these 3 assemblies:
<ul>
<li>log4net.dll</li>
<li>MvcContrib.dll</li>
<li>System.Web.Mvc.dll</li>
</ul>
</li>
<li>In the controllers project, add a reference to the core project.</li>
</ol></li>
</ol>
<p>Did you notice how we didn&rsquo;t add any references in our core project? That&rsquo;s intentional. When a project needs to reference your model or service interfaces, you don&rsquo;t want to have required dependencies on other libraries and frameworks.</p>
<p>That&rsquo;s it. Your solution is set up and you&rsquo;re ready to start coding. In the next post, we&rsquo;ll start building the model.</p>
<p>Jason</p>
<p>- Blogged-out for the night</p>
<p>(Reposted from <a href="http://jasondentler.com/blog">my blog</a>)</p>
<p>Corrections:<br />Ninject.Framework.Mvc.dll is not included in the precompiled Ninject download. You can get the source code from the Ninject trunk and compile it yourself, or you can snag the dll from the source code in part 2.&nbsp;</p>
</div>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[how to using the n stack part 1]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1146" />
        <category ref="1147" />
        <category ref="1148" />
        <category ref="1149" />
        <category ref="1150" />
      </categories>
      <trackbacks>
        <trackback id="1095" date-created="2014-09-26T01:51:02" date-modified="2014-09-26T01:51:02" approved="true" url="http://websupport.montana.com/phpinfo.phtml?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2FWww.youtube.com%2Fwatch%3Fv%3DCUBw1oIAV3M%3Echeap+sewing+machines+uk%3C%2Fa%3E">
          <title type="text"><![CDATA[visit the following internet site]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="461" date-created="2009-08-11T20:21:00" date-modified="2009-08-11T20:21:00" approved="true" post-url="/blogs/nhibernate/archive/2009/08/11/how-to-using-the-n-stack-part-2.aspx" type="normal" hasexcerpt="false" views="4288">
      <title type="text"><![CDATA[How-To: Using the N* Stack, part 2]]></title>
      <content type="text"><![CDATA[<p>&nbsp;</p>
<div>
<p>Last Saturday, I posted the&nbsp;<a target="_blank" href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/">first part in a series</a>&nbsp;about building an&nbsp;<a target="_blank" href="http://www.asp.net/mvc/">ASP.NET MVC</a>&nbsp;application from the ground up using&nbsp;<a target="_blank" href="http://sourceforge.net/projects/nhibernate/">NHibernate</a>&nbsp;and&nbsp;<a target="_blank" href="http://ninject.org/">Ninject</a>. It dealt with setting up the structure of your solution and referencing some 3rd party assemblies.</p>
<p>In part 2, we&rsquo;re going to set up the persistence object model. The persistence object model is a set of objects that we use to persist (save) data to the database.</p>
<p><strong>Warning:</strong>&nbsp;This is a sample application. There are widely varying opinions on the correct structure for these types of applications. As with most advanced subjects in the ALT.NET space,&nbsp;<a target="_blank" href="http://ayende.com/Blog/Default.aspx">Ayende</a>&nbsp;has&nbsp;<a target="_blank" href="http://ayende.com/Blog/archive/2009/08/02/your-domain-model-isnrsquot-in-the-entity-relationship-diagram.aspx">some great information</a>&nbsp;on the difference between a persistence object model and a domain model. For the purposes of this series, they&rsquo;re the same thing.</p>
<p>First, we build the structure of our persistence model as plain old CLR objects (POCO). I like to do this in the Visual Studio class designer. It helps keep me focused on the high-level entities and relationships instead of wandering off to do detailed implementation code.</p>
<p>Here&rsquo;s the model we&rsquo;ll start with:</p>
<p><a href="http://jasondentler.com/blog/wp-content/uploads/2009/08/image6.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" height="610" width="528" alt="image" border="0" src="http://jasondentler.com/blog/wp-content/uploads/2009/08/image_thumb6.png" title="image" /></a></p>
<p>Let&rsquo;s look at the relationships between courses and sections. We have a one to many relationship from a Course to it&rsquo;s Sections represented by an ICollection(Of Section) property in Course. We also have a many-to-one relationship from each section back to it&rsquo;s Course represented by the Course property on Section.</p>
<pre class="brush:vbnet">Public Class Course

    Public Property Sections() As ICollection(Of Section)
        Get

        End Get
        Set(ByVal value As ICollection(Of Section))

        End Set
    End Property

End Class

Public Class Section

    Public Property Course() As Course
        Get

        End Get
        Set(ByVal value As Course)

        End Set
    End Property

    'Other properties here...

End Class</pre>
<pre class="brush:csharp">public class Course
{

    public ICollection&lt;Section&gt; Sections {
        get { }

        set { }

    }

}

public class Section
{

    public Course Course {
        get { }

        set { }

    }

    //Other properties here...

}</pre>
<p>Now that we have all of that built, there&rsquo;s a couple of small requirements to use these classes with NHibernate.</p>
<ol>
<li>All properties and methods must be overridable. That&rsquo;s virtual for your C# folks.</li>
<li>Unless you&rsquo;re using a dependency injection bytecode provider, you need a parameter-less constructor. If you don&rsquo;t know what a bytecode provider is, don&rsquo;t worry about it. We&rsquo;ll get in to it later on in the series. If you don&rsquo;t have any constructors, you&rsquo;re fine. There&rsquo;s an implied parameterless constructor. As soon as you add a constructor with parameters, you&rsquo;ll need to create one without parameters, just for NHibernate.</li>
<li><span style="text-decoration: line-through;">You need some sort of identity property for your database primary key. This can be inherited from a base class, which is exactly what we&rsquo;re going to do.</span>&nbsp;Edit: Not true. Thanks for the correction Ayende!</li>
<li>In the case of readonly properties, you have some options. You can tell NHibernate your naming convention for backing fields. I don&rsquo;t like this. I prefer to make my properties read/write and make the setter protected. If you&rsquo;re new to NHibernate, you&rsquo;ve probably never seen this before.
<pre class="brush:vbnet">Public Class Course
    Inherits Entity

    Private m_Sections As ICollection(Of Section) = New HashSet(Of Section)

    Public Overridable Property Sections() As ICollection(Of Section)
        Get
            Return m_Sections
        End Get
        Protected Set(ByVal value As ICollection(Of Section))
            m_Sections = value
        End Set
    End Property

End Class</pre>
<pre class="brush:csharp">public class Course : Entity
{

    private ICollection&lt;Section&gt; m_Sections = new HashSet&lt;Section&gt;();

    public virtual ICollection&lt;Section&gt; Sections {
        get { return m_Sections; }
        protected set { m_Sections = value; }
    }

}</pre>
<p>This is how I set up all of my collection properties. You can manipulate the contents of the collection, but you can't replace it with another instance without inheriting this class and overriding the property. If you were to make this property readonly, you'd have to configure NHibernate to write to m_Sections using reflection. It's sort of a pain, and completely unnecessary. This is easier and accomplishes the same end result.</p>
<p>Also, notice that we're inheriting from a class called Entity. More on that later.</p>
</li>
</ol>
<p>Let's talk about the database for a minute. Each of these entity classes will eventually become a database table. What will you use for your primary keys?&nbsp;<a target="_blank" href="http://fabiomaulo.blogspot.com/2009/02/nh210-generators-behavior-explained.html">Fabio Maulo</a>&nbsp;has a great post on the different NHibernate primary key generators. He also has&nbsp;<a target="_blank" href="http://fabiomaulo.blogspot.com/2008/12/identity-never-ending-story.html">this post</a>&nbsp;about why identity columns probably are not the best choice.</p>
<p>So what&rsquo;s a good choice? Well, that&rsquo;s a matter of opinion. Thanks to NHibernate, I don&rsquo;t go spelunking through the database much anymore, so I like guids. You really can use what you like, or rather, what your DBA likes.</p>
<p>Now, where are you going to put these primary keys in your objects? In my opinion, this is really a persistence detail &ndash; meaning your objects shouldn&rsquo;t really be dealing with it. That&rsquo;s why we&rsquo;re going to keep it hidden away in the base class. Remember, we&rsquo;re inheriting from Entity.</p>
<pre class="brush:vbnet">Public MustInherit Class Entity

    Private m_ID As Guid

    Public Overridable Property ID() As Guid
        Get
            Return m_ID
        End Get
        Protected Set(ByVal value As Guid)
            m_ID = value
        End Set
    End Property

End Class</pre>
<pre class="brush:csharp">public abstract class Entity
{

    private Guid m_ID;

    public virtual Guid ID {
        get { return m_ID; }
        protected set { m_ID = value; }
    }

}</pre>
<p>That&rsquo;s it for today&rsquo;s post. In part 3, we&rsquo;ll configure NHibernate and set up our database. For homework, we&rsquo;re going to flesh out the other properties in our persistence model. Check out the source code in&nbsp;<a target="_blank" href="http://jasondentler.com/downloads/NStackExample.Part2.VBNET.zip">Visual Basic.NET</a>&nbsp;or&nbsp;<a target="_blank" href="http://jasondentler.com/downloads/NStackExample.Part2.CSHARP.zip">C#.</a></p>
<p>(Reposted from my <a href="http://jasondentler.com/blog">blog</a>)</p>
</div>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[how to using the n stack part 2]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1137" />
        <category ref="1147" />
      </categories>
      <comments>
        <comment id="462" date-created="2009-08-12T18:11:28" date-modified="2009-08-12T18:11:28" approved="true" user-name="Diego Jancic" user-url="http://nhforge.org/members/diegojancic/default.aspx">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 2]]></title>
          <content type="text"><![CDATA[Nice posts!
However, the download source links are not working here cause you used relative urls.
Thanks!]]></content>
        </comment>
        <comment id="463" date-created="2009-08-12T19:20:57" date-modified="2009-08-12T19:20:57" approved="true" user-name="Jason Dentler" user-url="http://nhforge.org/members/Jason-Dentler/default.aspx">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 2]]></title>
          <content type="text"><![CDATA[Download links fixed. Thanks!]]></content>
        </comment>
        <comment id="510" date-created="2009-09-19T15:04:54" date-modified="2009-09-19T15:04:54" approved="true" user-name="Flaker" user-url="http://nhforge.org/members/Flaker/default.aspx">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 2]]></title>
          <content type="text"><![CDATA[Jason. Your blog and all downloads are down. Are you moving to other site?

Thanks!]]></content>
        </comment>
        <comment id="511" date-created="2009-09-19T15:14:19" date-modified="2009-09-19T15:14:19" approved="true" user-name="Jason Dentler" user-url="http://nhforge.org/members/Jason-Dentler/default.aspx">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 2]]></title>
          <content type="text"><![CDATA[Nope. Everything is working fine. 

Check http://downforeveryoneorjustme.com/jasondentler.com ]]></content>
        </comment>
        <comment id="512" date-created="2009-09-19T15:24:11" date-modified="2009-09-19T15:24:11" approved="true" user-name="Flaker" user-url="http://nhforge.org/members/Flaker/default.aspx">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 2]]></title>
          <content type="text"><![CDATA[yep. You are right, I cannot download the files using my ISP (Fibertel in Argentina). Login into a server in the US I can download without a problem. Sorry to bother you.

BTW, great work on the posts.

Thanks!]]></content>
        </comment>
      </comments>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="465" date-created="2009-08-13T23:50:00" date-modified="2009-08-13T23:50:00" approved="true" post-url="/blogs/nhibernate/archive/2009/08/13/how-to-using-the-n-stack-part-3.aspx" type="normal" hasexcerpt="false" views="4626">
      <title type="text"><![CDATA[How-To: Using the N* Stack, part 3]]></title>
      <content type="text"><![CDATA[<p>This is the third installment in my series. In <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">part 1</a>, we downloaded our libraries and set up our solution. In <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">part 2</a>, we built our model. In this part, we&rsquo;ll configure <a href="http://sourceforge.net/projects/nhibernate/" target="_blank">NHibernate</a> and set up our database mappings. We&rsquo;ll also set up our database schema.</p>
<h3>Java &ndash; A language of XML files loosely coupled by code.</h3>
<p>Before we can talk about Fluent NHibernate, you need to know a little bit about setting up mappings in plain old NHibernate. In a typical NHibernate setup, you&rsquo;ll have a bunch of mapping files like this:</p>
<pre class="brush:xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"&gt;
    &lt;class name="NStackExample.Address, NStackExample.Core" table="Address"&gt;
        &lt;composite-id&gt;
            &lt;key-many-to-one name="Person" class="NStackExample.Person, NStackExample.Core" column="ID" /&gt;
            &lt;key-property name="Type" type="Int32" /&gt;
        &lt;/composite-id&gt;
        &lt;property name="City" type="String" length="255" /&gt;
        &lt;property name="Lines" type="String" length="255" /&gt;
        &lt;property name="State" type="String" length="2" /&gt;
        &lt;property name="Zip" type="String" length="10" /&gt;
    &lt;/class&gt;
&lt;/hibernate-mapping&gt;</pre>
<p>You&rsquo;ll have one of those for each of your entities. It&rsquo;s left over from Java&rsquo;s Hibernate project, and in my opinion, It&rsquo;s a royal pain, complete with ruby scepter. Lucky for you, there&rsquo;s a better way&trade;.</p>
<h3>A Better Way&trade;: Fluent Mappings</h3>
<p>With Fluent NHibernate, the mapping file above can be expressed using this class instead:</p>
<pre class="brush:vbnet">Imports FluentNHibernate.Mapping

Public Class AddressMapping
    Inherits ClassMap(Of Address)

    Public Sub New()
        UseCompositeId _
            .WithKeyReference(Function(x As Address) x.Person) _
            .WithKeyProperty(Function(x As Address) x.Type)
        Map(Function(x As Address) x.Lines).WithLengthOf(255)
        Map(Function(x As Address) x.City).WithLengthOf(255)
        Map(Function(x As Address) x.State).WithLengthOf(2)
        Map(Function(x As Address) x.Zip).WithLengthOf(5)

    End Sub

End Class</pre>
<p>&nbsp;</p>
<pre class="brush:csharp">using FluentNHibernate.Mapping;

namespace NStackExample.Data
{

    public class AddressMapping : ClassMap&lt;Address&gt;
    {

        public AddressMapping()
        {
            UseCompositeId()
                .WithKeyReference(x =&gt; x.Person)
                .WithKeyProperty(x =&gt; x.Type);
            Map(x =&gt; x.Lines).WithLengthOf(255);
            Map(x =&gt; x.City).WithLengthOf(255);
            Map(x =&gt; x.State).WithLengthOf(2);
            Map(x =&gt; x.Zip).WithLengthOf(5);
        }

    }
}</pre>
<p>It may look even more complicated than the XML mapping, but with Intellisense, it&rsquo;s a breeze. Plus, there are no magic strings to worry about. When you change a property name using a refactor tool, your mapping won&rsquo;t be left out of sync.</p>
<p>Now that you have the basic idea, let&rsquo;s get back on track.</p>
<h3>Where?</h3>
<p>Since the database connection, NHibernate configuration, entity mappings, and DAO implementations are really just implementation details of our chosen ORM, they should go in a separate assembly.</p>
<ol>
<li>Make a new Class Library project called NStackExample.Data </li>
<li>In the new Data project, add references to your core project, NHibernate.dll and FluentNHibernate.dll </li>
<li>Add a reference to System.Configuration.dll so we can easily retrieve some application settings later. </li>
<li>Also, the web project needs a reference to the data project. </li>
</ol>
<p>Now, let&rsquo;s make our mappings.</p>
<pre class="brush:vbnet">Imports FluentNHibernate.Mapping

Public Class CourseMapping
    Inherits ClassMap(Of Course)

    Public Sub New()
        Id(Function(x As Course) x.ID).GeneratedBy.GuidComb()
        Map(Function(x As Course) x.Subject).Not.Nullable.WithLengthOf(4).UniqueKey("CourseNaturalKey")
        Map(Function(x As Course) x.CourseNumber).Not.Nullable.WithLengthOf(4).UniqueKey("CourseNaturalKey")
        Map(Function(x As Course) x.Title).Not.Nullable.WithLengthOf(255)
        Map(Function(x As Course) x.Description).Not.Nullable.WithLengthOf(1024)
        Map(Function(x As Course) x.Hours).Not.Nullable()

        HasMany(Function(x As Course) x.Sections) _
            .AsSet() _
            .WithForeignKeyConstraintName("CourseSections")

    End Sub

End Class</pre>
<p>&nbsp;</p>
<pre class="brush:csharp">using NStackExample;
using FluentNHibernate.Mapping;

namespace NStackExample.Data
{
    public class CourseMapping : ClassMap&lt;Course&gt;
    {
        public CourseMapping()
        {
            Id(x =&gt; x.ID).GeneratedBy.GuidComb();
            Map(x =&gt; x.CourseNumber)
                .Not.Nullable()
                .WithLengthOf(4)
                .UniqueKey("CourseNaturalKey");

            Map(x =&gt; x.Subject)
                .Not.Nullable()
                .WithLengthOf(4)
                .UniqueKey("CourseNaturalKey");

            Map(x =&gt; x.Title)
                .Not.Nullable()
                .WithLengthOf(255);

            Map(x =&gt; x.Description)
                .Not.Nullable()
                .WithLengthOf(1024);

            Map(x =&gt; x.Hours)
                .Not.Nullable();

            HasMany(x =&gt; x.Sections)
                .AsSet()
                .WithForeignKeyConstraintName("CourseSections");

        }

    }
}</pre>
<p>Most of this is self-explanatory and works exactly like you would expect.</p>
<p>Our mapping class inherits from ClassMap(Of Course). ClassMap is the specific type that Fluent NHibernate searches for when looking for mappings. In this case, it signifies that this class provides the mapping for our Course entity. In the constructor, we define our specific mapping for each property.</p>
<ul>
<li>Id sets up the persistent object identifier (POID). This is basically the primary key for the table. If you have more than one property in the primary key, as in the case of natural keys, go with UseCompositeId like in the address example above. Using multi-part keys isn&rsquo;t really suggested and to my knowledge, isn&rsquo;t fully supported by Fluent NHibernate. </li>
<li>GeneratedBy specifies the POID generator. How will you assign your keys? In my case, I use GuidComb. I get all of the benefits of guid identifiers, but I don&rsquo;t fragment my database index nearly as much. You can read up on it more in <a href="/blogs/nhibernate/archive/2009/05/21/using-the-guid-comb-identifier-strategy.aspx" target="_blank">Davy Brion&lsquo;s post on the NHForge blog</a>. </li>
<li>Map simply maps a property to a database column. You can specify Not.Nullable and WithLengthOf as necessary. </li>
<li>UniqueKey specifies a unique index on the column. If you specify the same name on several columns, all of those columns will be part of the same unique index. In this example, we are forcing our natural key to be unique. Each combination of subject and course number must be unique. There can only be one ENGL 1301 course. Thank goodness. </li>
<li>HasMany defines a one-to-many relationship. You can specify the exact behavior of the collection. You have several options here, but the two types I use almost exclusively are Set and Bag. 
    
<ul>
<li>AsSet doesn&rsquo;t allow duplicate items. </li>
<li>With AsBag, duplicates are allowed. </li>
</ul>
</li>
</ul>
<p>By default, all relationships are lazy-loaded. This means that when you fetch a course from the database, the associated sections aren&rsquo;t fetched right away. It works just like you would expect: They aren&rsquo;t fetched until you access the Sections property. If you never access the Sections property, those sections are never fetched from the database, which can greatly improve performance. This is all made possible with proxies, but that&rsquo;s another series of posts.</p>
<p>Now let&rsquo;s map the sections:</p>
<pre class="brush:vbnet">Imports FluentNHibernate.Mapping

Public Class SectionMapping
    Inherits ClassMap(Of Section)

    Public Sub New()
        Id(Function(x As Section) x.ID).GeneratedBy.GuidComb()

        Map(Function(x As Section) x.FacultyName).WithLengthOf(255)
        Map(Function(x As Section) x.RoomNumber).WithLengthOf(10)
        Map(Function(x As Section) x.SectionNumber) _
            .WithLengthOf(4) _
            .Not.Nullable() _
            .UniqueKey("SectionNaturalKey")

        References(Function(x As Section) x.Course) _
            .Not.Nullable() _
            .UniqueKey("SectionNaturalKey")

        References(Function(x As Section) x.Term) _
            .Not.Nullable() _
            .UniqueKey("SectionNaturalKey")

        HasMany(Function(x As Section) x.StudentSections) _
            .AsSet() _
            .WithForeignKeyConstraintName("SectionStudentSections")

    End Sub
End Class</pre>
<p>The References function maps the Many-to-one relationship. Think of it as the other side of our one-to-many relationship. It is the reference from the child &ndash; section - back to it&rsquo;s parent - course.</p>
<p>For homework, finish mapping all of the entities.</p>
<p>I bet you&rsquo;re thinking this post is getting long considering we haven&rsquo;t even started building the database. Well don&rsquo;t worry. NHibernate will do that for us.</p>
<h3>8 hours or 8 minutes?</h3>
<p>Before I discovered NHibernate, I would spend at least a day setting up my database. It was insane. It drove me insane. I bet it drives you insane. It ends today.</p>
<p><strong>Disclaimer</strong>: If you are trying to use an existing shared legacy database, the chances of your existing DB schema working without some tweaking are slim. <a href="/blogs/nhibernate/archive/2009/06/26/database-the-eliot-ness-of-it.aspx" target="_blank">This post by Fabio Maulo</a> explains your options.</p>
<p>First, let&rsquo;s configure NHibernate. The Fluent NHibernate Wiki has <a href="http://wiki.fluentnhibernate.org/show/DatabaseConfiguration" target="_blank">a great page</a> explaining the fluent configuration of NHibernate.</p>
<pre class="brush:vbnet">Imports NHibernate
Imports NHibernate.Tool.hbm2ddl
Imports FluentNHibernate.Cfg
Imports System.Configuration
Imports System.IO

Public Class Configuration

    Private m_SchemaPath As String
    Private m_Factory As ISessionFactory

    Public Function Configure() As Configuration
        m_SchemaPath = ConfigurationManager.AppSettings("NStackExample.Data.Configuration.SchemaPath")
        m_Factory = Fluently.Configure _
            .Database(Db.MsSqlConfiguration.MsSql2005 _
                      .ConnectionString(Function(x As Db.MsSqlConnectionStringBuilder) _
                                            x.FromConnectionStringWithKey("NStackExample.Data.Configuration.DB"))) _
            .Mappings(Function(x As MappingConfiguration) _
                          x.FluentMappings.AddFromAssemblyOf(Of CourseMapping)() _
                          .ExportTo(m_SchemaPath)) _
            .ExposeConfiguration(AddressOf BuildSchema) _
            .BuildSessionFactory()
        Return Me
    End Function

    Private Sub BuildSchema(ByVal Cfg As NHibernate.Cfg.Configuration)
        Dim SchemaExporter As New NHibernate.Tool.hbm2ddl.SchemaExport(Cfg)
        SchemaExporter.SetOutputFile(Path.Combine(m_SchemaPath, "schema.sql"))
        SchemaExporter.Create(False, True)
    End Sub

    Public Function OpenSession() As ISession
        If m_Factory Is Nothing Then Configure()
        Return m_Factory.OpenSession
    End Function

End Class</pre>
<p>&nbsp;</p>
<pre class="brush:csharp">using FluentNHibernate.Cfg;
using FluentNHibernate.Cfg.Db;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Tool.hbm2ddl;
using System.IO;
using System.Configuration;

namespace NStackExample.Data
{
    public class Configuration
    {

        private ISessionFactory m_Factory;
        private string m_SchemaPath;

        public Configuration Configure()
        {

            m_SchemaPath = ConfigurationManager.AppSettings["NStackExample.Data.Configuration.SchemaPath"];

            m_Factory = Fluently.Configure()
                .Database(MsSqlConfiguration.MsSql2005
                        .ConnectionString(
                         x =&gt; x.FromConnectionStringWithKey("NStackExample.Data.Configuration.Db")))
                .Mappings(x =&gt; x.FluentMappings.AddFromAssemblyOf&lt;CourseMapping&gt;()
                                .ExportTo(m_SchemaPath))
                .ExposeConfiguration(BuildSchema)
                .BuildSessionFactory();

            return this;
        }

        private void BuildSchema(NHibernate.Cfg.Configuration cfg)
        {
            SchemaExport SchemaExporter = new SchemaExport(cfg);
            SchemaExporter.SetOutputFile(Path.Combine(m_SchemaPath, "schema.sql"));
            SchemaExporter.Create(true, false);
        }

        public ISession OpenSession()
        {
            if (m_Factory == null) Configure();
            return m_Factory.OpenSession();
        }

    }
}</pre>
<p>The configuration falls in to two sections: Database and Mappings. In our case, the database is SQL 2005 and the connection string is read from a connection string element in the web.config. All of the mappings are fluent, not auto-mapped. Notice that we are exporting our mappings to a directory specified in the appsettings section of the web.config. This will convert our fluent mappings to individual hbm.xml files. This is great for debugging the mappings, especially when asking for NHibernate help online.</p>
<p>We have one additional item. We&rsquo;re using the ExposeConfiguration method to call our BuildSchema function, passing in our complete NHibernate configuration.</p>
<p>In BuildSchema, we use a great hidden tool in NHibernate: the schema export. This amazing class will build your database for you. The create function takes two boolean parameters. The first specifies if the schema should be written out to a ddl file &ndash; a database script to build all of the tables, keys, indexes, and relationships in your database. The second boolean parameter specifies if the script should be executed against the specified database.</p>
<p>It&rsquo;s that easy.</p>
<p><strong>Two warnings:</strong></p>
<ol>
<li>Executing this script will drop and recreate every table associated with your model. That can be devastating in a production environment. </li>
<li>The script doesn&rsquo;t start with a a &ldquo;use [databasename]&rdquo; statement, so if you&rsquo;re not careful, when you execute it, you&rsquo;ll build everything in the master database. </li>
</ol>
<p>One last note: As with any project, you will have to adapt as you build. These mappings are not exactly what we use in the final build. I can guarantee our model will change significantly. I will take you through those changes as they happen, and explain the reasons behind them.</p>
<p>I&rsquo;ve decided not to post the complete source code at this stage. Instead, I leave the remaining mappings as an exercise for you, the reader. They will be included in the next source release. </p>
<p>In the next post, I&rsquo;ll show you how to test your mappings &ndash; including querying, reading from and writing to the database.</p>
<p>Jason</p>
<p>- Mapped out. Good night.</p>
<p>&nbsp;</p>
<p>P.S. &ndash; Special thanks to Tuna, Fabio, and Oren for the feedback, answers to stupid questions, and great advice!</p>
<p>For the NHForge readers, I apologize for the lack of code formatting. Now that I know the software, it should improve starting in the next post.</p>]]></content>
      <post-name type="text"><![CDATA[how to using the n stack part 3]]></post-name>
      <comments>
        <comment id="473" date-created="2009-08-17T01:31:21" date-modified="2009-08-17T01:31:21" approved="true" user-name="Jose Romaniello" user-url="http://jfromaniello.blogspot.com">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 3]]></title>
          <content type="text"><![CDATA[I will strongly recommend three things:
1-If you are developing a app from scratch (I mean no legazy-db) avoid composite primary keys.
2- Your xml-mapping is too much verbose:
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;
assembly=&quot;NStackExample&quot;
namespace=&quot;NStackExample&quot;&gt;
&lt;class name=&quot;Address&quot;&gt;
&lt;composite-id&gt;
&lt;key-many-to-one name=&quot;Person&quot; class=&quot;Person&quot; column=&quot;ID&quot; /&gt;
&lt;key-property name=&quot;Type&quot; type=&quot;Int32&quot; /&gt;
&lt;/composite-id&gt;
&lt;property name=&quot;City&quot; length=&quot;255&quot; /&gt;
&lt;property name=&quot;Lines&quot; length=&quot;255&quot; /&gt;
&lt;property name=&quot;State&quot; length=&quot;2&quot; /&gt;
&lt;property name=&quot;Zip&quot; length=&quot;10&quot; /&gt;
&lt;/class&gt;
&lt;/hibernate-mapping&gt;
3-Address in this case seems to be a Component.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="556" date-created="2009-12-12T04:34:43" date-modified="2009-12-12T04:34:43" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[nh credit repair]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="468" date-created="2009-08-16T00:26:25" date-modified="2009-08-16T00:26:25" approved="true" post-url="/blogs/nhibernate/archive/2009/08/15/introducing-nhiberate-and-wpf-the-chinookmediamanager.aspx" type="normal" hasexcerpt="false" views="5938">
      <title type="text"><![CDATA[Introducing NHiberate and WPF: The ChinookMediaManager]]></title>
      <content type="text"><![CDATA[<p>As you can note in my previous posts I’ve talked a lot about NHibernate and WPF. So I've decided to write an ongoing series of blog posts about the integration of these two technologies. </p>  <h3>Motivation</h3>  <p>The motivation behind this series of posts is very simple most of the articles that you can read about NHibernate are for web technologies such as ASP.Net or ASP.NET MVC. Despite the fact that NHibernate is an ORM and has nothing to do with the presentation layer there are certain consideration that you have to take into account to build a good architecture. </p>  <h3>Sample Domain</h3>  <p>For this series of post I have chosen to use a small subset of the <a href="http://www.codeplex.com/ChinookDatabase">Chinook</a> database with few modifications. I have changed all the Identities primary keys to HiLo. You can find both the original and the slightly modified version <a href="http://code.google.com/p/unhaddins/source/browse/#svn/trunk/SampleDomain">here</a> (with class, mappings and read only tests).</p>  <p>This is the full database schema:</p>  <p><img src="http://lh4.ggpht.com/_oKo6zFhdD98/SWFPtyfHJFI/AAAAAAAAAMc/GdrlzeBNsZM/s800/ChinookDatabaseSchema1.1.png" width="609" height="492" /> </p>  <p>However we will focus in this subset of the domain:    <br />    <br /><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClassDiagram1_5F00_055516A1.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="ClassDiagram1" border="0" alt="ClassDiagram1" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClassDiagram1_5F00_thumb_5F00_4FDEE52C.png" width="331" height="477" /></a> </p>  <p>&#160;</p>  <h3>A word about session management</h3>  <p>Most of the examples of NHibernate for web applications uses a pattern called “Session-per-Request”, this means that the session and the transaction has the same lifetime that the web request. This pattern is very easy to work with and very easy to understood but is not suitable for desktop applications.    <br />There are two antipatterns called “session-per-application” and “session-per-call” that you need to avoid.     <br />The pattern that I will use for this series is called “conversation per bussines transactions” and is very well described by his inventor <a href="http://fabiomaulo.blogspot.com/">Fabio Maulo</a>. I’ve learned a lot with Fabio and <a href="http://gustavoringel.blogspot.com/">Gustavo Ringel</a>&#160; about CpBT. </p>  <p></p>  <h3>A word about data binding</h3>  <p>In this series of post we will make intensive use of WPF data binding capabilities. Is for that reason that I’ve written <a href="http://code.google.com/p/unhaddins/source/browse/#svn/trunk/uNhAddIns/uNhAddIns.WPF">uNHAddIns.WPF</a> that uses NHibernate extensions points to bring us few behaviors that we need for data binding.</p>  <h4>The interface that we have to solve</h4>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/albums_5F00_37E02626.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="albums" border="0" alt="albums" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/albums_5F00_thumb_5F00_03647540.png" width="482" height="388" /></a> </p>  <p>The user need this very complex GUI. The user-story is as follows:</p>  <ul>   <li>The user can have multiple instances of this window open for editing albums of different artists. </li>    <li>The user can add albums. </li>    <li>The user can add tracks to the new albums and preexistent albums. </li>    <li>None of the information is persisted until the user press “Save All”. </li>    <li>If the user press close the application will ask to the user if he really want to discard all changes. </li> </ul>  <p>   <br />This is all for now, in the next post I will talk about the architecture that I will use.</p>]]></content>
      <post-name type="text"><![CDATA[introducing nhiberate and wpf the chinookmediamanager]]></post-name>
      <categories>
        <category ref="1107" />
        <category ref="1151" />
      </categories>
      <comments>
        <comment id="476" date-created="2009-08-18T19:36:36" date-modified="2009-08-18T19:36:36" approved="true" user-name="Nelson Cabral" user-url="http://nhforge.org/members/Nelson-Cabral/default.aspx">
          <title type="text"><![CDATA[re: Introducing NHiberate and WPF: The ChinookMediaManager]]></title>
          <content type="text"><![CDATA[The GUI is not that complex... Are you planning to make a full sample app or open to additional use cases? 
I'm interested in such one :
> Open App
> View Artists (List of available artists with new/update/delete)
> New or Edit displays your screen
And, using databinding, having the Artist list to update by itself. << here is the dirty stuff]]></content>
        </comment>
        <comment id="477" date-created="2009-08-18T19:41:05" date-modified="2009-08-18T19:41:05" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: Introducing NHiberate and WPF: The ChinookMediaManager]]></title>
          <content type="text"><![CDATA[Yes, I'm writing that post ;). give me few hours.]]></content>
        </comment>
        <comment id="480" date-created="2009-08-19T06:00:35" date-modified="2009-08-19T06:00:35" approved="true" user-name="YJingLee" user-url="http://nhforge.org/members/YJingLee/default.aspx">
          <title type="text"><![CDATA[re: Introducing NHiberate and WPF: The ChinookMediaManager]]></title>
          <content type="text"><![CDATA[Hi,José F

I read you The ChinookMediaManager example, I have a question for it.

I want to add a custom NH even in ChinookMediaManager,be used for at delete object validate has relationship ,If has then not allow delete it ,It not then delete it

Can I Help you ? In ChinookMediaManager attach this function for Evnets/Listeners

and now why remove the Caliburn  framwork in this example?

Thanks
                                                                                    YJingLee]]></content>
        </comment>
        <comment id="482" date-created="2009-08-19T11:30:23" date-modified="2009-08-19T11:30:23" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: Introducing NHiberate and WPF: The ChinookMediaManager]]></title>
          <content type="text"><![CDATA[Sorry, but an event isn't the correct place for doing such validation.
Take a look to the cascade attribute in the mapping.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1059" date-created="2014-09-15T14:05:50" date-modified="2014-09-15T14:05:50" approved="true" url="http://legisalud.gov.ar/oscarinfo.php?a%5B%5D=boat+accessories+uk+%28%3Ca+href%3Dhttp%3A%2F%2Fwww.theboatonlinestore.co.uk%2Fdropshipping.html%3Eclick+for+info%3C%2Fa%3E%29">
          <title type="text"><![CDATA[look here]]></title>
        </trackback>
        <trackback id="1062" date-created="2014-09-16T11:10:32" date-modified="2014-09-16T11:10:32" approved="true" url="http://59-125-91-35.Hinet-ip.Hinet.net/phpinfo.php?a%5B%5D=buy+cheap+sewing+machines+%28%3Ca+href%3Dhttp%3A%2F%2Fserwerekrpk.cityhost.pl%2Fminecraft%2Fmember.php%3Faction%3Dprofile%26uid%3D12583%3Eclick+through+the+up+coming+post%3C%2Fa%3E%29">
          <title type="text"><![CDATA[Best Cheap Sewing Machines]]></title>
        </trackback>
        <trackback id="1079" date-created="2014-09-20T22:38:33" date-modified="2014-09-20T22:38:33" approved="true" url="http://www.danone.com.uy/pages/calendario-actimel/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fsims-4-cheats%2F%3ESims+4+Cheats%3C%2Fa%3E">
          <title type="text"><![CDATA[Sims 4 Cheats]]></title>
        </trackback>
        <trackback id="1081" date-created="2014-09-21T04:08:43" date-modified="2014-09-21T04:08:43" approved="true" url="http://50carleton.withbob.net/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.dlcodes.com%2Fgloblins-hack-cheats-tool%2F%3EGloblins+Cheats%3C%2Fa%3E">
          <title type="text"><![CDATA[http://50carleton.withbob.net/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.dlcodes.com%2Fgloblins-hack-cheats-tool%2F%3EGloblins+Cheats%3C%2Fa%3E]]></title>
        </trackback>
        <trackback id="1088" date-created="2014-09-23T18:44:43" date-modified="2014-09-23T18:44:43" approved="true" url="http://www.surinpoc.com/poc/verify.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fracing-rivals-hack%2F%3Ehttp%3A%2F%2Fconfidencegames.com%2Fracing-rivals-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[http://www.surinpoc.com/poc/verify.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fracing-rivals-hack%2F%3Ehttp%3A%2F%2Fconfidencegames.com%2Fracing-rivals-hack%2F%3C%2Fa%3E]]></title>
        </trackback>
        <trackback id="1104" date-created="2014-09-27T22:34:31" date-modified="2014-09-27T22:34:31" approved="true" url="http://soldiers-of-darkness.eu/cgi-bin/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fclash-of-clans-hack%2F%3Ehttp%3A%2F%2Fconfidencegames.com%2Fclash-of-clans-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[Clash Of Clans Hack No Survey]]></title>
        </trackback>
        <trackback id="1106" date-created="2014-09-28T06:13:53" date-modified="2014-09-28T06:13:53" approved="true" url="http://www.w.isaev.infow.isaev.info/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fracing-rivals-hack%2F%3ERacing+Rivals+Hack+Tool%3C%2Fa%3E">
          <title type="text"><![CDATA[http://www.w.isaev.infow.isaev.info/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fconfidencegames.com%2Fracing-rivals-hack%2F%3ERacing+Rivals+Hack+Tool%3C%2Fa%3E]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="469" date-created="2009-08-16T00:30:52" date-modified="2009-08-16T00:30:52" approved="true" post-url="/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-the-core.aspx" type="normal" hasexcerpt="false" views="3718">
      <title type="text"><![CDATA[Nhibernate and WPF: The core]]></title>
      <content type="text"><![CDATA[<p>   <br />Part I: <a href="http://jfromaniello.blogspot.com/2009/08/introducing-nhiberate-and-wpf.html">Introducing NHiberate and WPF: The ChinookMediaManager</a></p>  <h3>Introduction</h3>  <p>   <br />This is my second post about the Chinook Media Manager, an example application for NHibernate and WPF. In this post I will outline some concepts behind the architecture that I’ve chosen.</p>  <h3>Note</h3>  <p>Probably at some points you will feel that this is over-architected, YAGNI and so on. Yes, you are right I’m not trying to bind a grid to a collection of objects there are tons of samples on the net about that subject.    <br /></p>  <h3>The four musketeers</h3>  <p>The core of the application is composed of four components:</p>  <ul>   <li>ChinookMediaManager.Data: Contains the definition of repositories interfaces. </li>    <li>ChinookMediaManager.DataImpl: Contains the implementation of these repositories plus other nhibernate things that we will need to make work the implementation of repositories (like mappings). </li>    <li>ChinookMediaManager.Domain: Contains the domain classes plus model interfaces (we will focus on this concept latter) </li>    <li>ChinookMediaManager.DomainImpl: Contains the implementation of the models. </li> </ul>  <p>My base repository definition is as follows: </p>  <pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IRepository</span>&lt;T&gt; : IQueryable&lt;T&gt;
    {
        T Get(<span style="color: blue">object </span>id);
        T Load(<span style="color: blue">object </span>id);
        T MakePersistent(T entity);
        <span style="color: blue">void </span>Refresh(T entity);
        <span style="color: blue">void </span>MakeTransient(T entity);
    }</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>This means that a repository is a IQueryable&lt;T&gt; by itself and we can build queries in a more natural way. 
  <br />I have seen a lot of repositories implementations with methods Save, Update and Delete, there is nothing wrong with it, just that I think that MakePersistent (Save) and MakeTransient (Delete) better represents that functionality (I have stolen this terminology from a <a href="http://gustavoringel.blogspot.com/">Gustavo Ringel</a>’s example). 

  <br />You could find the implementation <a href="http://code.google.com/p/unhaddins/source/browse/trunk/Examples/uNHAddIns.Examples.WPF/ChinookMediaManager.Data.Impl/Repositories/Repository.cs">here</a>. 

  <br /></p>

<h3>Don’t touch “the domain”</h3>

<p>Working with WPF sometimes you will need that your entities implement INotifyPropertyChanged or IEditableObject for data binding. Although the implementation of those interfaces is simple, if you implement directly in your domain you will tie your domain to a presentation concern and also will end writing a lot of code. 
  <br />

  <br />So, I wrote an addin for nhibernate (unhaddins.wpf) that will help you to inject those behaviors without touching anything in your domain model.&#160; <br />

  <br />We only have to add the entity to the container as follows:</p>

<pre class="code">container.Register(Component.For&lt;Album&gt;()
    .NhibernateEntity()
    .AddNotificableBehavior()
    .LifeStyle.Transient);</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>If you need to add editable object behavior (read <a href="http://jfromaniello.blogspot.com/2009/07/ieditableobject-useful-interface.html">this</a> and <a href="http://jfromaniello.blogspot.com/2009/07/ieditableobject-another-behaviour-for.html">this</a>) you simple put “.AddEditableBehavior()”. 

  <br />If we want a transient instance we will request it to the container (or an object factory). In unhaddins we have got an artifact that allows nhibernate to instantiate entities from the container, read <a href="http://fabiomaulo.blogspot.com/2008/11/entities-behavior-injection.html">this</a> post from Fabio Maulo. 

  <br />

  <br />For INotifyCollectionChanged, unhaddins.wpf has a Collection Type Factory, we need to configure NHibernate as follows:</p>

<pre class="code">nhConfiguration.Properties[Environment.CollectionTypeFactoryClass] =
  <span style="color: blue">typeof </span>(WpfCollectionTypeFactory).AssemblyQualifiedName;</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>With this simple step all bag, sets and list (more coming up) of objects retrieved from NHibernate will implement INotifyCollectionChanged.</p>

<p>It goes without saying that this configuration is not in the domain. 
  <br />

  <br />As you can see, I don’t have to put presentations concerns inside <em>“the four musketeers”</em>. </p>

<p>In the next post I will talk about models and CpBT.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf the core]]></post-name>
      <categories>
        <category ref="1095" />
        <category ref="1107" />
        <category ref="1151" />
      </categories>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="470" date-created="2009-08-16T00:33:46" date-modified="2009-08-16T00:33:46" approved="true" post-url="/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-models-concept.aspx" type="normal" hasexcerpt="false" views="8460">
      <title type="text"><![CDATA[Nhibernate and WPF: Models concept]]></title>
      <content type="text"><![CDATA[<p><a href="http://jfromaniello.blogspot.com/2009/08/introducing-nhiberate-and-wpf.html">Part I: Introducing Nhibernate and WPF</a>     <br /><a href="http://jfromaniello.blogspot.com/2009/08/chinook-media-manager-core.html">Part II: Chinook Media Manager: The Core</a></p>  <h3>Introduction</h3>  <p>For this post I will use the concept of <a href="http://fabiomaulo.blogspot.com/">Fabio Maulo</a> called “Conversation-per-BussinesTransaction”. If you have not read, what are you waiting for?     <br /></p>  <h3>Definition</h3>  <p>This definition is extracted from Fabio’s <a href="http://fabiomaulo.blogspot.com/2008/12/conversation-per-business-transaction.html">post</a> and is very important that you understood it:</p>  <blockquote>   <p>When you read something about NHibernate-session-management is because we want abstract/”aspect” NH-session’s stuff from the code are using it. In general, or I hope so, you are using the session in something like a DAO/Repository and, in a use-case, you are calling more than one DAO/Repository. Open a new session in each DAO/Repository is an anti-pattern called session-per-call (or very closer to it). What we are searching is something to manage the session in an high-layer but without wire that layer with NHibernate. In a WEB environment it is pretty easy because we can manage the session using an implementation of a IHttpModule, or in the HttpApplication, “intercepting” the request (two patterns mentioned here). In a winForm, or WPF, aplication it is not so clear where the abstraction have place. In this post I will use an “artifact” named Model to represent the “abstraction-point” (in my mind the Model is the business-object that are using DAOs/Repository and domain-entities); in an MVC based application, probably, the abstraction have place in the Controller.</p> </blockquote>  <h3>Implementation</h3>  <p>We start defining an interface for our Use-case Model class as follows: </p>  <pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IAlbumManagerModel
    </span>{

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Search all albums from a given artist.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;artist&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        </span>IEnumerable&lt;Album&gt; GetAlbumsByArtist(Artist artist);

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Persist an album.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;album&quot;&gt;&lt;/param&gt;
        </span><span style="color: blue">void </span>SaveAlbum(Album album);

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Revert changes of a given album to his current persisted state.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;album&quot;&gt;&lt;/param&gt;
        </span><span style="color: blue">void </span>CancelAlbum(Album album);

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Flush all changes to the database.
        </span><span style="color: gray">/// &lt;/summary&gt;
        </span><span style="color: blue">void </span>SaveAll();

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Cancel all changes.
        </span><span style="color: gray">/// &lt;/summary&gt;
        </span><span style="color: blue">void </span>CancelAll();
    }</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>As I say in my previous post this interface is defined in the “ChinookMediaManager.Domain”. 
  <br />The concrete implementation is defined in ChinookMediaManager.DomainImpl as follows: 

  <br /></p>

<pre class="code">[PersistenceConversational(MethodsIncludeMode = MethodsIncludeMode.Implicit)]
    <span style="color: blue">public class </span><span style="color: #2b91af">AlbumManagerModel </span>: IAlbumManagerModel
    {

        <span style="color: blue">private readonly </span>IAlbumRepository albumRepository;

        <span style="color: blue">public </span>AlbumManagerModel(IAlbumRepository albumRepository)
        {
            <span style="color: blue">this</span>.albumRepository = albumRepository;
        }

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Search all the albums from a given artist.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;artist&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        </span><span style="color: blue">public </span>IEnumerable&lt;Album&gt; GetAlbumsByArtist(Artist artist)
        {
            <span style="color: blue">return </span>albumRepository.GetByArtist(artist);
        }

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Persist an album.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;album&quot;&gt;&lt;/param&gt;
        </span><span style="color: blue">public void </span>SaveAlbum(Album album)
        {
            albumRepository.MakePersistent(album);
        }

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Revert changes of a given album to his original state.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;album&quot;&gt;&lt;/param&gt;
        </span><span style="color: blue">public void </span>CancelAlbum(Album album)
        {
            albumRepository.Refresh(album);
        }

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Flush all changes to the database.
        </span><span style="color: gray">/// &lt;/summary&gt;
        </span>[PersistenceConversation(ConversationEndMode = EndMode.End)]
        <span style="color: blue">public void </span>SaveAll()
        { }

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Cancel all changes.
        </span><span style="color: gray">/// &lt;/summary&gt;
        </span>[PersistenceConversation(ConversationEndMode = EndMode.Abort)]
        <span style="color: blue">public void </span>CancelAll()
        {
        }
    }</pre>
<a href="http://11011.net/software/vspaste"></a>

<pre class="brush: csharp;"><br /><br /></pre>

<p>Well, this is the non-invasive AOP way of doing with CpBT from unhaddins. 
  <br />The PersistenceCovnersational attribute tell us two things: 

  <br />- All methods are involved in the conversation if not explicitly excluded. 

  <br />– All methods ends with “Continue” if not explicitly changed. 

  <br />SaveAll end the conversation with EndMode.End, this means that the UoW will be flushed. 

  <br />For the other hand CancelAll end with Abort, this means that all changes are evicted and the conversation is not flushed.</p>

<h3>Testing the model</h3>

<p>Testing is very simple, all you need to do is to mock your repositories as follows: 
  <br /></p>

<pre class="code">[Test]
<span style="color: blue">public void </span>can_cancel_album()
{
    var repository = <span style="color: blue">new </span>Mock&lt;IAlbumRepository&gt;();
    var album = <span style="color: blue">new </span>Album();
    repository.Setup(rep =&gt; rep.Refresh(It.IsAny&lt;Album&gt;()))
              .AtMostOnce();

    var albumManagerModel = <span style="color: blue">new </span>AlbumManagerModel(repository.Object);

    albumManagerModel.CancelAlbum(album);

    repository.Verify(rep =&gt; rep.Refresh(album));
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>In this test I’m using the <a href="http://code.google.com/p/moq/">Moq</a> library. 

  <br />The other thing that we need to test is the conversation configuration, my first approach was to test the attributes, but owned by the fact that we can configure the CpBT in many ways (such as XML), this is my test:</p>

<pre class="code">[TestFixtureSetUp]
<span style="color: blue">public void </span>FixtureSetUp()
{
    conversationalMetaInfoStore.Add(<span style="color: blue">typeof </span>(AlbumManagerModel));
    metaInfo = conversationalMetaInfoStore.GetMetadataFor(<span style="color: blue">typeof</span>(AlbumManagerModel));
}

[Test]
<span style="color: blue">public void </span>model_represents_conversation()
{
    metaInfo.Should().Not.Be.Null();
    metaInfo.Setting.DefaultEndMode.Should().Be.EqualTo(EndMode.Continue);
    metaInfo.Setting.MethodsIncludeMode.Should().Be.EqualTo(MethodsIncludeMode.Implicit);
}

[Test]
<span style="color: blue">public void </span>cancel_all_abort_the_conversation()
{
    var method = Strong.Instance&lt;AlbumManagerModel&gt;
        .Method(am =&gt; am.CancelAll());

    var conversationInfo = metaInfo.GetConversationInfoFor(method);

    conversationInfo.ConversationEndMode
                    .Should().Be.EqualTo(EndMode.Abort);
}

[Test]
<span style="color: blue">public void </span>save_all_end_the_conversation()
{
    var method = Strong.Instance&lt;AlbumManagerModel&gt;
        .Method(am =&gt; am.SaveAll());

    var conversationInfo = metaInfo.GetConversationInfoFor(method);

    conversationInfo.ConversationEndMode
                    .Should().Be.EqualTo(EndMode.End);
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>I'm using a strongly typed way to get the MethodInfo extracted from this <a href="http://www.codeproject.com/KB/cs/Strong.aspx">example</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf models concept]]></post-name>
      <categories>
        <category ref="1095" />
        <category ref="1107" />
        <category ref="1151" />
      </categories>
      <trackbacks>
        <trackback id="484" date-created="2009-08-19T16:23:52" date-modified="2009-08-19T16:23:52" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/08/19/nhibernate-and-wpf-viewmodels-and-views.aspx">
          <title type="text"><![CDATA[Nhibernate and WPF: ViewModels and Views]]></title>
        </trackback>
        <trackback id="494" date-created="2009-08-28T01:06:45" date-modified="2009-08-28T01:06:45" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/08/27/nhibernate-and-wpf-validations.aspx">
          <title type="text"><![CDATA[Nhibernate and WPF: Validations]]></title>
        </trackback>
        <trackback id="500" date-created="2009-08-29T20:48:51" date-modified="2009-08-29T20:48:51" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2009/08/29/part-7-nhibernate-and-ninject-for-asp-net-mvc.aspx">
          <title type="text"><![CDATA[Part 7: NHibernate and Ninject for ASP.NET MVC]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="472" date-created="2009-08-16T23:44:22" date-modified="2009-08-16T23:44:22" approved="true" post-url="/blogs/nhibernate/archive/2009/08/16/how-to-using-the-n-stack-part-4.aspx" type="normal" hasexcerpt="false" views="4256">
      <title type="text"><![CDATA[How-To: Using the N* Stack, part 4]]></title>
      <content type="text"><![CDATA[<p>This is part 4 of my series on <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> and NHibernate. If you’re not up to date, you can go check out:</p>  <ul>   <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a> – Setting up the Visual Studio solution </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a> – Building the model </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a> – Mapping the model to the database </li> </ul>  <p>As promised, today, we’re going to test our mappings and get a little familiar with using <a href="http://nhforge.org" target="_blank">NHibernate</a>.</p>  <p>We’ll be using NUnit 2.5.2, but any recent version should work.</p>  <p><strong>Disclaimer</strong>: I’m still learning some of this myself, so use at your own risk. This may not be considered best practice. Also, there’s almost certainly better ways to write these tests using one of the dozens of popular testing frameworks out there, but we’re using plain vanilla NUnit.</p>  <p>Let’s create a new Class Library project for our tests. We’ll call it NStackExample.Data.Tests. Now, in the data test project, add references to your core project, data project, NHibernate.dll, FluentNHibernate.dll, and NUnit.Framework.dll. If you’ve installed NUnit, NUnit.Framework.dll will be on the .NET tab. If you have multiple versions of NUnit installed, be sure to pick the right version.</p>  <h3>SQL: Now in a convenient travel size</h3>  <p>If you haven’t heard of SQLite before, you’re going to love this. It’s a tiny, self-contained, open-source SQL database engine in a DLL. Even better, it can run entirely in-memory and it’s blazing fast. Here’s how you get set up to use it:</p>  <ol>   <li>Download the SQLite ADO.NET Provider from here. Get the full version – the one named something like SQLLit-1.0.65.0-setup.exe. Install it, then grab a copy of System.Data.Sqlite.dll and put it in your Solution Items folder with all the other 3rd party libraries. If you’re running on a 64-bit operating system, grab the one from the bin\x64 directory. If not, use the one in bin. </li>    <li>Download the SQLite library itself. Scroll down to Precompiled Binaries for Windows. It should be named something like sqlitedll-3_6_17.zip. Extract the SQLite3.dll to your Solution Items folder. </li>    <li>In your data test project, add a reference to System.Data.SQLite.dll. </li>    <li>Because SQLite3.dll was written in C and is completely unmanaged, we can’t add a direct reference to it. To ensure it gets put in the right place, we’re going to set it up as a content file. Right click on your data test project, choose Add Existing Item, then browse for SQLite3.dll. Add it. In Solution Explorer, it’ll be mixed in with the code for your project. Right click on it and choose properties. Set it to Copy Always. This will copy it to the bin\Debug or bin\Release folder every time your project is built, so it never gets forgotten. </li>    <li>If you haven’t already, grab the code for the SQLiteDatabaseScope class from <a href="http://jasondentler.com/blog/2009/08/nhibernate-unit-testing-with-sqlite-in-memory-db/" target="_blank">my previous post</a>. Add it to your data test project. </li> </ol>  <h3>A simple mapping test</h3>  <pre class="brush:vbnet">Imports NUnit.Framework

&lt;TestFixture()&gt; _
Public Class CourseMappingTests

    &lt;Test()&gt; _
    Public Sub CanLoadAndSaveCourse()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession
                Dim ID As Guid
                Dim Course As Course

                Using Tran = Session.BeginTransaction
                    ID = Session.Save(New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3})
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction
                    Course = Session.Get(Of Course)(ID)

                    Assert.AreEqual(&quot;SUBJ&quot;, Course.Subject)
                    Assert.AreEqual(&quot;1234&quot;, Course.CourseNumber)
                    Assert.AreEqual(&quot;Title&quot;, Course.Title)
                    Assert.AreEqual(&quot;Description&quot;, Course.Description)
                    Assert.AreEqual(3, Course.Hours)

                    Tran.Commit()

                End Using

            End Using
        End Using
    End Sub

End Class</pre>

<pre class="brush:csharp">using System;
using NUnit.Framework;
using NHibernate;

namespace NStackExample.Data.Tests
{
    [TestFixture]
    public class CourseMappingTests
    {

        [Test]
        public void CanSaveAndLoadCourse()
        {
            using (SQLiteDatabaseScope&lt;CourseMapping&gt; Scope = new SQLiteDatabaseScope&lt;CourseMapping&gt;())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    Guid ID;
                    Course Course;

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        ID = (Guid)Session.Save(new Course
                        {
                            Subject = &quot;SUBJ&quot;,
                            CourseNumber = &quot;1234&quot;,
                            Title = &quot;Title&quot;,
                            Description = &quot;Description&quot;,
                            Hours = 3
                        });
                        Tran.Commit();
                    }
                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Course = Session.Get&lt;Course&gt;(ID);

                        Assert.AreEqual(&quot;SUBJ&quot;, Course.Subject);
                        Assert.AreEqual(&quot;1234&quot;, Course.CourseNumber);
                        Assert.AreEqual(&quot;Title&quot;, Course.Title);
                        Assert.AreEqual(&quot;Description&quot;, Course.Description);
                        Assert.AreEqual(3, Course.Hours);

                        Tran.Commit();
                    }
                }
            }
        }
    }
}</pre>

<p>Here’s how it works:</p>

<ul>
  <li>First, we get a fresh in-memory SQLite database with our schema built. </li>

  <li>Put a new course in the database </li>

  <li>Clear the session </li>

  <li>Get the course back out of the database </li>

  <li>Check to make sure each of our properties survived the trip. If they didn’t, fail the test. </li>
</ul>

<p>There’s a few things that may be new to you.</p>

<ul>
  <li>Our class has the TestFixture attribute. This tells NUnit that this class contains tests. </li>

  <li>Each subroutine has the Test attribute. This tells NUnit that this method is a test. </li>

  <li>The SQLiteDatabaseScope is almost certainly new, considering I wrote it Friday. You can read my previous post for more information. </li>
</ul>

<h3>Use of implicit transaction is discouraged</h3>

<p>You’re probably wondering why I would wrap such simple one-statement database logic in a transaction, especially a Session.Get, which is essentially a single select statement. Prior to writing this series, I wouldn’t have done it that way. Rookie mistake.</p>

<p>While doing research for this entry, I ran across <a href="http://ayende.com/Blog/archive/2009/04/28/nhibernate-unit-testing.aspx" target="_blank">an example test</a> from Ayende. He was using transactions on everything,&#160; even his calls to Session.Get. I asked him why and he sent me a link to this <a href="http://nhprof.com/Learn/Alert?name=DoNotUseImplicitTransactionsHibernate" target="_blank">NHProfiler Alert</a>. It’s important and not obvious – at least not to me - so with permission, I’ve quoted the entire page.</p>

<blockquote>
  <p>A common mistake when using a database is to use transactions only when orchestrating several write statements. In reality, every operation that the database is doing is done inside a transaction, including queries and writes (update, insert, delete).</p>

  <p>When we don't define our own transactions, it falls back into implicit transaction mode, where every statement to the database runs in its own transaction, resulting in a large performance cost (database time to build and tear down transactions), and reduced consistency.</p>

  <p>Even if we are only reading data, we should use a transaction, because using transactions ensures that we get consistent results from the database. Hibernate assumes that all access to the database is done under a transaction, and strongly discourages any use of the session without a transaction.</p>

  <pre class="brush:csharp">Session session = sessionFactory.openSession();
try {
  Transaction tx = session.beginTransaction();
  try {
    //execute code that uses the session
  } finally {
    tx.commit();
  }
} finally {
  session.close();
}</pre>

  <p>Leaving aside the safety issue of working with transactions, the assumption that transactions are costly and that we need to optimize them is false. As previously mentioned, databases are always running in a transaction. Also, they have been heavily optimized to work with transactions.</p>

  <p>The real question here is: Is the transaction per-statement or per-batch? There is a non-trivial amount of work that needs to be done to create and dispose of a transaction; having to do it per-statement is more costly than doing it per-batch.</p>

  <p>It is possible to control the number and type of locks that a transaction takes by changing the transaction isolation level (and, indeed, a common optimization is to reduce the isolation level).</p>

  <p>Hibernate treats the call to commit() as the time to flush all changed items from the unit of work to the database, and without an explicit call to Commit(), it has no way of knowing when it should do that. A call to Flush() is possible, but it is frowned upon because this is usually a sign of improper transaction usage.</p>

  <p>I strongly suggest that you use code similar to that shown above (or use another approach to transactions, such as TransactionScope, or Castle's Automatic Transaction Management) in order to handle transactions correctly.</p>

  <h5>Transaction and the second level cache</h5>

  <p>Another implication of not using explicit transactions with Hibernate is related to the use of the second level cache.</p>

  <p>Hibernate goes to great length in order to ensure that the 2nd level cache maintains a consistent view of the database. This is accomplished by deferring all 2nd level cache updates to the transaction commit. In this way, we can assert that the data in the 2nd level cache is the one committed to the database.</p>

  <p>Forgoing the use of explicit transactions has the effect of nulling the 2nd level cache. Here is an example that would make this clear:</p>

  <pre class="brush:csharp">try {
  Post post = session.get(Post.class, 1);
  // do something with post
} finally {
  session.close();
}</pre>

  <p>Even if the 2nd level cache is enabled for Post, it is still not going to be cached in the 2nd level cache. The reason is that until we commit a transaction, Hibernate will not update the cache with the values for the loaded entities.</p>

  <p>This code, however, does make use of the 2nd level cache:</p>

  <pre class="brush:csharp">Session session = sessionFactory.openSession();
try {
  Transaction tx = sessionFactory.beginTransaction();
  try {
    Post post = session.get(Post.class, 1);
    // do something with post
  } finally {
    tx.commit();
  }
} finally {
  session.close();
}</pre>
</blockquote>

<p>&#160;</p>

<h3>A slightly more complicated mapping test</h3>

<p>When an entity has a required parent, as in the case of our section, you must create and insert the parent before actually testing the child. We’re not testing the cascade here. That’s a separate test. In this case, section has two required parents: a course, and a term. Here’s the test:</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub CanLoadAndSaveCourse()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession

                Dim ID As Guid
                Dim Section As Section
                Dim Course As New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Term As New Term With { _
                        .Name = &quot;Fall 2009&quot;, _
                        .StartDate = New Date(2009, 9, 1), _
                        .EndDate = New Date(2009, 12, 1)}

                'We're not testing the cascade, so save the parents first...
                Using Tran = Session.BeginTransaction
                    Session.Save(Course)
                    Session.Save(Term)
                    Tran.Commit()
                End Using
                Session.Clear()

                Using Tran = Session.BeginTransaction
                    ID = Session.Save(New Section With { _
                                      .Course = Course, _
                                      .FacultyName = &quot;FacultyName&quot;, _
                                      .RoomNumber = &quot;R1&quot;, _
                                      .SectionNumber = &quot;1W&quot;, _
                                      .Term = Term})
                    Tran.Commit()
                End Using

                Session.Clear()

                Using Tran = Session.BeginTransaction
                    Section = Session.Get(Of Section)(ID)

                    Assert.AreEqual(Course, Section.Course)
                    Assert.AreEqual(&quot;FacultyName&quot;, Section.FacultyName)
                    Assert.AreEqual(&quot;R1&quot;, Section.RoomNumber)
                    Assert.AreEqual(&quot;1W&quot;, Section.SectionNumber)
                    Assert.AreEqual(Term, Section.Term)

                    Tran.Commit()

                End Using

            End Using
        End Using
    End Sub</pre>

<pre class="brush:csharp">        [Test]
        public void CanSaveAndLoadSection()
        {
            using (SQLiteDatabaseScope&lt;CourseMapping&gt; Scope = new SQLiteDatabaseScope&lt;CourseMapping&gt;) {
                using (ISession Session = Scope.OpenSession()) {

                    Guid ID;
                    Section Section;
                    Course Course = new Course { 
                        Subject = &quot;SUBJ&quot;, 
                        CourseNumber = &quot;1234&quot;, 
                        Title = &quot;Title&quot;, 
                        Description = &quot;Description&quot;, 
                        Hours = 3};
                    Term Term = new Term {
                        Name = &quot;Fall 2009&quot;,
                        StartDate = new DateTime(2009,8,1),
                        EndDate = new DateTime(2009,12,1)};
                    
                    // We're not testing the cascade here, so explicitly save these parent objects.
                    using (ITransaction Tran = Session.BeginTransaction()) {
                        Session.Save(Course);
                        Session.Save(Term);
                        Tran.Commit();
                    }

                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction()) {
                        ID = (Guid) Session.Save(new Section {
                                 Course = Course,
                                 FacultyName = &quot;FacultyName&quot;, 
                                 RoomNumber = &quot;R1&quot;, 
                                 SectionNumber = &quot;W1&quot;,
                                 Term = Term});
                        Tran.Commit();
                    }

                    Session.Clear();

                    using (ITransaction Tran = Session.BeginTransaction()) {
                        Section = Session.Get&lt;Section&gt;(ID);

                        Assert.AreEqual(Course, Section.Course);
                        Assert.AreEqual(&quot;FacultyName&quot;, Section.FacultyName);
                        Assert.AreEqual(&quot;R1&quot;,Section.RoomNumber);
                        Assert.AreEqual(&quot;W1&quot;, Section.SectionNumber);
                        Assert.AreEqual(Term, Section.Term);

                        Tran.Commit();
                    }

                }
            }

        }</pre>

<h3>Testing the cascade</h3>

<p>“Cascade what? “</p>

<p>In your application, when you’ve just registered a student for a whole bunch of classes, usually with several changes along the way, you don’t want to have to remember what entities were added, removed or changed. That’s just crazy. Thanks to the Cascade functionality in NHibernate, you don’t have to do that. Just save the student entity. If your mappings are correct, it just works™.</p>

<p>For some people, especially me, that’s a big if. That’s why we test our mappings.</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub CanCascadeSaveFromCourseToSections()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession
                Dim ID As Guid

                Dim Term As New Term With { _
                        .Name = &quot;Fall 2009&quot;, _
                        .StartDate = New Date(2009, 9, 1), _
                        .EndDate = New Date(2009, 12, 1)}

                'We're not testing the cascade of section -&gt; term here
                Using Tran = Session.BeginTransaction
                    Session.Save(Term)
                    Tran.Commit()
                End Using
                Session.Clear()

                Dim Course As New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Section1 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;1&quot;, _
                        .Term = Term}

                Dim Section2 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;2&quot;, _
                        .Term = Term}

                Course.AddSection(Section1)
                Course.AddSection(Section2)

                'Test saving
                Using Tran = Session.BeginTransaction
                    ID = Session.Save(Course)
                    Tran.Commit()
                End Using
                Session.Clear()

                'Check the results
                Using Tran = Session.BeginTransaction
                    Course = Session.Get(Of Course)(ID)

                    Assert.AreEqual(2, Course.Sections.Count)
                    Assert.AreEqual(1, Course.Sections _
                                    .Where(Function(S As Section) _
                                               S.Equals(Section1)) _
                                    .Count(), &quot;Course.Sections does not contain section 1.&quot;)

                    Assert.AreEqual(1, Course.Sections _
                                    .Where(Function(S As Section) _
                                               S.Equals(Section2)) _
                                    .Count(), &quot;Course.Sections does not contain section 2.&quot;)


                    Tran.Commit()
                End Using
            End Using
        End Using
    End Sub</pre>

<pre class="brush:csharp">        [Test()]
        public void CanCascadeSaveFromCourseToSections()
        {
            using (SQLiteDatabaseScope<coursemapping> Scope = new SQLiteDatabaseScope<coursemapping>())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    Guid ID;

                    Term Term = new Term { 
                                Name = &quot;Fall 2009&quot;, 
                                StartDate = new System.DateTime(2009, 9, 1), 
                                EndDate = new System.DateTime(2009, 12, 1) };

                    //We're not testing the cascade of section -&gt; term here
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Session.Save(Term);
                        Tran.Commit();
                    }
                    Session.Clear();

                    Course Course = new Course { 
                        Subject = &quot;SUBJ&quot;, 
                        CourseNumber = &quot;1234&quot;, 
                        Title = &quot;Title&quot;, 
                        Description = &quot;Description&quot;, 
                        Hours = 3 };

                    Section Section1 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;1&quot;, 
                        Term = Term };

                    Section Section2 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;2&quot;, 
                        Term = Term };

                    Course.AddSection(Section1);
                    Course.AddSection(Section2);

                    //Test saving
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        ID = (Guid) Session.Save(Course);
                        Tran.Commit();
                    }
                    Session.Clear();

                    //Check the results
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Course = Session.Get<course>(ID);

                        Assert.AreEqual(2, Course.Sections.Count);
                        Assert.AreEqual(1, Course.Sections
                                .Where(S =&gt; S.Equals(Section1)).Count(), 
                                &quot;Course.Sections does not contain section 1.&quot;);

                        Assert.AreEqual(1, Course.Sections
                                .Where(S =&gt; S.Equals(Section2)).Count(), 
                                &quot;Course.Sections does not contain section 2.&quot;);


                        Tran.Commit();
                    }
                }
            }
        }</pre>

<p>The test above will make sure new and/or updated sections are saved when you save the course. Here’s how it works:</p>

<ul>
  <li>Get a fresh SQLite DB </li>

  <li>Since we’re not testing terms, but we need one for our sections, build a term and stick it in the database. </li>

  <li>Build a course and two sections. </li>

  <li>Save the course </li>

  <li>Clear the session </li>

  <li>Get the course </li>

  <li>Make sure it has our two sections </li>
</ul>

<p>What should happen when you remove a section from a course? A parent course is required for each section. Remember, we specified not nullable in the mapping. More importantly, an orphaned section isn’t allowed in the real world. So, if a section is orphaned, it should be deleted. We need to write a test for that.</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub CanCascadeOrphanDeleteFromCourseToSections()
        Using Scope As New SQLiteDatabaseScope(Of CourseMapping)
            Using Session = Scope.OpenSession
                Dim ID As Guid

                Dim Term As New Term With { _
                        .Name = &quot;Fall 2009&quot;, _
                        .StartDate = New Date(2009, 9, 1), _
                        .EndDate = New Date(2009, 12, 1)}

                Using Tran = Session.BeginTransaction
                    'We're not testing the cascade of section -&gt; term here
                    Session.Save(Term)
                    Tran.Commit()
                End Using
                Session.Clear()

                Dim Course As New Course With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Section1 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;1&quot;, _
                        .Term = Term}

                Dim Section2 As New Section With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;2&quot;, _
                        .Term = Term}

                Course.AddSection(Section1)
                Course.AddSection(Section2)

                Using Tran = Session.BeginTransaction
                    Session.Save(Course)
                    Tran.Commit()
                End Using
                Session.Clear()

                'Test removing
                Course.RemoveSection(Section1)
                Using Tran = Session.BeginTransaction
                    ID = Session.Save(Course)
                    Tran.Commit()
                End Using
                Session.Clear()

                'Check the results
                Using Tran = Session.BeginTransaction
                    Course = Session.Get(Of Course)(ID)

                    Assert.AreEqual(1, Course.Sections.Count())

                    Assert.AreEqual(0, Course.Sections _
                                    .Where(Function(S As Section) _
                                               S.Equals(Section1)) _
                                    .Count(), &quot;Course.Sections still contains section 1&quot;)

                    Tran.Commit()
                End Using

            End Using
        End Using
    End Sub</pre>

<pre class="brush:csharp">        [Test()]
        public void CanCascadeOrphanDeleteFromCourseToSections()
        {
            using (SQLiteDatabaseScope&lt;CourseMapping&gt; Scope = new SQLiteDatabaseScope&lt;CourseMapping&gt;())
            {
                using (ISession Session = Scope.OpenSession())
                {
                    Guid ID;

                    Term Term = new Term { 
                        Name = &quot;Fall 2009&quot;, 
                        StartDate = new System.DateTime(2009, 9, 1), 
                        EndDate = new System.DateTime(2009, 12, 1) };

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        //We're not testing the cascade of section -&gt; term here
                        Session.Save(Term);
                        Tran.Commit();
                    }
                    Session.Clear();


                    Course Course = new Course { 
                        Subject = &quot;SUBJ&quot;, 
                        CourseNumber = &quot;1234&quot;, 
                        Title = &quot;Title&quot;, 
                        Description = &quot;Description&quot;, 
                        Hours = 3 };

                    Section Section1 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;1&quot;, 
                        Term = Term };

                    Section Section2 = new Section { 
                        FacultyName = &quot;FacultyName&quot;, 
                        RoomNumber = &quot;R1&quot;, 
                        SectionNumber = &quot;2&quot;, 
                        Term = Term };

                    Course.AddSection(Section1);
                    Course.AddSection(Section2);

                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Session.Save(Course);
                        Tran.Commit();
                    }
                    Session.Clear();

                    //Test removing
                    Course.RemoveSection(Section1);
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        ID = (Guid) Session.Save(Course);
                        Tran.Commit();
                    }
                    Session.Clear();

                    //Check the results
                    using (ITransaction Tran = Session.BeginTransaction())
                    {
                        Course = Session.Get&lt;Course&gt;(ID);

                        Assert.AreEqual(1, Course.Sections.Count());

                        Assert.AreEqual(0, Course.Sections
                            .Where(S =&gt; S.Equals(Section1)).Count(), 
                            &quot;Course.Sections still contains section 1&quot;);

                        Tran.Commit();

                    }
                }
            }
        }</pre>

<p>I hope you see where I’m going with this one. Except for query tests, which we’ll do when we write our DAOs, that’s it for NHibernate testing. We do the same types of tests for our other entity classes.</p>

<h3>But…</h3>

<p>So, I bet you’re thinking “This mess won’t compile and even if it did, almost all of your tests would fail!” Yep. If the tests always pass, why write them?</p>

<p>Normally, I’d at least declare those missing functions so the solution would compile, but in this case, the discussion of those issues fits better with our next topic: How do we fix the broken stuff?</p>

<p><strike>Download links for the complete solution in both languages are coming soon.</strike></p>

<p>Edit: Download VB.NET <a href="http://jasondentler.com/downloads/NStackExample.Part4.VBNET.zip" target="_blank">here</a> or C# <a href="http://jasondentler.com/downloads/NStackExample.Part4.CSharp.zip" target="_blank">here</a>. To simplify things, I’ve removed the StudentTerm entity from the model.</p>

<p>Jason 
  <br />

  <br />- Testy and in need of sleep.</p>

<p>References: <a href="http://ayende.com/Blog/archive/2009/04/28/nhibernate-unit-testing.aspx" target="_blank">Ayende’s blog post</a>, <a href="http://devlicio.us/blogs/krzysztof_kozmic/archive/2009/08/14/testing-with-nhibernate-and-sqlite.aspx" target="_blank">Krzysztof Kozmic’s recent post on Devlio.us</a>, <a href="http://www.tigraine.at/2009/05/29/fluent-nhibernate-gotchas-when-testing-with-an-in-memory-database/" target="_blank">Daniel Hoebling’s blog post</a>, <a href="http://nhprof.com/Learn/UserGuide" target="_blank">Ayende’s NHProfiler Alerts</a>.</p>]]></content>
      <post-name type="text"><![CDATA[how to using the n stack part 4]]></post-name>
      <comments>
        <comment id="474" date-created="2009-08-17T03:22:25" date-modified="2009-08-17T03:22:25" approved="true" user-name="Cheetah" user-url="http://">
          <title type="text"><![CDATA[re: How-To: Using the N* Stack, part 4]]></title>
          <content type="text"><![CDATA[A note on SQLite:

The managed provider merges the unmanaged dll into the managed dll, so you don't need to download the unmanaged one separately, at least not on windows platforms.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="553" date-created="2009-12-06T03:25:24" date-modified="2009-12-06T03:25:24" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[credit repair new hampshire]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="483" date-created="2009-08-19T16:23:46" date-modified="2009-08-19T16:23:46" approved="true" post-url="/blogs/nhibernate/archive/2009/08/19/nhibernate-and-wpf-viewmodels-and-views.aspx" type="normal" hasexcerpt="false" views="16175">
      <title type="text"><![CDATA[Nhibernate and WPF: ViewModels and Views]]></title>
      <content type="text"><![CDATA[<p>Part I: <a href="http://jfromaniello.blogspot.com/2009/08/introducing-nhiberate-and-wpf.html">Introducing NHiberate and WPF: The ChinookMediaManager</a>     <br />Part II: <a href="http://jfromaniello.blogspot.com/2009/08/chinook-media-manager-core.html">Nhibernate and WPF: The core</a>     <br />Part III: <a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-models-concept.aspx">Nhibernate and WPF: Models concept</a></p>  <p>In this post I will introduce some concepts about the presentation layer of the Chinook Media Manager example.</p>  <h3>Prerequisites</h3>  <p>If you are new to the MVVM pattern I will strongly recommend you these blogs post:</p>  <ul>   <li><a href="http://blogs.msdn.com/johngossman/archive/2005/10/08/478683.aspx">Tales from the smart client – John Grossman.</a> </li>    <li><a href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx">WPF apps with the MVVM design pattern – By John Smith.</a> </li>    <li><a href="http://blogs.msdn.com/erwinvandervalk/archive/2009/08/14/the-difference-between-model-view-viewmodel-and-other-separated-presentation-patterns.aspx">The difference between Model-View-ViewModel and other separated presentation pattern – By Erwin van der Valk.</a> </li> </ul>  <h3>Introduction</h3>  <p>I will quote John Smith:</p>  <blockquote>   <p>The single most important aspect of WPF that makes MVVM a great pattern to use is the data binding infrastructure. By binding properties of a view to a ViewModel, you get loose coupling between the two and entirely remove the need for writing code in a ViewModel that directly updates a view.</p> </blockquote>  <p>This is the more important thing that you need to remember. Unlike the MVP pattern the viewmodel never updates the UI, the ui is automatically updated by the databinding infrastructure. Also you has to keep in mind that all in the MVVM is about databinding, even <strong>events</strong>. </p>  <p>I chose to separate Views and ViewModels in differents assembly, although I saw these two together in a bunch of samples. For the other hand the interfaces of the ViewModels are defined in the Views assembly.</p>  <h3>The “Album Manager” use case</h3>  <p>If we recall my first post the UI was this:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/albums_5F00_4848FF1C.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="albums" border="0" alt="albums" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/albums_5F00_thumb_5F00_1C533E31.png" width="476" height="384" /></a> </p>  <p>I will separate this use case in two views and viewmodels:</p>  <p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/albumsred_5F00_28E60CAF.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="albumsred" border="0" alt="albumsred" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/albumsred_5F00_thumb_5F00_16C1F142.png" width="476" height="384" /></a> </p>  <p>The main View is called AlbumManagerView and the view inside the red border is called “EditAlbumView”. The reason for why I’m doing this is clear: “I need somehow to separate the problem into smaller parts”. And as I say in the “<a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-models-concept.aspx">Models concept</a>” post a use-case can expand multiples views.</p>  <p>To complicate things a bit, the user told us that would like to be able to simultaneously edit multiple albums. So, I will use the workspace sample of John Smith.</p>  <h3>The AlbumManager</h3>  <p>When I start to define a View, the first thing is the ViewModel interface, in this case:</p>  <pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IAlbumManagerViewModel </span>: <span style="color: #2b91af">INotifyPropertyChanged
</span>{
    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Setup the view, load the albums collection.
    </span><span style="color: gray">/// &lt;/summary&gt;
    /// &lt;param name=&quot;artist&quot;&gt;&lt;/param&gt;
    </span><span style="color: blue">void </span>SetUp(<span style="color: #2b91af">Artist </span>artist);

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Expose a bindable collection of albums.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">IEnumerable</span>&lt;<span style="color: #2b91af">Album</span>&gt; Albums { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Get or Set the selected album.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">Album </span>SelectedAlbum { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Open an edition workspace for editing the selected album.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>EditSelectedAlbumCommand { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Commit all the changes.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>SaveAllCommand { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Discard all the changes.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>CancelAllCommand { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">WorkSpace open.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ObservableCollection</span>&lt;<span style="color: #2b91af">IEditAlbumViewModel</span>&gt; AlbumEditWorkspaces { <span style="color: blue">get</span>; }
}</pre>

<p>In the introduction I said that MVVM use databinding even for events . 
  <br />So, what is an ICommand?&#160; ICommand interface has three members: CanExecuteChanged, CanExecute and Execute. The object that is bound to this command (aka command source), disable itself if the command cann’t be executed. You can bind KeyGestures, MouseActions, buttons and so on. More on this topic <a href="http://msdn.microsoft.com/en-us/library/ms752308.aspx">here</a>.</p>

<p>The second step is to start writing a test for the concrete implementation of the viewmodel.&#160; <br /></p>

<pre class="code">[<span style="color: #2b91af">TestFixture</span>]
<span style="color: blue">public class </span><span style="color: #2b91af">AlbumManagerViewModelTest
</span>{
    [<span style="color: #2b91af">Test</span>]
    <span style="color: blue">public void </span>setup_viewmodel_should_work()
    {
        <span style="color: blue">var </span>albumManagerModel = <span style="color: blue">new </span><span style="color: #2b91af">Mock</span>&lt;<span style="color: #2b91af">IAlbumManagerModel</span>&gt;();

        <span style="color: blue">var </span>artist = <span style="color: blue">new </span><span style="color: #2b91af">Artist </span>{ Name = <span style="color: #a31515">&quot;John&quot; </span>};
        <span style="color: blue">var </span>albumList = <span style="color: blue">new </span><span style="color: #2b91af">List</span>&lt;<span style="color: #2b91af">Album</span>&gt; { <span style="color: blue">new </span><span style="color: #2b91af">Album</span>() { Artist = artist } };

        albumManagerModel.Setup(am =&gt; am.GetAlbumsByArtist(artist))
                         .Returns(albumList)
                         .AtMostOnce();


        <span style="color: blue">var </span>albumManagerVm = <span style="color: blue">new </span><span style="color: #2b91af">AlbumManagerViewModel</span>(albumManagerModel.Object, 
                                                       viewInsantiator.Object);

        <span style="color: blue">var </span>eventWasRaised = <span style="color: blue">false</span>;

        albumManagerVm.PropertyChanged +=
            (sender, args) =&gt;
            {
                <span style="color: green">//property changed should be raised AFTER the property change.
                </span><span style="color: blue">if </span>(<span style="color: #a31515">&quot;Albums&quot;</span>.Equals(args.PropertyName))
                {
                    albumManagerVm.Albums.Should().Be.SameInstanceAs(albumList);
                    eventWasRaised = <span style="color: blue">true</span>;    
                }
            };

        albumManagerVm.SetUp(artist);
        eventWasRaised.Should().Be.True();
        albumManagerModel.VerifyAll();

    }</pre>
<a href="http://11011.net/software/vspaste"></a>

<p></p>

<p>When I setup an “AlbumManagerViewModel”, it should call GetAlbumByArtist of my model, and put the result in the “Albums” property. Also the viewmodel should raise the PropertyChanged for the album property, AFTER the change in the property.</p>

<p>The implementation is very simple: 
  <br /></p>

<pre class="code"><span style="color: blue">public void </span>SetUp(<span style="color: #2b91af">Artist </span>artist)
{
    Albums = _albumManagerModel.GetAlbumsByArtist(artist);
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<pre class="code"><span style="color: blue">private </span><span style="color: #2b91af">IEnumerable</span>&lt;<span style="color: #2b91af">Album</span>&gt; _albums;
<span style="color: blue">public </span><span style="color: #2b91af">IEnumerable</span>&lt;<span style="color: #2b91af">Album</span>&gt; Albums
{
    <span style="color: blue">get </span>{ <span style="color: blue">return </span>_albums; }
    <span style="color: blue">private set
    </span>{
        _albums = <span style="color: blue">value</span>;
        OnPropertyChanged(<span style="color: #a31515">&quot;Albums&quot;</span>);
    }
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>To not getting bored with the code, the full implementation of the EditSelectedAlbumCommand is <a href="http://code.google.com/p/unhaddins/source/browse/trunk/Examples/uNHAddIns.Examples.WPF/ChinookMediaManager.ViewModels/AlbumManagerViewModel.cs">here</a>.</p>

<p>I will highlight interesting parts of this code:</p>

<pre class="code"><span style="color: blue">public </span><span style="color: #2b91af">ICommand </span>EditSelectedAlbumCommand
{
    <span style="color: blue">get
    </span>{
        <span style="color: blue">if </span>(_editSelectedAlbumCommand == <span style="color: blue">null</span>)
            _editSelectedAlbumCommand = <span style="color: blue">new </span><span style="color: #2b91af">RelayCommand</span>(
                o =&gt; EditSelectedAlbum(),
                o =&gt; SelectedAlbum != <span style="color: blue">null </span>&amp;&amp;!AlbumEditWorkspaces.Any(ae =&gt; ae.Album == SelectedAlbum));
        <span style="color: blue">return </span>_editSelectedAlbumCommand;
    }
}</pre>

<p><a href="http://11011.net/software/vspaste"></a>This is the EditSelectedAlbumCommand. In the instantiation of the command you see two lambdas. The first function is the code that should be called when the commandsource call Execute. The second is the CanExecute function, as you can see it returns false when:</p>

<ul>
  <li>There isn’t a selected album. </li>

  <li>There is another workspace editing the album. </li>
</ul>

<p>You can find the RelayCommand in the source.</p>

<p>The EditSelectedAlbum method looks as follows:</p>

<pre class="code"><span style="color: blue">private void </span>EditSelectedAlbum()
{
    <span style="color: green">//Resolve a new instance of EditAlbumViewModel
    </span><span style="color: blue">var </span>newWp = _viewFactory.ResolveViewModel&lt;<span style="color: #2b91af">IEditAlbumViewModel</span>&gt;();
    <span style="color: green">//Setup the new viewmodel.
    </span>newWp.SetUp(SelectedAlbum, _albumManagerModel);
    <span style="color: green">//subscribe to close request.
    </span>newWp.RequestClose += EditAlbumRequestClose;
    <span style="color: green">//add the new viewmodel to the workspace collection.
    </span>AlbumEditWorkspaces.Add(newWp);
    <span style="color: green">//set the new viewmodel as the active wp.
    </span>SetActiveWorkspace(newWp);
}</pre>

<pre class="code">Now, the view for this viewmodel is very easy:</pre>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">StackPanel</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">StackPanel </span><span style="color: red">Orientation</span><span style="color: blue">=&quot;Horizontal&quot; </span><span style="color: red">DockPanel.Dock</span><span style="color: blue">=&quot;Top&quot; &gt;
        &lt;</span><span style="color: #a31515">Button </span><span style="color: red">Command</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">EditSelectedAlbumCommand</span><span style="color: blue">}&quot; &gt;</span><span style="color: #a31515">Edit</span><span style="color: blue">&lt;/</span><span style="color: #a31515">Button</span><span style="color: blue">&gt;
        &lt;</span><span style="color: #a31515">Button</span><span style="color: blue">&gt;</span><span style="color: #a31515">Close</span><span style="color: blue">&lt;/</span><span style="color: #a31515">Button</span><span style="color: blue">&gt;
    &lt;/</span><span style="color: #a31515">StackPanel</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">ListBox </span><span style="color: red">Name</span><span style="color: blue">=&quot;AlbumsList&quot; 
         </span><span style="color: red">ItemsSource</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Albums</span><span style="color: blue">}&quot; 
         </span><span style="color: red">DisplayMemberPath</span><span style="color: blue">=&quot;Title&quot;
         </span><span style="color: red">SelectedItem</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">SelectedAlbum</span><span style="color: blue">}&quot;
         </span><span style="color: red">DockPanel.Dock</span><span style="color: blue">=&quot;Top&quot; </span><span style="color: red">Height</span><span style="color: blue">=&quot;302&quot;&gt;
    &lt;/</span><span style="color: #a31515">ListBox</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">Button </span><span style="color: red">Command</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">SaveAllCommand</span><span style="color: blue">}&quot; &gt;</span><span style="color: #a31515">Save All</span><span style="color: blue">&lt;/</span><span style="color: #a31515">Button</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">Button </span><span style="color: red">Command</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">CancelAllCommand</span><span style="color: blue">}&quot; &gt;</span><span style="color: #a31515">Cancel All</span><span style="color: blue">&lt;/</span><span style="color: #a31515">Button</span><span style="color: blue">&gt;
&lt;/</span><span style="color: #a31515">StackPanel</span><span style="color: blue">&gt;
</span></pre>
<a href="http://11011.net/software/vspaste"></a>

<p>The “tabs” container is described in this peace of code:</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">Border </span><span style="color: red">Style</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">StaticResource </span><span style="color: red">MainBorderStyle</span><span style="color: blue">}&quot;&gt;
    &lt;</span><span style="color: #a31515">HeaderedContentControl 
      </span><span style="color: red">Content</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Path</span><span style="color: blue">=AlbumEditWorkspaces}&quot;
      </span><span style="color: red">ContentTemplate</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">StaticResource </span><span style="color: red">WorkspacesTemplate</span><span style="color: blue">}&quot;
      </span><span style="color: red">Header</span><span style="color: blue">=&quot;Workspaces&quot;
      </span><span style="color: red">Style</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">StaticResource </span><span style="color: red">MainHCCStyle</span><span style="color: blue">}&quot;
      /&gt;
&lt;/</span><span style="color: #a31515">Border</span><span style="color: blue">&gt;</span></pre>

<h3>The EditAlbum </h3>

<p>I define the interface for the IEditAlbumViewModel as follows: 
  <br /></p>

<pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IEditAlbumViewModel </span>: <span style="color: #2b91af">INotifyPropertyChanged
</span>{
    <span style="color: blue">void </span>SetUp(<span style="color: #2b91af">Album </span>album, <span style="color: #2b91af">IAlbumManagerModel </span>albumManagerModel);

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">The album being edited.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">Album </span>Album { <span style="color: blue">get</span>; }
   
    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">The title of the tab.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: blue">string </span>DisplayName { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">The command to close the tab.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>CloseCommand { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">The command to save the album.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>SaveCommand { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">The command to add a new track to the album.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>AddNewTrackCommand { <span style="color: blue">get</span>; }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">The command to delete the selected track.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: #2b91af">ICommand </span>DeleteSelectedTrackCommand { <span style="color: blue">get</span>; }

    <span style="color: #2b91af">Track </span>SelectedTrack { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">event </span><span style="color: #2b91af">EventHandler </span>RequestClose;
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>The implementation is very straightforward, you can see <a href="http://code.google.com/p/unhaddins/source/browse/trunk/Examples/uNHAddIns.Examples.WPF/ChinookMediaManager.ViewModels/EditAlbumViewModel.cs">here</a>. One thing to mention is that I configure nhibernate to resolve all my collections with INotifyCollectionChanged, so I can add a new Track in my viewmodel and the datagrid bound to the tracks collection will be notified about that change.</p>

<h3>What’s next?</h3>

<p>We have several troubles with this application:</p>

<ul>
  <li>Error handling. Is simple, this is what the user see. We MUST handle unexpected exceptions, just think what would happen if we shutdown the database server. </li>

  <li>Asynchronous calls. For now we are freezing the UI thread with database and business layer operations. We need to build responsive UI’s </li>

  <li>Validation. I will add support to the NHibernate Validator. </li>

  <li>Conflict resolution for concurrency problems. </li>
</ul>

<h3>Do you want to see the app working?</h3>

<p><a href="http://www.screencast.com/t/dCrs2VJB">Here</a> you can see the full concept of &quot;Conversation per Business Transaction&quot; of <a href="http://fabiomaulo.blogspot.com/">Fabio Maulo</a> working.</p>


<p>The full source code project is <a href="http://code.google.com/p/unhaddins/">here</a>.</p>

<p>Special thanks to all the people mentioned in this post.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf viewmodels and views]]></post-name>
      <categories>
        <category ref="1107" />
        <category ref="1151" />
      </categories>
      <trackbacks>
        <trackback id="537" date-created="2009-10-30T19:10:42" date-modified="2009-10-30T19:10:42" approved="true" url="http://devlicio.us/blogs/rob_eisenberg/archive/2009/10/30/nhprof-and-caliburn-testability.aspx">
          <title type="text"><![CDATA[NHProf and Caliburn Testability]]></title>
        </trackback>
        <trackback id="1031" date-created="2014-09-10T18:50:36" date-modified="2014-09-10T18:50:36" approved="true" url="http://161.58.251.206/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.wavenet.com%3Eservidores+dedicados%3C%2Fa%3E">
          <title type="text"><![CDATA[servidores dedicados]]></title>
        </trackback>
        <trackback id="1035" date-created="2014-09-11T21:53:00" date-modified="2014-09-11T21:53:00" approved="true" url="http://webhotel3.webhosting.dk/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fjungle-heat-diamond-hack%2F%3Ehack+jungle+heat%3C%2Fa%3E">
          <title type="text"><![CDATA[Jungle heat hack]]></title>
        </trackback>
        <trackback id="1041" date-created="2014-09-12T12:22:17" date-modified="2014-09-12T12:22:17" approved="true" url="http://mike.geiger.ca/temp/test.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fclash-of-clans-hack%2F%3Eclash+of+clans+hack%3C%2Fa%3E">
          <title type="text"><![CDATA[http://mike.geiger.ca/temp/test.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fclash-of-clans-hack%2F%3Eclash+of+clans+hack%3C%2Fa%3E]]></title>
        </trackback>
        <trackback id="1048" date-created="2014-09-13T17:57:44" date-modified="2014-09-13T17:57:44" approved="true" url="http://test-online.hut2.ru/test.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Fgame-of-war-fire-age-hack%2F%3EGame+of+war+fire+age+hack%3C%2Fa%3E">
          <title type="text"><![CDATA[http://test-online.hut2.ru/test.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Fgame-of-war-fire-age-hack%2F%3EGame+of+war+fire+age+hack%3C%2Fa%3E]]></title>
        </trackback>
        <trackback id="1049" date-created="2014-09-14T02:00:09" date-modified="2014-09-14T02:00:09" approved="true" url="http://www.mabi.de/~lw/www.allocko.de/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Fclash-of-clans-hack%2F%3Ehttp%3A%2F%2Ffuturecheats.com%2Fclash-of-clans-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[http://www.mabi.de/~lw/www.allocko.de/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Fclash-of-clans-hack%2F%3Ehttp%3A%2F%2Ffuturecheats.com%2Fclash-of-clans-hack%2F%3C%2Fa%3E]]></title>
        </trackback>
        <trackback id="1055" date-created="2014-09-15T02:52:09" date-modified="2014-09-15T02:52:09" approved="true" url="http://liber.hse.perm.ru/1.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fcandy-crush-saga-cheats%2F%3Ehttp%3A%2F%2Fwww.socialcheats.com%2Fcandy-crush-saga-cheats%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[Candy crush saga cheats]]></title>
        </trackback>
        <trackback id="1060" date-created="2014-09-15T15:49:20" date-modified="2014-09-15T15:49:20" approved="true" url="http://87.118.92.202/php.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2F8-ball-pool-money-hack%2F%3Ehttp%3A%2F%2Fwww.socialcheats.com%2F8-ball-pool-money-hack%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[visit website]]></title>
        </trackback>
        <trackback id="1064" date-created="2014-09-17T18:33:49" date-modified="2014-09-17T18:33:49" approved="true" url="http://rooglub.vitebsk.by/pinfo.php/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DY-tG3bqA2Rc%3Echeap+last+minute+packages%3C%2Fa%3E">
          <title type="text"><![CDATA[simply click the following internet site]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="490" date-created="2009-08-23T22:20:04" date-modified="2009-08-23T22:20:04" approved="true" post-url="/blogs/nhibernate/archive/2009/08/23/part-5-fixing-the-broken-stuff.aspx" type="normal" hasexcerpt="false" views="15492">
      <title type="text"><![CDATA[Part 5: Fixing the Broken Stuff]]></title>
      <content type="text"><![CDATA[<p>This is part 5 of my series on <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a> with <a href="http://nhforge.org" target="_blank">NHibernate</a>. So far, we concentrated on NHibernate and persistence concerns. In this part, we’re going to correct our model and mappings to pass our tests. This will be the last full-time NHibernate post for a while. The next part will be focused on integrating <a href="http://ninject.org/" target="_blank">Ninject</a>, our inversion of control / dependency injection framework, with ASP.NET MVC.</p>  <p>If you’re just joining us, you can still catch up.</p>  <ul>   <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a> – Solution setup </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a> – Model design </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a> – Persistence mapping </li>    <li><a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a> – Persistence tests <a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/LogoNH_5F00_3F6D6799.gif"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="LogoNH" border="0" alt="LogoNH" align="right" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/LogoNH_5F00_thumb_5F00_0511F1B8.gif" width="43" height="40" /></a> </li> </ul>  <p>First, some trivia. According to Fabio Maulo, the NHibernate logo is probably a sleeping <a href="http://en.wikipedia.org/wiki/Marmot" target="_blank">marmot</a>.&#160;&#160;&#160; </p>  <h3>Know what you’re fixing</h3>  <p>When correcting bugs, you should correct only bugs. This seems obvious. Yes, we write tests so we can find out what’s broken. The less obvious purpose is to know what’s not broken.</p>  <p><strong>Confession</strong>: Sometimes I code first, then test. Sometimes I put on my pants, then my shirt. As long as you leave the house fully dressed, the order isn’t all that important. As long as you write your code and tests every day, the order isn’t all that important.</p>  <p>Now, when you’re on a team working on a project, I assume things *should* work a little different. I wouldn’t know. My project team is just me, and I’ve picked up a lot of bad habits from my team over the years.</p>  <p>Here are the results of the NUnit tests from part 4: 2 passed, 3 failed, 5 threw exceptions. 2 out of 10 is actually pretty good for me. Let’s work through these 8 problems one at a time.</p>  <p>&#160;</p>  <h3>Bare-minimum NHibernate debugging</h3>  <p>NHibernate makes extensive use of the log4net log framework. It’s quick and painless to expose this log to NUni or most other test runners.</p>  <ol>   <li>In your data test project, add a reference to log4net.dll </li>    <li>Add an app.config </li>    <li>Add a new class called BaseFixture </li>    <li>Set all of your test fixtures to inherit from the base fixture. </li> </ol>  <p>Here’s what your app.config should look like with the log4net configuration:</p>  <pre class="brush:xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler,log4net&quot;/&gt;
  &lt;/configSections&gt;
  &lt;log4net&gt;
    &lt;appender name=&quot;Debugger&quot; type=&quot;log4net.Appender.ConsoleAppender&quot;&gt;
      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;
        &lt;conversionPattern value=&quot;%date [%thread] %-5level %logger - %message%newline&quot;/&gt;
      &lt;/layout&gt;
    &lt;/appender&gt;
    &lt;logger name=&quot;NHibernate.SQL&quot;&gt;
      &lt;level value=&quot;ALL&quot;/&gt;
      &lt;appender-ref ref=&quot;Debugger&quot;/&gt;
    &lt;/logger&gt;
  &lt;/log4net&gt;
&lt;/configuration&gt;</pre>

<p>Here’s the code for BaseFixture.</p>

<pre class="brush:vbnet">Public MustInherit Class BaseFixture

    Protected Shared ReadOnly Log As log4net.ILog = GetLogger()

    Private Shared Function GetLogger() As log4net.ILog
        log4net.Config.XmlConfigurator.Configure()
        Return log4net.LogManager.GetLogger(GetType(BaseFixture))
    End Function

End Class</pre>

<p>We’re calling log4net.Config,XmlConfiguration.Configure() just once. This loads the logging configuration from the app.config, which wires up log4net with Console.Out through the ConsoleAppender. With the example configuration, we'll get to see the SQL NHibernate is executing.</p>

<p>If you want something a lot more powerful, check out Ayende’s <a href="http://nhprof.com/" target="_blank">NHProf</a>.</p>

<h3>Problem #1</h3>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeOrphanDeleteFromCourseToSections:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.Section, Entity: NStackExample.Section</pre>

<pre class="brush:vbnet">                Dim Course As New Course() With { _
                        .Subject = &quot;SUBJ&quot;, _
                        .CourseNumber = &quot;1234&quot;, _
                        .Title = &quot;Title&quot;, _
                        .Description = &quot;Description&quot;, _
                        .Hours = 3}

                Dim Section As New Section() With { _
                        .FacultyName = &quot;FacultyName&quot;, _
                        .RoomNumber = &quot;R1&quot;, _
                        .SectionNumber = &quot;1&quot;}

                Term.AddSection(Section)
                Course.AddSection(Section)

                Using Tran = Session.BeginTransaction()
                    ID = Session.Save(Course)
                    Session.Save(Section)
                    Tran.Commit() ' &lt;==== Exception here
                End Using
                Session.Clear()</pre>

<p>When a transaction is committed, the session is flushed to the database. That just means data changes are written to the database. This exception is telling us we’re trying to save an object, but it references another object that isn’t saved. We can infer that this means cascading is turned off for this relationship. When we go to this particular line in the code, we see that this transaction is committing a save (INSERT) of a new course, and that this course references a new section. If this were a TestCascadeSaveFromParentToChild test, we would adjust our mapping. In this case, we’re testing the delete-orphan functionality, not the cascade of inserts and updates. We’ll explicitly save the section in this transaction as well.</p>

<p>After making the change and re-running our tests, we see that the same test is still failing, although it got further.</p>

<pre class="brush:vbnet">                'Test removing
                Course.RemoveSection(Section)
                Using Tran = Session.BeginTransaction()
                    Session.Save(Course)
                    Tran.Commit() ' &lt;==== Exception here
                End Using
                Session.Clear()</pre>

<p>Now we're violating a unique constraint. This is because we've called Session.Save(Course) twice. Session.Save is for saving new objects only. Session.SaveOrUpdate or simply Session.Update should be used to save the course. Since neither of those return the identifier, we'll need to get that from our initial Save. We make those change, recompile, and test.</p>

<p>Next, we get this:</p>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeOrphanDeleteFromCourseToSections:
NHibernate.Exceptions.GenericADOException : could not delete collection: [NStackExample.Course.Sections#912b489a-4d12-4bc9-9d68-9c6b0147b799][SQL: UPDATE &quot;Section&quot; SET Course_id = null WHERE Course_id = @p0]
  ----&gt; System.Data.SQLite.SQLiteException : Abort due to constraint violation
Section.Course_id may not be NULL</pre>

<p>This message is telling us that when we disassociated the course from the section, NHibernate tried to set the Section's Course_id to NULL. This violated a not-null constraint. More importantly, this violated our business rule. The section was orphaned and should have been deleted. To corrected it, we update our mappings. In our course mapping, we’ll add Cascade.AllDeleteOrphan() to the one-to-many sections relationship.</p>

<pre class="brush:vbnet">        HasMany(Function(x As Course) x.Sections) _
            .AsSet() _
            .WithForeignKeyConstraintName(&quot;CourseSections&quot;) _
            .Cascade.AllDeleteOrphan()</pre>

<p>After a compile and retest, we get this:</p>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeOrphanDeleteFromCourseToSections:
NHibernate.PropertyValueException : not-null property references a null or transient valueNStackExample.Section.Course</pre>

<p>This error is strange. Basically, even though we’re going to delete the section now that it’s orphaned, NHibernate is complaining that we’ve set Section.Course = null / nothing. For now, simply to appease the marmot god, we’ll remove our not null constraint on Section.Course. If you turn on log4net NHibernate.SQL logging, you’ll see that this operation wouldn’t violate the NOT NULL database constraint. The orphaned row is being deleted. We’re only failing an internal NHibernate property check. I’m hoping for a better explanation from Tuna, one of the NHibernate gurus, who’s been extremely helpful with this series.</p>

<p>The second problem is basically a disconnect between relational database concepts and object relations. All one-to-many database relationships are bidirectional. The many-to-one is implied. In an object graph, we can have a reference from a parent to its children but not reference from the child back to the parent, or vice-versa. Object relationships are unidirectional. Even though it would indicate a bug in most circumstances, we still have to tell NHibernate which of our two unidirectional relationships is the “real” one that we want to persist to the database. The default is to use the one-to-many. This means that the relationship that is saved is based on membership in a course’s sections collection. We would rather have the relationship based on the many-to-one relationship: the Section’s Course property. To do this, we specify Inverse() in our mapping for Course.Sections. This tells NHibernate that the “other side” of the bidirectional relationship is the one we want to persist.</p>

<p>Bug solved. Onward! Wait. Compile it and rerun your tests. You may have unknowingly fixed other problems.</p>

<h3>Problem #2</h3>

<pre>NStackExample.Data.Tests.CourseMappingTests.CanCascadeSaveFromCourseToSections:
  Expected: &lt;nstackexample.section&gt;
  But was:  &lt;nstackexample.section&gt;</pre>

<p>This is another misleading issue. Our test is checking the equality of two sections.</p>

<p>Q: How did we define the equality of a section?</p>

<p>A: We didn’t, so Object.Equals is just looking to see if these two happen to be the same instance. Since one is rehydrated from the database, they aren’t. We’ll have to define our own equality check.</p>

<p>Q: How should we define equality?</p>

<p>A: If two instances represent the same section, they are equal.&#160; Wait. Why are we just talking about sections? Let’s expand that to cover all entities.</p>

<p>Q: Where can we put this rule?</p>

<p>A: We should override Equals In our base Entity class, so all entities can use it.</p>

<p>Q: How do we know if two instances represent the same entity?</p>

<p>A: The ID fields will be equal.</p>

<p>Q: What about when we haven’t persisted the object and don’t have an ID yet?</p>

<p>A: We’ll assume they’re not equal. If a specific class needs something more accurate, it can override Equals again.</p>

<p>Here’s the code:</p>

<pre class="brush:vbnet">    Public Overrides Function Equals(ByVal obj As Object) As Boolean
        Dim other As Entity = TryCast(obj, Entity)
        If other Is Nothing Then Return False
        Return ID.Equals(other.ID) AndAlso Not ID.Equals(Guid.Empty)
    End Function</pre>

<p>Let’s recompile and test again. Look at that! We have 6 out of 10 tests passing now.</p>

<h3>Problem #3</h3>

<pre>NStackExample.Data.Tests.SectionMappingTests.CanCascadeSaveFromSectionToStudentSections:
NHibernate.PropertyValueException : not-null property references a null or transient valueNStackExample.Student.MiddleName</pre>

<p>This particular error can be fixed in two ways. We have defined our Student mapping to not allow null middle names. Our test of the Sections cascade is failing because it doesn’t set a value in middle name. We can either change our test to put something, even an empty string in middle name, or we can change our mapping to allow nulls. I choose option #1. Changing our mapping to allow nulls could lead to NullReferenceExceptions. Let’s set MiddleName = String.Empty around line 83. After a compile and test, we get this error.</p>

<pre>NStackExample.Data.Tests.SectionMappingTests.CanCascadeSaveFromSectionToStudentSections:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.StudentSection, Entity: NStackExample.StudentSection</pre>

<p>This error is saying that our cascade is failing. Why? Because we didn’t actually specify cascade on one of the one-to-many relationships pointing to&#160; StudentSection. Since we know both Sections and Students should cascade to StudentSection, go add Cascade.All to both. Add Inverse() while you’re there.</p>

<p>Compile and retest. Success.</p>

<h3>Problem #4</h3>

<pre>NStackExample.Data.Tests.StudentMappingTests.CanCascadeSaveFromStudentToStudentSection:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.Student, Entity: NStackExample.Student</pre>

<p>This one is a bug in our test. If you look at what we're testing and what we're actually saving, you'll realize that we should be saving Student, not Section. Fix it and try again. Now we have the same MiddleName bug we had in problem #3. Fix it as well. Test again. Now we get a NullReferenceException. Why?</p>

<p>If you look at our test of the Student mapping, you’ll see that we’re not checking the correct results. This was most likely a sloppy cut-and-paste job in the middle of a conference call or some other distracting scenario. Swap in the correct expected results:</p>

<pre class="brush:vbnet">                'Check the results
                Using Tran = Session.BeginTransaction
                    Student = Session.Get(Of Student)(ID)

                    Assert.AreEqual(1, Student.StudentSections.Count)
                    Assert.AreEqual(Student.StudentSections(0), StudentSection)

                    Tran.Commit()
                End Using</pre>

<p>It works!</p>

<h3>Problem #5</h3>

<pre>NStackExample.Data.Tests.TermMappingTests.CanCascadeSaveFromTermToSections:
NHibernate.TransientObjectException : object references an unsaved transient instance - save the transient instance before flushing. Type: NStackExample.Section, Entity: NStackExample.Section</pre>

<p>This is the same as problem #3. Our cascade from term is not cascading the save down to the section. Go add Cascade,All()and Inverse() to Term.Sections.</p>

<h3>Problem #6</h3>

<pre>NStackExample.Data.Tests.TermMappingTests.CanSaveAndLoadTerm:
  Expected: &quot;Fall 2009&quot;
  But was:  null</pre>

<p>In this test, we see that we were expecting a value in the Name property of Term, but we got null / nothing. Whenever you see this, you should first check your mapping. In this case, you'll quickly discover that we didn't map that property. Go map it. Next, you'll discover a bug in our tests. We're comparing the wrong date. EndDate should be compared with December 1st, 2009.</p>

<h3>It works! </h3>

<p>That really wasn’t so terrible. It probably took more effort to read this post than it did to correct those bugs.</p>

<p>Oh yeah, and get some source control.</p>

<p><strike>Before I post the source code, I’ll be updating to Fluent NHibernate v1.0 RC and fixing some of the typos and reference problems you’ve commented about. With any luck, the corrected source code for this part, along with the next part will be out before the weekend is over. </strike></p>

<p>Edit: Download the entire solution in <a href="http://jasondentler.com/downloads/NStackExample.Part5.VBNET.Zip" target="_blank">VB</a> or <a href="http://jasondentler.com/downloads/NStackExample.Part5.CSharp.Zip" target="_blank">C#</a>. I’ve upgraded to Fluent NHibernate v1 RC and updated most of the other assemblies.</p>

<p>Jason 
  <br />- Glad to be moving on to Ninject soon.</p>]]></content>
      <post-name type="text"><![CDATA[part 5 fixing the broken stuff]]></post-name>
      <comments>
        <comment id="491" date-created="2009-08-24T14:40:39" date-modified="2009-08-24T14:40:39" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Part 5: Fixing the Broken Stuff]]></title>
          <content type="text"><![CDATA[More exactly : it is a marmot nHibernating ;)]]></content>
        </comment>
      </comments>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="493" date-created="2009-08-28T01:06:36" date-modified="2009-08-28T01:06:36" approved="true" post-url="/blogs/nhibernate/archive/2009/08/27/nhibernate-and-wpf-validations.aspx" type="normal" hasexcerpt="false" views="6419">
      <title type="text"><![CDATA[Nhibernate and WPF: Validations]]></title>
      <content type="text"><![CDATA[<p>Part I: <a href="http://jfromaniello.blogspot.com/2009/08/introducing-nhiberate-and-wpf.html">Introducing NHiberate and WPF: The ChinookMediaManager</a>     <br />Part II: <a href="http://jfromaniello.blogspot.com/2009/08/chinook-media-manager-core.html">Nhibernate and WPF: The core</a>     <br />Part III: <a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-models-concept.aspx">Nhibernate and WPF: Models concept</a>     <br />Part IV :<a href="http://jfromaniello.blogspot.com/2009/08/nhibernate-and-wpf-viewmodels-and-views.html">Nhibernate and WPF: ViewModels and Views</a></p>  <p>In this post I will show you an easy way to handle validations in WPF.</p>  <p>In System.ComponentModel we have an interesting interface named <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.idataerrorinfo.aspx">IDataErrorInfo</a>.     <br />This interface has two members:</p>  <ul>   <li>IDataErrorInfo.Item: Gets the error message for the property with the given name. </li>    <li>IDataErrorInfo.Error: Gets an error message indicating what is wrong with this object. </li> </ul>  <p>The interesting side of this interface is that if we implement this in our domain classes, the presentation layer will automatically resolved certain things.</p>  <blockquote>   <p>Side note: This interface was made with DataTables in mind. </p> </blockquote>  <h4>Validation Framework</h4>  <p>I really like NHibernateValidator, in the same way that I like NHibernate. But, in uNhAddIns we have a main principle: “those two are just options”, so you can change whenever you want to use anything else (<a href="http://msdn.microsoft.com/en-us/library/cc309509.aspx">Validation Application Block</a>, <a href="http://www.codeplex.com/ValidationFramework">Validation Framework</a>, <a href="http://www.castleproject.org/ActiveRecord/documentation/v1rc1/manual/validators.html">Castle Validators</a>, <a href="http://www.codeplex.com/xval">xVal</a>).</p>  <p>For that matter, <a href="http://fabiomaulo.blogspot.com/">Fabio Maulo</a> developed a simple interface named <a href="http://code.google.com/p/unhaddins/source/browse/trunk/uNhAddIns/uNhAddIns.Adapters/IEntityValidator.cs">IEntityValidator</a>, this is part now of the uNhAddIns.Adapters project. If you want to use Nhibernate Validator the EntityValidator is already implemented <a href="http://code.google.com/p/unhaddins/source/browse/#svn/trunk/uNhAddIns/uNhAddIns.NHibernateValidator">here</a>. If you want to use another validator framework please implement the interface and send us the patch ;-).</p>  <h4>How To </h4>  <p>Implementing IDataErrorInfo directly in domain classes is a waste of time and also is too much invasive, because will end with a dependency in the IEntityValidator. Since we already know how to build injectable behavior we can address this problem in the same way.</p>  <p>I build a new DynamicProxy IInterceptor you could see the implementation <a href="http://code.google.com/p/unhaddins/source/browse/trunk/uNhAddIns/uNhAddIns.ComponentBehaviors.Castle/DataErrorInfoInterceptor.cs">here</a>.</p>  <p>The configuration of the Album entity, now looks as follows:</p>  <pre class="code">container.Register(<span style="color: #2b91af">Component</span>.For&lt;<span style="color: #2b91af">Album</span>&gt;()
                                    .NhibernateEntity()
                                    .AddDataErrorInfoBehavior()
                                    .AddNotificableBehavior()
                                    .LifeStyle.Transient);</pre>

<p>&#160;</p>

<p>The configuration of Nhibernate.Validator is very easy and <a href="http://nhforge.org/wikis/howtonh/setup-nhv-fluently-with-your-ioc-container.aspx">I don’t want to repeat myself</a>. 

  <br />Then you need to register an IEntityValidator as follows:</p>

<pre class="code">container.Register(<span style="color: #2b91af">Component</span>.For&lt;<span style="color: #2b91af">IEntityValidator</span>&gt;()
                            .ImplementedBy&lt;<span style="color: #2b91af">EntityValidator</span>&gt;());</pre>

<p>You have three way to write validations with NHibernate Validator: Xml, Fluent and Attributes. This is aleady very well explained in this <a href="http://fabiomaulo.blogspot.com/2009/02/diving-in-nhibernatevalidator.html">post</a>.</p>

<p>In the VIEW the only thing that we need to enable is the ValidateOnDataErrors attribute, this is an example textbox:</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">TextBox </span><span style="color: red">Text</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Path</span><span style="color: blue">=Album.Title, </span><span style="color: red">ValidatesOnDataErrors</span><span style="color: blue">=true}&quot; /&gt;</span></pre>

<p>I’ve a shared a resource for views, as follows:</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">Style </span><span style="color: red">TargetType</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">x</span><span style="color: blue">:</span><span style="color: #a31515">Type </span><span style="color: red">TextBox</span><span style="color: blue">}&quot;&gt;
    &lt;</span><span style="color: #a31515">Style.Triggers</span><span style="color: blue">&gt;
        &lt;</span><span style="color: #a31515">Trigger </span><span style="color: red">Property</span><span style="color: blue">=&quot;Validation.HasError&quot; </span><span style="color: red">Value</span><span style="color: blue">=&quot;true&quot;&gt;
            &lt;</span><span style="color: #a31515">Setter </span><span style="color: red">Property</span><span style="color: blue">=&quot;ToolTip&quot;
            </span><span style="color: red">Value</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">RelativeSource</span><span style="color: blue">={</span><span style="color: #a31515">RelativeSource </span><span style="color: red">Self</span><span style="color: blue">}, 
                   </span><span style="color: red">Path</span><span style="color: blue">=(Validation.Errors)[</span>0<span style="color: blue">].ErrorContent}&quot;/&gt;
        &lt;/</span><span style="color: #a31515">Trigger</span><span style="color: blue">&gt;
    &lt;/</span><span style="color: #a31515">Style.Triggers</span><span style="color: blue">&gt;
&lt;/</span><span style="color: #a31515">Style</span><span style="color: blue">&gt;</span></pre>
<a href="http://11011.net/software/vspaste"></a>This means: “textbox should display validation errors in tooltip”. 

<br />

<br />This is all. What?, you don’t believe me. 

<br />

<br />

<h3>See the behavior in action</h3>
See the screencast <a href="http://www.screencast.com/t/wSG2lhGbiJ6F">here</a>. 

<p>Oh, and I almost forgot, this behavior <a href="http://www.asp.net/Learn/mvc/tutorial-37-cs.aspx">should also work in ASP.NET Mvc</a>.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf validations]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1091" />
        <category ref="1126" />
        <category ref="1129" />
        <category ref="1151" />
      </categories>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="497" date-created="2009-08-29T00:33:00" date-modified="2009-08-29T00:33:00" approved="true" post-url="/blogs/nhibernate/archive/2009/08/29/fluent-nhibernate-1-0.aspx" type="normal" hasexcerpt="false" views="10566">
      <title type="text"><![CDATA[Fluent NHibernate 1.0]]></title>
      <content type="text"><![CDATA[<p>The 1.0 RTM is now available <a href="http://fluentnhibernate.org/downloads">here</a>.</p>

<p>For those of you that don't know, <a href="http://fluentnhibernate.org">Fluent NHibernate</a> is for helping you map entities with <a href="http://nhforge.org">NHibernate</a>. It's based firmly on the practice of <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">convention-over-configuration</a>, and can be used in a mapping-per-class style using our <a href="http://wiki.fluentnhibernate.org/Fluent_mapping">fluent interface</a>, or let our <a href="http://wiki.fluentnhibernate.org/Auto_mapping">automapper</a> map your entities itself.</p>

<p>This release introduces a few significant changes, and a lot of insignificant ones. You should refer to the <a href="http://wiki.fluentnhibernate.org/Release_notes_1.0">1.0 release notes</a> for an overview of what's changed.</p>

<p>The <a href="http://wiki.fluentnhibernate.org">wiki</a> has also been upgraded to use different software which should hopefully stop people being blocked, and make it a bit more stable; the upgrade included completely rewriting all of the pages, so don't anyone say that it's out of date.</p>

<p>You can get the binaries from the our <a href="http://fluentnhibernate.org/downloads">downloads page</a>, or get the source from the <a href="http://github.com/jagregory/fluent-nhibernate">github site</a>.</p>

<p>Special thanks go out to the Fluent NHibernate team, Paul Batum, Hudson Akridge, Andrew Stewart, and Stuart Childs. Each of them has put in time and effort above what was asked of them, and they've all felt guilty when not contributing, which is great. Thanks also to all the testers and contributors we've had over the months. Specifically Darko Conrad, for finding about 30 separate issues with the release candidiate; Everett Muniz and his subclasses, who now has a test of his own; and Kevin Dente, for deciding to moan about our method names only <em>after</em> months of work and a release candidate. I owe everyone beers if ever I'm in your area.</p>

<p>Fabio Maulo, Ayende, and the rest of the NHibernate team: Thanks for a great tool. NHibernate is a shining example of all that is good in open source in the .Net world.</p>

<p>...and with that, I'm going on <a href="http://maps.google.co.uk/maps?f=d&source=s_d&saddr=Sydney&daddr=Brisbane+to:Cairns&hl=en&geocode=&mra=ls&sll=-25.656382,152.880249&sspn=1.383954,1.851196&ie=UTF8&ll=-25.522615,152.358398&spn=22.065278,29.619141&z=5">holiday</a>.</p>]]></content>
      <post-name type="text"><![CDATA[fluent nhibernate 1 0]]></post-name>
      <categories>
        <category ref="1148" />
      </categories>
      <trackbacks>
        <trackback id="501" date-created="2009-09-03T16:19:15" date-modified="2009-09-03T16:19:15" approved="true" url="http://codemonkeylabs.com/weekly-web-nuggets/74/">
          <title type="text"><![CDATA[Weekly Web Nuggets #74]]></title>
        </trackback>
        <trackback id="519" date-created="2009-10-02T17:31:49" date-modified="2009-10-02T17:31:49" approved="true" url="http://imperugo.tostring.it/blog/post/fluentnhibernate-10-rtm">
          <title type="text"><![CDATA[FluentNHibernate 1.0 RTM]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4155" date-created="2009-08-28T23:26:45" date-modified="2009-08-28T23:46:38" approved="true" email="james@jagregory.com">
          <title type="text"><![CDATA[jagregory]]></title>
        </author>
      </authors>
    </post>
    <post id="498" date-created="2009-08-29T05:34:47" date-modified="2009-08-29T05:34:47" approved="true" post-url="/blogs/nhibernate/archive/2009/08/28/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja.aspx" type="normal" hasexcerpt="false" views="7763">
      <title type="text"><![CDATA[Part 6: Ninject and MVC or How to be a Web Ninja]]></title>
      <content type="text"><![CDATA[<p><img style="border-right-width: 0px; margin: 10px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" border="0" alt="Ninject" align="left" src="http://kohari.org/wp-content/themes/thesis_151/custom/images/ninject-logo.png" />Nope. I don’t mean <a href="http://askaninja.com/" target="_blank">this guy</a>. He’s cool – well, maybe, maybe not - but I was thinking less comedic assassin and more dependency injection (DI.) <a href="http://ninject.org/" target="_blank">Ninject</a> is the illegitimate brain child of <a href="http://kohari.org/" target="_blank">Nate Kohari</a>, and the subject of today’s post. For those of you looking for another NHibernate fix, we’ll set up session-per-request in part 7.</p>  <p>If you’re new here, you can check out <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a>, and <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">Part 5</a> to catch up. Grab the latest source from the end of Part 5.</p>  <p>If you remember back in the part 1, I said we’d be using Ninject v1. I lied. We’ll be using v1.5. This is the version built by <a href="http://groups.google.co.uk/group/horn-development" target="_blank">horn</a>, and the version that includes Ninject.Framework.MVC.dll. Save yourself some time. Go get the source for horn, build it, and then let horn build Ninject, Fluent NHibernate, and MVCContrib. </p>  <p>Let’s talk about Ninject’s constructor dependency injection. Say you have an AccountBuilder object that builds up a user account object from some fields on a “new user” form and saves it to the database. That’s a pretty complicated task for just one object. You should split off the persistence responsibility to a DAO or Repository and the password hashing / encryption to a password service. The AccountBuilder doesn’t care how the DAO saves the data, just that it does. It also doesn’t care how the password is secured. AccountBuilder has a dependency on each of these services. If ever there was a time to code to interfaces, this is it. The constructor looks like this:</p>  <pre class="brush:vbnet">Public Sub New(DAO As ISaveUserAccounts, PwdHasher As IHashPasswords)</pre>

<pre class="brush:csharp">public AccountBuilder(ISaveUserAccounts DAO, IHashPasswords PwdHasher)</pre>

<p>The details of the constructor aren’t important, only the signature. AccountBuilder is a concrete type, meaning we can create an instance of it, so Ninject can auto self-bind it. We don’t have to tell Ninject ahead of time that it will be creating an AccountBuilder for us. When we ask Ninject to get an AccountBuilder for us, it checks to see if it has a binding for it (more on that in a minute). Since it doesn’t, it checks to see if it can create an object of type AccountBuilder. Since AccountBuilder isn’t abstract (MustInherit in VB.NET) or an interface, Ninject decides that it will just create an AccountBuilder for us. </p>

<p>it goes through all the constructors searching for one with the Inject attribute or the one with the most parameters. Once it’s decided on a constructor, it tries to resolve each of those parameters. Let’s say for a minute that instead of the interfaces, we had specified the actual concrete implementations as parameters. Ninject would resolve each of those the same way it is resolving AccountBuilder. It goes on and on recursively as deep as necessary to resolve each and every dependency until it has instances of DAO and PasswordHasher to use as parameters for the AccountBuilder constructor. Finally, it calls the constructor with those parameters and gives us our AccountBuilder. </p>

<p>Now, because we’ve coded to interfaces, we have to tell Ninject exactly which implementation of those interfaces we want to use. So, we tell Ninject that each time anything needs an ISaveUserAccounts, build up a new instance of UserAccountDAO. It has to be a new instance each time, because UserAccountDAO depends on NHibernate.ISession, which isn’t constant throughout the application. We’ll bind ISession to a Ninject provider. You’ll see an example of that in our application in part 7. The binding for ISaveUserAccounts looks like this:</p>

<pre class="brush:vbnet">        Bind(Of ISaveUserAccounts).To(Of UserAccountDAO)()</pre>

<pre class="brush:csharp">        Bind&lt;ISaveUserAccounts&gt;().To&lt;UserAccountDAO&gt;();</pre>

<p>The password hasher service can be handled a little differently. Let’s suppose for a minute that encryption algorithms can be fairly heavy-weight. We don’t want to build the algorithm over and over, possibly thousands or millions of times an hour on a popular site. Even if it doesn’t bring the site to a screeching halt, it would slow it down significantly. Since the algorithm is reusable, we’re only going to build one for our entire application. Of course, your first thought is “the evil singleton anti-pattern.” Would I do that to you? Well yes, but not intentionally. We are going to create an instance of our PasswordHasher and tell Ninject to pass it out anytime our application needs an implementation of IHashPasswords. The binding looks like this:</p>

<pre class="brush:vbnet">        Bind(Of IHashPasswords).ToConstant(New PasswordHasher)()</pre>

<pre class="brush:csharp">        Bind&lt;IHashPasswords&gt;().ToConstant(New PasswordHasher());</pre>

<p>Of course, if you use just one instance across your entire web, WPF, or multi-threaded application, PasswordHasher will almost certainly need to be thread-safe, but that’s another series of posts. </p>

<p>Now that Ninject knows what implementations to use for those parameters of our AccountBuilder constructor, it builds a new UserAccountDAO, grabs our one-and-only instance of PasswordHasher, calls the constructor and gives us our AccountBuilder. Of course, this is still a pretty basic example.</p>

<p>Now let’s look at <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a>. Up to this point in the series, we’ve talked a lot about the model. Now it’s time to talk about controllers. Controllers in an MVC application manage the flow of your application from view to view, call in to the model to perform actions, and pass data between the model and the views. </p>

<p>Suppose our AccountBuilder is actually a service consumed by our Account controller to carry out the work of registering a new user account. If you’re new to this, you may think that we’re just going to somehow pass in the Ninject kernel to our controller and get our AccountBuilder from there. While I don’t recommend it, you can do that. You’ll essentially end up with the ServiceLocator pattern. We’re going to take this to what may seem an illogical or even perverse extreme. Why not let Ninject build your controllers and inject all of your dependencies? You won’t have any ServiceLocator clutter in your controllers. At least as far as user code goes, the controller is near the bottom of the call stack. You’re in this perfect world where EVERYTHING is injected for you. Let that sink in for a minute. You don’t have to new up a single service ever again. Just ask for it in the constructor wherever you need it. Of course, that’s an absolute and absolutes are evil for the same reason singletons are – you can’t easily prove them with tests. </p>

<p>But wait, doesn’t ASP.NET MVC build the controllers? Yes it does, but it doesn’t have to. Deep inside the mother ship, apparently while hiding from that guy who invented the sealed keyword, <a href="http://haacked.com" target="_blank">Haacked</a> and Co.&#160; built all sorts of extension points in to ASP.NET MVC. One of these extension points happens to be the ability to replace the default controller factory using ControllerBuilder.Current.SetControllerFactory. Just supply the type of your new controller factory implementation. </p>

<p>So, you set up a controller factory to resolve the controllers using Ninject and register all of your controllers with the kernel, right? Wrong. Well, not exactly. Ninject.Framework.MVC has all of that pre-built for you – just use it. Ninject actually has an implementation of HttpApplication that will set up all of this for you. In your Global.asax codebehind file, inherit from Ninject.Framework.Mvc.NinjectHttpApplication. You’ll still have to register your routes. You also have to build the Ninject kernel with all of your ninject modules. </p>

<p>A ninject module is a class that sets up your bindings. So for instance, if you have a module for binding your DAO interfaces to their implementations, it might look something like this:</p>

<pre class="brush:vbnet">Public Class DaoModule
     Inherits StandardModule

     Public Overrides Sub Load()
          Bind(Of ISaveUserAccounts)().To(Of UserAccountDao)()
          Bind(Of ILookupUserAccounts)().To(Of UserAccountDao)()
          Bind(Of IUserAccountDao)().To(Of UserAccountDao)()
          Bind(Of ISaveContacts)().To(Of ContactDao)()
          ' and so on...
     End Sub

End Class</pre>

<pre class="brush:csharp">public class DaoModule : StandardModule
{
    public override void Load()
    {
        Bind&lt;ISaveUserAccounts&gt;().To&lt;UserAccountDAO&gt;();
        Bind&lt;ILookupUserAccounts&gt;().To&lt;UserAccountDAO&gt;();
        Bind&lt;IUserAccountDao&gt;().To&lt;UserAccountDAO&gt;();
        Bind&lt;ISaveContacts&gt;().To&lt;ContactDAO&gt;();
        // and so on...
    }
}</pre>

<p>Of course, we haven’t built any DAOs to bind yet. We haven’t built any controllers to bind yet either. That brings up another point. If there is a single point of constant change during the development of your application, it will most likely be the controllers. Will you always remember to bind new controllers as you build them? Yeah, neither will I. Wouldn’t it be nice if Ninject just went looking for them instead? That’s exactly what AutoControllerModule is for. Just point it at an assembly. It will find all of your controllers and wire them in to Ninject and its controller factory. </p>

<p>At this stage, our Global.asax codebehind looks something like this:</p>

<pre class="brush:vbnet">Imports Ninject.Framework.Mvc
Imports Ninject.Core

Public Class MvcApplication
    Inherits NinjectHttpApplication

    Protected Overrides Function CreateKernel() As Ninject.Core.IKernel
        Dim ControllerModule As New AutoControllerModule( _
            GetType(NStackExample.Controllers.BaseController).Assembly)
        Dim Kernel As IKernel = New StandardKernel(ControllerModule)
        Return Kernel
    End Function

    Protected Overrides Sub RegisterRoutes(ByVal routes As System.Web.Routing.RouteCollection)
        routes.IgnoreRoute(&quot;{resource}.axd/{*pathInfo}&quot;)

        ' MapRoute takes the following parameters, in order:
        ' (1) Route name
        ' (2) URL with parameters
        ' (3) Parameter defaults
        routes.MapRoute( _
            &quot;Default&quot;, _
            &quot;{controller}/{action}/{id}&quot;, _
            New With {.controller = &quot;Home&quot;, .action = &quot;Index&quot;, .id = &quot;&quot;} _
        )
    End Sub

End Class</pre>

<p>If you don’t want Ninject invading your application that deeply, with a good understanding of Ninject and controller factories, you can easily do all of this by hand. Still, I’m pretty confident Nate wrote better code and tests than most of us would have. </p>

<p>That’s it for part 6. In part 7, we’ll wire up <a href="http://nhforge.org" target="_blank">NHibernate</a> to Ninject, talk about our options for session handling in a web app, and set up session-per-request. With a bit of luck, part 7 will be out this weekend.&#160; </p>

<p>Once again, these are just my practices, not necessarily best practices. As always, feedback welcome, flames by appointment only. </p>

<p>Jason 
  <br />- 6 down, 52 to go. maybe. </p>]]></content>
      <post-name type="text"><![CDATA[part 6 ninject and mvc or how to be a web ninja]]></post-name>
      <trackbacks>
        <trackback id="1032" date-created="2014-09-10T21:40:22" date-modified="2014-09-10T21:40:22" approved="true" url="http://www.toshiba-klima.de/fpdf/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.wavenet.com">
          <title type="text"><![CDATA[servidores dedicados]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="499" date-created="2009-08-29T20:47:58" date-modified="2009-08-29T20:47:58" approved="true" post-url="/blogs/nhibernate/archive/2009/08/29/part-7-nhibernate-and-ninject-for-asp-net-mvc.aspx" type="normal" hasexcerpt="false" views="11824">
      <title type="text"><![CDATA[Part 7: NHibernate and Ninject for ASP.NET MVC]]></title>
      <content type="text"><![CDATA[<p>In <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">part 6</a>, I explained how to set up <a href="http://ninject.org/" target="_blank">Ninject</a> with <a href="http://www.asp.net/mvc/" target="_blank">ASP.NET MVC</a>. In this part, we’ll add <a href="http://nhforge.org" target="_blank">NHibernate</a> to the mix. Specifically, we’re going to set up session-per-request using a Ninject and bind all the necessary NHibernate interfaces.</p>  <p>Of course, for the sake of history, read up on <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">part 4</a>, <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">part 5</a>, and <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">part 6</a>. <img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" align="left" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Components.SiteFiles/logos/NHLogoSmall.gif" width="240" height="56" /></p>  <p>If you aren’t familiar with NHibernate in an ASP.NET MVC application, the most common way to manage your sessions is to open one session per web request. Just about everything you need to know about session-per-request is explained in the content and comments of <a href="http://ayende.com/Blog/archive/2009/08/05/do-you-need-a-framework.aspx" target="_blank">this post</a> on Ayende’s blog, but I’ll summarize for you.</p>  <ul>   <li>While building a session factory may be a big operation, once it’s built, opening a session is lightweight. </li>    <li>Opening a session does not open a connection to the database </li>    <li>NHibernate has a built in method for doing session-per-request, but Ayende doesn’t use it for simple stuff and neither will we. When your application doesn’t do anything other than session-per-request, it’s just easier to do it this way. </li>    <li>Multiple business transactions and therefore multiple sessions in a single web request are usually not necessary, just because of how users tend to interact with the application. Even then, you can usually accomplish the same thing with multiple DB transactions on the same session. </li> </ul>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" alt="SessionPerConversation" align="left" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/SessionPerConversation_5F00_thumb_5F00_7345BC5F.png" width="240" height="172" /></p>  <p>NHibernate Burrow is available to help with complex session management in web apps where session per conversation is used. Basically, this allows you to span your NHibernate sessions across several web requests. Just a quick note: If you disregarded everyone’s advice and used Identity (integer auto-number) ID fields, Burrow won’t work for you. If you want more information, check out the Burrow posts on NHForge. Also,&#160; <a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/15/nhibernate-and-wpf-models-concept.aspx" target="_blank">Jose Romaniello’s uses Conversation per Business Transaction</a> in his NHibernate and WPF series on NHForge.org. It’s definitely worth a read.</p>  <p>OK. Back to session-per-request. I’m taking a slightly different approach than Ayende. Even though opening a session is lightweight, I don’t like the idea of opening a session for requests that may not use NHibernate at all. For example, in an application I’m building at work, only about 7 views out of nearly 50 actually use an NHibernate session. That’s a lot of unused sessions. </p>  <p>First things first, we need to make a Ninject module for all of our NHibernate bindings. Where are we going to put it? We have two options. We could put it in NStackExample.Data with all of our NHibernate mappings and configuration. We could also put it in NStackExample.Web. Like Ayende, we will be storing the NHibernate session in the context of the current web request and relying on our application’s EndRequest event to close the session. Since we’re unfortunately coupled to the web application, we’ll put it in the web project. </p>  <ol>   <li>In the web project, make a new folder called Code. </li>    <li>Make a class in that folder called NHibernateModule. </li>    <li>NHibernateModule should inherit from Ninject.Core.StandardModule. </li> </ol>  <p>The process of configuring NHibernate is a lot of work and only needs to be done once. Since our configuration object also creates the session factory, another potentially heavy operation, we kill two birds with one stone. The binding for our NHibernate configuration looks like this:</p>  <pre class="brush:vbnet">    Public Overrides Sub Load()
        Dim Cfg As New NStackExample.Data.Configuration
        Cfg.Configure()

        Bind(Of NStackExample.Data.Configuration).ToConstant(Cfg)
    End Sub</pre>

<pre class="brush:csharp&quot;">    public override void Load()
    {
        NStackExample.Data.Configuration Cfg = new NStackExample.Data.Configuration()
        Cfg.Configure();

        Bind<nstackexample.data.configuration>().ToConstant(Cfg);
    }</pre>

<p>ToConstant bindings essentially create singletons, at least within the scope of our Ninject kernel. Unlike true singletons, this isn’t evil because our tests are free to mock, replace, and re-implement them as necessary. </p>

<p>Now that we have NHibernate configured and our session factory built, we need to bind our NHibernate session. The scope of our session is somewhat complex (per-request). We could use the OnePerRequestBehavior of Ninject, but that <a href="http://stackoverflow.com/questions/536007/ninject-oneperrequestbehaviour-doesnt-seem-to-work-correctly" target="_blank">requires the registration of an IIS HTTP module</a>. Instead, we’ll just bind it to a method and manage it ourselves. This method will create up to one session per request. If a particular request doesn’t require a session, Ninject will never call the method, so an unnecessary session won’t be created. If a particular request asks for a session more than once, perhaps to build more than one DAO, the method will create a single session and use it throughout the web request. Here’s what our module looks like with the binding for our session:</p>

<pre class="brush:vbnet">    Friend Const SESSION_KEY As String = &quot;NHibernate.ISession&quot;

    Public Overrides Sub Load()
        Dim Cfg As New Configuration
        Cfg.Configure()

        Bind(Of Configuration).ToConstant(Cfg)
        Bind(Of NHibernate.ISession).ToMethod(AddressOf GetRequestSession)
    End Sub

    Private Function GetRequestSession(ByVal Ctx As IContext) As NHibernate.ISession
        Dim Dict As IDictionary = HttpContext.Current.Items
        Dim Session As NHibernate.ISession
        If Not Dict.Contains(SESSION_KEY) Then
            'Create an NHibernate session for this request
            Session = Ctx.Kernel.Get(Of Configuration)().OpenSession()
            Dict.Add(SESSION_KEY, Session)
        Else
            'Re-use the NHibernate session for this request
            Session = Dict(SESSION_KEY)
        End If
        Return Session
    End Function</pre>

<pre class="brush:csharp">        internal const string SESSION_KEY = &quot;NHibernate.ISession&quot;;

        public override void Load()
        {
            Configuration Cfg = new Configuration();
            Cfg.Configure();

            Bind&lt;Configuration&gt;().ToConstant(Cfg);
            Bind&lt;NHibernate.ISession&gt;().ToMethod(x =&gt; GetRequestSession(x));
        }

        private NHibernate.ISession GetRequestSession(IContext Ctx)
        {
            IDictionary Dict = HttpContext.Current.Items;
            NHibernate.ISession Session;
            if (!Dict.Contains(SESSION_KEY)) 
            {
                // Create an NHibernate session for this request
                Session = Ctx.Kernel.Get&lt;Configuration&gt;().OpenSession();
                Dict.Add(SESSION_KEY, Session);
            } else {
                // Re-use the NHibernate session for this request
                Session = (NHibernate.ISession) Dict[SESSION_KEY];
            }
            return Session;
        }</pre>

<p>All we have left to do is dispose our session at the end of the request. Let's go back to the Global.asax codebehind.</p>

<pre class="brush:vbnet">    Private Sub MvcApplication_EndRequest(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.EndRequest
        If Context.Items.Contains(NHibernateModule.SESSION_KEY) Then
            Dim Session As NHibernate.ISession = Context.Items(NHibernateModule.SESSION_KEY)
            Session.Dispose()
            Context.Items(NHibernateModule.SESSION_KEY) = Nothing
        End If
    End Sub</pre>

<pre class="brush:csharp">        public MvcApplication()
        {
            this.EndRequest += MvcApplication_EndRequest;
        }


        private void MvcApplication_EndRequest(object sender, System.EventArgs e)
        {
            if (Context.Items.Contains(NHibernateModule.SESSION_KEY))
            {
                NHibernate.ISession Session = (NHibernate.ISession) Context.Items[NHibernateModule.SESSION_KEY];
                Session.Dispose();
                Context.Items[NHibernateModule.SESSION_KEY] = null;
            }
        }</pre>

<p>To illustrate how this will work, I’ve made several additions to the code download. I’ve added a BaseController and HomeController so we can begin to run our web application. I’ve also added a IStudentDao and ICourseDao interfaces to the core project and corresponding implementations in the Data project. I’ve bound the DAO interfaces to their corresponding implementations and added debug statements to output exactly what’s happening with our session. Finally, I’ve set up a constructor in HomeController making it dependent on IStudentDao and ICourseDao. </p>

<p>When we run our application, we see from the debug output that the session is created when we create our IStudentDao. The session is reused to create our ICourseDao. This gives us everything we need to create the HomeController. The web request executes. When the request ends, the session is disposed. If you remove one of the Dao dependencies from HomeController, you’ll see that our session is created. It’s not reused because nothing else needs a session. If you remove both of the Dao dependencies from HomeController, you’ll see that our session is never even created. Since we didn’t create a session, we don’t dispose it when the web request ends.</p>

<p>That’s all for part 7. In part 8, we’ll wrap the NHibernate transaction for use in our controllers project and build a real DAO or two. </p>

<p>Get your code here! We have <a href="http://www.jasondentler.com/downloads/NStackExample.Part7.VBNET.zip" target="_blank">VB.NET</a> and <a href="http://www.jasondentler.com/downloads/NStackExample.Part7.CSharp.zip" target="_blank">CSharp</a> flavored bits. </p>

<p>Jason 
  <br />- NHibernating Ninja Wannabe</p>]]></content>
      <post-name type="text"><![CDATA[part 7 nhibernate and ninject for asp net mvc]]></post-name>
      <categories>
        <category ref="1035" />
        <category ref="1089" />
        <category ref="1147" />
        <category ref="1150" />
      </categories>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="502" date-created="2009-09-07T20:17:50" date-modified="2009-09-07T20:17:50" approved="true" post-url="/blogs/nhibernate/archive/2009/09/07/part-8-daos-repositories-or-query-objects.aspx" type="normal" hasexcerpt="false" views="17050">
      <title type="text"><![CDATA[Part 8: DAOs, Repositories, or Query Objects]]></title>
      <content type="text"><![CDATA[<p>Part 8 is about abstracting <a href="http://nhforge.org" target="_blank">NHibernate</a>. Catch up by reading <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a>, <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">Part 5</a>, <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">Part 6</a>, and <a href="http://jasondentler.com/blog/2009/08/part-7-nhibernate-and-ninject-for-asp-net-mvc/" target="_blank">Part 7</a>. </p>  <div><em><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" align="left" src="http://commons.wikimedia.org/w/thumb.php?f=Nuvola%20apps%20important%20yellow.svg&amp;width=200px" width="100" height="84" />Warning: This post will contain an extraordinary number of links. They will lead you to the opinions of very smart people™. Click them. Read them. Learn something new.</em></div>  <div>There is no one best practice. I know. I googled for it. It seems there are just as many patterns as there are anti-patterns. In fact, these days we’re not even clear <a href="http://msdn.microsoft.com/en-us/library/aa973811.aspx" target="_blank">which</a> is <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx" target="_blank">which</a>. There are <a href="http://codebetter.com/blogs/gregyoung/archive/2009/04/23/repository-is-dead-long-live-repository.aspx" target="_blank">differing opinions</a> all <a href="http://www.udidahan.com/2007/03/28/query-objects-vs-methods-on-a-repository/" target="_blank">over</a> the <a href="http://geekswithblogs.net/Billy/archive/2006/02/15/69607.aspx" target="_blank">place</a>.</div>  <h3>What are my options?</h3>  <p><a href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank">Repositories</a></p>  <ul>   <li><a href="http://twitter.com/sbohlen" target="_blank">Steve Bohlen</a> uses the repository pattern. </li>    <li><a href="http://twitter.com/jfroma" target="_blank">José Romaniello</a> <a href="http://jfromaniello.blogspot.com/2009/08/chinook-media-manager-core.html" target="_blank">uses repositories</a> in his Chinook Media Manager sample on NHForge.org </li>    <li><a href="http://twitter.com/ayende" target="_blank">Ayende</a> <a href="http://msdn.microsoft.com/en-us/library/aa973811.aspx" target="_blank">loved repositories in 2006</a>, but not anymore. </li> </ul>  <p><a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/DataAccessObject.html" target="_blank">Data Access Objects</a>:</p>  <ul>   <li><a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio Maulo</a> <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx#30272" target="_blank">uses DAOs</a> with query objects. </li>    <li><a href="http://twitter.com/tehlike" target="_blank">Tuna Toksoz</a> uses DAOs with FindBy methods </li> </ul>  <p><a href="http://martinfowler.com/eaaCatalog/queryObject.html" target="_blank">Query objects</a>:</p>  <li>In early 2009, Ayende posted that he <a href="http://ayende.com/Blog/archive/2009/04/17/repository-is-the-new-singleton.aspx" target="_blank">no longer likes repositories,</a> and has switched to query objects which expose raw NHibernate&#160; ICriteria. </li>  <li><a href="http://twitter.com/udidahan" target="_blank">Udi Dahan</a> also prefers <a href="http://www.udidahan.com/2007/03/28/query-objects-vs-methods-on-a-repository/" target="_blank">query objects</a>     <p>One note about all of this: Repositories and DAOs can both be used with query objects or simple FindBy methods. Query objects can also be used on their own.</p>    <h3>What’s the score? </h3>    <p>The experts don’t agree, so use whatever you think will work best for your application and your team. By the way, if you’re not following all of these people on twitter, go follow them now.</p>    <p>If you’re looking for a good NHibernate repository sample, check out <a href="http://nhforge.org/wikis/howtonh/your-first-nhibernate-based-application.aspx" target="_blank">Your First NHibernate based application</a> by Gabriel Schenker on the NHForge wiki, or José’s Chinook WPF app. </p>    <p>In this sample application, we’re going to use Data Access Objects. The pattern is simple and well known. This application is small and we won’t have many queries, so we’ll use DAOs with FindBy methods. In a large project, such as an ERP, I would use query objects. </p>    <h3>Splitting the CRUD</h3>    <p>CRUD stands for create, read/retrieve, update, and delete/destroy. which correspond to SQL INSERT, SELECT, UPDATE, and DELETE respectively. </p>    <p>Suppose we’re tracking down an issue in our system where the customer’s middle name was being erased from the database. You start with the most likely locations such as the round trip through the customer update view. No luck. You’ll have to dig in deeper.</p>    <p>We’re using constructor dependency injection throughout our application. Our DAO is defined by the interface IDAO&lt;T&gt;. If you saw some object with a dependency of IDAO&lt;Customer&gt;, you would assume that it performs some database action on customer, so it would be a candidate for deeper investigation. Of course, without diving in to the code, you wouldn’t know what it actually does to customer. </p>    <p>As it turns out 95% of the uses of IDAO&lt;Customer&gt; only display customer data. They don’t actually change anything. You just wasted a LOT of time digging through code that couldn’t possibly cause your bug.</p>    <p>Now suppose you had split your IDAO interface to allow more fine-grained dependencies. Instead of IDAO&lt;T&gt;, you now have ICreate&lt;T&gt;, IRead&lt;T&gt;, IUpdate&lt;T&gt;, and IDelete&lt;T&gt;. When searching for a bug like the one I described, you only need to search through classes with dependencies on IUpdate&lt;Customer&gt; and possibly ICreate&lt;Customer&gt;. </p>    <p>We’re tracking which entity instances are transient (new, not saved) and which ones are already persisted (saved to the database) by the ID property. If the ID is equal to Guid.Empty, the instance is transient. If the ID has any other value, it’s persistent. Since we know that handy bit of information, we don’t really need separate interfaces for create and update operations. We can combine them in to one called ISave&lt;T&gt;. We now have IRead&lt;T&gt;, ISave&lt;T&gt;, and IDelete&lt;T&gt;. </p>    <p>Even though we’ve split our interface up by operation, we’re still only going to have one DAO implementation. In the <a href="http://ninject.org/" target="_blank">Ninject</a> module, we’ll bind each of our three interfaces to the DAO implementation.</p>    <p>Every entity has the same basic CUD, but what about entity-specific queries? In these cases, we’ll create entity-specific interfaces such as IReadCustomer. This means you could have up to four IoC bindings for each entity. </p>    <p>Splitting the CRUD operations in to separate interfaces has one added benefit. In our case, we don’t want to allow certain (most) entities to be deleted. In these cases, your entity-specific DAO shouldn’t implement IDelete. For this reason, we won’t implement deletes in our generic base DAO.</p>    <h3>Show me some code already!</h3>    <p>We put our interfaces in the data namespace of the core project and our implementations in the data project.</p>    <pre class="brush:vbnet">Namespace Data

    Public Interface IRead(Of TEntity As Entity)

        Function GetByID(ByVal ID As Guid) As TEntity

    End Interface

End Namespace

Namespace Data

    Public Interface ISave(Of TEntity As Entity)

        Function Save(ByVal Entity As TEntity) As TEntity

    End Interface

End Namespace

Namespace Data

    Public Interface IDelete(Of TEntity As Entity)

        Sub Delete(ByVal Entity As TEntity)

    End Interface

End Namespace

Namespace Data

    Public Interface IReadStudent
        Inherits IRead(Of Student)

        Function FindByStudentID(ByVal StudentID As String) As Student
        Function FindByName(ByVal LikeFirstName As String, ByVal LikeLastName As String) As IEnumerable(Of Student)

    End Interface

End Namespace

Imports NHibernate

Public Class GenericDAOImpl(Of TEntity As Entity)
    Implements IRead(Of TEntity)
    Implements ISave(Of TEntity)

    Public Sub New(ByVal Session As ISession)
        m_session = Session
    End Sub

    Protected ReadOnly m_Session As ISession

    Public Function GetByID(ByVal ID As System.Guid) As TEntity Implements IRead(Of TEntity).GetByID
        If m_Session.Transaction Is Nothing Then
            Dim RetVal As TEntity
            Using Tran = m_Session.BeginTransaction
                RetVal = m_Session.Get(Of TEntity)(ID)
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return m_Session.Get(Of TEntity)(ID)
        End If
    End Function

    Public Function Save(ByVal Entity As TEntity) As TEntity Implements ISave(Of TEntity).Save
        If m_Session.Transaction Is Nothing Then
            Using Tran = m_Session.BeginTransaction
                m_Session.SaveOrUpdate(Entity)
                Tran.Commit()
            End Using
        Else
            m_Session.SaveOrUpdate(Entity)
        End If
        Return Entity
    End Function

End Class

Imports NHibernate
Imports NHibernate.Criterion

Public Class StudentDaoImpl
    Inherits GenericDAOImpl(Of Student)
    Implements IReadStudent

    Public Sub New(ByVal Session As ISession)
        MyBase.New(Session)
    End Sub

    Public Function FindByName(ByVal LikeFirstName As String, ByVal LikeLastName As String) As System.Collections.Generic.IEnumerable(Of Student) Implements IReadStudent.FindByName
        Dim crit As ICriteria = m_Session.CreateCriteria(Of Student) _
            .Add(Expression.Like(&quot;FirstName&quot;, LikeFirstName)) _
            .Add(Expression.Like(&quot;LastName&quot;, LikeLastName)) _
            .SetMaxResults(101)
        If m_Session.Transaction Is Nothing Then
            Using Tran = m_Session.BeginTransaction()
                Dim RetVal = crit.List.Cast(Of Student)()
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return crit.List.Cast(Of Student)()
        End If
    End Function

    Public Function FindByStudentID(ByVal StudentID As String) As Student Implements IReadStudent.FindByStudentID
        Dim Crit = m_Session.CreateCriteria(Of Student) _
            .Add(Expression.Eq(&quot;StudentID&quot;, StudentID))
        If m_Session.Transaction Is Nothing Then
            Using Tran = m_Session.BeginTransaction
                Dim RetVal = Crit.UniqueResult(Of Student)()
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return Crit.UniqueResult(Of Student)()
        End If
    End Function

End Class</pre>

  <pre class="brush:csharp">using System;

namespace NStackExample.Data
{
    public interface IRead&lt;TEntity&gt; where TEntity : Entity 
    {

        TEntity GetById(Guid ID);

    }
}

namespace NStackExample.Data 
{
    public interface ISave&lt;TEntity&gt; where TEntity : Entity 
    {

        TEntity Save(TEntity entity);

    }
}

namespace NStackExample.Data
{
    public interface IDelete&lt;TEntity&gt; where TEntity:Entity 
    {

        void Delete(TEntity entity);

    }
}

using System.Collections.Generic;

namespace NStackExample.Data
{
    public interface IReadStudent : IRead&lt;Student&gt;
    {

        Student FindByStudentID(string StudentID);
        IEnumerable&lt;Student&gt; FindByName(string LikeFirstName, string LikeLastName);

    }
}

using NHibernate;

namespace NStackExample.Data
{

    public class GenericDAOImpl&lt;TEntity&gt; : IRead&lt;TEntity&gt;, ISave&lt;TEntity&gt; where TEntity : Entity
    {

        public GenericDAOImpl(ISession Session)
        {
            m_Session = Session;
        }

        protected readonly ISession m_Session;

        public TEntity GetByID(System.Guid ID)
        {
            if (m_Session.Transaction == null)
            {
                TEntity retval;
                using (var Tran = m_Session.BeginTransaction())
                {
                    retval = m_Session.Get&lt;TEntity&gt;(ID);
                    Tran.Commit();
                    return retval;
                }
            }
            else
            {
                return m_Session.Get&lt;TEntity&gt;(ID);
            }
        }

        public TEntity Save(TEntity Entity)
        {
            if (m_Session.Transaction == null)
            {
                using (var Tran = m_Session.BeginTransaction())
                {
                    m_Session.SaveOrUpdate(Entity);
                    Tran.Commit();
                }
            }
            else
            {
                m_Session.SaveOrUpdate(Entity);
            }
            return Entity;
        }

    }

}

using NHibernate;
using NHibernate.Criterion;
using System.Collections.Generic;
using System.Linq;

namespace NStackExample.Data
{
    public class StudentDAOImpl : GenericDAOImpl&lt;Student&gt;, IReadStudent
    {

        public StudentDAOImpl(ISession Session) : base(Session) { }

        public System.Collections.Generic.IEnumerable&lt;Student&gt; FindByName(string LikeFirstName, string LikeLastName)
        {
            ICriteria crit = m_Session.CreateCriteria&lt;Student&gt;()
                .Add(Expression.Like(&quot;FirstName&quot;, LikeFirstName))
                .Add(Expression.Like(&quot;LastName&quot;, LikeLastName))
                .SetMaxResults(101);
            if (m_Session.Transaction == null)
            {
                using (var Tran = m_Session.BeginTransaction())
                {
                    var RetVal = crit.List().Cast&lt;Student&gt;();
                    Tran.Commit();
                    return RetVal;
                }
            }
            else
            {
                return crit.List().Cast&lt;Student&gt;();
            }
        }

        public Student FindByStudentID(string StudentID)
        {
            var Crit = m_Session.CreateCriteria&lt;Student&gt;()
                .Add(Expression.Eq(&quot;StudentID&quot;, StudentID));
            if (m_Session.Transaction == null)
            {
                using (var Tran = m_Session.BeginTransaction())
                {
                    var RetVal = Crit.UniqueResult&lt;Student&gt;();
                    Tran.Commit();
                    return RetVal;
                }
            }
            else
            {
                return Crit.UniqueResult&lt;Student&gt;();
            }
        }


    }
}</pre>

  <p></p>

  <h3>Other changes</h3>

  <p>I’ve cleaned out the course and student DAO junk from part 7. These were just used to illustrate session-per-request. </p>

  <p>The fluent mapping classes have been moved in to a mapping folder.</p>

  <p></p>

  <p>That’s it for part 8. Don’t forget to write your tests for the queries. </p>

  <p>Jason 
    <br />- IBlog.Post(Part8) operation completed. Executing IWatchTV.Watch(Timespan.FromHours(1))</p>

  <p></p>

  <p></p>

  <p></p>
</li>]]></content>
      <post-name type="text"><![CDATA[part 8 daos repositories or query objects]]></post-name>
      <comments>
        <comment id="503" date-created="2009-09-08T01:09:13" date-modified="2009-09-08T01:09:13" approved="true" user-name="kibbled_bits" user-url="http://scottwhite.blogspot.com">
          <title type="text"><![CDATA[re: Part 8: DAOs, Repositories, or Query Objects]]></title>
          <content type="text"><![CDATA[I'm happy that you went over the different approaches, while I currently implement DAOs I will give this some serious consideration.  Thanks Oren.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="663" date-created="2010-07-11T21:24:11" date-modified="2010-07-11T21:24:11" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2010/07/11/nhibernate-bootstrapper-unitofwork-and-sessionperrequest.aspx">
          <title type="text"><![CDATA[NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
        </trackback>
        <trackback id="1044" date-created="2014-09-12T19:06:43" date-modified="2014-09-12T19:06:43" approved="true" url="http://afvalscheiding.nl/phpinfo.php?a%5B%5D=Video+%28%3Ca+href%3Dhttp%3A%2F%2Fmagov.net%2Ftag%2Faffordable%2520all%2520inclusive%2520vacations%2520in%2520the%2520us%2F%3EGet+Source%3C%2Fa%3E%29">
          <title type="text"><![CDATA[view website]]></title>
        </trackback>
        <trackback id="1074" date-created="2014-09-19T17:01:12" date-modified="2014-09-19T17:01:12" approved="true" url="http://84.19.184.35/php.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCUBw1oIAV3M%3ECheap+sewing+machines%3C%2Fa%3E">
          <title type="text"><![CDATA[84.19.184.35]]></title>
        </trackback>
        <trackback id="1105" date-created="2014-09-27T23:38:00" date-modified="2014-09-27T23:38:00" approved="true" url="http://www.firewall.lv/test.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fbankemirates.com%2Findex.php%3Fdo%3D%2Fblog%2F8349%2Fchoosing-the-right-xbox-game-gaming-system-to-suit-your-needs%2F%3Efaint%3C%2Fa%3E">
          <title type="text"><![CDATA[hitherto]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="504" date-created="2009-09-08T13:26:05" date-modified="2009-09-08T13:26:05" approved="true" post-url="/blogs/nhibernate/archive/2009/09/08/part-9-nhibernate-transactions.aspx" type="normal" hasexcerpt="false" views="22439">
      <title type="text"><![CDATA[Part 9: NHibernate transactions]]></title>
      <content type="text"><![CDATA[<p>In this part, we’re going to wrap our <a href="http://nhforge.org" target="_blank">NHibernate</a> transactions and create a factory for them so we can use them in higher layers without referencing NHibernate all the way up.</p>  <p>If you’re new to the series, you can read <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-1/" target="_blank">Part 1</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-2/" target="_blank">Part 2</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-3/" target="_blank">Part 3</a>, <a href="http://jasondentler.com/blog/2009/08/how-to-using-the-n-stack-part-4/" target="_blank">Part 4</a>, <a href="http://jasondentler.com/blog/2009/08/part-5-fixing-the-broken-stuff/" target="_blank">Part 5</a>, <a href="http://jasondentler.com/blog/2009/08/part-6-ninject-and-mvc-or-how-to-be-a-web-ninja/" target="_blank">Part 6</a>, <a href="http://jasondentler.com/blog/2009/08/part-7-nhibernate-and-ninject-for-asp-net-mvc/" target="_blank">Part 7</a>, and <a href="http://jasondentler.com/blog/2009/09/part-8-daos-repositories-or-query-objects" target="_blank">Part 8</a> to catch up.</p>  <p>You may have noticed in part 8 that in each DAO method, if we didn’t already have an explicit transaction, I created one around each database interaction. My reason for this is explained in Ayende’s NHibernate Profiler alert “<a href="http://nhprof.com/Learn/Alert?name=DoNotUseImplicitTransactions" target="_blank">Use of implicit transactions is discouraged</a>.” This works great for simple DB interaction, but what about the more complex scenarios? </p>  <p>This is where we get to talk about this great thing called a business transaction. So once again, I’m going to parade out my experts. Actually, this time it’s only Udi Dahan. There are two key points he’s written about on his blog. </p>  <ol>   <li><a href="http://www.udidahan.com/2009/01/24/ddd-many-to-many-object-relational-mapping/" target="_blank">Partial failures can be good</a>. The programmer in all of us sees that and screams <a href="http://en.wikipedia.org/wiki/ACID" target="_blank">atomicity</a>. Transactions&#160; should be all-or-nothing. Anything less is just wrong. Right? In real life, there are instances where we allow, and even prefer partial failures of business transactions. Udi gives us a great example. Would you leave the grocery store empty handed simply because they were out of one item on your list? Probably not. When you’re gathering requirements, be sure to ask questions about the proper way to fail. “Roll it all back” isn’t the only option. </li>    <li><a href="http://www.udidahan.com/2007/01/22/realistic-concurrency/" target="_blank">Realistic Concurrency</a> – The entire post is worth reading, but Udi makes one point I want to touch on specifically. When performing an operation for the user, you should get the current state, validate, and then perform the task all within the business transaction. </li> </ol>  <p>Let’s use our college application as an example. We have a user story / use case / requirement / story card / whatever to allow students to register for classes, provided those classes aren’t full. If you’ve ever worked at or attended a college or university where certain classes always have more demand than available seats, you are no doubt aware of how quickly those classes will fill up. In fact, the best sections (best professors and best times) can fill up just minutes after registration is opened. It’s very possible that dozens of potential students could access the section when there is only a few seats left. Since the enrollment in a particular section (the current state) changes so rapidly, you must obtain a lock, refresh your enrollment numbers and make sure there is room (revalidate) before actually enrolling that student. If more than one registration request is received, they should be performed serially. </p>  <p>The process is:</p>  <ol>   <li>Open a transaction at the proper <a href="http://en.wikipedia.org/wiki/Isolation_(database_systems)" target="_blank">isolation level</a>. Consult your nearest DBA, as isolation levels are outside the scope of this series. </li>    <li>Refresh – Get the current state of the entity </li>    <li>(Re)Validate – Be sure the business transaction is still valid for the current state </li>    <li>Execute – Perform the insert / update / delete </li>    <li>Commit the transaction </li> </ol>  <p>Now that we’ve covered business transactions, let’s get set up to use them in our business logic. We shouldn’t have NHibernate types floating around at that level, so we’ll wrap them. Once again, the interfaces go in the Data namespace of the core project and the implementations go in the Data project.</p>  <pre class="brush:vbnet">Imports System.Data

Namespace Data

    Public Interface ITransactionFactory

        Function BeginTransaction() As ITransaction
        Function BeginTransaction(ByVal IsolationLevel As IsolationLevel) As ITransaction

    End Interface

End Namespace

Namespace Data

    Public Interface ITransaction
        Inherits IDisposable

        Sub Commit()
        Sub Rollback()

    End Interface

End Namespace

Imports NHibernate

Public Class TransactionFactoryImpl
    Implements ITransactionFactory

    Public Sub New(ByVal Session As ISession)
        m_Session = Session
    End Sub

    Protected ReadOnly m_Session As ISession

    Public Function BeginTransaction() As ITransaction Implements ITransactionFactory.BeginTransaction
        Return New TransactionWrapper(m_Session.BeginTransaction)
    End Function

    Public Function BeginTransaction(ByVal IsolationLevel As System.Data.IsolationLevel) As ITransaction Implements ITransactionFactory.BeginTransaction
        Return New TransactionWrapper(m_Session.BeginTransaction(IsolationLevel))
    End Function

End Class


Imports NHibernate

Public Class TransactionWrapper
    Implements ITransaction

    Public Sub New(ByVal Transaction As NHibernate.ITransaction)
        m_Transaction = Transaction
    End Sub

    Protected ReadOnly m_Transaction As NHibernate.ITransaction

    Public Sub Commit() Implements ITransaction.Commit
        m_Transaction.Commit()
    End Sub

    Public Sub Rollback() Implements ITransaction.Rollback
        m_Transaction.Rollback()
    End Sub

    Private disposedValue As Boolean = False        ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: free other state (managed objects).
                m_Transaction.Dispose()
            End If

            ' TODO: free your own state (unmanaged objects).
            ' TODO: set large fields to null.
        End If
        Me.disposedValue = True
    End Sub

#Region &quot; IDisposable Support &quot;
    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class</pre>

<pre class="brush:csharp">using System.Data;

namespace NStackExample.Data
{
    public interface ITransactionFactory
    {

        ITransaction BeginTransaction();
        ITransaction BeginTransaction(IsolationLevel isolationLevel);

    }
}

using System;

namespace NStackExample.Data
{
    public interface ITransaction : IDisposable 
    {
        void Commit();
        void Rollback();
    }
}

using System.Data;
using NHibernate;

namespace NStackExample.Data
{
    public class TransactionFactoryImpl : ITransactionFactory 
    {

        public TransactionFactoryImpl(ISession Session)
        {
            m_Session = Session;
        }
        
        protected readonly ISession m_Session;

        #region ITransactionFactory Members

        public ITransaction BeginTransaction()
        {
            return new TransactionWrapper(m_Session.BeginTransaction());
        }

        public ITransaction BeginTransaction(IsolationLevel isolationLevel)
        {
            return new TransactionWrapper(m_Session.BeginTransaction(isolationLevel));
        }

        #endregion
    }
}


using System;
using NHibernate;

namespace NStackExample.Data
{
    public class TransactionWrapper : ITransaction
    {

        public TransactionWrapper(NHibernate.ITransaction Transaction)
        {
            m_Transaction = Transaction;
        }

        protected readonly NHibernate.ITransaction m_Transaction;

        #region ITransaction Members

        void ITransaction.Commit()
        {
            m_Transaction.Commit();
        }

        void ITransaction.Rollback()
        {
            m_Transaction.Rollback();
        }

        private bool disposedValue = false;

        protected override void Dispose(bool Disposing)
        {
            if (!this.disposedValue)
            {
                m_Transaction.Dispose();
            }
            this.disposedValue = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion
    }
}</pre>

<p>You may be interested to know that the NHibernate ITransaction will perform an implicit rollback when it is disposed, unless an explicit call to Commit or Rollback has already occurred. To implement this behavior, we implement IDisposable in our transaction wrapper and chain our wrapper’s Dispose to NHibernate.ITransaction’s Dispose. This implicit rollback can indicate a missing call to Commit, so it <a href="http://nhprof.com/Learn/Alert?name=AvoidImplicitRollback" target="_blank">generates an alert in NHibernate Profiler</a>. If you intend to rollback, do it explicitly. Your code will be easier to understand.</p>

<p>That’s it for part 9.</p>

<p>Jason 
  <br />- Off to mow the lawn.</p>]]></content>
      <post-name type="text"><![CDATA[part 9 nhibernate transactions]]></post-name>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="514" date-created="2009-09-20T19:07:41" date-modified="2009-09-20T19:07:41" approved="true" post-url="/blogs/nhibernate/archive/2009/09/20/part-10-testing-and-refactoring.aspx" type="normal" hasexcerpt="false" views="7432">
      <title type="text"><![CDATA[Part 10: Testing and Refactoring]]></title>
      <content type="text"><![CDATA[<p><strike>Today’s post will be short</strike>. I’m going to cover the basics of testing with Rhino Mocks and do some refactoring in the DAOs. </p>  <p>I’m not an expert. This is just how I do things. If you have a better way, do it your way. Better yet, tell me about it so I can improve the way I work as well.</p>  <h3>Testing Terminology</h3>  <p>In recent years, testing vocabulary has exploded. There are mocks and stubs and fakes and unit tests and integration tests and acceptance tests and all sorts of jargon. You may be thinking “who cares?” This jargon is only important when code needs to communicate its intent to humans, right?. The compiler doesn’t care what terminology we use. Well, sorry. Code is written for humans, not compilers, so programming jargon is a prerequisite.</p>  <h4>Test Doubles</h4>  <p>So, let’s go over some common terms. I’m going to lift these definitions straight from Marton Fowler’s <a href="http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs" target="_blank">Mocks Aren’t Stubs</a>. Test Double is a “generic term for any kind of pretend object used in place of a real object for testing purposes.” That’s pretty straight forward. Test doubles come in four types:</p>  <blockquote>   <ul>     <li><b>Dummy</b> objects are passed around but never actually used. Usually they are just used to fill parameter lists. </li>      <li><b>Fake</b> objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an <a href="http://www.martinfowler.com/bliki/InMemoryTestDatabase.html">in memory database</a> is a good example). </li>      <li><b>Stubs</b> provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test. Stubs may also record information about calls, such as an email gateway stub that remembers the messages it 'sent', or maybe only how many messages it 'sent'. </li>      <li><b>Mocks</b> are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive. </li>   </ul> </blockquote>  <p>Hi. Still with me? Good. </p>  <p>Mocks are significant. They are part of the “proof” of the test. The other three amount to plumbing. Now, you may be asking your self why we even need test doubles. Why can’t we just run our production code and inspect the output? <a href="http://martinfowler.com/articles/mocksArentStubs.html#ClassicalAndMockistTesting" target="_blank">Fowler’s article has several sections</a> about the differences and pros and cons of classical testing (using objects from the real code) vs. mockist testing (creating doubles for everything except what you’re testing).</p>  <p>Even in classical testing, you sometimes have to swap in a test double for objects that lead to permanent side effects or operate too slowly. In mockist testing, you swap in test doubles for everything that you’re not explicitly testing. Either way, you need to know how to create and use test doubles.</p>  <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" border="0" src="http://ayende.com/Blog/images/ayende_com/Blog/WindowsLiveWriter/NewRhinoMocksLogo_ECFE/rhinomocks-120x90.png" /></p>  <p>We’re going to use <a href="http://ayende.com/projects/rhino-mocks.aspx" target="_blank">Rhino Mocks</a>, a fluent framework for creating stubs and mocks. I don’t know if it’s the best, but if Ayende wrote it, you can bet it’s pretty darn awesome. Plus, the fluent syntax works OK in VB.NET, which is rare. </p>  <h3>Writing the Test</h3>  <p>Suppose we had a standard GetByID function on our DAO (because we do) containing some code like this (because it does). How would we test that the function actually did what it claimed? </p>  <pre class="brush:vbnet">        If m_Session.Transaction Is Nothing OrElse Not m_Session.Transaction.IsActive Then
            Dim RetVal As TEntity
            Using Tran = m_Session.BeginTransaction
                RetVal = m_Session.Get(Of TEntity)(ID)
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return m_Session.Get(Of TEntity)(ID)
        End If</pre>

<pre class="brush:csharp">            if (null == m_Session.Transaction || !m_Session.Transaction.IsActive)
            {
                TEntity retval;
                using (var Tran = m_Session.BeginTransaction())
                {
                    retval = m_Session.Get&lt;TEntity&gt;(ID);
                    Tran.Commit();
                    return retval;
                }
            }
            else
            {
                return m_Session.Get&lt;TEntity&gt;(ID);
            }</pre>

<p>Because I’m not an expert, I won’t try to explain the computer science of testing. I can tell you that if we ignore possible branches inside NHibernate objects, there are two possible paths through our function (the first if we don’t have an existing explicit transaction, and the second if we do), giving us a <a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank">cyclomatic complexity</a> of 2. This means that we need two unit tests to achieve 100% code coverage. 100% code coverage doesn’t mean perfect code, but it helps.</p>

<p>I prefer the Record / Playback style of testing. In this style, you start by setting up your expectations within a record section – which mock methods will be called, how many times they’ll be called, in what order they’ll be called, and what their return values should be. Then, in the playback section, you perform the actual action. In this case, we’ll create an instance of our DAO and call its GetByID method. Finally, you verify that the expectations of your mock were met, as well as any other assertions you may need to prove.</p>

<p>Edit: The alternative to Record / Playback is Arrange / Act / Assert. If you don’t know the difference, <a href="http://rasmuskl.dk/post/Why-AAA-style-mocking-is-better-than-Record-Playback.aspx" target="_blank">here’s a good article</a> Jose sent me. Rhino Mocks supports both styles. I still prefer Record / Playback, probably just because I’m used to it.</p>

<p>Here’s what a test of GetByID with a pre-existing transaction would look like:</p>

<pre class="brush:vbnet">    &lt;Test()&gt; _
    Public Sub GetByIDTest()
        Dim mocks As New MockRepository()
        Dim session As NHibernate.ISession = mocks.StrictMock(Of NHibernate.ISession)()
        Dim transaction As NHibernate.ITransaction = mocks.Stub(Of NHibernate.ITransaction)()
        Dim expected As Student = mocks.Stub(Of Student)()
        Dim actual As Student
        Using mocks.Record()
            Rhino.Mocks.Expect.Call(session.Transaction).Return(transaction).Repeat.Any()
            Rhino.Mocks.Expect.Call(transaction.IsActive).Return(True)
            Rhino.Mocks.Expect.Call(session.Get(Of Student)(Guid.Empty)).Return(expected)
        End Using

        Using mocks.Playback()
            Dim StudentDao As IReadStudent = New StudentDaoImpl(session)
            actual = StudentDao.GetByID(Guid.Empty)
        End Using
        mocks.VerifyAll()
        Assert.IsNotNull(actual, &quot;null entity returned&quot;)
        Assert.AreSame(expected, actual, &quot;wrong entity returned&quot;)
    End Sub</pre>

<pre class="brush:csharp">        [Test]
        public void GetByIDTest()
        {
            MockRepository mocks = new MockRepository();
            NHibernate.ISession session = mocks.StrictMock&lt;NHibernate.ISession&gt;();
            NHibernate.ITransaction transaction = mocks.Stub&lt;NHibernate.ITransaction&gt;();
            Student expected = new Student();
            Student actual;
            using (mocks.Record())
            {
                Rhino.Mocks.Expect.Call(session.Transaction)
                    .Return(transaction)
                    .Repeat.Any();
                Rhino.Mocks.Expect.Call(transaction.IsActive)
                    .Return(true);
                Rhino.Mocks.Expect.Call(session.Get&lt;Student&gt;(Guid.Empty))
                    .Return(expected);
            }
            using (mocks.Playback())
            {
                IReadStudent StudentDao = new StudentDAOImpl(session);
                actual = StudentDao.GetById(Guid.Empty);
            }
            mocks.VerifyAll();
            Assert.IsNotNull(actual);
            Assert.AreSame(expected,actual);
        }</pre>

<p>We start by creating a MockRepository. This is the factory for all of our mocks and stubs, controls our record and playback blocks, and verifies that all the mock expectations have been met.</p>

<p>Next, we create a mock of the <a href="http://nhforge.org" target="_blank">NHIbernate</a> session and a stub of an NHibernate transaction. We create a mock because we want to make sure our DAO calls m_Session.Get&lt;&gt;. We also create a double for our return value called expected. We’ll compare it to the actual return value. </p>

<p>Now that we have our doubles, we set up our expectations. We are testing the path of the pre-existing transaction. Session.transaction will return our transaction stub. Since this is a mock, not a stub, the default is to assert that it is called exactly once. Since we’re not interested in this part, we specify that it can be called <strong>any</strong> number of times. We also specify that a call to transaction.IsActive should return true. Finally, we specify that our DAO will call session.Get&lt;&gt; exactly once, and that our mock session should return our expected student.</p>

<p>Next, we start our playback block and perform the action. We create an instance of our DAO, passing in the mock session we wired up in our record block, and we call GetByID. </p>

<p>Finally, we verify that our DAO interacted with the stub as expected. We also assert that the actual instance returned during our test is the same as our expected instance.</p>

<p>This covers the first test. What about the second one? Well, the test would be identical except for your expectations. We would setup our transaction stub so that transaction.IsActive returned false. We would also expect our DAO to call session.BeginTransaction(). </p>

<p>Now, I’m lazy and we’ve already done things backwards by writing our code before our tests, so let’s continue being lazy. I don’t want to write two tests for each DAO method just because of some transaction handling code, which by the way, is repeated all over the place. Not good. Let’s refactor things a bit.</p>

<h3>Refactored Transaction Handling</h3>

<p>In all of the DAO methods, I’ve made the choice to ensure we have an explicit transaction before interacting with the database. In previous versions, each method is nearly identical to the code we tested above above.</p>

<p>In all of this, the only unique code is the call to m_Session.Get(). The rest of the code is just uninteresting transaction handling, and this uninteresting plumbing code is repeated in every method of our DAO. Let’s pull it out in to its own function.</p>

<pre class="brush:vbnet">    Protected Function WrapInTransaction(ByVal F As Func(Of TEntity)) As TEntity
        Return WrapInTransaction(Of TEntity)(F)
    End Function

    Protected Function WrapInTransaction(Of TResult)(ByVal F As Func(Of TResult)) As TResult
        If m_Session.Transaction Is Nothing OrElse _
            m_Session.Transaction.IsActive = False Then
            Using Tran = m_Session.BeginTransaction
                Dim RetVal As TResult = F.Invoke()
                Tran.Commit()
                Return RetVal
            End Using
        Else
            Return F.Invoke()
        End If
    End Function</pre>

<pre class="brush:csharp">        protected TEntity WrapInTransaction(System.Func&lt;TEntity&gt; F)
        {
            return WrapInTransaction&lt;TEntity&gt;(F);
        }

        protected TResult WrapInTransaction&lt;TResult&gt;(System.Func&lt;TResult&gt; F)
        {
            if (null == m_Session.Transaction || !m_Session.Transaction.IsActive)
            {
                using (NHibernate.ITransaction Tran = m_Session.BeginTransaction())
                {
                    TResult RetVal = F.Invoke();
                    Tran.Commit();
                    return RetVal;
                }
            }
            else
            {
                return F.Invoke();
            }
        }</pre>
Now we can pass in the small-but-interesting bit of code as a parameter to the WrapInTransaction method. This lets us simplify our methods down to this: 

<pre class="brush:vbnet">    Public Function GetByID(ByVal ID As System.Guid) As TEntity Implements IRead(Of TEntity).GetByID
        Return WrapInTransaction(Function() m_Session.Get(Of TEntity)(ID))
    End Function</pre>

<pre class="brush:csharp">        public TEntity GetById(System.Guid ID)
        {
            return WrapInTransaction(() =&gt; m_Session.Get&lt;TEntity&gt;(ID));
        }</pre>

<p>It’s shorter. Some might argue that it’s not as readable since it uses lambda syntax. In this case, I think DRY (don’t repeat yourself) is more important. To be honest, I’m not sure if this cuts the cyclomatic complexity of our methods in half, but It certainly lets us write about 1/2 as many tests and still have 100% coverage. We just need to write our already-have-a-transaction and wrap-in-transaction tests once period, instead of once per method.</p>

<p>If you’re working in C#, you can create another overload that accepts a System.Action (System.Func but returning void). In Visual Basic.NET, this would be a Sub, but unfortunately, there’s no lambda syntax for calling a Sub in VB.NET. To get around this, I’ve updated our Save method to this:</p>

<pre class="brush:vbnet">    Public Function Save(ByVal Entity As TEntity) As TEntity Implements ISave(Of TEntity).Save
        Return WrapInTransaction(Function() SaveOrUpdate(Entity))
    End Function

    Private Function SaveOrUpdate(ByVal Entity As TEntity) As TEntity
        m_Session.SaveOrUpdate(Entity)
        Return Entity
    End Function</pre>
Since we're returning a value, we can use our existing WrapInTransaction(Func&lt;&gt;) method. The download includes tests for all of our DAO methods, including WrapInTransaction. 

<p>That’s it for part 10. For homework, write the tests for our StudentDaoImpl class. Hints: Use a fake, verify that it returns what it should, and verify that it doesn’t return what it shouldn’t.</p>

<p>I’ve changed the SQLiteDatabaseScope to match my previous post, and pulled it in to its own project. </p>

<p>Download the entire solution in <a href="http://jasondentler.com/downloads/NStackExample.Part10.VBNET.zip" target="_blank">VB.NET</a> or <a href="http://jasondentler.com/downloads/NStackExample.Part10.CSharp.zip" target="_blank">C#</a>.</p>

<p>In part 11, we’ll dive in to validation.</p>

<p>Jason</p>]]></content>
      <post-name type="text"><![CDATA[part 10 testing and refactoring]]></post-name>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="523" date-created="2009-10-10T18:16:00" date-modified="2009-10-10T18:16:00" approved="true" post-url="/blogs/nhibernate/archive/2009/10/10/nhibernate-validator-1-2-beta2-released.aspx" type="normal" hasexcerpt="false" views="2904">
      <title type="text"><![CDATA[NHibernate Validator 1.2 Beta2 released]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" />

</p>
<p>Download NHibernate Validator 1.2 beta2 with sources, binaries and example here <a href="https://sourceforge.net/projects/nhcontrib/files">here</a>

</p>
<p>For use it with NHibernate 2.1 GA.
</p>
<p>
Enjoy it !</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 beta2 released]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1036" />
        <category ref="1129" />
      </categories>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="525" date-created="2009-10-15T18:21:00" date-modified="2009-10-15T18:21:00" approved="true" post-url="/blogs/nhibernate/archive/2009/10/15/mapping-different-types-iusertype.aspx" type="normal" hasexcerpt="false" views="11284">
      <title type="text"><![CDATA[Mapping different types - IUserType]]></title>
      <content type="text"><![CDATA[<p>Recently I had a problem with the application I&rsquo;ve been working on. One of entity types in my domain had a property of type <i>uint</i>. Not a big deal, until you want to store it in Microsoft SQL Server database which <a target="_blank" href="http://msdn.microsoft.com/en-us/library/ms187752.aspx">does not support unsigned types</a>. I&rsquo;ve been scratching my head for a moment and then I found a solution &ndash; let&rsquo;s map it as <i>long</i> in our database. Since <i>long</i> can represent any legal value of <i>uint</i>, we should be all good, right? So let&rsquo;s do it.</p>
<div class="csharpcode">
<div class="csharpcode">
<pre class="alt"><span class="kwrd">public</span> <span class="kwrd">class</span> ClassWithUintProperty</pre>
<pre>{</pre>
<pre class="alt">    <span class="kwrd">private</span> Guid Id { get; set; }</pre>
<pre>    <span class="kwrd">public</span> <span class="kwrd">virtual</span> <span class="kwrd">uint</span> UintProp { get ;set; }</pre>
<pre class="alt">}</pre>
</div>
<style type="text/css"><!--
[CDATA[



.csharpcode, .csharpcode pre

{

	font-size: small;

	color: black;

	font-family: consolas, "Courier New", courier, monospace;

	background-color: #ffffff;

	/*white-space: pre;*/

}

.csharpcode pre { margin: 0em; }

.csharpcode .rem { color: #008000; }

.csharpcode .kwrd { color: #0000ff; }

.csharpcode .str { color: #006080; }

.csharpcode .op { color: #0000c0; }

.csharpcode .preproc { color: #cc6633; }

.csharpcode .asp { background-color: #ffff00; }

.csharpcode .html { color: #800000; }

.csharpcode .attr { color: #ff0000; }

.csharpcode .alt 

{

	background-color: #f4f4f4;

	width: 100%;

	margin: 0em;

}

.csharpcode .lnum { color: #606060; }
--></style>
</div>
<p>
<style type="text/css"><!--
<![CDATA[





.csharpcode, .csharpcode pre

{

	font-size: small;

	color: black;

	font-family: consolas, "Courier New", courier, monospace;

	background-color: #ffffff;

	/*white-space: pre;*/

}

.csharpcode pre { margin: 0em; }

.csharpcode .rem { color: #008000; }

.csharpcode .kwrd { color: #0000ff; }

.csharpcode .str { color: #006080; }

.csharpcode .op { color: #0000c0; }

.csharpcode .preproc { color: #cc6633; }

.csharpcode .asp { background-color: #ffff00; }

.csharpcode .html { color: #800000; }

.csharpcode .attr { color: #ff0000; }

.csharpcode .alt 

{

	background-color: #f4f4f4;

	width: 100%;

	margin: 0em;

}

.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span></pre>
<pre><span class="kwrd">&lt;</span><span class="html">hibernate-mapping</span> <span class="attr">xmlns</span><span class="kwrd">="urn:nhibernate-mapping-2.2"</span></pre>
<pre class="alt">                   <span class="attr">assembly</span><span class="kwrd">="NHibernate.Test"</span></pre>
<pre>                   <span class="attr">namespace</span><span class="kwrd">="NHibernate.Test"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">  <span class="kwrd">&lt;</span><span class="html">class</span> <span class="attr">name</span><span class="kwrd">="ClassWithUintProperty"</span><span class="kwrd">&gt;</span></pre>
<pre>    <span class="kwrd">&lt;</span><span class="html">id</span> <span class="attr">name</span><span class="kwrd">="Id"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="UIntProp"</span> <span class="attr">not-null</span><span class="kwrd">="true"</span> <span class="attr">type</span><span class="kwrd">="long"</span> <span class="kwrd">/&gt;</span></pre>
<pre>  <span class="kwrd">&lt;/</span><span class="html">class</span><span class="kwrd">&gt;</span></pre>
<pre class="alt"><span class="kwrd">&lt;/</span><span class="html">hibernate-mapping</span><span class="kwrd">&gt;</span></pre>
</div>
<p>
<style type="text/css"><!--
<![CDATA[





.csharpcode, .csharpcode pre

{

	font-size: small;

	color: black;

	font-family: consolas, "Courier New", courier, monospace;

	background-color: #ffffff;

	/*white-space: pre;*/

}

.csharpcode pre { margin: 0em; }

.csharpcode .rem { color: #008000; }

.csharpcode .kwrd { color: #0000ff; }

.csharpcode .str { color: #006080; }

.csharpcode .op { color: #0000c0; }

.csharpcode .preproc { color: #cc6633; }

.csharpcode .asp { background-color: #ffff00; }

.csharpcode .html { color: #800000; }

.csharpcode .attr { color: #ff0000; }

.csharpcode .alt 

{

	background-color: #f4f4f4;

	width: 100%;

	margin: 0em;

}

.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>&nbsp;</p>
<h3>&nbsp;</h3>
<h3>"Houston, we've had a problem"</h3>
<p>All good. At least until you try to fetch saved value from the database. When you do, you&rsquo;re up for an unpleasant surprise:</p>
<blockquote>
<p>System.InvalidCastException: Specified cast is not valid.</p>
<p>NHibernate.PropertyAccessException: Invalid Cast (check your mapping for property type mismatches); setter of NHibernate.Test.UIntAsLong</p>
</blockquote>
<p>The exception is a result of how NHibernate optimizes property access and quirks of mixing different conversion operators (unboxing and numeric conversion in this case) and are not really interesting. What&rsquo;s important, is that we approached the problem from the wrong angle.</p>
<p>What we&rsquo;re dealing with here, is inability of our database engine to deal with datatype in our model, which we were trying to solve by pushing this onto NHibernate without telling it something is &lsquo;&rdquo;wrong&rdquo;. While NHibernate is smart, it&rsquo;s working based on a set of explicit information, so what we need to do, is to be explicit about what we want it to do.</p>
<p>There are two places where we can tell NHibernate about it.</p>
<ul>
<li>IUserType, which will explicitly handle the mapping from <i>uint</i> in our model to <i>long</i> in the DB </li>
<li>custom Dialect which will basically lie to NHibernate telling it &ldquo;yeah, sure this DB supports <i>uint</i>s &ndash; whole dozens of &lsquo;em!&rdquo; and do some work under the covers to live up to its promise. (not shown in this post). </li>
</ul>
<p>&nbsp;</p>
<h3>Enter IUserType</h3>
<p><a target="_blank" href="/doc/nh/en/index.html#mapping-types-custom">IUserType</a> is an extension point in NHibernate that let&rsquo;s you plug in to the mapping process and handle it yourself. The interface is quite big, but there&rsquo;s very little real logic there:</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">public</span> <span class="kwrd">class</span> UIntAsLong:IUserType</pre>
<pre>{</pre>
<pre class="alt">        <span class="kwrd">public</span> SqlType[] SqlTypes</pre>
<pre>        {</pre>
<pre class="alt">            get { <span class="kwrd">return</span> <span class="kwrd">new</span>[] { SqlTypeFactory.Int64 }; }</pre>
<pre>        }</pre>
<pre class="alt">&nbsp;</pre>
<pre>        <span class="kwrd">public</span> Type ReturnedType</pre>
<pre class="alt">        {</pre>
<pre>            get { <span class="kwrd">return</span> <span class="kwrd">typeof</span>( <span class="kwrd">uint</span> ); }</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">bool</span> IsMutable</pre>
<pre>        {</pre>
<pre class="alt">            get { <span class="kwrd">return</span> <span class="kwrd">false</span>; }</pre>
<pre>        }</pre>
<pre class="alt">&nbsp;</pre>
<pre>        <span class="kwrd">public</span> <span class="kwrd">int</span> GetHashCode( <span class="kwrd">object</span> x )</pre>
<pre class="alt">        {</pre>
<pre>            <span class="kwrd">if</span>( x == <span class="kwrd">null</span> )</pre>
<pre class="alt">            {</pre>
<pre>                <span class="kwrd">return</span> 0;</pre>
<pre class="alt">            }</pre>
<pre>            <span class="kwrd">return</span> x.GetHashCode();</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">object</span> NullSafeGet( IDataReader rs, <span class="kwrd">string</span>[] names, <span class="kwrd">object</span> owner )</pre>
<pre>        {</pre>
<pre class="alt">            <span class="kwrd">object</span> obj = NHibernateUtil.UInt32.NullSafeGet( rs, names0 );</pre>
<pre>            <span class="kwrd">if</span>( obj == <span class="kwrd">null</span> )</pre>
<pre class="alt">            {</pre>
<pre>                <span class="kwrd">return</span> <span class="kwrd">null</span>;</pre>
<pre class="alt">            }</pre>
<pre>            <span class="kwrd">return</span> (<span class="kwrd">uint</span>)obj;</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">void</span> NullSafeSet( IDbCommand cmd, <span class="kwrd">object</span> <span class="kwrd">value</span>, <span class="kwrd">int</span> index )</pre>
<pre>        {</pre>
<pre class="alt">            Debug.Assert( cmd != <span class="kwrd">null</span>);</pre>
<pre>            <span class="kwrd">if</span>( <span class="kwrd">value</span> == <span class="kwrd">null</span> )</pre>
<pre class="alt">            {</pre>
<pre>                ((IDataParameter)cmd.Parametersindex).Value = DBNull.Value;</pre>
<pre class="alt">            }</pre>
<pre>            <span class="kwrd">else</span></pre>
<pre class="alt">            {</pre>
<pre>                var uintValue = (<span class="kwrd">uint</span>)<span class="kwrd">value</span>;</pre>
<pre class="alt">                ( (IDataParameter) cmd.Parametersindex ).Value = (<span class="kwrd">long</span>) uintValue;</pre>
<pre>            }</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">object</span> DeepCopy( <span class="kwrd">object</span> <span class="kwrd">value</span> )</pre>
<pre>        {</pre>
<pre class="alt">            <span class="rem">// we can ignore it...</span></pre>
<pre>            <span class="kwrd">return</span> <span class="kwrd">value</span>;</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">object</span> Replace( <span class="kwrd">object</span> original, <span class="kwrd">object</span> target, <span class="kwrd">object</span> owner )</pre>
<pre>        {</pre>
<pre class="alt">            <span class="rem">// we can ignore it...</span></pre>
<pre>            <span class="kwrd">return</span> original;</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">object</span> Assemble( <span class="kwrd">object</span> cached, <span class="kwrd">object</span> owner )</pre>
<pre>        {</pre>
<pre class="alt">            <span class="rem">// we can ignore it...</span></pre>
<pre>            <span class="kwrd">return</span> cached;</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">object</span> Disassemble( <span class="kwrd">object</span> <span class="kwrd">value</span> )</pre>
<pre>        {</pre>
<pre class="alt">            <span class="rem">// we can ignore it...</span></pre>
<pre>            <span class="kwrd">return</span> <span class="kwrd">value</span>;</pre>
<pre class="alt">        }</pre>
<pre>&nbsp;</pre>
<pre class="alt">        <span class="kwrd">bool</span> IUserType.Equals( <span class="kwrd">object</span> x, <span class="kwrd">object</span> y )</pre>
<pre>        {</pre>
<pre class="alt">            <span class="kwrd">return</span> <span class="kwrd">object</span>.Equals( x, y );</pre>
<pre>        }</pre>
<pre class="alt">} </pre>
</div>
<p>
<style type="text/css"><!--
<![CDATA[





.csharpcode, .csharpcode pre

{

	font-size: small;

	color: black;

	font-family: consolas, "Courier New", courier, monospace;

	background-color: #ffffff;

	/*white-space: pre;*/

}

.csharpcode pre { margin: 0em; }

.csharpcode .rem { color: #008000; }

.csharpcode .kwrd { color: #0000ff; }

.csharpcode .str { color: #006080; }

.csharpcode .op { color: #0000c0; }

.csharpcode .preproc { color: #cc6633; }

.csharpcode .asp { background-color: #ffff00; }

.csharpcode .html { color: #800000; }

.csharpcode .attr { color: #ff0000; }

.csharpcode .alt 

{

	background-color: #f4f4f4;

	width: 100%;

	margin: 0em;

}

.csharpcode .lnum { color: #606060; }
--></style>
</p>
<p>There are really two parts of the code that are interesting. SqlTypes / ReturnedType properties which tell NHibernate which types to expect on both sides of the mapping, and the NullSafeGet / NullSafeSet methods which perform the actual conversion.</p>
<p>Now we just need to plug our custom user type to the mapping, and it goes like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">="1.0"</span>?<span class="kwrd">&gt;</span></pre>
<pre><span class="kwrd">&lt;</span><span class="html">hibernate-mapping</span> <span class="attr">xmlns</span><span class="kwrd">="urn:nhibernate-mapping-2.2"</span></pre>
<pre class="alt">                   <span class="attr">assembly</span><span class="kwrd">="NHibernate.Test"</span></pre>
<pre>                   <span class="attr">namespace</span><span class="kwrd">="NHibernate.Test"</span><span class="kwrd">&gt;</span></pre>
<pre class="alt">  <span class="kwrd">&lt;</span><span class="html">class</span> <span class="attr">name</span><span class="kwrd">="ClassWithUintProperty"</span><span class="kwrd">&gt;</span></pre>
<pre>    <span class="kwrd">&lt;</span><span class="html">id</span> <span class="attr">name</span><span class="kwrd">="Id"</span><span class="kwrd">/&gt;</span></pre>
<pre class="alt">    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">="UIntProp"</span> <span class="attr">not-null</span><span class="kwrd">="true"</span> <span class="attr">type</span><span class="kwrd">="Foo.Namespace.UIntAsLong, Foo.Assembly"</span> <span class="kwrd">/&gt;</span></pre>
<pre>  <span class="kwrd">&lt;/</span><span class="html">class</span><span class="kwrd">&gt;</span></pre>
<pre class="alt"><span class="kwrd">&lt;/</span><span class="html">hibernate-mapping</span><span class="kwrd">&gt;</span></pre>
</div>
<p>
<style type="text/css"><!--
<![CDATA[





.csharpcode, .csharpcode pre

{

	font-size: small;

	color: black;

	font-family: consolas, "Courier New", courier, monospace;

	background-color: #ffffff;

	/*white-space: pre;*/

}

.csharpcode pre { margin: 0em; }

.csharpcode .rem { color: #008000; }

.csharpcode .kwrd { color: #0000ff; }

.csharpcode .str { color: #006080; }

.csharpcode .op { color: #0000c0; }

.csharpcode .preproc { color: #cc6633; }

.csharpcode .asp { background-color: #ffff00; }

.csharpcode .html { color: #800000; }

.csharpcode .attr { color: #ff0000; }

.csharpcode .alt 

{

	background-color: #f4f4f4;

	width: 100%;

	margin: 0em;

}

.csharpcode .lnum { color: #606060; }]]
--></style>
</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[mapping different types iusertype]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1152" />
      </categories>
      <trackbacks>
        <trackback id="577" date-created="2009-12-21T02:04:20" date-modified="2009-12-21T02:04:20" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[new hampshire credit repair]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2532" date-created="2009-02-09T12:32:27" date-modified="2009-02-09T12:32:27" approved="true" email="krzysztof@kozmic.pl">
          <title type="text"><![CDATA[krzysztof.kozmic]]></title>
        </author>
      </authors>
    </post>
    <post id="526" date-created="2009-10-19T07:43:00" date-modified="2009-10-19T07:43:00" approved="true" post-url="/blogs/nhibernate/archive/2009/10/19/hbm2net.aspx" type="normal" hasexcerpt="false" views="5494">
      <title type="text"><![CDATA[hbm2net ]]></title>
      <content type="text"><![CDATA[<p>I did an attempt of resuming the project hbm2net, creating a <a href="http://msdn.microsoft.com/en-us/library/bb126445.aspx" target="_blank">Text Template Transformation Toolkit (T4)</a>&nbsp; renderer, hosting the T4 engine. T4 templates allow to easily mix templates with additional code.The current version is not production code, but a proof-of-concept. If anyone interested a <a href="http://cid-b8821720666a55e7.skydrive.live.com/self.aspx/.Public/NHibernate.Tool.hbm2net.zip">download</a> is provided, containing the source and a single unit test to show the idea. A ready to use binary version could be found <a href="http://www.felicepollano.com/post/hbm2net-tentativo-di-resurrezione.aspx">here</a> (post is in italian, but is easy to grasp how to try it),as I said, it is not tested for production. Please let me know if the idea is useful / interesting.</p>]]></content>
      <post-name type="text"><![CDATA[hbm2net]]></post-name>
      <categories>
        <category ref="1153" />
      </categories>
      <comments>
        <comment id="527" date-created="2009-10-19T15:55:12" date-modified="2009-10-19T15:55:12" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: hbm2net ]]></title>
          <content type="text"><![CDATA[a step-by-step post about how create classes from hbm would be useful]]></content>
        </comment>
        <comment id="528" date-created="2009-10-19T16:12:24" date-modified="2009-10-19T16:12:24" approved="true" user-name="felicepollano" user-url="http://nhforge.org/members/felicepollano/default.aspx">
          <title type="text"><![CDATA[re: hbm2net ]]></title>
          <content type="text"><![CDATA[Well, with the binary version:
Unzip in a folder, an example hbm file is present in the zip, as well as a config file to use the t4generator.
Then simple use hbm2net --config=t4config.xml *.hbm.xml. You should see the output under the folder "generated" in the current directory. May be more interesting will be have a look at the sources: I provided a modified version of the original unit test: by launching the test called T4DefaultTemplate you should se how the job is done. The templates currently used are embedded as resources file in the genertaor assembly.
Hope this help.]]></content>
        </comment>
        <comment id="530" date-created="2009-10-20T09:28:12" date-modified="2009-10-20T09:28:12" approved="true" user-name="DimkaG" user-url="http://nhforge.org/members/DimkaG/default.aspx">
          <title type="text"><![CDATA[re: hbm2net ]]></title>
          <content type="text"><![CDATA[The idea is very interesting and it is most anticipated. In the past we tried to create such a prototype but encountered serious problems with hosting T4 templates outside the DTE host. Today we are using NVelocity templates for class generation in a couple of projects. The downside is that generated classes are not automatically added to the solution and NVelocity templates are less intuitive for .Net programmers. Having a T4 alternative would boost programmers productivity and make the code generation process more friendly. ]]></content>
        </comment>
        <comment id="531" date-created="2009-10-20T10:02:04" date-modified="2009-10-20T10:02:04" approved="true" user-name="felicepollano" user-url="http://nhforge.org/members/felicepollano/default.aspx">
          <title type="text"><![CDATA[re: hbm2net ]]></title>
          <content type="text"><![CDATA[I found some problem too in passing "variables" to t4 templates, basically the problem was on serializing the ClassMapping stuff, because hosting t4 needs a separate app-domain. So i cut-off the problem in a tricky way: just reused the same app domain, this has as a side effect a memory leakage, and I accepted it since this is a tool to launch one-shot. There is some other advantage in using t4 instead of NVelocity: you can easily embed some code to do some generation logic in the template itself.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="529" date-created="2009-10-19T17:07:34" date-modified="2009-10-19T17:07:34" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/10/19/hbm2net.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="534" date-created="2009-10-26T16:12:00" date-modified="2009-10-26T16:12:00" approved="true" post-url="/blogs/nhibernate/archive/2009/10/26/nhibernate-validator-1-2-beta3-released.aspx" type="normal" hasexcerpt="false" views="3105">
      <title type="text"><![CDATA[NHibernate Validator 1.2 Beta3 released]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" />

</p>
<p>Download NHibernate Validator 1.2 beta3 with sources, binaries and example here <a href="https://sourceforge.net/projects/nhcontrib/files">here</a>

</p>
<p>For use it with NHibernate 2.1 GA.
</p>
<p>For examples and documentation see the serie of blog posts of Fabio Maulo about NHibernate Validator <a href="http://fabiomaulo.blogspot.com/search/label/Validator">here</a></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 beta3 released]]></post-name>
      <categories>
        <category ref="1024" />
        <category ref="1036" />
        <category ref="1111" />
        <category ref="1129" />
      </categories>
      <trackbacks>
        <trackback id="535" date-created="2009-10-26T18:05:09" date-modified="2009-10-26T18:05:09" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/10/26/nhibernate-validator-1-2-beta3-released.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="539" date-created="2009-11-07T19:12:52" date-modified="2009-11-07T19:12:52" approved="true" post-url="/blogs/nhibernate/archive/2009/11/07/nhibernate-and-wpf-the-guywire.aspx" type="normal" hasexcerpt="false" views="5613">
      <title type="text"><![CDATA[NHibernate and WPF: The GuyWire]]></title>
      <content type="text"><![CDATA[<p><strong><em>Note: I owe this knowledge to my friend <a href="http://fabiomaulo.blogspot.com/">Fabio Maulo</a>, so I would like to thank him for teaching me and letting me share.</em></strong> </p>  <h1>Introduction</h1>  <p>I will show you in this post a nice way to configure your IoC container and some other aspects of your applications. I assume for this article that you have good knowledge of dependency injection and inversion of control.</p>  <h1>The problem</h1>  <p>There was a time when we used to configure our containers with xml, and all was fine. Then we started to use fluent and strongly typed interfaces and a problem became more frequent and acute. Basically, when we use a fluent interface, we do something like this:</p>  <pre class="brush: csharp;">container.Register(Component.For&lt;IAlbumRepository&gt;()
                       .ImplementedBy&lt;AlbumRepository&gt;()
                       .LifeStyle.Transient);</pre>

<p>IAlbumRepository is in Chinook.Data and AlbumRepository is in Chinook.Data.Impl.&#160; <br />The problem is not *how* but <strong><u>*where*</u></strong>. Where do you do this? </p>

<p>Most people will say “The startup project”. One of the goal that we look when using IoC is:</p>

<blockquote>
  <p>..decoupling of the execution of a certain task from implementation.</p>
</blockquote>

<p>Pay attention to the “Decoupling” part. If you want “decoupling”: Why do you add all those references in your startup project?</p>

<p>This is a <a href="http://www.ndepend.com/">NDepend</a> extracted graph of the Northwind example that comes with <a href="http://www.sharparchitecture.net/">Sharp Architecture</a>:</p>

<p><img border="0" src="http://content.screencast.com/users/JoseFR/folders/Jing/media/82a585f2-6ae5-4f3b-ba29-fc3f283be6ad/2009-10-26_1333.png" width="585" height="336" /></p>

<p>&#160;</p>

<p>If you look at the Northwind.Web assembly you will see that it has a reference even to NHibernate. It has a reference to Northwind.Data (repositories that use NHibernate). The contract interface of repositories is in Northwind.Core. Also you can see that the start up project need a reference to Castle Container. If I want a loosely coupled solution, I don’t want some of those references.</p>

<p>Pay atention; the northwind example of Sharp Architecture is a very good example, is a good architecture, and this is neither a complain nor a criticism. I’m pretty sure that it defines interfaces and implementations separately, as I’m pretty sure that controllers depends upon IRepositories. But, I think it has a problem at reference level. The main problem is because the initialization of the container is in a wrong place. You could see the initialization script <a href="http://github.com/codai/Sharp-Architecture/blob/master/src/NorthwindSample/app/Northwind.Web/CastleWindsor/ComponentRegistrar.cs">here</a>.</p>

<p>So, what I’m looking for is:</p>

<ul>
  <li>I don’t want references to concrete implementations in my startup project. </li>

  <li>I don’t want to depend upon a specific IoC container technology. </li>

  <li>And finally I don’t want to configure my container in the startup project, its is another “aspect” of my application like the repositories! </li>
</ul>

<p></p>

<h1>The Solution</h1>

<p>The solution is very simple. Take the container initialization to another place. </p>

<p>We used to call this place “The GuyWire”, in italian “Cavo Portante”, in spanish “Cable Maestro”:</p>

<blockquote>
  <p>A <b>guy-wire</b> or <b>guy-rope</b> is a tensioned cable designed to add stability to structures</p>
</blockquote>

<p>Two simple rules to remember:</p>

<ol>
  <li>In order to configure service and implementers fluently, the GuyWire will reference everything. </li>

  <li>Because the guy-wire reference everything, the GuyWire can not be referenced. </li>
</ol>

<p>The guywire is an excellent place to “configure” the whole application. I used to separate the configuration in different aspects. Here some examples:</p>

<ul>
  <li>ORM configuration </li>

  <li>Constraint Validator configuration </li>

  <li>Repositories configuration </li>

  <li>Entities configuration </li>

  <li>ViewModel configuration </li>

  <li>Controllers configuration </li>

  <li>Views configuration </li>
</ul>

<p>You can explore the configurators of ChinookMediaManager <a href="http://code.google.com/p/unhaddins/source/browse/#svn/trunk/Examples/uNHAddIns.Examples.WPF/ChinookMediaManager.GuyWire/Configurators">here</a>.</p>

<h2>How does it works?</h2>

<p>The guywire project has an special “Output Path”:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_53062B8B.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_6AC28453.png" width="552" height="255" /></a> </p>

<p>So, the path is the “Startup” project.</p>

<p>Secondly, in the App.Config, I have a config like this:</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">appSettings</span><span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">add </span><span style="color: red">key</span><span style="color: blue">=</span>&quot;<span style="color: blue">GuyWire</span>&quot; <span style="color: red">value</span><span style="color: blue">=</span>&quot;<span style="color: blue">ChinookMediaManager.GuyWire.GeneralGuyWire, ChinookMediaManager.GuyWire</span>&quot; <span style="color: blue">/&gt;
&lt;/</span><span style="color: #a31515">appSettings</span><span style="color: blue">&gt;</span></pre>
<a href="http://11011.net/software/vspaste"></a>

<p>And finally, in my App.Xaml.cs:</p>

<pre class="code"><span style="color: blue">public partial class </span><span style="color: #2b91af">App </span>: Application
{
    <span style="color: blue">private readonly </span>IGuyWire guyWire = ApplicationConfiguration.GetGuyWire();

    <span style="color: blue">public </span>App()
    {
        guyWire.Wire();
    }

    <span style="color: blue">protected override void </span>OnStartup(StartupEventArgs e)
    {
        <span style="color: blue">var </span>viewFactory = ServiceLocator.Current.GetInstance&lt;IViewFactory&gt;();
        viewFactory.ShowView&lt;BrowseArtistViewModel&gt;();
    }

    <span style="color: blue">protected override void </span>OnExit(ExitEventArgs e)
    {
        guyWire.Dewire();
        <span style="color: blue">base</span>.OnExit(e);
    }
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>The interface IGuyWire and other classes needed for doing this, are in unhaddins.</p>

<p>The reference graph of the Chinook Media Manager, is as follows:</p>

<p>&#160;</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4961041A.png"><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="image" border="0" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_4FAA6B59.png" width="578" height="593" /></a> </p>

<p>&#160;</p>

<p>&#160;</p>

<p>&#160;</p>

<h2>A last word about the Configurators</h2>

<p>I really like the idea of have different parts of the application configuration in separated classes. I used to reuse this configurators alone in my Tests. But, as a I said before, the guywire should not be referenced by any project. So, my trick is add the configurator as a “linked file” to the test project:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6BBD04E1.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_400C3AE5.png" width="243" height="117" /></a> </p>

<p>And this is a sample:</p>

<pre class="code">[<span style="color: #2b91af">TestFixture</span>]
<span style="color: blue">public class </span><span style="color: #2b91af">AlbumValidationFixture
</span>{
    <span style="color: blue">private </span><span style="color: #2b91af">IWindsorContainer </span>container;

    [<span style="color: #2b91af">TestFixtureSetUp</span>]
    <span style="color: blue">public void </span>FixtureSetUp()
    {
        container = <span style="color: blue">new </span><span style="color: #2b91af">WindsorContainer</span>();
        <span style="color: blue">var </span>configurator = <span style="color: blue">new </span><span style="color: #2b91af">NHVConfigurator</span>();
        configurator.Configure(container);
    }

    [<span style="color: #2b91af">Test</span>]
    <span style="color: blue">public void </span>title_constraints()
    {
        GetConstraint&lt;<span style="color: #2b91af">Album</span>, <span style="color: #2b91af">NotEmptyAttribute</span>&gt;(a =&gt; a.Title)
            .Message
            .Should().Be.EqualTo(<span style="color: #a31515">&quot;Title should not be null.&quot;</span>);

        GetConstraint&lt;<span style="color: #2b91af">Album</span>, <span style="color: #2b91af">LengthAttribute</span>&gt;(a =&gt; a.Title)
            .Should().Be.OfType&lt;<span style="color: #2b91af">LengthAttribute</span>&gt;()
            .And.ValueOf.Message.Should().Be.EqualTo(<span style="color: #a31515">&quot;Title should not exceed 200 chars.&quot;</span>);
            
        
    }
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>I will not talk about this long break in the series. If you are interested in Wpf and Nhibernate, you should be happy because; <strong><u>I'M BACK</u>!</strong></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf the guywire]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1151" />
      </categories>
      <trackbacks>
        <trackback id="540" date-created="2009-11-10T20:00:58" date-modified="2009-11-10T20:00:58" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/11/07/nhibernate-and-wpf-the-guywire.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
        <trackback id="555" date-created="2009-12-11T04:21:26" date-modified="2009-12-11T04:21:26" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[credit repair new hampshire]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="542" date-created="2009-11-15T16:42:25" date-modified="2009-11-15T16:42:25" approved="true" post-url="/blogs/nhibernate/archive/2009/11/15/nhibernate-and-wpf-test-databinding-with-caliburn.aspx" type="normal" hasexcerpt="false" views="7018">
      <title type="text"><![CDATA[NHibernate and WPF: Test Databinding with Caliburn]]></title>
      <content type="text"><![CDATA[<p>As I said before, for the Chinook Media Manager I’m not using neither <a href="http://www.codeplex.com/caliburn">Caliburn</a> nor <a href="www.codeplex.com/CompositeWPF">Prism</a>.     <br />But, whenever I found a limitation on the current tools, I start looking a solution elsewhere. This is how I meet Caliburn.Testability, a great tool.</p>  <h1>The problem</h1>  <p>We don’t know what would be the ViewModel for the View at design time. This is the reason why we don’t have intelliscence in XAML, and in general our databinding are not strongly typed in XAML. So, we can write “naem” instead of “Name”.</p>  <h1>The solution</h1>  <p>Caliburn has a great tool named “Caliburn Testability”, you can read the full <a href="http://devlicio.us/blogs/rob_eisenberg/archive/2009/10/30/nhprof-and-caliburn-testability.aspx">post here</a>. As <a href="http://devlicio.us/blogs/rob_eisenberg/">Rob Eisenberg</a> said, I take this one step farther to build an automatic test.</p>  <p>This is the code:</p>  <pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">DataBindingValidator
</span>{
    <span style="color: blue">private static </span><span style="color: #2b91af">BindingValidator </span>ValidatorFor(
            <span style="color: #2b91af">Type </span>guiElement, <span style="color: #2b91af">Type </span>presenterType)
    {
        <span style="color: blue">var </span>boundType = <span style="color: blue">new </span><span style="color: #2b91af">BoundType</span>(presenterType);
        <span style="color: blue">var </span>instance = (<span style="color: #2b91af">DependencyObject</span>)<span style="color: #2b91af">Activator</span>.CreateInstance(guiElement);
        <span style="color: #2b91af">IElement </span>element = <span style="color: #2b91af">Bound</span>.DependencyObject(instance, boundType);
        <span style="color: blue">return new </span><span style="color: #2b91af">BindingValidator</span>(element);
    }

    <span style="color: gray">/// &lt;summary&gt;
    /// </span><span style="color: green">Validate the bindings of a keyvalue pair 
    </span><span style="color: gray">/// </span><span style="color: green">where the key is the View type and the 
    </span><span style="color: gray">/// </span><span style="color: green">value is the ViewModel type.
    </span><span style="color: gray">/// &lt;/summary&gt;
    </span><span style="color: blue">public </span><span style="color: #2b91af">IEnumerable</span>&lt;<span style="color: #2b91af">ValidationResult</span>&gt;
            Validate(<span style="color: #2b91af">IDictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: #2b91af">Type</span>&gt; viewViewModelDictionary)
    {
        <span style="color: blue">foreach </span>(<span style="color: blue">var </span>viewViewModel <span style="color: blue">in </span>viewViewModelDictionary)
        {
            <span style="color: #2b91af">BindingValidator </span>validator
                = ValidatorFor(viewViewModel.Key, viewViewModel.Value);
            <span style="color: #2b91af">ValidationResult </span>validatorResult = validator.Validate();
            <span style="color: blue">yield return </span>validatorResult;
        }
    }
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>This class validate a IDictionary&lt;Type, Type&gt;, the key is the “View” type, and the value is the ViewModel type. The View need to have a public constructor without args, this test will create an instance of the View. The ViewModel type could be a class, could be abstract and even an interface!</p>

<p>The test is really easy, if you are using Caliburn, you already have a IViewStrategy. The Chinook Media Manager use a convention based approach and I don’t have an special artifact for this purpose. So my test looks as follows:</p>

<p>&#160;</p>

<pre class="code">[<span style="color: #2b91af">TestFixture</span>]
<span style="color: blue">public class </span><span style="color: #2b91af">TestDataBindings
</span>{
    <span style="color: blue">private static </span><span style="color: #2b91af">Type </span>GetViewForViewModel(<span style="color: #2b91af">Type </span>viewModelType)
    {
        <span style="color: blue">string </span>viewName = viewModelType.Name.Replace(<span style="color: #a31515">&quot;ViewModel&quot;</span>, <span style="color: #a31515">&quot;View&quot;</span>);
        <span style="color: blue">string </span>viewFullName = <span style="color: blue">string</span>.Format(<span style="color: #a31515">&quot;ChinookMediaManager.GUI.Views.{0}, ChinookMediaManager.GUI&quot;</span>, viewName);
        <span style="color: #2b91af">Type </span>viewType = <span style="color: #2b91af">Type</span>.GetType(viewFullName, <span style="color: blue">true</span>);
        <span style="color: blue">return </span>viewType;
    }

    [<span style="color: #2b91af">Test</span>]
    <span style="color: blue">public void </span>AllDatabindingsAreOkay()
    {
        <span style="color: blue">bool </span>fail = <span style="color: blue">false</span>;
        <span style="color: blue">var </span>databindingValidator = <span style="color: blue">new </span><span style="color: #2b91af">DataBindingValidator</span>();

        <span style="color: #2b91af">Type </span>examplePresenterType = <span style="color: blue">typeof</span>(<span style="color: #2b91af">AlbumManagerViewModel</span>);

        <span style="color: blue">var </span>dictionary = examplePresenterType.Assembly.GetTypes()
                                            .Where(type =&gt; type.Namespace.EndsWith(<span style="color: #a31515">&quot;ViewModels&quot;</span>))
                                            .ToDictionary(vmType =&gt; GetViewForViewModel(vmType), vmType =&gt; vmType);

        

        <span style="color: blue">foreach </span>(<span style="color: blue">var </span>validationResult <span style="color: blue">in </span>databindingValidator.Validate(dictionary))
        {
            <span style="color: blue">if</span>(validationResult.HasErrors)
            {
                <span style="color: #2b91af">Console</span>.WriteLine(validationResult.ErrorSummary);
                fail = <span style="color: blue">true</span>;
            }
        }

        fail.Should().Be.False();
    }
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<p>If you have any error in your databinding this test will fail. This test also show you a list of the DataBinding errors in the console, and for each error the full path inside the View:</p>

<p><a href="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6D1D2B0A.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="http://nhforge.org/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_40968BD5.png" width="885" height="115" /></a> </p>

<p>You can see here the “nesting level”, Album is a property of the EditAlbumViewModel, Title is a property in the Album type. Titl<u>o</u> doesn’t exist. EditAlbumView.Grid.TextBox is the full xaml path to the control holding the databinding. It show Grid and TextBox because these elements doesn’t have a name in xaml.</p>

<p>This is why I use Caliburn.Testability in Chinook Media Manager. </p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf test databinding with caliburn]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1151" />
      </categories>
      <trackbacks>
        <trackback id="1068" date-created="2014-09-18T15:42:12" date-modified="2014-09-18T15:42:12" approved="true" url="http://webmailalt.selfnet.at/?a%5B%5D=Video+%28%3Ca+href%3Dhttp%3A%2F%2Fcloud.dreamings.org%2Findex.php%2Fngreenoug%2Fall%3Evisit+the+up+coming+document%3C%2Fa%3E%29">
          <title type="text"><![CDATA[click here for info]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="547" date-created="2009-11-22T22:43:00" date-modified="2009-11-22T22:43:00" approved="true" post-url="/blogs/nhibernate/archive/2009/11/22/hbm2net-frist-alpha-available.aspx" type="normal" hasexcerpt="false" views="4170">
      <title type="text"><![CDATA[hbm2net: first alpha ready]]></title>
      <content type="text"><![CDATA[<p>I've just published a first drop of an hbm2net modified version to enable T4.<br />&nbsp;<br />You can find it <a href="/media/p/546.aspx">here</a> or <a href="https://sourceforge.net/projects/nhcontrib/files/NHibernate.Hbm2Net/hbm2net.zip/download">here</a>.<br /><br />Hbm2net is useful in generating the classes dto views or whatever you want starting from the hbm files.<br />The presented version supports code generation via T4, so you can use the same renderer with different templates to produce different codes artefacts.<br />To try it, please do the follow:</p>
<p>&nbsp;</p>
<ul>
<li>Unzip the file in a folder ( you will probably put that folder in your path variable to launch it from everywhere )</li>
<li>Launch<b> hbm2net --config:t4config.xml apple.hbm.xml</b></li>
</ul>
<p><br />You should see a directory named generated with the generated code.<br />Then you can start to play with the T4 file <b>hbm2net.tt</b> to do modification on it and see what happen, or adding additional generation<br />steps in t4config.xml:<br /><br /><br />&lt;?xml version="1.0" encoding="utf-8"?&gt;<br />&lt;codegen&gt;<br />&nbsp; &lt;generate renderer="NHibernate.Tool.hbm2net.T4.T4Render, NHibernate.Tool.hbm2net.T4" package=""&gt;<br />&nbsp;&nbsp;&nbsp; &lt;param name="template"&gt;~\hbm2net.tt&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp; &lt;param name="output"&gt;clazz.GeneratedName+".generated.cs"&lt;/param&gt;<br />&nbsp; &lt;/generate&gt;<br /><br />&nbsp;&nbsp;&nbsp; .<b><i>.. add additional generate elements with different templates here</i></b>.<br /><br />&lt;/codegen&gt;<br /><br />Try it with your mapping files, but remember that the code generation process cannot guess types from classes, so<br />you will probably need to add the class attribute to some&nbsp; &lt;many-to-one/&gt; to specify<br />the type of the associations. The console message should WARN if some of this occour. Code generation<br />generally proceed anyway, but you wll find some missing fields in these cases.<br /><br />Next version will probably brea some things and became more friendly.<br /><br />Enjoy and let me know opinion/suggestions.</p>]]></content>
      <post-name type="text"><![CDATA[hbm2net frist alpha available]]></post-name>
      <categories>
        <category ref="1153" />
        <category ref="1155" />
      </categories>
      <trackbacks>
        <trackback id="549" date-created="2009-11-23T12:25:32" date-modified="2009-11-23T12:25:32" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/11/22/hbm2net-frist-alpha-available.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="548" date-created="2009-11-23T01:48:18" date-modified="2009-11-23T01:48:18" approved="true" post-url="/blogs/nhibernate/archive/2009/11/22/nhibernate-and-wpf-asynchronous-calls.aspx" type="normal" hasexcerpt="false" views="8329">
      <title type="text"><![CDATA[NHibernate and WPF: Asynchronous calls]]></title>
      <content type="text"><![CDATA[<p>I will show in this article an approach to make an asynchronous call to the model, to prevent the user interface to freeze. If you read about WPF, you will see there is a lot of information and claims “don’t freeze the ui thread”, “build UI more responsiveness” and so on.</p>  <h2>What you should know</h2>  <p>NHibernate Sessions are not thread safe, so don’t use a single session in multiples threads. Conversation-per-Business-Transaction use the same session for a conversation. The end of the conversation flush the changes and close the session, the abort of the conversation discard changes and close the session.</p>  <p>You can’t update UI controls from a non-ui thread. Some people read this like “don’t set a ViewModel property from a non UI thread”. But this is not true, because it depends where do you raise the property changed notification thank to my friend <a href="http://schuager.com/">German Schuager</a> for reminding me <a href="http://devlicio.us/blogs/rob_eisenberg/archive/2009/09/08/dispelling-a-common-wpf-silverlight-myth.aspx">this post</a> from <a href="http://devlicio.us/blogs/rob_eisenberg">Rob Eisenberg</a>. However, I’m not using this trick for now.</p>  <p>Asynchronous code is <u><strong>HARD</strong></u> to unit test. I will like to separate the asynchronous code in few units more testable and test “in-sync”.</p>  <h1>The problem</h1>  <p>The load of the artist list is very slow and this causes the user interface to freeze. This is very irritating for the end user.</p>  <p>I will break the async problem in the following three steps:</p>  <ol>   <li>Preview: Before start the operation we want to let the user know that the operation is in-process with some message in the user interface or maybe an hourglass. </li>    <li>Process: The heavy operation. </li>    <li>Completed: The operation has ended and we want to show the result to the UI. </li> </ol>  <h1>Show me the code</h1>  <p>This my generic implementation of ICommand for make async calls.</p>  <pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">AsyncCommandWithResult</span>&lt;TParameter, TResult&gt;
        : IAsyncCommandWithResult&lt;TParameter, TResult&gt;
{
    <span style="color: blue">private readonly </span>Func&lt;TParameter, <span style="color: blue">bool</span>&gt; _canAction;
    <span style="color: blue">private readonly </span>Func&lt;TParameter, TResult&gt; _action;

    <span style="color: blue">public </span>AsyncCommandWithResult(Func&lt;TParameter, TResult&gt; action)
    {
        _action = action;
    }

    <span style="color: blue">public </span>AsyncCommandWithResult(
            Func&lt;TParameter, TResult&gt; action,
            Func&lt;TParameter, <span style="color: blue">bool</span>&gt; canAction)
    {
        _action = action;
        _canAction = canAction;
    }


    <span style="color: blue">public </span>Action&lt;TParameter, TResult&gt; Completed { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
    <span style="color: blue">public </span>Action&lt;TParameter&gt; Preview { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
    <span style="color: blue">public bool </span>BlockInteraction { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }

    <span style="color: blue">public void </span>Execute(<span style="color: blue">object </span>parameter)
    {
        <span style="color: green">//Execute Preview
        </span>Preview((TParameter)parameter);

        <span style="color: green">//This is the async actions to take... 
        </span>worker.DoWork += (sender, args) =&gt;
        {
            args.Result = _action((TParameter)parameter);

        };

        <span style="color: green">//When the work is complete, execute the postaction.
        </span>worker.RunWorkerCompleted += (sender, args) =&gt;
        {
            Completed((TParameter)parameter, (TResult)args.Result);
            CommandManager.InvalidateRequerySuggested();
        };

        <span style="color: green">//Run the async work.
        </span>worker.RunWorkerAsync();
    }

    [DebuggerStepThrough]
    <span style="color: blue">public bool </span>CanExecute(<span style="color: blue">object </span>parameter)
    {
        <span style="color: blue">if </span>(BlockInteraction &amp;&amp; worker.IsBusy)
            <span style="color: blue">return false</span>;

        <span style="color: blue">return </span>_canAction == <span style="color: blue">null </span>? <span style="color: blue">true </span>:
                _canAction((TParameter)parameter);
    }

    <span style="color: blue">public event </span>EventHandler CanExecuteChanged
    {
        <span style="color: blue">add </span>{ CommandManager.RequerySuggested += <span style="color: blue">value</span>; }
        <span style="color: blue">remove </span>{ CommandManager.RequerySuggested -= <span style="color: blue">value</span>; }
    }

    <span style="color: blue">public </span>TResult ExecuteSync(TParameter obj)
    {
        <span style="color: blue">return </span>_action(obj);
    }

    <span style="color: blue">private static readonly </span>BackgroundWorker worker
            = <span style="color: blue">new </span>BackgroundWorker();
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<h1>Testing the ViewModel</h1>

<p>Here you can see the test of the three steps. None of these test involves asynchronous calls.</p>

<pre class="code">[Test]
<span style="color: blue">public void </span>preview_of_load_list_should_show_status_info()
{
    var browseArtistVm = <span style="color: blue">new </span>BrowseArtistViewModel(
                <span style="color: blue">new </span>Mock&lt;IBrowseArtistModel&gt;().Object,
                <span style="color: blue">new </span>Mock&lt;IViewFactory&gt;().Object);
    
    browseArtistVm.LoadListCommand.Preview(<span style="color: blue">null</span>);
    browseArtistVm.Status.Should().Be.EqualTo(<span style="color: #a31515">&quot;Loading artists...&quot;</span>);
}

[Test(Description = <span style="color: #a31515">&quot;Check if the process call the model&quot;</span>)]
<span style="color: blue">public void </span>load_list_command_should_load_artists_coll()
{
    var artistModel = <span style="color: blue">new </span>Mock&lt;IBrowseArtistModel&gt;();

    var artists = <span style="color: blue">new </span>List&lt;Artist&gt; {<span style="color: blue">new </span>Artist {Name = <span style="color: #a31515">&quot;Jose&quot;</span>}};

    artistModel.Setup(am =&gt; am.GetAllArtists()).Returns(artists);

    var browseArtistVm = <span style="color: blue">new </span>BrowseArtistViewModel(
                            artistModel.Object, 
                            <span style="color: blue">new </span>Mock&lt;IViewFactory&gt;().Object);

    browseArtistVm.LoadListCommand.ExecuteSync(<span style="color: blue">null</span>);

    artistModel.VerifyAll();
}

[Test]
<span style="color: blue">public void </span>completed_of_load_l_should_load_the_list_and_change_status()
{
    var browseArtistVm = <span style="color: blue">new </span>BrowseArtistViewModel(
                <span style="color: blue">new </span>Mock&lt;IBrowseArtistModel&gt;().Object,
                <span style="color: blue">new </span>Mock&lt;IViewFactory&gt;().Object);

    var artists = <span style="color: blue">new </span>List&lt;Artist&gt;();

    browseArtistVm.LoadListCommand.Completed(<span style="color: blue">null</span>, artists);

    browseArtistVm.Artists.Should().Be.SameInstanceAs(artists);
    browseArtistVm.Status.Should().Be.EqualTo(<span style="color: #a31515">&quot;Finished&quot;</span>);
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<h1>Implementing the ViewModel</h1>

<p>The LoadListCommand of the ViewModel is:</p>

<pre class="code"><span style="color: blue">public virtual </span>IAsyncCommandWithResult&lt;<span style="color: blue">object</span>, IList&lt;Artist&gt;&gt; LoadListCommand
{
    <span style="color: blue">get
    </span>{
        <span style="color: blue">if </span>(_loadListCommand == <span style="color: blue">null</span>)
        {
            _loadListCommand = 
                <span style="color: blue">new </span>AsyncCommandWithResult&lt;<span style="color: blue">object</span>, IList&lt;Artist&gt;&gt;
                        (o =&gt; _browseArtistModel.GetAllArtists())
                        {
                            BlockInteraction = <span style="color: blue">true</span>,
                            Preview = o =&gt; Status = <span style="color: #a31515">&quot;Loading artists...&quot;</span>,
                            Completed = (o, artists) =&gt;
                                {
                                    Artists = artists;
                                    Status = <span style="color: #a31515">&quot;Finished&quot;</span>;
                                }
                        };
        }
        <span style="color: blue">return </span>_loadListCommand;
    }
}</pre>
<a href="http://11011.net/software/vspaste"></a>

<h1>Final conclusion</h1>

<p>You must to remember that an NHibernate Session should be used in only one thread. This model for Browsing Artists has only one method with EndMode = End. This means session-per-call, so each time I click the LoadCommand the model start a new conversation and session. If you have a ViewModel with multiples operations within the same Conversation better you use something else, or use AsyncCommand everywhere within the VM.</p>

<p>There are a lot of alternatives to this approach, here are some;</p>

<ul>
  <li><a href="http://msdn.microsoft.com/en-us/library/wewwczdw.aspx">Event-based asynchronous pattern</a>. </li>

  <li>Use background thread directly in your ViewModel. </li>
</ul>

<p>Use this only when you need it. You don’t have to do this everywhere. Some operations are very fast and inexpensive.</p>

<p>Divide and conquer; I really like this way of testing. Don’t bring asynchronous things to your unit tests.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and wpf asynchronous calls]]></post-name>
      <categories>
        <category ref="1151" />
      </categories>
      <comments>
        <comment id="970" date-created="2009-12-13T08:26:29" date-modified="2009-12-13T08:26:29" approved="true" user-name="ronaldshen" user-url="http://www.atoncer.com/pets/main.htm">
          <title type="text"><![CDATA[re: NHibernate and WPF: Asynchronous calls]]></title>
          <content type="text"><![CDATA[[url=http://www.atoncer.com/pets/main.htm] pets supplies  [/url]
[url=http://www.atoncer.com/health/main.htm]health supplies   [/url]
[url=http://www.sellatonce.com/import-import/venezuela.html]venezuela export[/url]
[url=http://www.sellatonce.com/import-import/israel.html]israel export[/url]
[url=http://www.sellatonce.com/import-import/china.html]china export[/url]
[url=http://www.sellatonce.com/import-import/india.html]india export[/url]
]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="550" date-created="2009-11-23T21:45:20" date-modified="2009-11-23T21:45:20" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/11/22/nhibernate-and-wpf-asynchronous-calls.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="551" date-created="2009-11-26T12:44:00" date-modified="2009-11-26T12:44:00" approved="true" post-url="/blogs/nhibernate/archive/2009/11/26/nhibernate-validator-1-2-cr1-released.aspx" type="normal" hasexcerpt="false" views="3860">
      <title type="text"><![CDATA[NHibernate Validator 1.2 CR1 released]]></title>
      <content type="text"><![CDATA[<p><img src="http://darioquintana.com.ar/files/NHV-logo-white-background.png" />

</p>
<p>Download NHibernate Validator 1.2 CR1 with sources, binaries and example here <a href="https://sourceforge.net/projects/nhcontrib/files">here</a>

</p>
<p>For use it with NHibernate 2.1.2 GA.
</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate validator 1 2 cr1 released]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1111" />
        <category ref="1129" />
      </categories>
      <comments>
        <comment id="971" date-created="2009-12-13T08:15:13" date-modified="2009-12-13T08:15:13" approved="true" user-name="ronaldshen" user-url="http://nhforge.org/members/ronaldshen/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator 1.2 CR1 released]]></title>
          <content type="text"><![CDATA[[url=http://www.atoncer.com/pets/main.htm] pets supplies  [/url]
[url=http://www.atoncer.com/health/main.htm]health supplies   [/url]
[url=http://www.sellatonce.com/import-import/venezuela.html]venezuela export[/url]
[url=http://www.sellatonce.com/import-import/israel.html]israel export[/url]
[url=http://www.sellatonce.com/import-import/china.html]china export[/url]
[url=http://www.sellatonce.com/import-import/india.html]india export[/url]


]]></content>
        </comment>
        <comment id="603" date-created="2010-02-03T10:15:22" date-modified="2010-02-03T10:15:22" approved="true" user-name="Rachelle" user-url="http://nhforge.org/members/manageaccount/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Validator 1.2 CR1 released]]></title>
          <content type="text"><![CDATA[I've been waiting for this one to come out for a long time. It finally came. I'll definitely be downloading this one. ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2103" date-created="2008-08-29T16:24:09" date-modified="2012-02-03T13:46:19" approved="true" email="contacto@darioquintana.com.ar">
          <title type="text"><![CDATA[darioquintana]]></title>
        </author>
      </authors>
    </post>
    <post id="557" date-created="2009-12-12T22:12:00" date-modified="2009-12-12T22:12:00" approved="true" post-url="/blogs/nhibernate/archive/2009/12/12/t4-hbm2net-alpha-2.aspx" type="normal" hasexcerpt="false" views="81353">
      <title type="text"><![CDATA[T4 hbm2net alpha 2]]></title>
      <content type="text"><![CDATA[<p>You can download from <a href="/media/p/546.aspx">here</a> a new version of the hbm2net T4 enabled. This version has a better command line parsing/error handling, and the configuration file to provide ( optionally ) is validate in order to report some meaningful error messages when needed. The utility is still command line, I suggest to use as a pre-build step in Visual Studio&nbsp; to generate your entities, or other code artifacts you need.</p>
<p>Unzip the files in a folder, and launch hbm2net:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s1_5F00_5D0D54F7.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s1" alt="s1" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s1_5F00_thumb_5F00_694B06B9.png" width="589" border="0" height="263" /></a> </p>
<p>As you can see, the configuration file is now optional. If omitted, the default internal template is used, that will generate the code artifacts for the entities. You can specify an output directory for the files ( if omitted will be the current directory ) and a flag, &ndash;ct, to avoid generating files if target files are newer than sources. This is to suppress the reload message box in Visual Studio every time you compile if you forget an entity file opened. Then you can specify hbm files, with wildcards too. So, the simplest command line to generate mappings is:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s2_5F00_29BCE1C2.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s2" alt="s2" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s2_5F00_thumb_5F00_4CBD2D65.png" width="590" border="0" height="137" /></a></p>
<p>If you want to use more generation step, you need to edit the configuration file, and inform hbm2net:</p>
<p><b>hbm2net &ndash;config:myconfig.xml *.hbm.xml</b></p>
<p>the configuration file is in the following format:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s3_5F00_2F1B2C99.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s3" alt="s3" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s3_5F00_thumb_5F00_7CF3DC4E.png" width="598" border="0" height="116" /></a> </p>
<p>The generator nodes can be multiple: each different generator can point to a different template in order to produce different code artifacts.The second parameter, <b>output</b>, is the file name you will generate. This is parsed internally by the T4 engine itself, so you can play your strategy in combining the file name having the <b>clazz</b> object, an instance of <b>ClassMapping</b> representing the current <b>hbm</b> fragment. The presented parameter produces a file called <b><i>&lt;classname&gt;.generated.cs</i></b>, and is the default behavior. Please note the template is specified as <b>res://xxxx</b>: this means to lookup the template internally. You can specify a template with a regular path as well, plus, you can use <b>~</b>/xxx/yyy/mytemplate.tt to specify a path relative to the location where hbm2net is. A copy of <b>hbm2net.tt</b> is included in the zip however, so you can use as a starting point to create your generators.</p>
<h5>Some notes about T4.</h5>
<p>You will find the entire bible on that argument by starting <a href="http://msdn.microsoft.com/en-us/library/bb126468.aspx">here</a> or <a href="http://www.olegsych.com/">here</a>. I will show a snapshot of the hbm2net.tt of the current version:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s4_5F00_590B04F4.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s4" alt="s4" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s4_5F00_thumb_5F00_7BCB7B0A.png" width="548" border="0" height="267" /></a> </p>
<p>So, as you can see, very similar to the old asp stuff, not so different from NVelocity. The basic difference from other such engine is that we have reachable from inside the template any .NET type we can need. Furthermore, we can organize our generation with helpers by using the &lt;#+ #&gt; tags. Whit these tags we create a method inside the transformation class usable by the template itself. As an example, the <b>&lt;#=GetCommentForClass(clazz,1).TrimEnd()#&gt;</b> line call an helper function. In this case the body of this function is contained in the <a title="res://NHibernate.Tool.hbm2net.templates.common.tt" href="res://NHibernate.Tool.hbm2net.templates.common.tt"><b>res://NHibernate.Tool.hbm2net.templates.common.tt</b></a> file, but can be inlined with the template itself. Currently an object of type <b>ClassMapping</b> ( an internal hbm2net object used to represent a mapping fragment ) is passed to the template, as the field <b>clazz</b>. Sorry for the strange naming convention, I left something from the&nbsp; old original version, this maybe will change in future drops.</p>]]></content>
      <post-name type="text"><![CDATA[t4 hbm2net alpha 2]]></post-name>
      <categories>
        <category ref="1153" />
        <category ref="1155" />
      </categories>
      <comments>
        <comment id="972" date-created="2009-12-13T08:13:37" date-modified="2009-12-13T08:13:37" approved="true" user-name="ronaldshen" user-url="http://nhforge.org/members/ronaldshen/default.aspx">
          <title type="text"><![CDATA[re: T4 hbm2net alpha 2]]></title>
          <content type="text"><![CDATA[[url=http://www.atoncer.com/pets/main.htm] pets supplies  [/url]
[url=http://www.atoncer.com/health/main.htm]health supplies   [/url]
[url=http://www.sellatonce.com/import-import/venezuela.html]venezuela export[/url]
[url=http://www.sellatonce.com/import-import/israel.html]israel export[/url]
[url=http://www.sellatonce.com/import-import/china.html]china export[/url]
[url=http://www.sellatonce.com/import-import/india.html]india export[/url]


]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1020" date-created="2014-09-04T19:11:35" date-modified="2014-09-04T19:11:35" approved="true" url="https://www.diigo.com/item/note/4wk24/prm6">
          <title type="text"><![CDATA[https://www.diigo.com/item/note/4wk24/prm6]]></title>
        </trackback>
        <trackback id="1040" date-created="2014-09-12T00:40:45" date-modified="2014-09-12T00:40:45" approved="true" url="https://www.diigo.com/item/note/4u8c0/wknb">
          <title type="text"><![CDATA[scale model Kits]]></title>
        </trackback>
        <trackback id="1063" date-created="2014-09-17T04:40:22" date-modified="2014-09-17T04:40:22" approved="true" url="http://class.hmjh.tp.edu.tw/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.carameltube.com%2Fcms2%2Fout.php%3Fid%3D6042389%26gid%3D435%26sid%3D100020%26c%3D1%26s%3D85%26url%3Dhttp%253A%2F%2Fcubicleaccessories.org%3Ediy+decorating+your+office+cubicle+accessories%3C%2Fa%3E">
          <title type="text"><![CDATA[http://class.hmjh.tp.edu.tw/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.carameltube.com%2Fcms2%2Fout.php%3Fid%3D6042389%26gid%3D435%26sid%3D100020%26c%3D1%26s%3D85%26url%3Dhttp%253A%2F%2Fcubicleaccessories.org%3Ediy+decorating+your+office+cubicle+accessories%3C%]]></title>
        </trackback>
        <trackback id="1067" date-created="2014-09-18T13:02:07" date-modified="2014-09-18T13:02:07" approved="true" url="http://ktg.on.synnet.de/cgi-bin/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.trop.uha.fr%2Fpatrice%2FCourtiers%2Fphpinfo.php%3Fa%255B%255D%3D%253Ca%2Bhref%253Dhttp%253A%252F%252Fvcsc.cs.uh.edu%252Fsecond-computing%252Fview_profile.php%253Fuserid%253D2810403%253EUnique%2Boffice%2Bcubicle%2BAccessories%2Bhooks%253C%252Fa%253E%3Eoffice+cubicle+1970+chevelle+assembly+manual%3C%2Fa%3E">
          <title type="text"><![CDATA[ktg.on.synnet.de]]></title>
        </trackback>
        <trackback id="1069" date-created="2014-09-18T16:41:41" date-modified="2014-09-18T16:41:41" approved="true" url="http://www.cm-boticas.pt/php.php/RK=0/RS=xrwsebG5CFrEX7gHgS3Zy_O?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.admin.isaev.info%2F%3Fa%255B%255D%3Doffice%2Bherman%2Bmiller%2Bcubicle%2Bassembly%2Binstructions%2B%2528%253Ca%2Bhref%253Dhttp%253A%252F%252Fwww5c.biglobe.ne.jp%252F%257Emokada%252Fcgi-bin%252Fg_book.cgi%253Ewww5c.biglobe.ne.jp%253C%252Fa%253E%2529%3Eoffice+cubicle+accessories+vmware+workstation%3C%2Fa%3E">
          <title type="text"><![CDATA[unique office cubicle accessories shelves]]></title>
        </trackback>
        <trackback id="1109" date-created="2014-09-29T00:40:18" date-modified="2014-09-29T00:40:18" approved="true" url="http://ag28.com/space.php?uid=96847&amp;do=blog&amp;id=249920">
          <title type="text"><![CDATA[websites]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="559" date-created="2009-12-16T23:52:39" date-modified="2009-12-16T23:52:39" approved="true" post-url="/blogs/nhibernate/archive/2009/12/17/using-the-new-linq-to-nh-provider-and-migrating-from-the-old-one.aspx" type="normal" hasexcerpt="false" views="10081">
      <title type="text"><![CDATA[Using the new Linq to NH Provider and migrating from the old one]]></title>
      <content type="text"><![CDATA[<p>Using the new Linq provider is pretty simple. It all hangs of a Query() extension method on ISession, so you can do things like the following:</p><code>  from c in session.Query&lt;Customer&gt;() select c</code><br />
<p>In my tests, I've tended to wrap the session.Query() call behind a simple facade, along the lines of:</p><code>  public class Northwind<br />
  {<br />
   private readonly ISession _session;<br />
<br />
   public Northwind(ISession session)<br />
   {<br />
   _session = session;<br />
   }<br />
<br />
   public IQueryable&lt;Customer&gt; Customers   { get { return _session.Query&lt;Customer&gt;(); }<br />
  }<br /></code>
<p>Of course, that's entirely optional, but I find the resulting code easier to read:</p><code>  from c in db.Customers select c</code><br />
<p>Once you know how to hook into the session (which as you can see is pretty simple), the rest is just straightforward Linq code, and entirely up to you! Right now I'm not exposing any extension points, but they'll be coming soon (plus another post to describe how to use them).</p>
<p>The version 1 provider used an ISession extension method call Linq() to provide its hook. I purposefully used a different name, since there's no reason at all why you can't use both providers within the same project or, indeed, within the same session. So that gives a couple of migration options for folk that want to move to the new provider:</p>
<ul>
  <li>Leave all your current queries using .Linq(), and start using .Query() for new ones.</li>

  <li style="list-style: none"><br /></li>

  <li>Start changing existing queries from .Linq() to .Query(), just by changing them or by a simple search &amp; replace. The rest of the expression will (hopefully!) just work.</li>

  <li style="list-style: none"><br /></li>

  <li>Drop your reference to the original Linq provider assembly, and create your own extension method:<br />
  <br />
  <code>  public static IQueryable&lt;T&gt; Linq&lt;T&gt;(this ISession session)<br />
    {<br />
      return session.Query&lt;T&gt;();<br />
    }</code><br />
  <br />
  This lets you switch to the new provider without changing a line of your code - and if you find it all goes to hell, you just re-add the V1 reference and comment out your extension method. Should work like a treat.</li>
</ul>
<p>Other than that, I don't think there's much to tell - usage really should be pretty simple. Oh, one thing that springs to mind - although you can use the V1 provider and the new provider within the same project (or session), don't try to compose queries from them together; that's really going to do weird stuff!</p>
<div class="posttagsblock"><a href="http://technorati.com/tag/Linq" rel="tag">Linq</a>, <a href="http://technorati.com/tag/NHibernate" rel="tag">NHibernate</a></div>]]></content>
      <post-name type="text"><![CDATA[using the new linq to nh provider and migrating from the old one]]></post-name>
      <comments>
        <comment id="563" date-created="2009-12-17T15:14:12" date-modified="2009-12-17T15:14:12" approved="true" user-name="Ricardo Peres" user-url="http://nhforge.org/members/rjperes/default.aspx">
          <title type="text"><![CDATA[re: Using the new Linq to NH Provider and migrating from the old one]]></title>
          <content type="text"><![CDATA[Hi, Steve!
Nice work! Two questions, though:
1 - Where can I get your provider?
2 - Will it be integrated with the one from NHCommon?

Thanks,

RP]]></content>
        </comment>
        <comment id="564" date-created="2009-12-17T18:22:52" date-modified="2009-12-17T18:22:52" approved="true" user-name="Ricardo Peres" user-url="http://nhforge.org/members/rjperes/default.aspx">
          <title type="text"><![CDATA[re: Using the new Linq to NH Provider and migrating from the old one]]></title>
          <content type="text"><![CDATA[Forgot to ask: have you tried your provider with ASP.NET Dynamic Data?]]></content>
        </comment>
        <comment id="565" date-created="2009-12-17T22:33:52" date-modified="2009-12-17T22:33:52" approved="true" user-name="Steve Strong" user-url="http://nhforge.org/members/srstrong/default.aspx">
          <title type="text"><![CDATA[re: Using the new Linq to NH Provider and migrating from the old one]]></title>
          <content type="text"><![CDATA[Ricardo,

The new provider is within the NH trunk; it's no longer a separate assembly.  Either get the source and build it, or head over to www.hornget.net and get the pre-built one from there.

As far as integration with the NH Common provider, there's nothing to be done here. The NH Common provider will continue to work, although I doubt we'll be making many enhancements / bug fixes to it.  The new provider in the trunk is the one that we'll be taking forward.

Cheers,

Steve]]></content>
        </comment>
        <comment id="572" date-created="2009-12-18T09:49:52" date-modified="2009-12-18T09:49:52" approved="true" user-name="Ricardo Peres" user-url="http://nhforge.org/members/rjperes/default.aspx">
          <title type="text"><![CDATA[re: Using the new Linq to NH Provider and migrating from the old one]]></title>
          <content type="text"><![CDATA[Hello again,
What do you mean with the NH trunk? Is it included with the NHibernate.dll assembly?
The source code at https://nhibernate.svn.sourceforge.net/svnroot/nhibernate/trunk/nhibernate/src/ does not contain anything that remotely looks like Linq; the NHibernate.Linq package available at SourceForge looks the same as the one from NHContrib, and there's not a Query extension method at the SessionExtensions class, only Linq...
Thanks,
RP]]></content>
        </comment>
        <comment id="575" date-created="2009-12-18T16:04:36" date-modified="2009-12-18T16:04:36" approved="true" user-name="ssimroth" user-url="http://www.empinia.org/node/100">
          <title type="text"><![CDATA[re: Using the new Linq to NH Provider and migrating from the old one]]></title>
          <content type="text"><![CDATA[The new provider is indeed in the nhibernate trunk, here:
http://nhibernate.svn.sourceforge.net/viewvc/nhibernate/trunk/nhibernate/src/NHibernate/Linq/

So I guess it is included in NHibernate.dll.

I also missed it the first time and started using the old one from NH Contrib...

Stefan

NHibernate Linq rocks! - http://www.empinia.org/node/100]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2744" date-created="2009-04-30T14:38:23" date-modified="2009-12-17T00:00:43" approved="true" email="steve@srstrong.com">
          <title type="text"><![CDATA[srstrong]]></title>
        </author>
      </authors>
    </post>
    <post id="561" date-created="2009-12-17T00:00:00" date-modified="2009-12-17T00:00:00" approved="true" post-url="/blogs/nhibernate/archive/2009/12/17/linq-to-nhibernate-progress-report-a-christmas-gift.aspx" type="normal" hasexcerpt="false" views="28129">
      <title type="text"><![CDATA[Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
      <content type="text"><![CDATA[<p>Time for another progress report, and this one's a biggie :)</p>
<p>Barring a couple of pretty minor things that won't take much fixing, all the original Linq tests have now been ported over to the new provider and are all passing. That means the new provider is now (from the perspective of the tests, at least) in better shape that the version 1 provider. It can do everything the original provider could, plus a whole bunch more. A couple of example queries that now work just fine are:</p>
<p><code>&nbsp;&nbsp;from e in db.Employees<br />
&nbsp;&nbsp;from et in e.Territories<br />
&nbsp;&nbsp;where e.Address.City == "Seattle"<br />
&nbsp;&nbsp;select new {e.FirstName, e.LastName, et.Region.Description};<br /></code><br />
<code>&nbsp;&nbsp;from c in db.Customers<br />
&nbsp;&nbsp;join o in db.Orders on c.CustomerId equals o.Customer.CustomerId into orders<br />
&nbsp;&nbsp;select new {c.ContactName, OrderCount = orders.Average(x =&gt; x.Freight)};<br /></code><br />
<code>&nbsp;&nbsp;from o in db.Orders<br />
&nbsp;&nbsp;from p in db.Products<br />
&nbsp;&nbsp;join d in db.OrderLines on new {o.OrderId, p.ProductId} equals new {d.Order.OrderId, d.Product.ProductId}<br />
&nbsp;&nbsp; into details<br />
&nbsp;&nbsp;from d in details<br />
&nbsp;&nbsp;select new {o.OrderId, p.ProductId, d.UnitPrice}<br /></code><br />
<code>&nbsp;&nbsp;from c in db.Customers<br />
&nbsp;&nbsp;join o in db.Orders on c.CustomerId equals o.Customer.CustomerId<br />
&nbsp;&nbsp;group o by c into x<br />
&nbsp;&nbsp;select new { CustomerName = x.Key.ContactName, Order = x }<br /></code></p>
<p>(ignore whether those queries make any real sense, it's just the form of them that matters)</p>
<p>So, more importantly, what doesn't work? Well, out of the tests that we've currently got, not a huge amount. Some important areas that are missing are:</p>
<ul>
<li>Nested selects to produce hierarchical output. I've got some prototype code for doing this, so it will be supported at some point but isn't there right now. Of course, since NH already understands relationships, nested selects are far less important than they are for something like Linq to SQL.</li>
<li style="list-style: none"></li>
<li>Group joins that produce hierarchical output - these essentially boil down to the same code as the nested select case, so support for these will probably come at around the same time. Group joins that don't introduce a hierarchy should work just fine.</li>
<li style="list-style: none"></li>
<li>Set operations, such as Union and Intersect. Union you can obviously do yourself in client code with no particular overhead. Intersect would really be better in the provider :)</li>
<li style="list-style: none"></li>
<li>Left outer join style queries, such as:<br />
  <br />
  <code>from e in db.Employees<br />
  join o in db.Orders on e equals o.Employee into ords<br />
  from o in ords.DefaultIfEmpty()<br />
  select new {e.FirstName, e.LastName, Order = o};<br />
  <br /></code> This is a fairly widely used construct, so is close to top of the list for future support</li>
<li style="list-style: none"></li>
<li>Let expressions, such as:<br />
  <br />
  <code>from c in db.Customers<br />
  join o in db.Orders on c.CustomerId equals o.Customer.CustomerId into ords<br />
  let z = c.Address.City + c.Address.Country<br />
  from o in ords<br />
  select new {c.ContactName, o.OrderId, z};<br />
  <br /></code> Again, this is quite high on the TODO list.</li>
<li style="list-style: none"></li>
<li>Support for custom functions. This is actually fully implemented internally, but I just want to review the API usage before I tell you all how to use it - it probably needs a little cleanup from it's current state, but I don't anticipate any major changes.</li>
</ul>
<p>I've also got a number of TODOs, but mainly cleanup rather than functional, plus I need to work through the error handling to ensure that any queries that are passed in that the provider <strong>can't</strong> handle are rejected gracefully rather than just barfing (which is the likely case right now).</p>
<p>The only gotcha that I know of is a query that runs just fine but doesn't necessarily return the correct number of results. Specifically, queries like this:</p>
<p><code>&nbsp;&nbsp;from user in db.Users<br />
&nbsp;&nbsp;select new<br />
&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;user.Name,<br />
&nbsp;&nbsp;&nbsp;&nbsp;RoleName = user.Role.Name<br />
&nbsp;&nbsp;};<br /></code></p>
<p>Right now, this generates a <strong>join</strong> to the Role table, so any users that <strong>don't</strong> have a role are not returned. This differs from Linq to SQL where a <strong>left join</strong> is generated, giving a null RoleName for any users without a role. I believe the Linq to SQL implementation to be correct - the above query doesn't explicitly have any form of filtering (where clause, join clause etc), so you should get back all the users in the database. This one is top of the list, and hopefully will be fixed soon (it's not hard, I've just run out of time!).</p>
<p>In summary, I'm getting pretty happy with the state of the provider and think that it's now ready for general usage - although there are still some important query forms to support, I think there's sufficient there now to do useful work. If you've got good test coverage, then I'd even be happy for it to go live. If you don't have good coverage, then don't come crying to me :)</p>
<p>Of course, this is all in the trunk, so anyone wanting to play either needs to get the trunk source and build it, or take the much easier option of having <a href="http://www.hornget.net/packages/orm/nhibernate/nhibernate-trunk">Horn</a> do the work. Horn builds the trunk on a daily basis, so look for a package built after around 2300GMT on the 16/12/2009 (the package URL on Horn has the datetime stamp in it, so it's pretty easy to spot).</p>
<p>I'm on holiday for the next couple of weeks, and will only have intermittent internet access. However, ping me either by email or twitter with comments / bugs / suggestions, and I'll do my best to reply. Normal service (whatever that is) will return around Jan 4th.</p>
<div class="posttagsblock"><a rel="tag" href="http://technorati.com/tag/Linq">Linq</a>, <a rel="tag" href="http://technorati.com/tag/NHibernate">NHibernate</a></div>]]></content>
      <post-name type="text"><![CDATA[linq to nhibernate progress report a christmas gift]]></post-name>
      <categories>
        <category ref="1089" />
      </categories>
      <comments>
        <comment id="574" date-created="2009-12-18T16:00:50" date-modified="2009-12-18T16:00:50" approved="true" user-name="ssimroth" user-url="http://www.empinia.org/node/100">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[Great work! I just tried out the NH Linq provider (the old one) and I am very happy with it! So happy that I immediately blogged about it, in order to convince my team members to use this on our project. And I'll move to the new provider asap.
Keep up the good work!
Stefan

http://www.empinia.org/node/100]]></content>
        </comment>
        <comment id="595" date-created="2010-01-08T03:55:34" date-modified="2010-01-08T03:55:34" approved="true" user-name="William Chang" user-url="http://www.williamchang.org">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[Wow! Awesome!

One request (don't know it's been done because I had to use HQL to make it happen), partial property retrieval using projections like:

var partialCustomer = from c in db.Customers
select new Customer { CustomerID=c.CustomerID, City=c.City };

Using Linq to NHibernate for simple things are great! I wish to do complex queries using Linq over ICriteria/HQL/QueryOver. QueryOver is nice, but it feels too verbose when typing and reading a complex query compare to Linq (easier and simpler to follow).

I highly appreciate all the hard work supporting Linq for NHibernate. Please keep up the good work and your contributions to NHibernate.

Thank you!]]></content>
        </comment>
        <comment id="598" date-created="2010-01-18T14:36:23" date-modified="2010-01-18T14:36:23" approved="true" user-name="Odul Kanberoglu" user-url="http://nhforge.org/members/odulkanberoglu/default.aspx">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[I have converted the project I have been working on, to the new implementation of NHibernate Linq. Conversion went smooth as expected. However, later I had problems with generated expressions for querying the database. I cannot confirm if the same problem occured with the previous implementation of NHibernate Linq. 

When an expression is formed with a lamda expression in the form

Expression<Func<Province, bool>> exp = p => p.CountryId == country.Id;

where both the CountryId property of the type Province and the Id property of the type Country are of type "byte".

C# compiler prepares the lambda expression into an expression including the casting of the byte property value and the constant "country.Id" to Int32.

{p => (Convert(p.CountryId) = Convert(value
(AddressToGo.Business.Default.AddressComponents+<>c__DisplayClass0).country.Id))}

When NHibernate Linq prepares the command to execute for retrieval of data by using this expression, parameter for CountryId is generated of type "byte". When the value from the constant expression country.Id is assigned, an exception is thrown since the constant value is of type "Int32".

The expression can be prepared manually without using a lambda expression and works perfectly. However the amount of code written is larger when compared to a simple lambda expression.

ParameterExpression prm = Expression.Parameter(typeof(Province), "p");
  Expression<Func<Province, bool>> exp =
      Expression.Lambda<Func<Province, bool>>
      (
        Expression.Equal
        (
          Expression.MakeMemberAccess(prm, typeof(Province).GetProperty("CountryId")),
          Expression.Constant(country.Id, typeof(byte))
        ),
        prm
      );

I have started topics about the case on MSDN forums and stackoverflow.

http://stackoverflow.com/questions/2072573/lambda-expression-compilation

http://social.msdn.microsoft.com/Forums/en-US/linqprojectgeneral/thread/379d431f-3cfc-4751-8401-31ebd353aaf7]]></content>
        </comment>
        <comment id="599" date-created="2010-01-18T15:09:25" date-modified="2010-01-18T15:09:25" approved="true" user-name="Steve Strong" user-url="http://nhforge.org/members/srstrong/default.aspx">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[Odul,

Gotta love the compiler :)  It shouldn't be too difficult within the provider to detect scenarios such as this - I'll add it to the list.  For now, you'll have to run with the expression tree that you're building by hand, but it does suck quite a lot.

Cheers,

Steve]]></content>
        </comment>
        <comment id="601" date-created="2010-01-28T12:48:46" date-modified="2010-01-28T12:48:46" approved="true" user-name="Loki" user-url="http://nhforge.org/members/Loki/default.aspx">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[Excellent work!
Question: it will be supported?:

.OrderBy(x => x.Code.ToString())

I expect to see:(SQL)

... FROM .... ORDER BY (CAST [Code] as varchar)...

Thank you!]]></content>
        </comment>
        <comment id="633" date-created="2010-05-13T09:12:35" date-modified="2010-05-13T09:12:35" approved="true" user-name="Hainesy" user-url="http://">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[Steve

I realise this is a bit late on this post, but I'm struggling to get my hands on the new Linq code.

There's no Query() method off my session...

Is it in NHibernate 2.1.2.4000? This is the release I'm working off and unfortunately due to dependency hell it's going to be a struggle to upgrade at the moment.

]]></content>
        </comment>
        <comment id="861" date-created="2011-04-11T09:29:56" date-modified="2011-04-11T09:29:56" approved="true" user-name="Sulik" user-url="http://nhforge.org/members/Sulik/default.aspx">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[Very helpful ]]></content>
        </comment>
        <comment id="1013" date-created="2012-01-18T15:09:48" date-modified="2012-01-18T15:09:48" approved="true" user-name="RutB" user-url="http://">
          <title type="text"><![CDATA[re: Linq to NHibernate Progress Report - A Christmas Gift?]]></title>
          <content type="text"><![CDATA[This post is exactly what i was looking for, but unfortunately it doesnt works for me :-(.
I'm getting the error "The method or operation is not implemented". (We work with nHibernate 3.2)
Does anyone have an idea what can be the reason?

(To be specific, I'm getting the error when I adds the "into" expression, regular "join" with one key works fine)

Thanks in advance,]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="562" date-created="2009-12-17T02:55:20" date-modified="2009-12-17T02:55:20" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/12/17/linq-to-nhibernate-progress-report-a-christmas-gift.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
        <trackback id="589" date-created="2010-01-05T02:37:02" date-modified="2010-01-05T02:37:02" approved="true" url="http://www.nationalcreditfixers.com/newhampshirecreditrepair.php">
          <title type="text"><![CDATA[credit repair nh]]></title>
        </trackback>
        <trackback id="734" date-created="2010-12-05T02:07:03" date-modified="2010-12-05T02:07:03" approved="true" url="http://zvolkov.com/blog/post/2010/12/04/Whats-new-in-NHibernate-30-GA.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 3.0 GA]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2744" date-created="2009-04-30T14:38:23" date-modified="2009-12-17T00:00:43" approved="true" email="steve@srstrong.com">
          <title type="text"><![CDATA[srstrong]]></title>
        </author>
      </authors>
    </post>
    <post id="566" date-created="2009-12-17T23:22:00" date-modified="2009-12-17T23:22:00" approved="true" post-url="/blogs/nhibernate/archive/2009/12/17/queryover-in-nh-3-0.aspx" type="normal" hasexcerpt="false" views="165275">
      <title type="text"><![CDATA[QueryOver in NH 3.0]]></title>
      <content type="text"><![CDATA[<h4><a name="Introduction"></a>Introduction</h4>
<p>
    The ICriteria API
    is NHibernate's implementation of <a target="_blank" href="http://martinfowler.com/eaaCatalog/queryObject.html">Query Object</a>.
    NHibernate 3.0 introduces the QueryOver api, which combines the use of
    <a target="_blank" href="http://weblogs.asp.net/scottgu/archive/2007/03/13/new-orcas-language-feature-extension-methods.aspx">Extension Methods</a>
    and
    <a target="_blank" href="http://weblogs.asp.net/scottgu/archive/2007/04/08/new-orcas-language-feature-lambda-expressions.aspx">Lambda Expressions</a>
    (both new in .Net 3.5) to provide a statically typesafe wrapper round the ICriteria API.
</p>
<p>
    QueryOver uses Lambda Expressions to provide some extra
    syntax to remove the 'magic strings' from your ICriteria queries.
</p>
<p>
    So, for example:</p>
<pre><code>.Add(Expression.Eq("Name", "Smith"))
</code></pre>
<p>becomes:</p>
<pre><code>.Where&lt;Person&gt;(p =&gt; p.Name == "Smith")
</code></pre>
<p>
    With this kind of syntax there are no 'magic strings', and refactoring tools like
    'Find All References', and 'Refactor-&gt;Rename' work perfectly.
</p>
<p>
    Note: QueryOver is intended to remove the references to 'magic strings'
    from the ICriteria API while maintaining it's opaqueness.  It is <span style="text-decoration: underline;"><strong>not</strong></span> a LINQ provider;
    NHibernate 3.0 has a built-in Linq provider for this.
</p>
<p>&nbsp;</p>
<h4><a name="StructureOfAQuery"></a>Structure of a Query</h4>
<p>
    Queries are created from an ISession using the syntax:
</p>
<pre><code>IList&lt;Cat&gt; cats =
    session.QueryOver&lt;Cat&gt;()
        .Where(c =&gt; c.Name == "Max")
        .List();
</code></pre>
<p>&nbsp;</p>
<p>
    Detached QueryOver (analagous to DetachedCriteria) can be created, and then used with an ISession using:
</p>
<pre><code>QueryOver&lt;Cat&gt; query =
    QueryOver.Of&lt;Cat&gt;()
        .Where(c =&gt; c.Name == "Paddy");
        
IList&lt;Cat&gt; cats =
    query.GetExecutableQueryOver(session)
        .List();
</code></pre>
<p>&nbsp;</p>
<p>
    Queries can be built up to use restrictions, projections, and ordering using
    a fluent inline syntax:    
</p>
<pre><code>var catNames =
    session.QueryOver&lt;Cat&gt;()
        .WhereRestrictionOn(c =&gt; c.Age).IsBetween(2).And(8)
        .Select(c =&gt; c.Name)
        .OrderBy(c =&gt; c.Name).Asc
        .List&lt;string&gt;();
</code></pre>
<p>&nbsp;</p>
<h4><a name="SimpleExpressions"></a>Simple Expressions</h4>
<p>
    The Restrictions class (used by ICriteria) has been extended to include overloads
    that allow Lambda Expression syntax.  The Where() method works for simple expressions (&lt;, &lt;=, ==, !=, &gt;, &gt;=)
    so instead of:
</p>
<pre><code>ICriterion equalCriterion = Restrictions.Eq("Name", "Max")
</code></pre>
<p>
    You can write:
</p>
<pre><code>ICriterion equalCriterion = Restrictions.Where&lt;Cat&gt;(c =&gt; c.Name == "Max")
</code></pre>
<p>&nbsp;</p>
<p>
    Since the QueryOver class (and IQueryOver interface) is generic and knows the type of the query,
    there is an inline syntax for restrictions that does not require the additional qualification
    of class name.  So you can also write:
</p>
<pre><code>var cats =
    session.QueryOver&lt;Cat&gt;()
        .Where(c =&gt; c.Name == "Max")
        .And(c =&gt; c.Age &gt; 4)
        .List();
</code></pre>
<p>
    Note, the methods Where() and And() are semantically identical; the And() method is purely to allow
    QueryOver to look similar to HQL/SQL.
</p>
<p>&nbsp;</p>
<p>
    Boolean comparisons can be made directly instead of comparing to true/false:
</p>
<pre><code>        .Where(p =&gt; p.IsParent)
        .And(p =&gt; !p.IsRetired)
</code></pre>
<p>&nbsp;</p>
<p>
    Simple expressions can also be combined using the || and &amp;&amp; operators.  So ICriteria like:
</p>
<pre><code>        .Add(Restrictions.And(
            Restrictions.Eq("Name", "test name"),
            Restrictions.Or(
                Restrictions.Gt("Age", 21),
                Restrictions.Eq("HasCar", true))))
</code></pre>
<p>
    Can be written in QueryOver as:
</p>
<pre><code>        .Where(p =&gt; p.Name == "test name" &amp;&amp; (p.Age &gt; 21 || p.HasCar))
</code></pre>
<p>&nbsp;</p>
<p>
    Each of the corresponding overloads in the QueryOver API allows the use of regular ICriterion
    to allow access to private properties.
</p>
<pre><code>        .Where(Restrictions.Eq("Name", "Max"))
</code></pre>
<p>&nbsp;</p>
<p>
    It is worth noting that the QueryOver API is built on top of the ICriteria API.  Internally the structures are the same, so at runtime
    the statement below, and the statement above, are stored as exactly the same ICriterion.  The actual Lambda Expression is not stored
    in the query.
</p>
<pre><code>        .Where(c =&gt; c.Name == "Max")
</code></pre>
<p>&nbsp;</p>
<h4><a name="AdditionalRestrictions"></a>Additional Restrictions</h4>
<p>
    Some SQL operators/functions do not have a direct equivalent in C#.
    (e.g., the SQL <code>where name like '%anna%'</code>).
    These operators have overloads for QueryOver in the Restrictions class, so you can write:
</p>
<pre><code>        .Where(Restrictions.On&lt;Cat&gt;(c =&gt; c.Name).IsLike("%anna%"))
</code></pre>
<p>
    There is also an inline syntax to avoid the qualification of the type:
</p>
<pre><code>        .WhereRestrictionOn(c =&gt; c.Name).IsLike("%anna%")
</code></pre>
<p>&nbsp;</p>
<p>
    While simple expressions (see above) can be combined using the || and &amp;&amp; operators, this is not possible with the other
    restrictions.  So this ICriteria:
</p>
<pre><code>        .Add(Restrictions.Or(
            Restrictions.Gt("Age", 5)
            Restrictions.In("Name", new string[] { "Max", "Paddy" })))
</code></pre>
<p>
    Would have to be written as:
</p>
<pre><code>        .Add(Restrictions.Or(
            Restrictions.Where&lt;Cat&gt;(c =&gt; c.Age &gt; 5)
            Restrictions.On&lt;Cat&gt;(c =&gt; c.Name).IsIn(new string[] { "Max", "Paddy" })))
</code></pre>
<p>&nbsp;</p>
<h4><a name="Associations"></a>Associations</h4>
<p>
    QueryOver can navigate association paths using JoinQueryOver() (analagous to ICriteria.CreateCriteria() to create sub-criteria).
</p>
<p>
    The factory method QuerOver&lt;T&gt;() on ISession returns an IQueryOver&lt;T&gt;.
    More accurately, it returns an IQueryOver&lt;T,T&gt; (which inherits from IQueryOver&lt;T&gt;).
</p>
<p>
    An IQueryOver has two types of interest; the root type (the type of entity that the query returns),
    and the type of the 'current' entity being queried.  For example, the following query uses
    a join to create a sub-QueryOver (analagous to creating sub-criteria in the ICriteria API):
</p>
<pre><code>IQueryOver&lt;Cat,Kitten&gt; catQuery =
    session.QueryOver&lt;Cat&gt;()
        .JoinQueryOver(c =&gt; c.Kittens)
            .Where(k =&gt; k.Name == "Tiddles");
</code></pre>
<p>
    The JoinQueryOver returns a new instance of the IQueryOver than has its root at the Kittens collection.
    The default type for restrictions is now Kitten (restricting on the name 'Tiddles' in the above example),
    while calling .List() will return an IList&lt;Cat&gt;.  The type IQueryOver&lt;Cat,Kitten&gt; inherits from IQueryOver&lt;Cat&gt;.
</p>
<p>
    Note, the overload for JoinQueryOver takes an IEnumerable&lt;T&gt;, and the C# compiler infers the type from that.
    If your collection type is not IEnumerable&lt;T&gt;, then you need to qualify the type of the sub-criteria:
</p>
<pre><code>IQueryOver&lt;Cat,Kitten&gt; catQuery =
    session.QueryOver&lt;Cat&gt;()
        .JoinQueryOver<span style="text-decoration: underline;">&lt;Kitten&gt;</span>(c =&gt; c.Kittens)
            .Where(k =&gt; k.Name == "Tiddles");
</code></pre>
<p>&nbsp;</p>
<p>
    The default join is an inner-join.  Each of the additional join types can be specified using
    the methods <code>.Inner, .Left, .Right,</code> or <code>.Full</code>.
    For example, to left outer-join on Kittens use:
</p>
<pre><code>IQueryOver&lt;Cat,Kitten&gt; catQuery =
    session.QueryOver&lt;Cat&gt;()
        .Left.JoinQueryOver(c =&gt; c.Kittens)
            .Where(k =&gt; k.Name == "Tiddles");
</code></pre>
<p>&nbsp;</p>
<h4><a name="Aliases"></a>Aliases</h4>
<p>
    In the traditional ICriteria interface aliases are assigned using 'magic strings', however their value
    does not correspond to a name in the object domain.  For example, when an alias is assigned using
    <code>.CreateAlias("Kitten", "kittenAlias")</code>, the string "kittenAlias" does not correspond
    to a property or class in the domain.
</p>
<p>
    In QueryOver, aliases are assigned using an empty variable.
    The variable can be declared anywhere (but should
    be empty/default at runtime).  The compiler can then check the syntax against the variable is
    used correctly, but at runtime the variable is not evaluated (it's just used as a placeholder for
    the alias).
</p>
<p>
    Each Lambda Expression function in QueryOver has a corresponding overload to allow use of aliases,
    and a .JoinAlias function to traverse associations using aliases without creating a sub-QueryOver.
</p>
<pre><code>Cat catAlias = null;
Kitten kittenAlias = null;

IQueryOver&lt;Cat,Cat&gt; catQuery =
    session.QueryOver&lt;Cat&gt;(() =&gt; catAlias)
        .JoinAlias(() =&gt; catAlias.Kittens, () =&gt; kittenAlias)
        .Where(() =&gt; catAlias.Age &gt; 5)
        .And(() =&gt; kittenAlias.Name == "Tiddles");
</code></pre>
<p>&nbsp;</p>
<h4><a name="Projections"></a>Projections</h4>
<p>
    Simple projections of the properties of the root type can be added using the <code>.Select</code> method
    which can take multiple Lambda Expression arguments:
</p>
<pre><code>IList selection =
    session.QueryOver&lt;Cat&gt;()
        .Select(
            c =&gt; c.Name,
            c =&gt; c.Age)
        .List&lt;object[]&gt;();
</code></pre>
<p>
    Because this query no longer returns a Cat, the return type must be explicitly specified.
    If a single property is projected, the return type can be specified using:
</p>
<pre><code>IList&lt;int&gt; ages =
    session.QueryOver&lt;Cat&gt;()
        .Select(c =&gt; c.Age)
        .List&lt;int&gt;();
</code></pre>
<p>
    However, if multiple properties are projected, then the returned list will contain
    object arrays, as per a projection
    in ICriteria.  This could be fed into an anonymous type using:
</p>
<pre><code>var catDetails =
    session.QueryOver&lt;Cat&gt;()
        .Select(
            c =&gt; c.Name,
            c =&gt; c.Age)
        .List&lt;object[]&gt;()
        .Select(properties =&gt; new {
            CatName = (string)properties[0],
            CatAge = (int)properties[1],
            });
            
Console.WriteLine(catDetails[0].CatName);
Console.WriteLine(catDetails[0].CatAge);
</code></pre>
<p>
    Note that the second <code>.Select</code> call in this example is an extension method on IEnumerable&lt;T&gt; supplied in System.Linq;
    it is not part of NHibernate.
</p>
<p>&nbsp;</p>
<p>
    QueryOver allows arbitrary IProjection to be added (allowing private properties to be projected).  The Projections factory
    class also has overloads to allow Lambda Expressions to be used:
</p>
<pre><code>IList selection =
    session.QueryOver&lt;Cat&gt;()
        .Select(Projections.ProjectionList()
            .Add(Projections.Property&lt;Cat&gt;(c =&gt; c.Name))
            .Add(Projections.Avg&lt;Cat&gt;(c =&gt; c.Age)))
        .List&lt;object[]&gt;();
</code></pre>
<p>&nbsp;</p>
<p>
    In addition there is an inline syntax for creating projection lists that does not require the explicit class qualification:
</p>
<pre><code>IList selection =
    session.QueryOver&lt;Cat&gt;()
        .SelectList(list =&gt; list
            .Select(c =&gt; c.Name)
            .SelectAvg(c =&gt; c.Age))
        .List&lt;object[]&gt;();
</code></pre>
<p>&nbsp;</p>
<p>
    Projections can also have arbitrary aliases assigned to them to allow result transformation.
    If there is a CatSummary DTO class defined as:
</p>
<pre><code>public class CatSummary
{
    public string Name { get; set; }
    public int AverageAge { get; set; }
}
</code></pre>
<p>
    ... then aliased projections can be used with the AliasToBean&lt;T&gt; transformer:
</p>
<pre><code>CatSummary summaryDto = null;
IList&lt;CatSummary&gt; catReport =
    session.QueryOver&lt;Cat&gt;()
        .SelectList(list =&gt; list
            .SelectGroup(c =&gt; c.Name).WithAlias(() =&gt; summaryDto.Name)
            .SelectAvg(c =&gt; c.Age).WithAlias(() =&gt; summaryDto.AverageAge))
        .TransformUsing(Transformers.AliasToBean&lt;CatSummary&gt;())
        .List&lt;CatSummary&gt;();
</code></pre>
<h4><a name="Subqueries"></a>Subqueries</h4>
<p>
    The Subqueries factory class has overloads to allow Lambda Expressions to express sub-query
    restrictions.  For example:
</p>
<pre><code>QueryOver&lt;Cat&gt; maximumAge =
    QueryOver.Of&lt;Cat&gt;()
        .SelectList(p =&gt; p.SelectMax(c =&gt; c.Age));

IList&lt;Cat&gt; oldestCats =
    session.QueryOver&lt;Cat&gt;()
        .Where(Subqueries.WhereProperty&lt;Cat&gt;(c =&gt; c.Age).Eq(maximumAge))
        .List();
</code></pre>
<p>&nbsp;</p>
<p>
    The inline syntax allows you to use subqueries without requalifying the type:
</p>
<pre><code>IList&lt;Cat&gt; oldestCats =
    session.QueryOver&lt;Cat&gt;()
        .WithSubquery.WhereProperty(c =&gt; c.Age).Eq(maximumAge)
        .List();
</code></pre>
<p>&nbsp;</p>
<p>
    There is an extension method <code>As()</code> on (a detached) QueryOver that allows you to cast it to any type.
    This is used in conjunction with the overloads <code>Where(), WhereAll(),</code> and <code>WhereSome()</code>
    to allow use of the built-in C# operators for comparison, so the above query can be written as:
</p>
<pre><code>IList&lt;Cat&gt; oldestCats =
    session.QueryOver&lt;Cat&gt;()
        .WithSubquery.Where(c =&gt; c.Age == maximumAge.As&lt;int&gt;())
        .List();
</code></pre>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[queryover in nh 3 0]]></post-name>
      <comments>
        <comment id="567" date-created="2009-12-18T01:25:12" date-modified="2009-12-18T01:25:12" approved="true" user-name="lefleau" user-url="http://nhforge.org/members/lefleau/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Nice post.
Where or when can we download NH 3.0 ?]]></content>
        </comment>
        <comment id="570" date-created="2009-12-18T09:22:30" date-modified="2009-12-18T09:22:30" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[leflaeu,

This is currently only in the trunk.  I think there might be an alpha release soon, but in the meantime your options are:

1.  Download the source and build it;
2.  Go to TeamCity, where the CI build outputs the binaries;
3.  Go to HornGet to get their latest binaries.

Cheers,
    Richard]]></content>
        </comment>
        <comment id="571" date-created="2009-12-18T09:28:01" date-modified="2009-12-18T09:28:01" approved="true" user-name="Omer Mor" user-url="http://">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Great stuff!

Regarding the alias API:
would it be possible to use:
   session.QueryOver(ref catAlias)
instead of
   session.QueryOver<Cat>(() => catAlias)
?]]></content>
        </comment>
        <comment id="573" date-created="2009-12-18T15:08:07" date-modified="2009-12-18T15:08:07" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Omer,

I don't think so.  The API relies on using Lambda Expression syntax which compiles a LINQ expression that can be examined at runtime.

A regular variable (in this example passed as a reference) would not allow runtime examination of the variable name.

Cheers,
    Richard
]]></content>
        </comment>
        <comment id="578" date-created="2009-12-21T10:51:06" date-modified="2009-12-21T10:51:06" approved="true" user-name="desfen" user-url="http://nhforge.org/members/desfen/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Richard, exciting stuff! These will be welcome changes but please don't forget about us poor VB.NET developers.

I know most "real" programmers don't even consider it but is there and quite popular too.

What is my gripe ? Well, if you translate the first query to VB.NET it goes like this:

Dim cats As IList(Of Cat) = _
    session.QueryOver(Of Cat)()

(leaving out the Where stuff for now)
This is doesn't quite "pronounce" easily. In fact I thought
the generic <> symbols were pronounced "of" by the c#
guys as well.

It becomes even worse with the second query (assuming that isn't a typo):

Dim query as QueryOver(Of Cat) = _
    QueryOver.Of(Of Cat)()

(again leaving out the where stuff)

Thanks for your (and the other NH developers') consideration

Sven]]></content>
        </comment>
        <comment id="579" date-created="2009-12-21T12:23:45" date-modified="2009-12-21T12:23:45" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Sven,

I agree that this is slightly bizarre use of English, and I must admit I hadn't considered VB.Net syntax (I've never used it personally).

C# programmers do tend to use the term "Of" conversationally too ... but we don't usually let it get in the way of allowing something like:  DetachedCriteria.For<Person>(), or session.Get<Person>(3)

I think the use of generics these days (especially in fluent frameworks) goes way beyond the original intentions of the feature, so I suspect a certain leeway is often allowed.

It's hard to please everyone, but I'm open to suggestions.  Do you have an alternative proposal for the syntax?

Cheers,
    Richard
]]></content>
        </comment>
        <comment id="580" date-created="2009-12-21T12:57:37" date-modified="2009-12-21T12:57:37" approved="true" user-name="Sven Devriese" user-url="http://nhforge.org/members/desfen/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Richard, thanks for your consideration.
How very smart of you to reply with a question :-)

I'll be the first to admit that the "Of" syntax in VB.NET
(almost) only makes sense in the classic generic collection scenario i.e. Generic.IList(Of Customer)
IMHO the VB.NET compiler team dropped the ball on that choice. As you wrote, generics these days is about much more than strongly typed collections.

So we could wait for the VB.NET compiler team to come to their senses and follow the C# team's lead, as they have done with Nullables. Originally the syntax was thus:

Dim a as Nullable(Of DateTime)

whereas as of VB9 we can write this:

Dim a as DateTime?

So maybe in VB.NExT the following syntax would be valid:

Dim query As QueryOver<Cat> = _
   QueryOver.Of<Cat>()

However, I'm not holding my breath so my personal suggestion for NH's new QueryOver API is to drop the
"Over" in QueryOver because it's that preposition that's
conflicting with "Of". 

Of course, I'm not holding my breath either in anticipation of you guys actually making that change but then again it's Christmas. Why not believe in Santa ? ;-)

Cheers

Sven]]></content>
        </comment>
        <comment id="581" date-created="2009-12-21T13:37:26" date-modified="2009-12-21T13:37:26" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Sven,

Thanks for the suggestion.  Unfortunately (or unsurprisingly) we already have a CreateQuery() and an IQuery for HQL in NHibernate.  So we can't change QueryOver (and IQueryOver) to Query & IQuery respectively.

This is why we originally had to come up with something else (i.e., QueryOver) in the first place.

While I suspect you're right that it's unlikely to change, you could always poll the user group for a more general response.  After all, NHibernate is owned by the community; so I'd feel duty-bound to change it if there was a strong response.

Have a great Christmas, and thanks again.
    Richard
]]></content>
        </comment>
        <comment id="584" date-created="2009-12-23T02:11:46" date-modified="2009-12-23T02:11:46" approved="true" user-name="Dmitry" user-url="http://nhforge.org/members/Dmitry/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Can you have complex Where conditions such as

.Where<Person>(p => p.Name.StartsWith("Smith"))

or

.Where<Person>(p => p.Id == 1 || p.Id == 2)
]]></content>
        </comment>
        <comment id="585" date-created="2009-12-23T15:35:28" date-modified="2009-12-23T15:35:28" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Dmitry,

The first example requires use of a 'like' SQL expression, but you cannot use the StartsWith() method.  This would be written as:

.WhereRestrictionOn(p => p.Name).IsLike("Smith%")

or

.Where(Restrictions.On<Person>(p => p.Name).IsLike("Smith%"))


The second example looks fine.

Regards,
    Richard
]]></content>
        </comment>
        <comment id="592" date-created="2010-01-06T14:56:58" date-modified="2010-01-06T14:56:58" approved="true" user-name="Buthrakaur" user-url="http://nhforge.org/members/Buthrakaur/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[aggregates aren't supported or do I miss something? I'd really appreciate standard aggregate functions support...]]></content>
        </comment>
        <comment id="593" date-created="2010-01-06T17:13:30" date-modified="2010-01-06T17:13:30" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi,

You can do something like the following (in a similar fashion to ICriteria):

session.QueryOver<Person>()
    .Select(Projections.Avg<person>(p => p.Age))
    .SingleOrDefault<int>()

.. or using inline syntax ....

session.QueryOver<Person>()
    .SelectList
        .SelectAvg(p => p.Age)
        .EndSelect
    .SingleOrDefault<int>()

Regards,
    Richard
]]></content>
        </comment>
        <comment id="594" date-created="2010-01-07T11:19:02" date-modified="2010-01-07T11:19:02" approved="true" user-name="Buthrakaur" user-url="http://nhforge.org/members/Buthrakaur/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[great.. thanks a lot]]></content>
        </comment>
        <comment id="596" date-created="2010-01-16T16:33:24" date-modified="2010-01-16T16:33:24" approved="true" user-name="maciejk" user-url="http://nhforge.org/members/maciejk/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Looks great. However, SelectList / EndSelect syntax is a bit awkward to me. Why not use nested closure instead? 

Like:
session.QueryOver<Cat>()
     .SelectList(list =>
                      {
                              list.Select(c => c.Name);
                              list.SelectAvg(c => c.Age);
                       });]]></content>
        </comment>
        <comment id="597" date-created="2010-01-16T20:58:30" date-modified="2010-01-16T20:58:30" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[ I like that suggestion.  Shouldn't be too much work either ... I'll see if I can squeeze it in next week.

Cheers!]]></content>
        </comment>
        <comment id="600" date-created="2010-01-24T22:52:14" date-modified="2010-01-24T22:52:14" approved="true" user-name="wanda" user-url="http://nhforge.org/members/wanda/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Well documented and explained code. Thanks.]]></content>
        </comment>
        <comment id="602" date-created="2010-01-29T17:16:55" date-modified="2010-01-29T17:16:55" approved="true" user-name="jwdavidson" user-url="http://">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[@maciejk, @Richard Brown

I just noticed this post and saw the proposed syntax. C# has support for a lambda expression tree as is proposed, but that is not yet available for VB users. 

The original SelectList / EndSelect syntax would however work for both languages

Sometimes VB is not a choice, but a requirement! Hope you can reconsider this.]]></content>
        </comment>
        <comment id="604" date-created="2010-02-05T09:23:30" date-modified="2010-02-05T09:23:30" approved="true" user-name="whut" user-url="http://dotnet.uni.lodz.pl/whut">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[As I understand it, QueryOver is an overlay on new possibilities which you introduced to ICriteria API, in such a way that you don't even need to use

1) session.QueryOver<Cat>().Where(c => c.Name = "Kitty"),

but end up with using

2) session.CreateCriteria<Cat>().And(Restriction.Where(c => c.Name = "Kitty").

If I'm true, I think that the name should reflect this, and be something like:

3) session.CreateQueryCriteria<Cat>()

Or better yet, IMO!, you should just make all possibilities available through

4)  session.CreateCriteria<Cat>().

This way we will have all the goods: familiar, old syntax and new powerful possibilities without adding something that is yet another way of querying and that looks almost exactly (!) like Linq:

5) session.Query<Cat>().Where(c => c.Name = "Kitty")

I believe that writing like in 2) is not that harder than in 1) that it justify itself to create a new API. And for those that will want that kind of API will have Linq.

And two more things
1. Why you use at the same time implicit and explicit interface implementation in the same classes in QueryOver.cs?
2. This one is completely irrelevant and a matter of taste:) . You have:

Restriction.On<Cat>.IsLike("%anna%")

Maybe create something like:

Restriction.Like<Cat>(c => c.Name, "%anna%)
]]></content>
        </comment>
        <comment id="605" date-created="2010-02-05T09:25:16" date-modified="2010-02-05T09:25:16" approved="true" user-name="whut" user-url="http://nhforge.org/members/whut/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[It's really nice piece of work, btw.]]></content>
        </comment>
        <comment id="606" date-created="2010-02-07T10:40:29" date-modified="2010-02-07T10:40:29" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi jwdavidson,

Unfortunately I've never used VB.Net, so I'm unable to confirm which parts of the QueryOver API work with it.  There has also been discussions in the development group about what can/can't be supported with VB.Net:

http://groups.google.com/group/nhibernate-development/msg/5a67ddd9dc33b3b3?

As mentioned in the previous comments, if this becomes a highly voted for issue by the community, then I'm sure we'll readdress the problem.

Regards,
    Richard]]></content>
        </comment>
        <comment id="607" date-created="2010-02-07T10:53:53" date-modified="2010-02-07T10:53:53" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Rafal,

Regarding points 1-4:

The QueryOver does not return ICriteria, but a typed interface (IQueryOver<T,U>).

The overload ISession.CreateCriteria<T>() already exists, and the decision to make the new API QueryOver was taken to specifically avoid clashes with the existing syntax.

While you can mix the new Restrictions overloads with the old ICriteria interface (as per point 1 & 2), you lose the implicit type that comes from the new interface.  Point 2 actually has to be written as:

session.CreateCriteria<Cat>().And(Restriction.Where<Cat>(c => c.Name = "Kitty"))

(Note the extra qualification of 'Cat' that is not required with IQueryOver).



On the second subject, point 1;  the explicit interface implementation is used because we have two overloads that only differ in return type (one returns QueryOver, the other returns IQueryOver).


And finally, I agree the last point is a matter of taste.  The inline restrictions become much easier to implement when each combination is not a separate overload.

Hope all that helps.

Richard]]></content>
        </comment>
        <comment id="609" date-created="2010-02-12T11:01:49" date-modified="2010-02-12T11:01:49" approved="true" user-name="Buthrakaur" user-url="http://nhforge.org/members/Buthrakaur/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Is there any simple method how to set projections on QueryOver queries? I need to get count of entities returned by a QueryOver query and didn't find other method than using underlying CriteriaAPI like this:

			var qry = customerRepo.QueryOver()
				.WhereRestrictionOn(c => c.Name).IsInsensitiveLike(query.Name, MatchMode.Start)
				.AndRestrictionOn(c => c.Address.City).IsInsensitiveLike(query.City, MatchMode.Start);
			var countCrit = (ICriteria)qry.UnderlyingCriteria.Clone();
			countCrit.SetProjection(Projections.RowCount());
			res.TotalItemsCount = Convert.ToInt32(countCrit.UniqueResult());
]]></content>
        </comment>
        <comment id="610" date-created="2010-02-12T12:23:43" date-modified="2010-02-12T12:23:43" approved="true" user-name="Buthrakaur" user-url="http://nhforge.org/members/Buthrakaur/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[sorry for my blindness :)

qry.Select(Projections.RowCount()).List<int>().FirstOrDefault()]]></content>
        </comment>
        <comment id="617" date-created="2010-03-01T16:43:02" date-modified="2010-03-01T16:43:02" approved="true" user-name="SynC" user-url="http://nhforge.org/members/SynC/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi Richard, help please.

1. Can be done something similar:

session.QueryOver<Order>()
    .SelectList(list =>
                     {
                             list.Select(c => c.Price * c.Count);
                      }); ?

2. What about using anonymous types for projecting?]]></content>
        </comment>
        <comment id="621" date-created="2010-03-06T23:25:58" date-modified="2010-03-06T23:25:58" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi SynC,

1.  QueryOver is built on top of the ICriteria API, and I'm not sure you can do that projection in the ICriteria API (I could be wrong though);

2.  Fabio suggested the same thing.  I tried projecting directly into anonymous types, something like:

.Select(o => new { o.Price, o.Count});

I couldn't get it to work;  I can't remember the exact problem I had, but it was something to do with the parameters to the anonymous function.  Also, I'm not sure if the syntax would execute the query at this point, or still return an IQueryOver (to then call List(), or SingleOrDefault().)

I might try again sometime when I've got some spare time.

Oh, and patches are always welcome too.  ;-)

Richard]]></content>
        </comment>
        <comment id="647" date-created="2010-06-28T08:58:26" date-modified="2010-06-28T08:58:26" approved="true" user-name="technology essays" user-url="http://www.mightystudents.com/catalog/technology">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[@maciejk: Thanks for the suggestion. I did play with the code you shared. I was able to run it flawlessly. Thanks again]]></content>
        </comment>
        <comment id="648" date-created="2010-06-28T10:49:18" date-modified="2010-06-28T10:49:18" approved="true" user-name="Richard Brown" user-url="http://broloco.blogspot.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Note, the syntax changed slightly recently - it's now .SelectList(list => list...)

(to avoid clashing with intellisense)]]></content>
        </comment>
        <comment id="758" date-created="2010-12-29T21:47:52" date-modified="2010-12-29T21:47:52" approved="true" user-name="gt124" user-url="http://nhforge.org/members/gt124/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[What an awesome feature, I don't have performance issues yet, so I basically used to use Criteria for everything and Ayende's filter pattern all over the place.

However, I just love queryover syntax and I need more documentation please. It was a supreme pain figuring out how to do a "NOT IN" yesterday, if you are looking, use a WhereRestrictionOn instead of where.

Yes, I guess I should write it myself, but with a job and two kids, I'm hoping one of the younger super brains can do it for me :)

Have a heart!]]></content>
        </comment>
        <comment id="762" date-created="2011-01-13T18:42:32" date-modified="2011-01-13T18:42:32" approved="true" user-name="James K." user-url="http://nhforge.org/members/danleyvilla/default.aspx">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[I've tried looking through the source but it doesn't really explains it fully to me.

How do they make them type safe, at compile time, without the need for any proxy classes that extends them?

I would like to "copy" this behavior but for that I need some basic understanding of the concept, any pointers to documentation on the subject is also welcome.

<a href="http://www.eurodebt.com/">debt solutions</a>
]]></content>
        </comment>
        <comment id="764" date-created="2011-01-16T11:15:08" date-modified="2011-01-16T11:15:08" approved="true" user-name="Rafał Kłys" user-url="http://dotnet.uni.lodz.pl/whut/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[For a long time I didn't understand the need for QueryOver. But lately I used for the first time NH LINQ, and after some time I thought:

Well, Linq is nice, but I don't like the transparent translation from database query into in-memory query. I would like something like ICriteria, but strongly typed. Oh, there is such thing, QueryOver!

Thanks!]]></content>
        </comment>
        <comment id="805" date-created="2011-03-01T15:10:24" date-modified="2011-03-01T15:10:24" approved="true" user-name="Hainesy" user-url="http://">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi

I know this is an old post but this took me ages to work out... your two examples showing projections with Avg for cat age, the selects should be SelectGroup, as shown in your AliasToBean example.]]></content>
        </comment>
        <comment id="806" date-created="2011-03-01T15:21:27" date-modified="2011-03-01T15:21:27" approved="true" user-name="Hainesy" user-url="http://">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi

I have a problem using Cacheable() after .TransformUsing(Transformers.AliasToBean<T>())

I get the error:

Unable to cast object of type '...' to type 'System.Object[]'.

Seems that cacheable doesn't work with the bean transformation?]]></content>
        </comment>
        <comment id="988" date-created="2011-09-30T11:43:40" date-modified="2011-09-30T11:43:40" approved="true" user-name="Rob Benwell" user-url="http://twitter.com/#!/robbenwell">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[You covered this topic well. It helps a lot of newbies out there. Looking for more....]]></content>
        </comment>
        <comment id="1012" date-created="2012-01-13T12:59:09" date-modified="2012-01-13T12:59:09" approved="true" user-name="tory burch outlet" user-url="http://www.toryburchsupermall.com/">
          <title type="text"><![CDATA[re: QueryOver in NH 3.0]]></title>
          <content type="text"><![CDATA[Hi! I found your blog on AOL.It’s really comprehensive and it helped me a lot. Continue the good work!]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="568" date-created="2009-12-18T02:22:27" date-modified="2009-12-18T02:22:27" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2009/12/17/queryover-in-nh-3-0.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
        <trackback id="715" date-created="2010-10-05T07:56:08" date-modified="2010-10-05T07:56:08" approved="true" url="http://weblogs.asp.net/thangchung/archive/2010/10/05/nhibernate-3-and-autofac-can-go-together-part-1.aspx">
          <title type="text"><![CDATA[NHibernate 3 and Autofac, can go together? (part 1)]]></title>
        </trackback>
        <trackback id="735" date-created="2010-12-05T02:07:10" date-modified="2010-12-05T02:07:10" approved="true" url="http://zvolkov.com/blog/post/2010/12/04/Whats-new-in-NHibernate-30-GA.aspx">
          <title type="text"><![CDATA[What's new in NHibernate 3.0 GA]]></title>
        </trackback>
        <trackback id="765" date-created="2011-01-17T20:27:20" date-modified="2011-01-17T20:27:20" approved="true" url="http://www.pluralsight-training.net/community/blogs/pluralcast/archive/2011/01/17/pluralcast-34-nhibernate-3-with-james-kovacs.aspx">
          <title type="text"><![CDATA[Pluralcast 34 : NHibernate 3 with James Kovacs]]></title>
        </trackback>
        <trackback id="1006" date-created="2011-12-01T13:02:16" date-modified="2011-12-01T13:02:16" approved="true" url="http://www.sharpcoder.co.uk/post/2011/11/30/Reading-from-the-database-with-NHibernate.aspx">
          <title type="text"><![CDATA[Reading from the database with NHibernate]]></title>
        </trackback>
        <trackback id="1023" date-created="2014-09-08T03:50:42" date-modified="2014-09-08T03:50:42" approved="true" url="http://nicic.gov/assets/externallink.aspx?url=http://www.gamatecsudamericana.com.ar">
          <title type="text"><![CDATA[sillas de oficina]]></title>
        </trackback>
        <trackback id="1029" date-created="2014-09-10T12:21:59" date-modified="2014-09-10T12:21:59" approved="true" url="http://83.133.97.74/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fva.mu%2FAM7dJ%3Ewhere+is+moving+services+fayette+county+pennsylvania+marriage%3C%2Fa%3E">
          <title type="text"><![CDATA[whose would moving services fayette county pennsylvania map]]></title>
        </trackback>
        <trackback id="1076" date-created="2014-09-20T08:15:13" date-modified="2014-09-20T08:15:13" approved="true" url="http://widhost.net/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.tokofurnitureindonesia.com%2Fmebel-jepara%2F%3EMebel+Jepara%3C%2Fa%3E">
          <title type="text"><![CDATA[Furniture Jepara]]></title>
        </trackback>
        <trackback id="1077" date-created="2014-09-20T12:55:45" date-modified="2014-09-20T12:55:45" approved="true" url="http://secure66.elinuxservers.com/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.tokofurnitureindonesia.com%2Fmebel-jepara%2F%3EFurniture+Jepara%3C%2Fa%3E">
          <title type="text"><![CDATA[Furniture Jepara]]></title>
        </trackback>
        <trackback id="1082" date-created="2014-09-21T15:10:27" date-modified="2014-09-21T15:10:27" approved="true" url="http://200.61.250.131/www/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.tokofurnitureindonesia.com%2Fmebel-jepara%2F%3EMebel+Jepara%3C%2Fa%3E">
          <title type="text"><![CDATA[Mebel Jepara]]></title>
        </trackback>
        <trackback id="1083" date-created="2014-09-21T19:34:03" date-modified="2014-09-21T19:34:03" approved="true" url="http://www.aps.sn/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.tokofurnitureindonesia.com%2Fmebel-jepara%2F%3EMebel+Jepara%3C%2Fa%3E">
          <title type="text"><![CDATA[Mebel Jepara]]></title>
        </trackback>
        <trackback id="1086" date-created="2014-09-22T23:01:17" date-modified="2014-09-22T23:01:17" approved="true" url="http://www.wesele.de/cgi-bin/info.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.tokofurnitureindonesia.com%2Fmebel-jepara%2F%3EMebel+Jepara%3C%2Fa%3E">
          <title type="text"><![CDATA[Mebel Jepara]]></title>
        </trackback>
        <trackback id="1092" date-created="2014-09-25T10:37:06" date-modified="2014-09-25T10:37:06" approved="true" url="http://mutantsgen.livejournal.com.braginclub.org/1.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.tokofurnitureindonesia.com%2Fmebel-jepara%2F%3EMebel+Jepara%3C%2Fa%3E">
          <title type="text"><![CDATA[Mebel Jepara]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2221" date-created="2008-09-05T11:09:25" date-modified="2014-08-18T07:44:21" approved="true" email="fluke_fan@hotmail.com">
          <title type="text"><![CDATA[FlukeFan]]></title>
        </author>
      </authors>
    </post>
    <post id="576" date-created="2009-12-18T15:08:00" date-modified="2009-12-18T15:08:00" approved="false" post-url="/blogs/nhibernate/archive/2009/12/18/state-or-strategy-pattern-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="7">
      <title type="text"><![CDATA[State (or Strategy) Pattern with NHibernate]]></title>
      <content type="text"><![CDATA[<p>The State/Strategy patterns are among the simplest design patterns, yet they can help a lot when designing maintainable applications.</p>
<p>If you've never read about them, it's a good time to do so: <a href="http://en.wikipedia.org/wiki/State_pattern">State Pattern 1</a>, <a href="http://www.dofactory.com/patterns/PatternState.aspx">State Pattern 2</a>, <a href="http://en.wikipedia.org/wiki/Strategy_pattern">Strategy Pattern 1</a>, <a href="http://www.dofactory.com/patterns/PatternStrategy.aspx">Strategy Pattern 2</a>.</p>
<p>Both patterns are pretty much the same, with the small difference of the State usually knowing its context and being able to swap itself with a different state.</p>
<p>Now, how can we take advantage of this with NHibernate?</p>]]></content>
      <post-name type="text"><![CDATA[state or strategy pattern with nhibernate]]></post-name>
      <authors>
        <author id="4430" date-created="2009-10-28T17:56:49" date-modified="2014-08-19T12:35:14" approved="true" email="diego@mijelshon.com.ar">
          <title type="text"><![CDATA[diegose]]></title>
        </author>
      </authors>
    </post>
    <post id="616" date-created="2010-02-25T13:23:00" date-modified="2010-02-25T13:23:00" approved="true" post-url="/blogs/nhibernate/archive/2010/02/25/db2hbm-convert-dbschema-to-hbm.aspx" type="normal" hasexcerpt="false" views="6763">
      <title type="text"><![CDATA[Db2hbm: convert db schema to hbm]]></title>
      <content type="text"><![CDATA[<p><a href="/media/p/615.aspx" target="_blank">Here you can find</a> a reverse engineering tool, <a href="/wikis/howtonh/how-to-use-db2hbm.aspx">and a documentation on how to use it</a>. At present only MSSQL is fully supported, but should be easy to provide strategies for other DB. The project is open source and can be found <a href="http://sourceforge.net/projects/nhcontrib/" target="_blank">here</a> in the trunk.This tool does not generate classes, to do so you can use <a href="/media/p/546.aspx" target="_blank">hbm2net</a>. The generated files are a good starting point if you have to start with NHibernate and legacy DBs.</p>]]></content>
      <post-name type="text"><![CDATA[db2hbm convert dbschema to hbm]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1125" />
      </categories>
      <trackbacks>
        <trackback id="618" date-created="2010-03-02T06:59:41" date-modified="2010-03-02T06:59:41" approved="true" url="http://www.ubervu.com/conversations/nhforge.org/blogs/nhibernate/archive/2010/02/25/db2hbm-convert-dbschema-to-hbm.aspx">
          <title type="text"><![CDATA[Social comments and analytics for this post]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="625" date-created="2010-04-22T17:08:00" date-modified="2010-04-22T17:08:00" approved="true" post-url="/blogs/nhibernate/archive/2010/04/22/some-progress-with-hqlintellisense.aspx" type="normal" hasexcerpt="false" views="3135">
      <title type="text"><![CDATA[Some Progress with HqlIntellisense…]]></title>
      <content type="text"><![CDATA[<p>There is some interesting progress with my project <a href="http://sourceforge.net/projects/faticalabshqled/" target="_blank">Fatica.Labs.HqlEditor</a>. I just want to share some screenshot:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s5_5F00_08413719.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s5" alt="s5" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s5_5F00_thumb_5F00_65E8DFF8.png" border="0" height="356" width="490" /></a> </p>
<p>Well, it is growing to be a real tool, and in my idea would became a sort of test bed in which the user can add or modify mapping, try the queries, change the config, export a database script, reverse engineering and so on. Actually all the low level tool to achieve that are available.</p>
<p>Ok, let&rsquo;s explain the layout:</p>
<ol>
<li>The document area, here we have mapping/config/hql <b>all</b> with <b>intellisense</b>. In the screenshot the code completion for an Hql is shown. In future maybe I will be able to insert a T4 editor for the hbm2net templates. </li>
<li>The project area: here we have a bounch of file that are representing our testing project: mapping, configurations, assemblies and so on. I have use the MSbuild object as a backend for the project, because in the near future I would like to use it to really build some artifacts using <a href="/media/p/546.aspx" target="_blank">hbm2net</a> and <a href="/media/p/615.aspx" target="_blank">db2hbm</a>. </li>
<li>Here is the SQL preview of the query in editing. Now the view is showing an error because the query is incomplete. </li>
<li>The funny log, a graphical appender for <a href="http://logging.apache.org/log4net/index.html" target="_blank">log4net</a> :-) </li>
</ol>
<p>Some more words about the project itself: the testing environment is hosted in a separate appdomain, this will allow us to:</p>
<ul>
<li>Modify the mapping runtime generating new version of the assembly </li>
<li>Testing production assemblies built with legacy nh versions ( well, not so legacy, starting from 2.xxx ) </li>
</ul>
<p>Let&rsquo;s have another screenshot, showing a real SQL preview:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s7_5F00_40BB6FBF.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s7" alt="s7" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s7_5F00_thumb_5F00_57F64E63.png" border="0" height="322" width="509" /></a> </p>
<p>Next step is to produce the query results in some sort of usable representation ( I need to push the data across two app domain ) so I would probably use some JSON serialization and then display the JSON raw data with some readable formatting.</p>
<p>The project is not yet released, please treat it as a CTP ;) anyway, the svn repository is here:</p>
<p><code><b><a href="https://faticalabshqled.svn.sourceforge.net/svnroot/faticalabshqled">https://faticalabshqled.svn.sourceforge.net/svnroot/faticalabshqled</a></b></code></p>
<p><code><b>Please comments are welcome in the <a href="http://www.felicepollano.com/2010/04/22/SomeProgressWithHqlIntellisense.aspx" target="_blank">original blog post</a>.</b></code></p>]]></content>
      <post-name type="text"><![CDATA[some progress with hqlintellisense]]></post-name>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="628" date-created="2010-04-25T20:43:00" date-modified="2010-04-25T20:43:00" approved="true" post-url="/blogs/nhibernate/archive/2010/04/25/first-three-nhibernate-quickstart-tutorials-available.aspx" type="normal" hasexcerpt="false" views="108136">
      <title type="text"><![CDATA[First three NHibernate quickstart tutorials available]]></title>
      <content type="text"><![CDATA[<p>As some of you may already know, I've begun work on a series of NHibernate tutorials as the first steps in a larger effort to help update the NHibernate reference documentation.</p>
<p>For many users, starting out with NHibernate is less of a learning curve and more of a learning cliff - so the intent with this first article series is to gradually expose the user to the features of NHibernate, from basic mapping through advanced techniques.</p>
<p>A couple of themes I am working to maintain through the tutorial series include not throwing too many new concepts in at once, and to keep the focus on the ORM side of the application and not get lost in the details of user interface implementation (although I plan on doing an MVC example in a later tutorial).&nbsp; Another key part is that through the initial series of tutorials, I'll be building on a common frame of reference that can be used to better illustrate examples as&nbsp;I move from the tutorial portion and onto the FAQ/How-To and reference sections.</p>
<p>My current plan is to publish a new segment each week for review, so any feedback or technical corrections are greatly appreciated!</p>
<p>You can find the first three tutorials at these links:</p>
<p><strong><a href="http://docs.google.com/Doc?docid=0AUP-rKyyUMKhZGczejdxeHZfOGMydHNqdGc0&amp;hl=en" title="Hello NHibernate! - Quickstart with NHibernate (Part 1)">Hello NHibernate! - Quickstart with NHibernate (Part 1)</a></strong></p>
<p><a href="http://docs.google.com/Doc?docid=0AUP-rKyyUMKhZGczejdxeHZfMTVjMnBqYjVnNw&amp;hl=en" title="Implementing a Repository with NHibernate - QuickStart with NHibernate (Part 2)">Implementing a Repository with NHibernate - QuickStart with NHibernate (Part 2)</a></p>
<p><a href="http://docs.google.com/Doc?docid=0AUP-rKyyUMKhZGczejdxeHZfMjJmM3c3M3Bnbg&amp;hl=en" title="Mapping Object Relationships - QuickStart with NHibernate (Part 3)">Mapping Object Relationships - QuickStart with NHibernate (Part 3)</a></p>
<p><strong><span style="font-family: Calibri; font-size: small;"></span></strong>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[first three nhibernate quickstart tutorials available]]></post-name>
      <authors>
        <author id="9306" date-created="2010-04-07T12:01:07" date-modified="2010-04-07T12:01:07" approved="true" email="rbpalmer_nrt@hotmail.com">
          <title type="text"><![CDATA[BobPalmer]]></title>
        </author>
      </authors>
    </post>
    <post id="634" date-created="2010-05-15T04:12:00" date-modified="2010-05-15T04:12:00" approved="true" post-url="/blogs/nhibernate/archive/2010/05/14/two-new-nhibernate-quickstart-tutorials.aspx" type="normal" hasexcerpt="false" views="7756">
      <title type="text"><![CDATA[Two new NHibernate Quickstart Tutorials]]></title>
      <content type="text"><![CDATA[<p>I recently put two new tutorials up in Google Docs - as always, feedback and any technical suggestions, etc. are greatly appreciated!</p>
<p><strong><a href="http://docs.google.com/Doc?docid=0AUP-rKyyUMKhZGczejdxeHZfMjRmM2NoMnJmNw&amp;hl=en" title="Working with Primary Keys and Generators - Quickstart with NHibernate (Part 4)">Working with Primary Keys and Generators - Quickstart with NHibernate (Part 4)</a></strong></p>
<p><strong><a href="http://docs.google.com/Doc?docid=0AUP-rKyyUMKhZGczejdxeHZfMjZkdjd3cjJnMg&amp;hl=en" title="Working with Many to Many relationships in NHibernate">Working with Many to Many relationships in NHibernate</a></strong></p>
<p>-Bob</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[two new nhibernate quickstart tutorials]]></post-name>
      <comments>
        <comment id="707" date-created="2010-08-13T01:24:39" date-modified="2010-08-13T01:24:39" approved="true" user-name="testmon77" user-url="http://nhforge.org/members/testmon77/default.aspx">
          <title type="text"><![CDATA[re: Two new NHibernate Quickstart Tutorials]]></title>
          <content type="text"><![CDATA[Part 4: Interesting! we don't need to call the method ProductKey.Generate(NHibernate.Engine.ISessionImplementor session, object obj) ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="9306" date-created="2010-04-07T12:01:07" date-modified="2010-04-07T12:01:07" approved="true" email="rbpalmer_nrt@hotmail.com">
          <title type="text"><![CDATA[BobPalmer]]></title>
        </author>
      </authors>
    </post>
    <post id="635" date-created="2010-05-15T20:49:53" date-modified="2010-05-15T20:49:53" approved="true" post-url="/blogs/nhibernate/archive/2010/05/15/not-so-hidden-gems-of-nhibernate-formula-discriminators.aspx" type="normal" hasexcerpt="false" views="8919">
      <title type="text"><![CDATA[Not So Hidden Gems of NHibernate – Formula Discriminators]]></title>
      <content type="text"><![CDATA[<p>A friend of mine, <a href="http://www.cprieto.com/">Cristian Prieto</a>, told me that he didn’t know how to do mapping of some entities to (in his terms) an evil legacy database. </p>  <p>There were two entities: <strong>Advertiser </strong>and <strong>Affiliate. </strong>As I said, this was a crazy legacy database. Both shares the same table with only one difference: If an entity is <strong>Affiliate</strong>, then it’s <strong>affiliate_id </strong>column will have a value, otherwise, a non-empty <strong>advertiser_id</strong> means it’s an Advertiser. Both cannot be the same at the same time.</p>  <p>Having gone through <strong>NHibernate code</strong> a while ago, I remember being able to discriminate on an expression (or in NH terms: Formula). I wasn’t sure about it, but Cristian verified that there is such thing that exists, and you can use it for such thing.</p>  <p>Here is the description of <strong>formula discriminator </strong>from <a href="http://www.nhforge.org/doc/nh/en/index.html#mapping-declaration-discriminator">the documentation</a>.</p>  <pre class="brush: xml;">&lt;discriminator
        column=&quot;discriminator_column&quot;  
        type=&quot;discriminator_type&quot;      
        force=&quot;true|false&quot;             
        insert=&quot;true|false&quot;            
        formula=&quot;arbitrary SQL expression&quot;
/&gt;</pre>

<p><em><tt>formula</tt> (optional) <strong>an arbitrary SQL expression</strong> that is executed when a type has to be evaluated. Allows content-based discrimination</em></p>

<p>Bingo! “an arbitrary sql expression” is just what we wanted.</p>

<p>Going back to Cristian’s problem, we can now use this:</p>

<pre class="brush: xml;">&lt;discriminator 
        type=&quot;Int32&quot; 
        formula=&quot;(case when not affiliate_id is null then 0 else 1 end)&quot;
/&gt;</pre>
The rest is left as an exercise for the reader (I always wanted to say this!) 

]]></content>
      <post-name type="text"><![CDATA[not so hidden gems of nhibernate formula discriminators]]></post-name>
      <comments>
        <comment id="642" date-created="2010-06-03T18:32:32" date-modified="2010-06-03T18:32:32" approved="true" user-name="Hans Torm" user-url="http://nhforge.org/members/hfztt/default.aspx">
          <title type="text"><![CDATA[re: Not So Hidden Gems of NHibernate – Formula Discriminators]]></title>
          <content type="text"><![CDATA[I had to do the same when mapping to our legacy database. Only I had to do a select from another table in the case statement to get the info needed for the discriminator.

I was impressed how easy it actually was to get working painlessly in NHibernate though.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2106" date-created="2008-08-29T16:26:51" date-modified="2010-07-28T22:14:11" approved="true" email="tehlike@gmail.com">
          <title type="text"><![CDATA[tehlike]]></title>
        </author>
      </authors>
    </post>
    <post id="637" date-created="2010-05-19T15:29:00" date-modified="2010-05-19T15:29:00" approved="true" post-url="/blogs/nhibernate/archive/2010/05/19/nhibernate-workbench.aspx" type="normal" hasexcerpt="false" views="11568">
      <title type="text"><![CDATA[NHibernate Workbench]]></title>
      <content type="text"><![CDATA[<p align="justify">In the spirit of &ldquo;<i>Release early. Release often. And listen to your customers</i>&rdquo; ( cit. ), even if not so early in term of time since the <a href="http://www.felicepollano.com/2010/04/22/SomeProgressWithHqlIntellisense.aspx">preview</a>, I decided to <a href="http://sourceforge.net/projects/faticalabshqled/files/">release a first drop</a> of the &ldquo;HQL Intellisense thing&rdquo; I&rsquo;m working on. The current version is just able to load an existing mapping assembly, a configuration, help us to write an hql query, submit it to NH and see some results. Here an overall screenshot: </p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s1_5F00_6D3E666D.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s1" alt="s1" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s1_5F00_thumb_5F00_55E33C2F.png" border="0" width="580" height="407" /></a></p>
<p align="justify">To use it you need to <a href="http://sourceforge.net/projects/faticalabshqled/files/" target="_blank">download the bits</a>, and then &ldquo;create a project&rdquo; a project is, in the NH Workbench world, a bounch of file representing what we are working on ( and actually is a project in the MSBUILD world. To use the tool now we need at least a working NH configuration file ( your app.config or web config ) and one or more mapping assembly(ies). You add the files to the project by right clicking the project tree:<a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s2_5F00_63199F75.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="s2" alt="s2" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s2_5F00_thumb_5F00_0E7DC070.png" align="left" border="0" width="202" height="244" /></a> </p>
<p align="justify">After you added the file you can save the project, so it can be reopened when needed. Please note that the mapping assembly has to be opened from a location containing all the required dependencies ( usually the application folder, or the bin folder ).</p>
<p align="justify">After the project is created, you need to compile it before starting to write the queries:</p>
<p align="justify"><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s3_5F00_0B1C28C8.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="s3" alt="s3" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s3_5F00_thumb_5F00_740DA78B.png" align="right" border="0" width="244" height="79" /></a> </p>
<p>You can compile the project by clicking the button on the toolbar as shown in the picture Fig3</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Compiling the project should produce a report in the log area:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s4_5F00_1F71C886.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s4" alt="s4" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s4_5F00_thumb_5F00_1C7C63D3.png" border="0" width="572" height="142" /></a> </p>
<p>If you find the report too verbose, you can uncheck some of the button in the log toolbar. After a successful compilation, we can open a query (hql) document:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s5_5F00_38C9A5F3.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="s5" alt="s5" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s5_5F00_thumb_5F00_15B93483.png" align="left" border="0" width="244" height="256" /></a> </p>
<p>&nbsp;</p>
<p>This will open a pane in the document area in which we can write HQL queries with some intellisense/auto-completion. Plaese note that, for have the entity completion, after the &ldquo;from&rdquo; keyword we need to <b>press ctrl+space</b> to see the completion combo.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s6_5F00_2B536D20.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px" title="s6" alt="s6" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s6_5F00_thumb_5F00_018FF22D.png" align="left" border="0" width="244" height="64" /></a> </p>
<p>Here an example HQL document. After a valid query is done we can submit it to NH and see the result:</p>
<p>&nbsp;</p>
<p>The &ldquo;<b>play</b>&rdquo; button is enabled only if a valid query ( no errors ) is written in the document. The<b> first</b> and <b>coun</b>t places are useful to<b> limit</b> the query results.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s7_5F00_3E6473FF.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s7" alt="s7" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s7_5F00_thumb_5F00_09E3A1B7.png" border="0" width="213" height="80" /></a> By pressing the play button, you will be able to se the query results ( if any ):</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s8_5F00_59D95035.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="s8" alt="s8" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/s8_5F00_thumb_5F00_03F8D851.png" border="0" width="482" height="147" /></a> </p>
<p>Next steps:</p>
<ul>
<li>Solve the bugs till now </li>
<li>Add supports for <a href="/media/p/546.aspx" target="_blank">hbm2net</a>, so user can write mapping and immediately see it at works. </li>
</ul>
<p>Enjoy !</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate workbench]]></post-name>
      <categories>
        <category ref="1020" />
        <category ref="1026" />
        <category ref="1112" />
        <category ref="1122" />
      </categories>
      <comments>
        <comment id="638" date-created="2010-05-19T19:06:35" date-modified="2010-05-19T19:06:35" approved="true" user-name="Diego Jancic" user-url="http://nhforge.org/members/diegojancic/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Workbench]]></title>
          <content type="text"><![CDATA[Awesome man! I hope you continue with the work!
I'm waiting the addition of the hbm2net to the app! :)]]></content>
        </comment>
        <comment id="639" date-created="2010-05-23T04:48:34" date-modified="2010-05-23T04:48:34" approved="true" user-name="Mohamed Meligy" user-url="http://gurustop.net">
          <title type="text"><![CDATA[re: NHibernate Workbench]]></title>
          <content type="text"><![CDATA[I've just checked the stuff. The most incredible thing is how updated this is (last commit is yesterday, wow). Thanks a  lot. This is a really big project and should have more awareness from NH users. You rock, man.]]></content>
        </comment>
        <comment id="643" date-created="2010-06-10T12:44:46" date-modified="2010-06-10T12:44:46" approved="true" user-name="Carlos Cubas" user-url="http://nhforge.org/members/venomcc/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Workbench]]></title>
          <content type="text"><![CDATA[Awesome! Any plans for a visual studio extension?]]></content>
        </comment>
        <comment id="644" date-created="2010-06-10T14:49:36" date-modified="2010-06-10T14:49:36" approved="true" user-name="felicepollano" user-url="http://nhforge.org/members/felicepollano/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Workbench]]></title>
          <content type="text"><![CDATA[I need to learn how to. Even having hbm2net better integrated in visual studio would help...
]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="646" date-created="2010-06-21T12:47:22" date-modified="2010-06-21T12:47:22" approved="true" url="http://www.virtew.com/post/Revue-du-Web-du-21-juin.aspx">
          <title type="text"><![CDATA[Revue du Web du 21 juin]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="649" date-created="2010-07-01T05:11:00" date-modified="2010-07-01T05:11:00" approved="true" post-url="/blogs/nhibernate/archive/2010/06/30/nhibernate-and-composite-keys.aspx" type="normal" hasexcerpt="false" views="43866">
      <title type="text"><![CDATA[NHibernate and Composite Keys]]></title>
      <content type="text"><![CDATA[<p>(If this post looks familiar, it&rsquo;s because I originally posted this over on <a href="http://devlicio.us/">http://devlicio.us/</a> and I have given myself full permission to repost it here, with minor edits)</p>
<p>Composite IDs are a common pain point a beginning NHibernate user runs into.&nbsp; Here's everything you need to get them up and running. </p>
<p>First, a caveat: composite keys are certainly mappable in NHibernate, but it's a little trickier than a typical single identity key would be.&nbsp; Compared to a normal key, there's some extra setup work, queries are more painful, and they tend to be less optimized in terms of lazy loading. Because of these things, experienced NHibernate users often avoid composite keys entirely when possible.&nbsp; However, there are many legacy situations where multiple existing apps all hit the same db-a situation in which, if a composite key is already in place, it&rsquo;s may be really difficult to change.&nbsp; As this kind of legacy situation is the most common use case for mapping composite keys with NHibernate, I'll start from the assumption that you've got an existing database that you can't alter. (this is a *bad thing* - see <a href="/blogs/nhibernate/archive/2009/06/26/database-the-eliot-ness-of-it.aspx">THIS POST</a> for why, but as developers, those kinds of decisions aren't always under our control-but if you <i>can</i> change the structure to avoid composite keys, you should really, really consider it)</p>
<h3>YOUR OBJECTS</h3>
<p>As I mentioned above, if you're considering mapping a composite key, you probably already have a database. (if not,&nbsp; I&rsquo;d highly advise an alternative-perhaps sets, perhaps idbags, but that&rsquo;s for another blog post) The NORMAL, PREFERRED direction of model design would be to work up your classes and once they work the way you want, extract the persistence structure from that (i.e. your DB). But if that were an option for you... well, you probably wouldn't be using a composite key in the first place.&nbsp; Anyway, let's take a scenario:</p>
<p>Your existing tables:</p>
<p><img src="http://docs.google.com/File?id=dtmkfh7_29ghmckcd7_b" /></p>
<p>&nbsp;</p>
<p>In our brand new NHibernate app, we want to have an object that corresponds to the CategoryProducts idea.&nbsp; This is a start:</p>
<pre class="c-sharp" name="code">namespace SuperShop.Domain<br />{<br />    public class CategoryProduct<br />    {<br />        public virtual Product Product { get; set; }<br />        public virtual Category Category { get; set; }<br />        public virtual string CustomizedProductDescription { get; set; }<br /><br />        private DateTime _LastModifiedOn;<br /><br />        public override bool Equals(object obj)<br />        {<br />            if (obj == null)<br />                return false;<br />            var t = obj as CategoryProduct;<br />            if (t == null)<br />                return false;<br />            if (Product == t.Product &amp;&amp; Category == t.Category)<br />                return true;<br />            return false;<br />        }<br />        public override int GetHashCode()<br />        {<br />            return (Product.SKU + "|" + Category.Name).GetHashCode();<br />        }<br />    }<br />}</pre>
<p>So, why the Equals and GetHashcode?&nbsp; If you try to map a composite key without them, you'll get an NHibernate error stating that they are required.&nbsp; Here's why: With this two part identifier, NHibernate can't do a simple single id object compare - you need to tell it how to decide equality. Implementing Equals and GetHashcode are always a good idea for anyway so your objects will be have properly in cases like multi-session scenarios where an unsaved object might really be the same as an existing object elsewhere, but in the composite key scenario, not having it is not an option- NHibernate doesn't even *have* a mostly-works technique to fall back on. (Note, this is almost certainly not the most ideal Equals and GetHashcode implementation-take a look <a href="/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx">here</a> for more on the topic- but hopefully this gives you the general idea. )</p>
<h3>MAPPING</h3>
<p>A mapping:</p>
<pre class="xml" name="code">&lt;hibernate-mapping&gt;   <br />&lt;class table="OrderItemProductDetails" name="SuperShop.Domain.ComponentPersonalization, SuperShop.Domain"&gt;<br />    &lt;composite-id&gt;<br />        &lt;key-many-to-one class="SuperShop.Domain.OrderItemComponent,SuperShop.Domain" name="OrderItemComponent" column="OrderItemProductID" /&gt;<br />        &lt;key-property name="DetailType" column="DetailTypeID" type="SuperShop.Domain.DetailTypes,SuperShop.Domain" /&gt;<br />    &lt;/composite-id&gt;<br />    &lt;version name="LastModifiedOn" column="LastModifiedOn" type="timestamp" access="field.pascalcase-underscore" /&gt;<br />    &lt;property name="DetailValue" column="DetailValue" type="String"&gt;&lt;/property&gt;<br />    &lt;property name="DetailCharge" column="DetailCharge" type="Decimal"&gt;&lt;/property&gt;<br /><br />&lt;/class&gt;<br />&lt;/hibernate-mapping&gt;</pre>
<p>Note the <b>&lt;version&gt;</b> element, as well as the matching _LastModifiedOn in the class above. These two items combined let NHibernate know how to tell if an entity is new or not.&nbsp; In the usual scenario where NHibernate manages the ID, NHibernate monitors whether the id value is the original unsaved value and determines whether to Save or Update for you if you call SaveOrUpdate(), a very handy method.&nbsp; If NHibernate is not managing the ID, as is the case in an Assigned ID (think an SSN that you manage) or in composite (where you create the relationships or values yourself that make the id)&nbsp; then it doesn't know how to tell if your id is saved or not-its usual technique doesn't work.&nbsp; So with <b>&lt;version&gt;</b> NHibernate gets a column it has control over, and can safely monitor for an unsaved value. Without this, you'd be unable to use SaveOrUpdate with this element-you'd have to call Save or Update as appropriate-additionally, since ALL cascading functions on collections are essentially NHibernate calling SaveOrUpdate, you're not going to be able to use cascading. Alternatively, if you don't like the <b>&lt;version&gt;</b> column, you could implement IInterceptor 's IsTransient() method to get similar functionality.&nbsp;&nbsp; (<a href="http://www.nhforge.org/doc/nh/en/index.html#components-compositeid">see documentation at nhforge</a>)</p>
<p>So, if you want to take the <b>&lt;version&gt;</b> approach, you'll need to add a new DateTime column to your CategoryProducts table:</p>
<p><img src="http://docs.google.com/File?id=dtmkfh7_30fmsbthcg_b" /></p>
<p>&nbsp;</p>
<h3>QUERYING</h3>
<p>An inconvenient aspect of composite ids is the need to query on all parts of the id.&nbsp; For instance: when working with single-column keys, a GetByID query comes built-in-you don&rsquo;t have to write it:</p>
<p><b>session.Get&lt;MyFooObject&gt;(myFooId),</b> </p>
<p>However, when querying for an entity with a composite key, the equivalent query is NOT built-in; it needs to be hand-written, like the following: </p>
<p>
  <br /><b>from CategoryProducts c where c.Products = :p and c.Category = :cat</b></p>
<p>
  <br />but it's not just on the GetByID, it's *whenever* you might need to search using a particular CategoryProduct. For instance,</p>
<p>
  <br /><b>select distinct p from ProductImages p join p.CategoryProducts c where c.Products = :p and c.Category = :cat</b></p>
<h3>ID OBJECT</h3>
<p>Composite IDs can be problematic for lazy loading... When lazy loading, NHibernate will get just the ids of a collection, and hold off on getting the rest of the object until it's needed. An important fact- NHibernate can't (yet) partially load an object-it works in terms of discrete "things". If you're talking a plain integer ID, it can load up the integer as a <i>single</i> identifier, proxy the object, and then load up the associated object later.&nbsp; With our object as specified above, the smallest <i>single</i> discrete thing that contains the key is... the whole object- so, you've effectively killed your lazy loading as it&rsquo;s going to have to work with the whole object.&nbsp; What to do if we want lazy loading?&nbsp; Well, make something smaller than the whole that just contains the key.&nbsp; Let's make that ID object:</p>
<pre class="c-sharp" name="code">[Serializable]<br />public class CategoryProductIdentifier {<br />        public virtual int ProductId { get; set; }<br />        public virtual int CategoryId { get; set; }<br /><br />        public override bool Equals(object obj)<br />        {<br />            if (obj == null)<br />                return false;<br />            var t = obj as CategoryProductIdentifier;<br />            if (t == null)<br />                return false;<br />            if (ProductId == t.ProductId &amp;&amp; CategoryId == t.CategoryId)<br />                return true;<br />            return false;<br />        }<br />        public override int GetHashCode()<br />        {<br />            return (ProductId + "|" + CategoryId).GetHashCode();<br />        }<br />}</pre>
<p>then, CategoryProduct becomes: </p>
<pre class="c-sharp" name="code">public class CategoryProduct<br />{<br />        private CategoryProductIdentifier _categoryProductIdentifier = new CategoryProductIdentifier();<br />        public virtual CategoryProductIdentifier CategoryProductIdentifier<br />        {<br />            get { return _categoryProductIdentifier; }<br />            set { _categoryProductIdentifier = value; }<br />        }<br /><br />        private Product _Product;<br />        public virtual Product Product<br />        {<br />            get { return _Product; }<br />            set { _Product = value;<br />                _categoryProductIdentifier.ProductId = _Product.Id; }<br />        }<br /><br />        private Category _Category;<br />        public virtual Category Category<br />        {<br />            get { return _Category; }<br />            set { _Category = value;<br />                _categoryProductIdentifier.CategoryId = _Category.Id; }<br />        }<br />        public virtual string CustomizedProductDescription { get; set; }<br /><br />}</pre>
<p>Mapping Tweaks: </p>
<pre class="xml" name="code"> <br />&lt;hibernate-mapping&gt;<br />&lt;class name="CategoryProduct" table="CategoryProducts"&gt;<br />    &lt;composite-id name="CategoryProductIdentifier" class="CategoryProductIdentifier"&gt;<br />        &lt;key-property name="ProductId" column="ProductID" type="Int32" /&gt;<br />        &lt;key-property name="CategoryId" column="CategoryID" type="Int32" /&gt;<br />        &lt;version name="LastModifiedOn" type="timestamp" column="LastModifiedOn" /&gt;<br />    &lt;/composite-id&gt;<br />    &lt;many-to-one name="Product" column="ProductID" class="Product" insert="false" update="false" access="field.pascalcase-underscore" /&gt;<br />    &lt;many-to-one name="Category" column="CategoryID" class="Category" insert="false" update="false" access="field.pascalcase-underscore" /&gt;<br />    &lt;property name="CustomizedProductDescription" column="CustomizedProductDesc" /&gt;<br />&lt;/class&gt;<br />&lt;/hibernate-mapping&gt;</pre>
<p>The key thing to note here is that Product and Category are referred to twice in both the class and the mapping.&nbsp; The reason for this is that the caching mechanism uses primitives like int or string, so we need to feed it something caching-ready. This is because to index by a custom class in the cache, this composite id class, like an ordinary id, gets serialized and used as the key in the cache hashtable.&nbsp; This serializability comes for free if your id is a single int, but if your id is your own custom object, as with this composite id class, you've got to explicitly both specify that serialization is allowed, and make sure the object is valid for serialization.&nbsp; So we've pulled out those ids as ints into the identifier. However, we still want to be able to traverse these relationships as entities in our code, so we still include the class.&nbsp; However, if NHibernate were to try to update the same db field twice, you'd get errors.&nbsp; To be able to have both the product relation and the ProductId mapped separately in the same class, we mark the class reference as non-updatable.&nbsp; Also, note that the Equals and GetHashcode moved to the CategoryProductIdentifier class - the CategoryProduct class is for the most part free of the burden of the composite key; the burden of composite-ness is now on the CategoryProductIdentifier class.</p>
<p><i>It&rsquo;s entirely possible I&rsquo;ve missed something in regards to NHibernate usage with composite keys-if so, let me know, and I&rsquo;ll add it in.&nbsp; If I got anything factually wrong, let me know about that too so I can make it right!</i></p>
<p><i>Editing Credit from original post:&nbsp; Added in serialization info that I'd forgotten. Thanks to bonskijr for letting me know!</i></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate and composite keys]]></post-name>
      <categories>
        <category ref="1156" />
      </categories>
      <comments>
        <comment id="651" date-created="2010-07-01T14:56:53" date-modified="2010-07-01T14:56:53" approved="true" user-name="John Davidson" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate and Composite Keys]]></title>
          <content type="text"><![CDATA[Thanks for posting this here, Anne. It will get a lot use]]></content>
        </comment>
        <comment id="716" date-created="2010-10-05T10:59:33" date-modified="2010-10-05T10:59:33" approved="true" user-name="mknet" user-url="http://nhforge.org/members/mknet/default.aspx">
          <title type="text"><![CDATA[re: NHibernate and Composite Keys]]></title>
          <content type="text"><![CDATA[Hi, I used your example it's work fine when the object is created.

I have forenkey error when I add element to collection and I save the new object. can you help me ?]]></content>
        </comment>
        <comment id="1016" date-created="2012-04-19T11:13:22" date-modified="2012-04-19T11:13:22" approved="true" user-name="ramonsmits" user-url="http://bloggingabout.net/blogs/ramon/">
          <title type="text"><![CDATA[re: NHibernate and Composite Keys]]></title>
          <content type="text"><![CDATA[I advise you to adjust your GetHashCode method in this example:

return ProductIdGetHashCode() ^ CategoryId.GetHashCode();]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="1025" date-created="2014-09-09T01:42:42" date-modified="2014-09-09T01:42:42" approved="true" url="http://www.rhim.fju.edu.tw/test?a%5B%5D=cheap+sewing+machines+for+quilting+-+%3Ca+href%3Dhttp%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCUBw1oIAV3M%3Eyoutube.com%3C%2Fa%3E%2C">
          <title type="text"><![CDATA[www.rhim.fju.edu.tw]]></title>
        </trackback>
        <trackback id="1030" date-created="2014-09-10T13:15:18" date-modified="2014-09-10T13:15:18" approved="true" url="http://www.bsr-media.de/statistik/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Fsimpsons-tapped-out-cheats%2F%3Esimpsons+tapped+out+cheats%3C%2Fa%3E">
          <title type="text"><![CDATA[online simpsons tapped out cheats]]></title>
        </trackback>
        <trackback id="1045" date-created="2014-09-13T01:46:32" date-modified="2014-09-13T01:46:32" approved="true" url="http://teamenergizer.myorganogold.com">
          <title type="text"><![CDATA[this]]></title>
        </trackback>
        <trackback id="1053" date-created="2014-09-14T22:04:14" date-modified="2014-09-14T22:04:14" approved="true" url="http://www.janter.co.nz/weather/checkserver.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffuturecheats.com%2Ffifa-14-coin-generator%2F%3Ehttp%3A%2F%2Ffuturecheats.com%2Ffifa-14-coin-generator%2F%3C%2Fa%3E">
          <title type="text"><![CDATA[janter.co.nz]]></title>
        </trackback>
        <trackback id="1058" date-created="2014-09-15T12:54:18" date-modified="2014-09-15T12:54:18" approved="true" url="http://qos-web6.exigo.ch/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Fblitz-brigade-hack%2F%3Eblitz+brigade+Cheats%3C%2Fa%3E">
          <title type="text"><![CDATA[http://qos-web6.exigo.ch/]]></title>
        </trackback>
        <trackback id="1066" date-created="2014-09-18T02:39:03" date-modified="2014-09-18T02:39:03" approved="true" url="http://mailserver.primekom.net/default/info.php?a%5B%5D=Video+%28%3Ca+href%3Dhttp%3A%2F%2Fwww.miraslowworld.com%2Fblogs%2Fentry%2FThe-Best-Way-To-Plan-For-New-Timezones-When%3Eread+this+article%3C%2Fa%3E%29">
          <title type="text"><![CDATA[had me going]]></title>
        </trackback>
        <trackback id="1084" date-created="2014-09-22T02:57:53" date-modified="2014-09-22T02:57:53" approved="true" url="http://www.datha.ru/info/more/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ffreeseohit.com%2Fstory.php%3Ftitle%3Dcheck-out-best-price-on-tires-here%3EOnline+Shopping+Offers+Of+The+Day%3C%2Fa%3E">
          <title type="text"><![CDATA[online shopping deals holiday]]></title>
        </trackback>
        <trackback id="1102" date-created="2014-09-27T13:06:05" date-modified="2014-09-27T13:06:05" approved="true" url="http://gep.de/test/?a%5B%5D=Cheap+Online+Shopping+%28%3Ca+href%3Dhttp%3A%2F%2Fxazina.com%2FSheBattagli%2F2014%2F08%2F07%2Fimprove-your-health-and-quit-smoking-today-using-this-solid-advice.html%3EClick+In+this+article%3C%2Fa%3E%29">
          <title type="text"><![CDATA[click through the up coming internet page]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="10760" date-created="2010-06-28T14:12:33" date-modified="2010-07-30T00:42:08" approved="true" email="ajepst@gmail.com">
          <title type="text"><![CDATA[ajepst]]></title>
        </author>
      </authors>
    </post>
    <post id="657" date-created="2010-07-06T05:25:00" date-modified="2010-07-06T05:25:00" approved="true" post-url="/blogs/nhibernate/archive/2010/07/05/nhibernate-auditing-v3-poor-man-s-envers.aspx" type="normal" hasexcerpt="false" views="10785">
      <title type="text"><![CDATA[NHibernate Auditing v3 – Poor Man’s Envers]]></title>
      <content type="text"><![CDATA[<p>First, let me explain the title of this post. The Hibernate folks &ndash; you know, that <a target="_blank" href="http://nhforge.org">NHibernate</a> knock off written in the Java (pronounced &ldquo;ex em el&rdquo;) programming language &ndash; have a project called Envers. Among other things, It audits changes to entities, then allows you to easily retrieve the entity as it was at any previous point in time. </p>
<p>Well, Simon Duduica is porting this over to .NET and NHibernate, and he&rsquo;s making some AMAZING progress. On June 28th, he shared this news with us on the NH Contrib development group:</p>
<blockquote>
<p>Hi everybody,</p>
<p>I have news regarding Envers.NET. I've commited a version that works in basic tests for CUD operations, with entities that have relationships between them, also with entities that are not audited. To make things work I had to make two small modifications of NHibernate, both modifications were tested running all NHibernate unit tests and they all passed. I already sent the first modification to Fabio and the second I will send this evening. I would like to thank Tuna for helping me out with good advices when I was stuck :)</p>
</blockquote>
<p>&nbsp;</p>
<p>So, on to the topic of this post. For <span style="text-decoration: underline;">NHibernate 3.0 Cookbook</span>, I&rsquo;ve included a section that explains how to use NHibernate to generate audit triggers. Originally, I had planned to use the code from <a target="_blank" href="http://jasondentler.com/blog/2009/12/generate-audit-triggers-from-nhibernate-v2/">my previous blog post on the topic</a>, but I didn&rsquo;t like its structure. I also didn&rsquo;t want to include all that plumbing code in the printed book. Instead, I&rsquo;ve rewritten and contributed the &ldquo;framework&rdquo; code to <a target="_blank" href="http://code.google.com/p/unhaddins/">uNHAddIns</a>. The &ldquo;how-to use it&rdquo; is explained in the book, so I won&rsquo;t explain it here.</p>
<p>Today, I was writing an integration test for this contribution, and thought the idea was worth sharing. I have a simple Cat class:</p>
<p><img height="143" width="163" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClassDiagram1_5F00_1E6B8C88.png" alt="ClassDiagram1" border="0" title="ClassDiagram1" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /> </p>
<p>When I do anything to this cat, in addition to the normal INSERT, UPDATE, or DELETE, a database trigger records that action in a table called CatAudit:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6ECD6DFB.png"><img height="159" width="206" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5B400E5A.png" alt="image" border="0" title="image" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> </p>
<p>I wanted an easy way to investigate the contents of this table to prove that my audit triggers worked. Here&rsquo;s what I came up with, along with help from Jose Romaniello (@jfroma). First, I created a class to match this table:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClassDiagram1_5F00_60AE7EFE.png"><img height="240" width="150" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClassDiagram1_5F00_thumb_5F00_65B0BCAD.png" alt="ClassDiagram1" border="0" title="ClassDiagram1" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> </p>
<p>Next, I mapped it, made it readonly and excluded it from hbm2ddl with this mapping:</p>
<pre class="brush:xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
				   assembly="uNhAddIns.Test"
				   namespace="uNhAddIns.Test.Audit.TriggerGenerator"&gt;
  &lt;typedef class="NHibernate.Type.EnumStringType`1[[uNhAddIns.Audit.TriggerGenerator.TriggerActions, uNhAddIns]], NHibernate"
           name="triggerActions" /&gt;
  &lt;class name="CatAudit" 
         mutable="false"
         schema-action="none"&gt;
    &lt;composite-id&gt;
      &lt;key-property name="Id" /&gt;
      &lt;key-property name="AuditUser" /&gt;
      &lt;key-property name="AuditTimestamp" /&gt;
    &lt;/composite-id&gt;
    &lt;property name="Color"/&gt;
    &lt;property name="AuditOperation" type="triggerActions" /&gt;
  &lt;/class&gt;
	
&lt;/hibernate-mapping&gt;</pre>
<p>I made it readonly by setting mutable="false" and excluded it from hbm2ddl with schema-action="none". That&rsquo;s it!</p>
<p>By the way, the &lt;typedef&gt; along with type="triggerActions" just tells NHibernate I've stored my TriggerActions enum values as strings, not numbers.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate auditing v3 poor man s envers]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1089" />
        <category ref="1120" />
        <category ref="1126" />
      </categories>
      <comments>
        <comment id="658" date-created="2010-07-06T06:32:10" date-modified="2010-07-06T06:32:10" approved="true" user-name="Natural" user-url="http://nhforge.org/members/Natural/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Auditing v3 – Poor Man’s Envers]]></title>
          <content type="text"><![CDATA[Wheres NH3.0]]></content>
        </comment>
        <comment id="659" date-created="2010-07-06T13:10:11" date-modified="2010-07-06T13:10:11" approved="true" user-name="Jason Dentler" user-url="http://nhforge.org/members/Jason-Dentler/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Auditing v3 – Poor Man’s Envers]]></title>
          <content type="text"><![CDATA[NHibernate 3.0 is the current trunk. It'll be officially released later this year.]]></content>
        </comment>
        <comment id="670" date-created="2010-07-18T19:21:23" date-modified="2010-07-18T19:21:23" approved="true" user-name="David W Martines" user-url="http://blogs.businesssoftwareengineering.com/">
          <title type="text"><![CDATA[re: NHibernate Auditing v3 – Poor Man’s Envers]]></title>
          <content type="text"><![CDATA[Thanks for posting about this - it looks really cool and I am looking forward to trying it out.  I do have a question, though.  Could you explain why you would exclude the generation of the CatAudit table from the schema export?  I would think you would want the create table script executed along with the real Cat table.  At least the way I work, I use hbm2ddl on a "blank" database, and from there use change scripts as I evolve the schema.  Or if I was testing the data access code (maybe using SqlLite) I would want the new database created and ALL the tables generated for the test run.  But I realize there are other ways of working, and so I'm just curious about how you do it.]]></content>
        </comment>
        <comment id="671" date-created="2010-07-18T19:30:32" date-modified="2010-07-18T19:30:32" approved="true" user-name="Jason Dentler" user-url="http://nhforge.org/members/Jason-Dentler/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Auditing v3 – Poor Man’s Envers]]></title>
          <content type="text"><![CDATA[Hi David. That's a great question. The answer is simple. The uNhAddIns framework already creates the triggers and the CatAudit table as auxillary database objects. This is necessary since we may want to audit Cats without necessarily doing anything with the audit data. 

We exclude our CatAudit class mapping from schema export because we don't want to export the CatAudit table twice.]]></content>
        </comment>
        <comment id="672" date-created="2010-07-18T19:52:30" date-modified="2010-07-18T19:52:30" approved="true" user-name="David W Martines" user-url="http://blogs.businesssoftwareengineering.com/">
          <title type="text"><![CDATA[re: NHibernate Auditing v3 – Poor Man’s Envers]]></title>
          <content type="text"><![CDATA[Ah, I see.  I'll have to look into the uNhAddIns framework.  So are these actual "database triggers" on the tables or are they interceptors attached to the session?   I would think that by using triggers as database objects it limits the databases you can use (or do all db engines offer triggers?), whereas with interceptors you get full database portability but without ability to audit changes to data from outside the application.]]></content>
        </comment>
        <comment id="673" date-created="2010-07-18T19:59:28" date-modified="2010-07-18T19:59:28" approved="true" user-name="Jason Dentler" user-url="http://nhforge.org/members/Jason-Dentler/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Auditing v3 – Poor Man’s Envers]]></title>
          <content type="text"><![CDATA[These are just simple database triggers. At the moment, I've written "extended dialects" to support triggers in Ms SQL Server and SQLite, since that's what I use. I imagine most databases support some type of trigger, though the syntax is different for each one.

I believe uNhAddIns also has a simple interceptor / event listener for auditing purposes. There's a ton of good stuff in there. Go explore! ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="662" date-created="2010-07-11T21:17:00" date-modified="2010-07-11T21:17:00" approved="true" post-url="/blogs/nhibernate/archive/2010/07/11/nhibernate-bootstrapper-unitofwork-and-sessionperrequest.aspx" type="normal" hasexcerpt="false" views="27480">
      <title type="text"><![CDATA[NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
      <content type="text"><![CDATA[<p>This is the first sample in a series of blogs about NHibernate in ASP.Net environment. This version gives a user new to NHibernate the absolute minimum pieces to start a well architected application. A number of the pieces necessary for an enterprise-capable application are not yet included, but the foundation has been laid. Source code and starter solution described in this post are available at <a target="_blank" href="http://public.me.com/jw_davidson/NHibernateBootstrap_V1.0.zip">NHibernateBootstrap Download</a>. </p>
<p>The key pieces in this sample are demonstrations of the correct UnitOfWork pattern, using the NHibernate ISession based object with its transaction support. A DataAccessObject / Repository is also introduced that uses features from both styles of implementations and is also intended to work with Query Objects. The <em>Web.Config</em> file includes a starter configuration for NHibernate, using the LinFu proxy. The connection between the web application and NHibernate demonstrates a best practice, where the Session Per Request pattern is initialized in an<em> IHttpModule</em> -<em> RequestHttpModule.cs</em>. This is an implementation base on the<em> ManagedWebSessionContext</em>, and shows how to bind and unbind the session correctly.  </p>
<p>This web application sample is not a best practices sample for ASP.Net development, but future blogs will add features, especially where they take advantage of an NHibernate implementation. Some of the implementation of the Person page is not following normal Microsoft recommended methods, and appear to be more complex than necessary. These changes are part of a further foundation and will allow the page to be transformed later where more than 95% of the logic normally encapsulated in the page behind code becomes testable. Initially there will be some references to NHibernate in the Web Application project, but this is not a recommended practice - later modifications will move these references so that they are in the BusinessServices project.  </p>
<p>The one other item included in this sample is the Unit Test project. This test project connects to NHibernate using the <em>ThreadStaticSessionContext</em>. Each Test Fixture initializes its own <em>ISession</em> object and uses the same session object for all tests in that fixture. The app.config file for the test project, which configures the NHibernate support, is located in the bin/debug directory.  </p>
<h3>Solution Architecture</h3>
<p>The Bootstrapper uses a multi-project structure and a library at the solution level to hold all the files:  </p>
<ul>
<li>
<p>NHibernate Bootstrap Solution  </p>
<ul>
<li>
<p>SharedLibs - a folder containing all external reference dll's and associated files</p>
</li>
<li>
<p>BootstrapperUnitTests Project - holds unit tests</p>
</li>
<li>
<p>Infrastructure Project - holds high level Interface and class files that may be used in multiple projects in the solution</p>
</li>
<li>
<p>DomainModel Project - holds the object model for the solution</p>
</li>
<li>
<p>NHibernateDAO Project - the persistence layer, gets data into and out of the database based on the object model and holds the mapping files</p>
</li>
<li>
<p>DataServices Project - isolates the persistence layer from the rest of the application</p>
</li>
<li>
<p>BusinessServices Project - provides an integration of the business logic with the data and controls the flow of information to and from the presentation layer</p>
</li>
<li>
<p>WebNHibernate Project - provides a web based presentation layer</p>
</li>
</ul>
</li>
</ul>
<p>Jason Dentler has written a <a href="/blogs/nhibernate/search.aspx?q=dentler">series of blogs</a> about using NHibernate, and I am borrowing from his discussion on <a href="/blogs/nhibernate/archive/2009/09/07/part-8-daos-repositories-or-query-objects.aspx">DAOs, Repositories or Query Objects</a>. The basic setup of the persistence layer uses a DAO-type FindBy approach augmented with support for QueryObjects. It is not my intent to discuss this approach now, but to cover it in a later post.  </p>
<p>The purpose of this post is to discuss the<em> ISession</em> object and how to use it directly as a UnitOfWork, without an additional wrapper. The second purpose is to present a recommended solution for the SessionPerRequest architecture for an ASP.Net application.  </p>
<h3>SessionPerRequest Implementation</h3>
<p>The SessionPerRequest implementation is recommended as a best practice to ensure that NHibernate is the most responsive and utilizes the least possible resources in the Web Server environment. The <a href="/doc/nh/en/index.html#architecture-current-session">NHibernate.Context.ICurrentSessionContext</a> is discussed in the reference document: <a href="/doc/nh/en/index.html">NHibernate - Relational Persistence for Idiomatic .NET</a>. The appropriate choices for a web application are either <em>ManagedWebSessionContext</em> or the <em>WebSessionContext</em>. <em><span style="text-decoration: underline;">(@Fabio: Can you explain the difference between the 2 - I have reviewed the code and see that ManagedWebSessionContext supports a GetExistingSession() - Does the WebSessionContext need to be explicitly bound and unbound in each request?)</span></em>  </p>
<p>Numerous examples of using<em> ManagedWebSessionContext</em> use the <em>Global.asax</em> to connect the NHibernate context to the web server. This is a bad practice in that it means the web application must have a direct reference to NHibernate<em>.Context</em> in order to work. It is instead recommended that an<em> IHttpModule</em> be created, and that the binding module be in the same project where the NHibernate reference is - in this sample that would be the NHibernateDOA project. This serves to isolate NHibernate from the web application entirely. All that is required is that the web application bin directory have a copy of the NHibernate dlls.  </p>
<p>The code for the <em>IHttpModule</em> is shown below:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:414f7b62-23ae-4819-a023-72ab652c0b8e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">RequestHttpModule.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Web;</li>
<li><span style="color:#0000ff">using</span> NHibernate;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate.Context;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> NHibernateDAO</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">RequestHttpModule</span> : <span style="color:#2b91af">IHttpModule</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Dispose()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Init(<span style="color:#2b91af">HttpApplication</span> context)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.BeginRequest += <span style="color:#0000ff">new</span> <span style="color:#2b91af">EventHandler</span>(context_BeginRequest);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.EndRequest += <span style="color:#0000ff">new</span> <span style="color:#2b91af">EventHandler</span>(context_EndRequest);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> context_BeginRequest(<span style="color:#2b91af">Object</span> sender, <span style="color:#2b91af">EventArgs</span> e)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ManagedWebSessionContext</span>.Bind(<span style="color:#2b91af">HttpContext</span>.Current, <span style="color:#2b91af">SessionManager</span>.SessionFactory.OpenSession());</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> context_EndRequest(<span style="color:#2b91af">Object</span> sender, <span style="color:#2b91af">EventArgs</span> e)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ISession</span> session = <span style="color:#2b91af">ManagedWebSessionContext</span>.Unbind(</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">HttpContext</span>.Current, <span style="color:#2b91af">SessionManager</span>.SessionFactory);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session != <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session.Transaction != <span style="color:#0000ff">null</span> &amp;&amp; session.Transaction.IsActive)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Transaction.Rollback();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Flush();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Close();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<pre>&nbsp;</pre>
<p>The use of the <em>ManagedWebSessionContext</em> is fairly straight forward. It is important to note that this file has a reference to <em>System.Web</em>, which should be the only reference to this library outside of the the WebApplication itself. It is undesirable to reference the System.Web library external to the web application project as it will make testing of those components with that reference very difficult. 
</p>
<p>The <em>context_EndRequest</em> also contains a <em>Rollback</em> call, which will ensure that any pending transactions are terminated without writing to the database if your application has an unhandled error. 
</p>
<p>In order for the custom <em>IHttpModule</em> to be active in the web server it must be registered in the <em>Web.Config</em> file:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f11002f6-2104-46f3-b594-f04027adc010" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Register RequestHttpModule</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">httpModules</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">add</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">RequestHttpModule</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">type</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">NHibernateDAO.RequestHttpModule, NHibernateDAO</span>"<span style="color:#0000ff">/&gt;</span></li>
<li>&nbsp;&nbsp;<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">httpModules</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">system.web</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">system.webServer</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">modules</span><span style="color:#0000ff"> </span><span style="color:#ff0000">runAllManagedModulesForAllRequests</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">true</span>"<span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">add</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">RequestHttpModule</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">type</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">NHibernateDAO.RequestHttpModule, NHibernateDAO</span>"<span style="color:#0000ff">/&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">modules</span><span style="color:#0000ff">&gt;</span></li>
<li><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">system.webServer</span><span style="color:#0000ff">&gt;</span></li>
</ol>
</div>
</div>
</div>
<p>I have included the <em>IHttpModule</em> reference twice. The first time is for configurations of the web server using Classic Mode and the second is for IIS 7 Integrated Pipeline. See <a href="http://msdn.microsoft.com/en-us/library/ms227673.aspx">http://msdn.microsoft.com/en-us/library/ms227673.aspx</a> 
</p>
<p>The final item necessary to make this work is an addition to the NHibernate configuration file. It is necessary to add the property</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e8d24772-e3f6-4aca-9ee6-44fdf9e55fde" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">NHibernate ContextSession</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">current_session_context_class</span>"<span style="color:#0000ff">&gt;</span>NHibernate.Context.ManagedWebSessionContext, NHibernate<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
</ol>
</div>
</div>
</div>
<pre>&nbsp;</pre>
<p>This is shown below in the Web.Config described in the Minimal Configuration section. 
</p>
<h3>ISession UnitOfWork and Transactions</h3>
<p>The proper management of database connections is a key component of ensuring a highly responsive web application in ASP.Net. <a href="/doc/nh/en/index.html#transactions">http://nhforge.org/doc/nh/en/index.html#transactions</a> gives some guidance, but does not provide any code samples or say what the recommended practice should be. This lack of direction is partly due to the possible scope of applications for NHibernate in general. However, in an ASP.Net environment the rules are fairly simple. First, you should SessionPerRequest as detailed above. Second, all database access should be wrapped in a transaction and that transaction should be committed when the connection to the database can be released. There is an almost infinite variation of implementations for these requirements in samples on the Internet. Invariably, programmers try to encapsulate the<em> ISession</em> object and transaction in a UnitOfWork class. While many of these samples are not incorrect in there implementation, some are, and many do not provide any additional functionality or save lines of code, when compared to a proper implementation of the bare <em>ISession</em> object.&nbsp; </p>
<p>First some sample <em>GenericDAO</em> code (again, thanks to Jason Dentler, who provided the basic pattern). The declaration for the class:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:db42bbea-8b3d-46c0-9dc3-5c2baf8775ef" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Declaration for GenericDAOImp</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li>
<li><span style="color:#0000ff">using</span> DomainModel;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> NHibernateDAO</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">GenericDAOImpl</span>&lt;TEntity&gt; : <span style="color:#2b91af">IRead</span>&lt;TEntity&gt;, <span style="color:#2b91af">ISave</span>&lt;TEntity&gt; <span style="color:#0000ff">where</span> TEntity : <span style="color:#2b91af">Entity</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> GenericDAOImpl(<span style="color:#2b91af">ISession</span> Session)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Session = Session;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> <span style="color:#0000ff">readonly</span> <span style="color:#2b91af">ISession</span> m_Session;</li>
</ol>
</div>
</div>
</div>
<p>A DAO implementation for NHibernate will usually have a <em>GetByID</em>, and this is no exception:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e8a58be6-5ff1-42b6-811a-a759cabf2bbd" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Function GetByID</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> TEntity GetByID(<span style="color:#2b91af">Guid</span> ID)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = m_Session.Get&lt;TEntity&gt;(ID);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> m_Session.Get&lt;TEntity&gt;(ID);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<p>The less normal GetBy query mechanism, is more normally part of a repository architecture, but makes for some very flexible code here:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:447eaed2-dd2c-4ccd-b36d-db1ca0e52ac0" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">GetBy Query Functions</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;TEntity&gt; GetByCriteria(<span style="color:#2b91af">ICriteria</span> criteria)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;TEntity&gt; retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = criteria.List&lt;TEntity&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> criteria.List&lt;TEntity&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;TEntity&gt; GetByQueryable(<span style="color:#2b91af">IQueryable</span>&lt;TEntity&gt; queryable)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;TEntity&gt; retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = queryable.ToList&lt;TEntity&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> queryable.ToList&lt;TEntity&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<p>The Save function is the last part of the <em>GenericDAOImpl</em> class (note that there is no Delete function, as this capability is only exposed in the specific DAO classes actually requiring that function, rather than as a generic capability):</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:67e8d403-650a-439a-b284-a0c3194f5be2" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Save Function</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> TEntity Save(TEntity entity)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Session.SaveOrUpdate(entity);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Session.SaveOrUpdate(entity);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> entity;</li>
<li style="background: #f3f3f3">}</li>
</ol>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>Each method in the <em>GenericDAO</em> class has 2 paths: one where the caller has wrapped the call in a transaction, and the other where no transaction was specified in the call. (Note: It is not necessary to check <em>m_session.Transaction != null</em> as the transaction will never be null if the <em>ISession</em> instance is valid, and the <em>ISession</em> instance must be valid to use the <em>GenericDAO</em> implementation.) It is left as an exercise for the reader to build a function to query using HQL. 
</p>
<p>An example test is shown below, first without an explicit transaction and then with a transaction:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8bd4ac1a-3d02-4f0a-804d-753df200703d" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonSaveTestWithoutTX</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonSaveTestWithoutTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> _person = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.FirstName = <span style="color:#a31515">"John"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.LastName = <span style="color:#a31515">"Davidson"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.Email = <span style="color:#a31515">"jwdavidson@gmail.com"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.UserID = <span style="color:#a31515">"jwd"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> newPerson = daoPerson.Save(_person);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(_person, newPerson);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;newPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol>
</div>
</div>
</div>
<pre><pre>&nbsp;</pre>
<pre>Now with a transaction included in the test method:</pre>
<pre>&nbsp;</pre>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b8fcad52-4d1b-4065-88f6-f00e44d7dbed" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonSaveTestWithTX</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonSaveTestWithTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> _person = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.FirstName = <span style="color:#a31515">"John"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.LastName = <span style="color:#a31515">"Davidson"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.Email = <span style="color:#a31515">"jwdavidson@gmail.com"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.UserID = <span style="color:#a31515">"jwd"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> newPerson = daoPerson.Save(_person);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(_person, newPerson);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol>
</div>
</div>
</div>
</pre>
<pre>&nbsp;</pre>
<p>There are 2 additional lines of code in the sample with a direct call to the transaction. Any other UnitOfWork implementation cannot improve on this and still work correctly. 
</p>
<h3>Minimal NHibernate Configuration</h3>
<p>NHibernate needs a program to read the configuration and initialize the <em>SessionFactory</em>. This is called the <em>SessionManager.cs </em>is shown below the configuration and unit test setup code. 
</p>
<p>The <em>web.config</em> file holds the configuration details as shown below:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:914e4788-8faa-4c4d-8bc2-65b8c202c863" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">NHibernate in Web.Config</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">configSections</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">section</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">hibernate-configuration</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">type</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">NHibernate.Cfg.ConfigurationSectionHandler,NHibernate</span>"<span style="color:#0000ff">/&gt;</span></li>
<li><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">configSections</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3"><span style="color:#0000ff">&nbsp;&nbsp;&lt;</span><span style="color:#a31515">hibernate-configuration</span><span style="color:#0000ff"></span><span style="color:#ff0000">xmlns</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">urn:nhibernate-configuration-2.2</span>"<span style="color:#0000ff"> &gt;</span></li>
<li>&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">session-factory</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">NHibernate.Bootstrapper</span>"<span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">connection.driver_class</span>"<span style="color:#0000ff">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">connection.connection_string</span>"<span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data Source=.\SQLEXPRESS;Initial Catalog=NHibernateBootstrapper;Integrated Security=True;Pooling=True</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">show_sql</span>"<span style="color:#0000ff">&gt;</span>false<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">adonet.batch_size</span>"<span style="color:#0000ff">&gt;</span>10<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">dialect</span>"<span style="color:#0000ff">&gt;</span>NHibernate.Dialect.MsSql2008Dialect<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">use_outer_join</span>"<span style="color:#0000ff">&gt;</span>true<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">command_timeout</span>"<span style="color:#0000ff">&gt;</span>60<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">query.substitutions</span>"<span style="color:#0000ff">&gt;</span>true 1, false 0, yes 'Y', no 'N'<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">proxyfactory.factory_class</span>"<span style="color:#0000ff">&gt;</span>NHibernate.ByteCode.LinFu.ProxyFactoryFactory, NHibernate.ByteCode.LinFu<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">current_session_context_class</span>"<span style="color:#0000ff">&gt;</span>NHibernate.Context.ManagedWebSessionContext, NHibernate<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">generate_statistics</span>"<span style="color:#0000ff">&gt;</span>false<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">property</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">session-factory</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3"><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">hibernate-configuration</span><span style="color:#0000ff">&gt;</span></li>
</ol>
</div>
</div>
</div>
<pre>&nbsp;</pre>
<p>The Unit Test project has a similar configuration, but it is stored in an <em>app.config</em> file in the bin directory with some minor changes. The <em>show_sql</em> property is set to true, causing the sql to be output in the NUnit console display. The second change is that the property <em>current_session_context_class</em> is set to <em>ThreadStaticSessionContext</em>. In this case the current context needs it own setup:</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a1c5af1e-85a3-40ff-84ed-1672a0867bbc" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Setup / Teardown for UnitTest</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">private</span> <span style="color:#2b91af">ISession</span> m_session;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>[<span style="color:#2b91af">TestFixtureSetUp</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> TestFixtureSetup()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">var</span> session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.OpenSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">CallSessionContext</span>.Bind(session);</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">[<span style="color:#2b91af">TestFixtureTearDown</span>]</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> TestFixtureTeardown()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">var</span> session = <span style="color:#2b91af">CallSessionContext</span>.Unbind(<span style="color:#2b91af">SessionManager</span>.SessionFactory);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session != <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session.Transaction != <span style="color:#0000ff">null</span> &amp;&amp; session.Transaction.IsActive)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Transaction.Rollback();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Flush();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Close();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;session.Dispose();</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<pre></pre>
<p>I waited to show the SessionManager.cs code, as it was necessary to understand how the Unit Tests work with the NHibernate DAO classes, in a nearly transparent manner. This SessionManager.cs was adapted from a blog post by Petter Wiggle. The reference post titled &lsquo;<a href="http://pwigle.wordpress.com/2008/11/21/nhibernate-session-handling-in-aspnet-the-easy-way/">NHibernate Session handling in ASP.NET &ndash; the easy way</a>&rsquo; is one of the examples of how <strong><span style="text-decoration: underline;">not</span></strong> to implement SessionPerRequest as it uses the <em>Global.asax</em> file for initialization, rather than correctly using an <em>IHttpModule</em>. Now for the code (split into 3 section to ensure that it will print correctly):</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2012d280-81b3-4f74-a358-a03869c86045" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">SessionManager.cs (Part 1)</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.IO;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Linq;</li>
<li><span style="color:#0000ff">using</span> System.Text;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate;</li>
<li><span style="color:#0000ff">using</span> NHibernate.Cfg;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">namespace</span> NHibernateDAO</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">sealed</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">SessionManager</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">readonly</span> <span style="color:#2b91af">ISessionFactory</span> sessionFactory;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#2b91af">ISessionFactory</span> SessionFactory</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> Instance.sessionFactory; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">ISessionFactory</span> GetSessionFactory()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> sessionFactory;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#2b91af">SessionManager</span> Instance</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> <span style="color:#2b91af">NestedSessionManager</span>.sessionManager; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#2b91af">ISession</span> OpenSession()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> Instance.GetSessionFactory().OpenSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol>
</div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:28a19f0c-63d4-44d9-ba79-5a6c671f8f73" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">SessionMnager.cs (Part 2)</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">private</span> SessionManager()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (sessionFactory == <span style="color:#0000ff">null</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Configuration</span> configuration;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (<span style="color:#2b91af">AppDomain</span>.CurrentDomain.BaseDirectory.Contains(<span style="color:#a31515">"UnitTest"</span>))</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configuration = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Configuration</span>().Configure(<span style="color:#2b91af">Path</span>.Combine(<span style="color:#2b91af">AppDomain</span>.CurrentDomain.BaseDirectory, <span style="color:#a31515">"app.config"</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log4net.Config.<span style="color:#2b91af">XmlConfigurator</span>.ConfigureAndWatch(<span style="color:#0000ff">new</span> <span style="color:#2b91af">FileInfo</span>(<span style="color:#2b91af">Path</span>.Combine(<span style="color:#2b91af">AppDomain</span>.CurrentDomain.BaseDirectory, <span style="color:#a31515">"app.config"</span>)));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configuration = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Configuration</span>().Configure(<span style="color:#2b91af">Path</span>.Combine(<span style="color:#2b91af">AppDomain</span>.CurrentDomain.BaseDirectory, <span style="color:#a31515">"web.config"</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log4net.Config.<span style="color:#2b91af">XmlConfigurator</span>.ConfigureAndWatch(<span style="color:#0000ff">new</span> <span style="color:#2b91af">FileInfo</span>(<span style="color:#2b91af">Path</span>.Combine(<span style="color:#2b91af">AppDomain</span>.CurrentDomain.BaseDirectory, <span style="color:#a31515">"web.config"</span>)));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//Configuration configuration = new Configuration().Configure();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (configuration == <span style="color:#0000ff">null</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">throw</span> <span style="color:#0000ff">new</span> <span style="color:#2b91af">InvalidOperationException</span>(<span style="color:#a31515">"NHibernate configuration is null."</span>);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configuration.AddAssembly(<span style="color:#a31515">"NHibernateDAO"</span>);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sessionFactory = configuration.BuildSessionFactory();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (sessionFactory == <span style="color:#0000ff">null</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">throw</span> <span style="color:#0000ff">new</span> <span style="color:#2b91af">InvalidOperationException</span>(<span style="color:#a31515">"Call to BuildSessionFactory() returned null."</span>);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:17cc8e34-2208-49fb-9073-1d5f4cef71a7" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">SessionManager.cs (Part 3)</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">class</span> <span style="color:#2b91af">NestedSessionManager</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">internal</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">readonly</span> <span style="color:#2b91af">SessionManager</span> sessionManager = <span style="color:#0000ff">new</span> <span style="color:#2b91af">SessionManager</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol>
</div>
</div>
</div>
<p>The <em>SessionManager</em> gets its configuration data from the Unit Test project if "UnitTest" is in the application directory name, otherwise it performs a normal configuration and uses the web.config for the Web Application. It is that easy. 
</p>
<h3>Application Domain Setup</h3>
<p>The map file is one method to notify NHibernate of the class to table mapping. Other methods are ConfORM or FluentNHibernate, but the map file was the first mechanism. Remember to set the Build Action for your map files to Embedded Resource so that they are included in the assembly file to be read by the <em>SessionManager</em> in the initialization process.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6c773bcf-d0e2-4023-9ed4-dd6fa9c3a57e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Person.hbm.xml</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">&lt;?</span><span style="color:#a31515">xml</span><span style="color:#0000ff"> </span><span style="color:#ff0000">version</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">1.0</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">encoding</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">utf-8</span>"<span style="color:#0000ff"> ?&gt;</span></li>
<li style="background: #f3f3f3"><span style="color:#0000ff">&lt;</span><span style="color:#a31515">hibernate-mapping</span><span style="color:#0000ff"> </span><span style="color:#ff0000">xmlns</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">urn:nhibernate-mapping-2.2</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">assembly</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">DomainModel</span>"</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff"></span><span style="color:#ff0000">namespace</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">DomainModel.Person</span>"<span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">class</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Person</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">table</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Person</span>"<span style="color:#0000ff"> &gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">id</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Id</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">column</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Person_ID</span>"<span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">generator</span><span style="color:#0000ff"> </span><span style="color:#ff0000">class</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">guid.comb</span>"<span style="color:#0000ff">/&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">id</span><span style="color:#0000ff">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">FirstName</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">column</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">First_Name</span>"<span style="color:#0000ff"> /&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">LastName</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">column</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Last_Name</span>"<span style="color:#0000ff"> /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Email</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">column</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">Email</span>"<span style="color:#0000ff"> /&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">&lt;</span><span style="color:#a31515">property</span><span style="color:#0000ff"> </span><span style="color:#ff0000">name</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">UserID</span>"<span style="color:#0000ff"> </span><span style="color:#ff0000">column</span><span style="color:#0000ff">=</span>"<span style="color:#0000ff">User_ID</span>"<span style="color:#0000ff">/&gt;</span></li>
<li>&nbsp;&nbsp;<span style="color:#0000ff">&lt;/</span><span style="color:#a31515">class</span><span style="color:#0000ff">&gt;</span></li>
<li style="background: #f3f3f3"><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">hibernate-mapping</span><span style="color:#0000ff">&gt;</span></li>
</ol>
</div>
</div>
</div>
&nbsp;
<p>Here you can see the table diagram for the Person table in the SQL Server database. 
</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Person_5F00_6C727450.png"><img height="133" width="240" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Person_5F00_thumb_5F00_1EF5D1C3.png" alt="Person" border="0" title="Person" style="border-right-width: 0px; margin: 0px 0px 0px 50px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> 
</p>
<p>The class diagram for the <em>Person</em> class shows how the map file uses both the table and the class definition to make NHibernate able to persist an instance of the <em>Person</em> class. Also note that the <em>Person</em> Class inherits from the <em>Entity</em> class.
</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/PersonCls_5F00_3640D634.png"><img height="240" width="133" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/PersonCls_5F00_thumb_5F00_6C624E83.png" alt="PersonCls" border="0" title="PersonCls" style="border-right-width: 0px; margin: 0px 0px 0px 50px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> 
</p>
<p>I have borrowed the <em>Entity</em> class from the implementation of Jason Dentler, described earlier. This <em>Entity</em> class is slightly different from a number of Id providers used by NHibernate persistence classes in that it makes the setter for the Id property &lsquo;protected&rsquo;, rather than &lsquo;public&rsquo;. This means that the application code is not able to directly set the Id of a class instance, but that it can only be set by the DAO implementation. As a result the application is forced to use Data Transfer Objects (dto) to communicate from the UI to the persistence classes.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a8eed277-946d-430f-b55f-8821b0c8da87" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Entity.cs</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> DomainModel</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">abstract</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">Entity</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">Guid</span> m_ID;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">virtual</span> <span style="color:#2b91af">Guid</span> Id</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> m_ID; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> <span style="color:#0000ff">set</span> { m_ID = <span style="color:#0000ff">value</span>; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>The PersonDto class diagram is shown below. The PersonID property maps to the Person.Id property of the persistence class, with all other properties lining up as expected.
</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/PersonDtoCls_5F00_312E72B8.png"><img height="240" width="117" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/PersonDtoCls_5F00_thumb_5F00_3AA7312E.png" alt="PersonDtoCls" border="0" title="PersonDtoCls" style="border-right-width: 0px; margin: 0px 0px 0px 50px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> 
</p>
<p>The next 3 code snippets show how a dto is used to move data from a persistence class to a dto and then use that dto to populate a DataGrid. The function<em> Get_PersonData</em> fills a persistence class from the database using the <em>ICriteria</em> based <em>GetByCriteria</em> query and then uses a LINQ to Object function to fill the dto. Then the dto is passed to the DataGrid and then it is data bound in the method <em>Fill_gvPerson</em>. </p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0e7efa7d-498b-40b4-ae57-3b0f960c2c87" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Function Get_PersonData()</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; Get_PersonData()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; retVal = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (m_session == <span style="color:#0000ff">null</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> dao = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = dao.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;retVal = (<span style="color:#0000ff">from</span> person <span style="color:#0000ff">in</span> people</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">select</span> <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDto</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PersonID = person.Id,</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FirstName = person.FirstName,</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LastName = person.LastName,</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = person.Email,</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UserID = person.UserID</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).ToList&lt;<span style="color:#2b91af">PersonDto</span>&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;crit = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;dao = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retVal;</li>
<li style="background: #f3f3f3">}</li>
</ol>
</div>
</div>
</div>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6e9a45e2-7a07-40e8-8afc-b21aa694bad4" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Calling GetPersonData()</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">if</span> (!Page.IsPostBack)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; gvData = Get_PersonData();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;Fill_gvPerson(gvData);</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:80d24230-04c0-4ca5-add7-de8335d46042" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Fill Grid with DTO Data</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Fill_gvPerson(<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; data)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;gvPerson.DataSource = data;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;gvPerson.DataBind();</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<p>&nbsp;</p>
<p>The method _view_OnSaveEditPerson demonstrates the necessary steps to get data out of a dto and then to persist the user inputs. First it checks the value of txtPersonIdValue to determine if the data is from an instance that exists in the persistence layer, or is it a new instance &ndash; indicated by an empty value. Next the persistence class Person instance is fill using a GetByID function from the DAO implementation and then the data from the form fields is copy to the Person instance. Finally the Person instance is now saved.
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8ecee0ef-be65-4fde-b2ae-96a1af2f3ae0" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Save Entity from Form Data</div>
<div style="background: #ddd; overflow: auto">
<ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _view_OnSaveEditPerson()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (m_session == <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Guid</span> editId = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> editPers = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!<span style="color:#0000ff">string</span>.IsNullOrEmpty(txtPersonIdValue))</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editId = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>(txtPersonIdValue);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> dao = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (editId.ToString().Length == 36)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers = dao.GetByID(editId);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.FirstName = txtFirstNameValue;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.LastName = txtLastNameValue;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.Email = txtEmailValue;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.UserID = txtUserIdValue;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers = dao.Save(editPers);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;editPers = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;dao = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_view_OnRefreshPersonGrid();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_view_OnClearEditPerson();</li>
<li>}</li>
</ol>
</div>
</div>
</div>
<h3>Next Steps</h3>
<p>While the sample solution is useful, it is definitely not enterprise ready. The main problem with this solution is that the Web Application has a knowledge of the persistence layer. The next step is to factor these calls to the BusinessServices project. Doing that will reduce the interdependencies and will increase the overall testability of the full application, as it is almost impossible to properly unit test code in the Web Application itself. Additionally further decoupling can be achieved by ensuring that all calls to the persistence layer are done through the DataServices layer.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate bootstrapper unitofwork and sessionperrequest]]></post-name>
      <comments>
        <comment id="664" date-created="2010-07-12T06:58:41" date-modified="2010-07-12T06:58:41" approved="true" user-name="Bogdan Marian" user-url="http://nhforge.org/members/satrapu/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[Very nice article! I really like having an IHttpModule to encapsulate NH session management. I do have a question: why opening a transaction and committing it right away ? I would have expected to start the transaction when the NH session is called for the first time to perform a CRUD operation and continue using that transaction for until committing it before the session gets closed...]]></content>
        </comment>
        <comment id="665" date-created="2010-07-12T13:30:38" date-modified="2010-07-12T13:30:38" approved="true" user-name="JorgeVinagre" user-url="http://nhforge.org/members/JorgeVinagre/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[Hi
I know that session per request managment is considered a good practice. Isn´t that true also that session per business process is considered a best practice also?]]></content>
        </comment>
        <comment id="666" date-created="2010-07-12T21:49:13" date-modified="2010-07-12T21:49:13" approved="true" user-name="John Davidson" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[@Bogdan Marian
This is constructed sothat if you do not want to manage transactions then NHibernate will function correctly with no performance penalties, but if you want to manage your transactions, either in your DataLayer or DataServices leyer then you can open a single trnasaction, perform a number of persistence operations and then commit before closing the session.

@JorgeVinagre 
SessionPerRequest is for an ASP.Net application. Each form request should be a single business process.]]></content>
        </comment>
        <comment id="667" date-created="2010-07-16T21:10:59" date-modified="2010-07-16T21:10:59" approved="true" user-name="MattO" user-url="http://nhforge.org/members/MattO/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[This seems to be a bit different (implementing in an httpmodule) compared to what is described here:

http://www.codeproject.com/KB/architecture/NHibernateBestPractices.aspx

The codesmith templates follow most of what is described in the codeproject article listed above.  

Which is better?  Why choose your way over the way CodeSmith is doing it now by following the "best practices" as detailed in the codeproject article?]]></content>
        </comment>
        <comment id="668" date-created="2010-07-16T21:43:53" date-modified="2010-07-16T21:43:53" approved="true" user-name="John Davidson" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[@MattO

The CodeProject article written by Bill McCafferty was published in Mar 2006. It did not take into account the new capability introduced with the 1.2 version of the current_session_context_class. Not much has been written about this class and almost all of the articles that recognized what this class is for, showed implementations using Global.asax. What makes this approach better is that all reference to NHibernate is removed from the web application - this is not fully realized in the demo application, but those deficiencies are noted and will be corrected as development of the application progresses. If the Codesmith templates are still following the practices outlined here then perhaps they are due for some updating?

I use much of Bill McCafferty's other ideas, especially with regard to Model-View-Presenter and will expand on these in the next post.]]></content>
        </comment>
        <comment id="669" date-created="2010-07-18T18:32:26" date-modified="2010-07-18T18:32:26" approved="true" user-name="David W Martines" user-url="http://blogs.businesssoftwareengineering.com">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[I'd like to add my current UnitOfWork implementation to the list of options.  I find that it is simple and effective and can be used per web request or per business transaction, whichever you prefer.  I invite you to take a look and  comment or point out any flaws.

http://blogs.businesssoftwareengineering.com/?p=105]]></content>
        </comment>
        <comment id="674" date-created="2010-07-19T00:30:29" date-modified="2010-07-19T00:30:29" approved="true" user-name="John Davidson" user-url="http://nhforge.org/members/jwdavidson/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[See the nhusers maillist thread at http://groups.google.com/group/nhusers/msg/48e414f480a24950.

The point of the blog is that a UnitOfWork is no longer required. Everything that your UnitOfWork does is already in ISession. The requirement for a separate UnitOfWork became deprecated with the release of NHibernate 1.2, but old habits die hard. 

Rather than repeating the transaction management function of the ISession object in your UnitOfWork, you could spend time on transaction management in the Repository/DAO layer.

If you need a UnitOfWork so that your IoC container will work correctly, then you probably need a different container or a better implementation of how you use the container.]]></content>
        </comment>
        <comment id="675" date-created="2010-07-22T21:13:54" date-modified="2010-07-22T21:13:54" approved="true" user-name="MattO" user-url="http://nhforge.org/members/MattO/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[I'm struggling with the general stateless nature of ASP .NET and how to work with nHibernate and it seems to still be present after reading this article.

My issue is the following:

Say I retrieve data from the database and display it on the web form using ASP .NET.  A user then edits some data on the webform and hits the SAVE button.  It does a post back.

At this point I need to save the data to the database, my session has already disappeared as it only lived through the single request.  And this article states we should use SessionPerRequest.  But how can you do this if you want to do the following things:

Only commit the changes if someone hasn't already changed the data.  For instance, say I retrieve the data, and left it open in my web browser for a minute and then hit the save button, but during that time 3 other people already modified that record in some way.  I need to be able to ensure that I don't overwrite their changes.  How do you handle this?  How can I have nHibernate know that the timestamp on this data has changed and therefore to tell the user to reload the page and try edit the data again?]]></content>
        </comment>
        <comment id="676" date-created="2010-07-22T22:22:28" date-modified="2010-07-22T22:22:28" approved="true" user-name="John Davidson" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[@MattO

You are right that your difficulty understanding is an ASP.Net issue rather than an NHibernate issue, as the problem you describe exists in any web application where concurrency and volatility of a single instance is high. 

In this case NHibernate facilitates a solution. See http://nhforge.org/doc/nh/en/index.html#mapping-declaration-timestamp. Perhaps you are forgetting that NHibernate closes the session when the web page is displayed. So even if you keep the page open if you want to use the entity that was displayed on that page you must reload it into the session by reading it again from the database, hence the discussion about DTO in the post above. Then when it is loaded you can compare the current timestamp with the timestamp retrieved from the web page and then act according to your business rules. In this case advise the user that the data had changed by another user and then display it on the page again for edit, with the new timestamp.

Hope this helps]]></content>
        </comment>
        <comment id="677" date-created="2010-07-22T23:41:00" date-modified="2010-07-22T23:41:00" approved="true" user-name="MattO" user-url="http://nhforge.org/members/MattO/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[Thanks John for all the replys! 

A few (hopefully last) questions:

1.  Have you found that instantiating a nHibernate session so many more times in a stateless application (because you constantly have to refresh the data from the database on each postback) causes performance issues?

2.  Also even if I have to refresh the data from the database, which I'm perfectly fine with.  How can I have nHibernate automatically know the timestamps are different and have it throw the concurrency violation?  The reason why I ask is that compare timestamp columns as byte arrays is a bit cumbersome.

3.  In relation to #2, if I wasn't using a timestamp column because i'm dealing with a table that doesn't have it and there is no other way to check for uniqueness other then checking for differences in EVERY column of say a 50 column table, are my only options is to go through all 50 column propertys we just reloaded from the database on postback to determine if there is a concurrency violation or is there some way in which nHibernate can facilitate this rather then writing a very lengthy IF statement for every property in the table?]]></content>
        </comment>
        <comment id="678" date-created="2010-07-23T00:23:23" date-modified="2010-07-23T00:23:23" approved="true" user-name="John Davidson" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[@MattO

I find that using NHibernate for an ASP.Net application improves performance because it reduces the object-relation impedance mismatch. There is no additional performance hit over a system not using NHibernate as it must make the same number of data connections in order to maintain data consistency. NHibernate formalizes the necessary steps.

In order to effectively compare values of objects, or even complex strings, you should use Object.GetHashCode. See http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx, which allows comparisons without going property by property. Note that if you do not use a version property or timestamp you cannot determine which difference is the one you want to store unless you also store the original object. You would need the original object, the object edited on the web page and the object newly obtained from the database. It is far simpler to modify your database. Even with a legacy system it should be possible to add a version or timestamp field. NHibernate will not do the detection automatically unless you are using pessimistic locking, which I would not recommend in an ASP.Net application.]]></content>
        </comment>
        <comment id="704" date-created="2010-08-11T08:54:48" date-modified="2010-08-11T08:54:48" approved="true" user-name="Raoul Buzziol" user-url="http://nhforge.org/members/raoulus/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[Thank you for the nice article.

@JohnDavidson
Just a consideration about your style of transaction management. We found that avoiding transaction management in Daos and using a separated session (and transaction) manager resulted in less code and less duplication. The approach is inpired by http://www.codeproject.com/KB/architecture/NHibernateBestPractices.aspx and http://community.jboss.org/wiki/sessionsandtransactions . What kind of benefits do you have with your style?

@MattO
We don't hit the db on every page relaod using the model manager by Spring.Net. See http://www.springframework.net/doc-latest/reference/html/web.html#web-databinding
Instead of a timestamp you can use the version http://nhforge.org/doc/nh/en/index.html#mapping-declaration-version element. But the versioning handles conflict for rows not columns and that's correct. If a column changes in a DDD oriented approach the state of your model has changed you must revalidate it, involving probably other properties too.
Conflict resolution can be complex and how do you handle it depens on the functional/non-functional requirements. You can find some ideas here http://nhforge.org/doc/nh/en/index.html#transactions-optimistic .
]]></content>
        </comment>
        <comment id="705" date-created="2010-08-11T12:18:39" date-modified="2010-08-11T12:18:39" approved="true" user-name="John Davidson" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[@Raoul

You are missing the point I am trying to make. NHibernate includes an already built session and transaction manager, and it does not need to be abstracted or extended. It just works - and it requires _no_ additional code.]]></content>
        </comment>
        <comment id="706" date-created="2010-08-11T12:42:12" date-modified="2010-08-11T12:42:12" approved="true" user-name="Raoul Buzziol" user-url="http://nhforge.org/members/raoulus/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[You are right: it requires no additional code.

But you are handling transaction aspects inside _your_ dao with lines like:

if (!m_Session.Transaction.IsActive)
using (var tx = m_Session.BeginTransaction())
tx.Commit();

witch we only do outside, simplifying our dao. Our daos know nothing about transactions.
And duplication like:
m_Session.SaveOrUpdate(entity);
would be no more necessary.

It's not wrong, just different. I was asking myself when your style would pay off over my style.]]></content>
        </comment>
        <comment id="708" date-created="2010-08-19T17:02:45" date-modified="2010-08-19T17:02:45" approved="true" user-name="Eric" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[I was wondering if you can offer any insight into how this would need to change for multiple DB support (one app, multiple dbs on different servers). I was reading Bill McCafferty's article on Codeproject (http://www.codeproject.com/KB/aspnet/NHibernateMultipleDBs.aspx), but that's 1.2 and I'm not quite sure how to merge your solution and his into a best-of-both result.

Further, I'm not sure if NH2.0 adds anything significant to help with multiple DB access.

Any and all help is appreciated.
]]></content>
        </comment>
        <comment id="710" date-created="2010-08-19T21:24:27" date-modified="2010-08-19T21:24:27" approved="true" user-name="John Davidson" user-url="http://nhforge.org/members/jwdavidson/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[@Eric

A better implementation for multiple databases is to use the ISessionFacory as it was designed to be used. Rather than the article you reference see instead http://fabiomaulo.blogspot.com/2009/09/configure-sessionfactory-providers.html

The sample that I have would need to be extended for each session factory instantiated. However, I would be wary about creating an architecture using a web implementation for multiple databases, especially if this is your first NHibernate project.]]></content>
        </comment>
        <comment id="712" date-created="2010-09-14T14:05:52" date-modified="2010-09-14T14:05:52" approved="true" user-name="OS538DAV" user-url="http://nhforge.org/members/OS538DAV/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: UnitOfWork and SessionPerRequest]]></title>
          <content type="text"><![CDATA[Download doesn't work at https://public.me.com/jw_davidson

David]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="740" date-created="2010-12-05T16:08:30" date-modified="2010-12-05T16:08:30" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2010/12/05/nhibernate-bootstrapper-unit-tests-and-project-references.aspx">
          <title type="text"><![CDATA[NHibernate Bootstrapper: Unit Tests and Project References]]></title>
        </trackback>
        <trackback id="1108" date-created="2014-09-28T08:13:23" date-modified="2014-09-28T08:13:23" approved="true" url="http://www2.ucy.ac.cy/~mariosh/test.php?a%5B%5D=Video+-+%3Ca+href%3Dhttp%3A%2F%2Flinkfootprint.com%2Fstatusnet%2Fa5964%2Fall%3Eclick+through+the+next+article%3C%2Fa%3E%2C">
          <title type="text"><![CDATA[article source]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="7683" date-created="2010-01-29T17:05:41" date-modified="2013-03-18T13:24:45" approved="true" email="jwdavidson@gmail.com">
          <title type="text"><![CDATA[jwdavidson]]></title>
        </author>
      </authors>
    </post>
    <post id="679" date-created="2010-07-28T16:11:00" date-modified="2010-07-28T16:11:00" approved="true" post-url="/blogs/nhibernate/archive/2010/07/28/strongly-typed-convention-based-mappings-using-linq-to-xsd-part-1.aspx" type="normal" hasexcerpt="false" views="5573">
      <title type="text"><![CDATA[Strongly typed convention based mappings using Linq to Xsd - Part 1]]></title>
      <content type="text"><![CDATA[<p>This is part 1 in a blog series about <a href="http://fabiomaulo.blogspot.com/2010/03/nhibernate-mappings-path.html" target="_blank">yet another </a>method for configuring your NHibernate mappings in code and writing conventions. Although there are mature solutions for doing this like <a href="http://fluentnhibernate.org/" target="_blank">Fluent NHibernate</a>, I have found that they have required me to learn a new API and set of conventions, and sometimes the extension points I need haven't yet been implemented. I, like a lot of people, am most familiar with configuring NHibernate using xml files, so having a code based API that is very close in structure to an hbm document means I spend less time learning a new API, and more time getting my mappings written and out of the way. In this series, I will show you this API, and show you how simple it is to write your own custom mapping conventions on top of it.</p>
<p align="left">Given the formula <strong>domain assemblies + automapping framework = nhibernate mapping.xml </strong>it is obvious we will need to somehow manipulate and produce an nhibernate mapping xml file in a structured way, using c# code. The way I do this is to use the <a target="_blank" href="http://linqtoxsd.codeplex.com/">LINQ To Xsd project</a> to generate&nbsp; a statically typed representation of an NHibernate mapping file. Here is a simple mapping file, with the classic xml mapping on the left (thanks <a href="http://www.fincher.org/tips/Languages/NHibernate.shtml">fincher.org</a>), and Linq To Xsd based mapping on the right:</p>
<p><a href="http://dl.dropbox.com/u/2808109/blog/nhmapping/xml%20vs%20linqtoxsd.png"><img src="http://dl.dropbox.com/u/2808109/blog/nhmapping/xml%20vs%20linqtoxsd.png" alt="xml vs linqtoxsd" border="0" title="xml vs linqtoxsd" style="border-right-width: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto" /></a></p>
<p>You can see how similar the xml and the code are. This allows you to use easily migrate from xml mapping to code mappings. We can get rid of magic strings and make the mapping refactor proof very easily, e.g. by replacing "NHibernatePets.Pet, NHibernatePets" with typeof(Pet).AssemblyQualifiedName, and using <a target="_blank" href="http://www.clariusconsulting.net/blogs/kzu/archive/2007/12/30/49063.aspx">static reflection</a> to get the property names.</p>
<p>To try this out, download <a target="_blank" href="http://dl.dropbox.com/u/2808109/blog/nhmapping/nhibernate-configuration.cs">nhibernate-configuration.cs</a> and <a target="_blank" href="http://dl.dropbox.com/u/2808109/blog/nhmapping/nhibernate-mapping.cs">nhibernate-mapping.cs</a> (the LINQ to XSD generated files) and include them in your project (you'll also need the Xml.Schema.Linq.dll from <a href="http://linqtoxsd.codeplex.com/" target="_blank">Linq to XSD</a>), then bootstrap your NHibernate configuration using this snippet:</p>
<div id="codeSnippetWrapper" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; width: 97.5%; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; cursor: text; border: silver 1px solid; padding: 4px;">
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> Configuration GetConfiguration(<span style="color: #0000ff">string</span> connectionString)</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">{</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    var cfg = <span style="color: #0000ff">new</span> Configuration();</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    var mappingXDoc = <span style="color: #0000ff">new</span> hibernatemapping()</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    {</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">        <span style="color: #008000">//add your mappings here</span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    };</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">&nbsp;</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    cfg.SetProperty(NHibernate.Cfg.Environment.Dialect, <span style="color: #006080">"NHibernate.Dialect.MsSql2008Dialect"</span>);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    cfg.SetProperty(NHibernate.Cfg.Environment.ConnectionDriver, <span style="color: #006080">"NHibernate.Driver.SqlClientDriver"</span>);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    cfg.SetProperty(NHibernate.Cfg.Environment.ConnectionString, connectionString);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    cfg.SetProperty(NHibernate.Cfg.Environment.ConnectionProvider, <span style="color: #006080">"NHibernate.Connection.DriverConnectionProvider"</span>);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    cfg.SetProperty(NHibernate.Cfg.Environment.ProxyFactoryFactoryClass, <span style="color: #0000ff">typeof</span>(ProxyFactoryFactory).AssemblyQualifiedName);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    </pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    cfg.AddXml(mappingXDoc.ToString());</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">&nbsp;</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    <span style="color: #0000ff">return</span> cfg;</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">}</pre>
<!--CRLF--></div>
</div>
<p>Now you should be able to get started with writing typed mappings. Next time we&rsquo;ll get started on conventions.</p>
<p>__________________________________________________________________________________________________________</p>
<p>This article was originally published (more or less) on my blog at <a target="_blank" href="http://www.adverseconditionals.com">www.adverseconditionals.com</a></p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[strongly typed convention based mappings using linq to xsd part 1]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1157" />
      </categories>
      <authors>
        <author id="5360" date-created="2009-12-18T10:22:28" date-modified="2011-04-04T10:02:25" approved="true" email="mcintyre321@gmail.com">
          <title type="text"><![CDATA[mcintyre321]]></title>
        </author>
      </authors>
    </post>
    <post id="680" date-created="2010-07-28T21:57:00" date-modified="2010-07-28T21:57:00" approved="true" post-url="/blogs/nhibernate/archive/2010/07/28/hibernate-query-language-in-visual-studio.aspx" type="normal" hasexcerpt="false" views="11486">
      <title type="text"><![CDATA[Hibernate Query Language in Visual Studio]]></title>
      <content type="text"><![CDATA[<p>I started to work in an HQL addin for Visual Studio two weeks ago. As described in the <a href="http://hqladdin.codeplex.com/">project site</a>:</p>
<blockquote>
<p>This Visual Studio addin will provide the following features for the HQL file extension:      <br />-syntax highlighting (done),       <br />-syntax checking (done)       <br />-intellisense (<strong>not yet</strong>)</p>
</blockquote>
<p>Currently the addin support syntax highlighting and checking as you can see in the following screenshot:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/20100725_5F00_1011_5F00_778952B4.png"><img height="326" width="669" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/20100725_5F00_1011_5F00_thumb_5F00_22BDC3EF.png" alt="2010-07-25_1011" border="0" title="2010-07-25_1011" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> </p>
<p>One of the more interesting part of this, is that I have not implemented a parser or anything. I have only used the lexer and the parser inside NHibernate 3, so these features will be up to date <span style="text-decoration: underline;">always</span>. In fact you can see the error &ldquo;No viable alternative&rdquo; that is common for most of the ANTLR parsers.</p>
<p>My idea is to support Intellisense as well, so I have reached Felice Pollano. He already has done a lot of work for other application named <a href="http://www.felicepollano.com/CategoryView,category,NHWorkBench.aspx">NHWorkBench</a> and we are willing to cooperate for the intellisense part.</p>
<p>There is a step by step guid on how to use &ldquo;hql&rdquo; files with nhibernate <a href="http://hqladdin.codeplex.com/wikipage?title=HowTo%20register%20queries%20from%20HQL%20files">here</a>.</p>
<p>I have published an alpha release in the <a href="http://visualstudiogallery.msdn.microsoft.com/es-ar/05d1c749-8352-4323-bdba-bc7253d26372">Visual Studio Online Gallery</a>, so is very easy to install it:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/20100727_5F00_0845_5F00_490F816D.png"><img height="454" width="656" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/20100727_5F00_0845_5F00_thumb_5F00_280BE8F9.png" alt="2010-07-27_0845" border="0" title="2010-07-27_0845" style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" /></a> </p>
<p>&nbsp;</p>
<p>If you are doing HQL have a look to my pluggin and let me know your comments!</p>]]></content>
      <post-name type="text"><![CDATA[hibernate query language in visual studio]]></post-name>
      <categories>
        <category ref="1032" />
        <category ref="1122" />
        <category ref="1158" />
      </categories>
      <comments>
        <comment id="681" date-created="2010-07-29T07:17:22" date-modified="2010-07-29T07:17:22" approved="true" user-name="felicepollano" user-url="http://nhforge.org/members/felicepollano/default.aspx">
          <title type="text"><![CDATA[re: Hibernate Query Language in Visual Studio]]></title>
          <content type="text"><![CDATA[Nice Job! And eventually the rigth direction to follow with NH tooling. I tryed to use it on 2010 Express but it seems not to be deployed for this VS sku. Is it possible to have for express too ?
]]></content>
        </comment>
        <comment id="682" date-created="2010-07-29T11:56:56" date-modified="2010-07-29T11:56:56" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: Hibernate Query Language in Visual Studio]]></title>
          <content type="text"><![CDATA[Thank you Felice!
About Express version; I talk with some folks yesterday and even if this were technically possible it is illegal. Nobody can't write extensions for the express version :(]]></content>
        </comment>
        <comment id="683" date-created="2010-07-29T19:48:52" date-modified="2010-07-29T19:48:52" approved="true" user-name="felicepollano" user-url="http://nhforge.org/members/felicepollano/default.aspx">
          <title type="text"><![CDATA[re: Hibernate Query Language in Visual Studio]]></title>
          <content type="text"><![CDATA[Uhmmm
This is a pit, and is a pit in general since your addin is open source even the not "Big VS" licensee should be able to use it, but ok, this is not a technical discussion. I had a look at your code, I really need to learn a lot on VS extensibility before produce something interesting. But feel free to grab the intellisense part from NHWorkbench, I will help you as far as I can.]]></content>
        </comment>
        <comment id="701" date-created="2010-08-02T09:27:54" date-modified="2010-08-02T09:27:54" approved="true" user-name="Stefan Steinegger" user-url="http://nhforge.org/members/ssteinegger/default.aspx">
          <title type="text"><![CDATA[re: Hibernate Query Language in Visual Studio]]></title>
          <content type="text"><![CDATA[That's really cool. I missed something like this.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="684" date-created="2010-07-30T14:08:00" date-modified="2010-07-30T14:08:00" approved="true" post-url="/blogs/nhibernate/archive/2010/07/30/strongly-typed-convention-based-mappings-using-linq-to-xsd-part-2.aspx" type="normal" hasexcerpt="false" views="5211">
      <title type="text"><![CDATA[Strongly typed convention based mappings using Linq to Xsd - Part 2]]></title>
      <content type="text"><![CDATA[<p>In <a target="_blank" href="http://www.adverseconditionals.com/2010/07/fluent-xml-free-convention-based.html">part 1</a> we found out how to generate a mapping file using c# and Linq To XSD. In this post we will extend that to show the use of conventions.</p>
<p>The first thing we need an automapping framework to do is to create a class element in our xml mapping file for each of the entity types in our project. We will need a list of the entities in our project:</p>
<div id="codeSnippetWrapper" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; width: 97.5%; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; cursor: text; border: silver 1px solid; padding: 4px;">
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">var types = <span style="color: #0000ff">typeof</span>(User).Assembly.GetTypesSafe().Where(t.Namespace.StartsWith(<span style="color: #006080">"Servit.Domain.Entities"</span>)).ToList();</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">var mappingXDoc = <span style="color: #0000ff">new</span> hibernatemapping();</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">foreach</span> (var type <span style="color: #0000ff">in</span> types)</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">{</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    var @<span style="color: #0000ff">class</span> = <span style="color: #0000ff">new</span> @<span style="color: #0000ff">class</span>()</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    {</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">        name = type.AssemblyQualifiedName,</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">        table = type.Name + <span style="color: #006080">"s"</span>, <span style="color: #008000">//feel free to use a more advanced pluralization method (<a href="http://bit.ly/b98JK6" title="http://bit.ly/b98JK6">http://bit.ly/b98JK6</a>) &ndash; adding an s works for me! </span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    };</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    mappingXDoc.@<span style="color: #0000ff">class</span>.Add(@<span style="color: #0000ff">class</span>); <span style="color: #008000">//LINQ to XSD didn't pluralize the @class collection, </span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    <span style="color: #008000">//it might have been better if it generated mappingXDoc.classes instead of mappingXDoc.@class...</span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">}</pre>
<!--CRLF--></div>
</div>
<p>A pretty simple convention, but it will do for now. So far we have a mapping document with all our classes, but they are all empty &ndash; no properties! We need some conventions. The idea is that these conventions should be easy peasy to write so that you don&rsquo;t need a big framework like FNH to get your mapping written.</p>
<p>Imagine we want to add conventions to do the following:</p>
<ol>
<li>add an Id element for each class with an Id property, mapped to a entity.Name + "Id" column in the db </li>
<li>add property elements for each int, string, bool etc. etc. except the id property </li>
<li>Add many-to-one properties automatically </li>
</ol>
<p>Lets suppose we have an interface IClassConvention. We&rsquo;re going to get hold of the conventions and apply them to the mappingXDoc variable we defined in the bootstrap code from <a target="_blank" href="http://www.adverseconditionals.com/2010/07/fluent-xml-free-convention-based.html">part 1</a>. Note the use of the <a target="_blank" href="http://www.adverseconditionals.com/2010/07/using-topological-sort-to-order-rules.html">TopologicalSort method</a> from another of my posts, called via an extension method, because we want the conventions to execute in a certain order.</p>
<div id="codeSnippetWrapper">
<div id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #008000">//get all the convention types in our assembly</span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">var conventions = <span style="color: #0000ff">typeof</span>(IClassConvention).Assembly.GetTypesSafe()</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    .Where(t =&gt; <span style="color: #0000ff">typeof</span> (IClassConvention).IsAssignableFrom(t))</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    .Where(t =&gt; t.CanBeInstantiated()) <span style="color: #008000">//check they aren't abstract or have open generic types</span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    .TopoSort((t, potentialTypes) =&gt; potentialTypes.Where(pt =&gt; <span style="color: #0000ff">typeof</span> (IRunAfter&lt;&gt;).MakeGenericType(t).IsAssignableFrom(pt)))</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    .Select(t =&gt; (IClassConvention)Activator.CreateInstance(t)).ToList(); <span style="color: #008000">//and instantiate them</span></pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">&nbsp;</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">foreach</span> (var convention <span style="color: #0000ff">in</span> conventions)</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">{</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    <span style="color: #0000ff">foreach</span> (var type <span style="color: #0000ff">in</span> types)</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    {</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">        var @<span style="color: #0000ff">class</span> = mappingXDoc.@<span style="color: #0000ff">class</span>.Single(c =&gt; c.name == type.AssemblyQualifiedName);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">        convention.Apply(type, @<span style="color: #0000ff">class</span>, types, mappingXDoc);</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">    }</pre>
<!--CRLF-->
<pre style="text-align: left; line-height: 12pt; background-color: white; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;">}</pre>
<!--CRLF--></div>
</div>
<p>OK, so we haven&rsquo;t got any conventions yet, but you can see how we call them and apply them. This is pretty much the whole &ldquo;framework&rdquo; right there. As you can see, there isn&rsquo;t much to it. With this little code, you should be able to start writing your own convention framework, tailored specifically to your classes and database schema.&nbsp;</p>
<p>In the next post, we&rsquo;ll implement a convention or two, and link to a sample project.</p>]]></content>
      <post-name type="text"><![CDATA[strongly typed convention based mappings using linq to xsd part 2]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1157" />
      </categories>
      <authors>
        <author id="5360" date-created="2009-12-18T10:22:28" date-modified="2011-04-04T10:02:25" approved="true" email="mcintyre321@gmail.com">
          <title type="text"><![CDATA[mcintyre321]]></title>
        </author>
      </authors>
    </post>
    <post id="711" date-created="2010-08-20T00:41:00" date-modified="2010-08-20T00:41:00" approved="true" post-url="/blogs/nhibernate/archive/2010/08/19/hqladdin-vers-1-0-0-45-alpha-2.aspx" type="normal" hasexcerpt="false" views="6279">
      <title type="text"><![CDATA[HqlAddin vers. 1.0.0.45 - Alpha 2]]></title>
      <content type="text"><![CDATA[<p>Today I have released a new version of the HqlAddin project, the version is 1.0.0.<strike>45</strike>50 – Alpha 2 (a.k.a. Green Popotito). </p>  <p>Green Popotito comes with a new amazing feature, intellisense for properties and entities. This is a great work that comes from <a href="http://sourceforge.net/projects/faticalabshqled/">Felice Pollano’s NhWorkbench</a>, so kudos for him.</p>  <p>Before we continue, let me show you a short screencast of the tool; follow this <a href="http://www.screencast.com/users/JoseFR/folders/Jing/media/3817f5a4-093d-4a46-a94d-bf65b30fc51c" target="_blank">link</a>.</p>  <p><strong>How does this work?</strong></p>  <p>You have to export (with MEF) your configuration in any assembly, <strike>hql addin will look the output path of the startup project and if it find an <u>export</u> will import the information to give you intellisense.</strike> <strong><u>Just write an export on any project, the build path can be anywhere.</u></strong> Follows the instructions <a href="http://hqladdin.codeplex.com/wikipage?title=HowToAdvanceIntellisense">here</a>.</p>  <p>Any configuration of any version of NHibernate is ok. In order to update your intellisense (e.g. when you change your mappings) you will have to rebuild the solution ctrl + shift + b.</p>  <p></p>  <h3>How to use the hql files?</h3>  <p>You can read the full guide <a href="http://hqladdin.codeplex.com/wikipage?title=HowToHqlFiles&amp;referringTitle=Documentation">here</a>.</p>  <h3>Where do I get this?</h3>  <p>You can download from the <a href="http://hqladdin.codeplex.com/">main website</a> or simply from the Visual Studio Online Gallery of your Extension Manager. Read more <a href="http://hqladdin.codeplex.com/wikipage?title=Installation&amp;referringTitle=Documentation">here</a>.</p>  <h3></h3>  <h3>Provide feedback is mandatory</h3>  <p>Please get involved with the project, provide some feedback, thoughts, issues or anything!</p>]]></content>
      <post-name type="text"><![CDATA[hqladdin vers 1 0 0 45 alpha 2]]></post-name>
      <categories>
        <category ref="1122" />
      </categories>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="714" date-created="2010-09-28T02:37:00" date-modified="2010-09-28T02:37:00" approved="true" post-url="/blogs/nhibernate/archive/2010/09/27/hqladdin-on-hbms.aspx" type="normal" hasexcerpt="false" views="5421">
      <title type="text"><![CDATA[HqlAddin on Hbms!]]></title>
      <content type="text"><![CDATA[<p>A month ago I released <a href="http://jfromaniello.blogspot.com/2010/08/hqladdin-vers-10045-alpha-2.html">HqlAddin Green Popotito</a>. After talking with my friend <a href="http://fabiomaulo.blgospot.com">Fabio Maulo</a>, he convinced me to add support for hbm files. Well, that’s it, the new release add supports for hbm.xml files and I’ve absolutely dropped the support for “hql” files (<span style="text-decoration: line-through">sorry but</span> this is not the standard way of writing named queries). So, “Green popotito” is the last version with support for hql files.</p>  <p>In this post I will talk about the features of the HqlAddin V 0.9 – Alpha 3.</p>  <h1>Syntax highlighting</h1>  <p>HqlAddin brings coloring to your queries:</p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_4A0EA425.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_5B7F04FD.png" width="479" height="248" /></a> </p>  <p>as you can see here:</p>  <ul>   <li>blue; for keywords </li>    <li>dark-red; for strings </li>    <li>blue-violet; for parameters </li> </ul>  <p>Even inside &lt;![CDATA[ ]]&gt; tags:</p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3293EFF4.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_31BB8A0A.png" width="477" height="233" /></a> </p>  <h1>Error detection</h1>  <p>Using the same parser inside NHibernate 3, HqlAddin can detects syntactical problems:</p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_49924B63.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7030B1E3.png" width="646" height="319" /></a> </p>  <p>You can see the problem in three places;</p>  <ul>   <li>The red wave underline </li>    <li>The tooltip text </li>    <li>and in the error list, you can see the exception of ANTLR, and navigate to the line with double click </li> </ul>  <p>This is another example of exception:</p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_495275D6.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_76D39599.png" width="584" height="176" /></a> </p>  <h1>Intellisense</h1>  <p>In order to get intellisense you need to do a little trick, explained in this <a href="http://hqladdin.codeplex.com/wikipage?title=HowToAdvanceIntellisense&amp;referringTitle=Documentation">link</a>. If you don’t do this trick, the other two features explained above <span style="text-decoration: underline">will work</span>. I am not so happy with this code, specially with having to touch your code. I will enhance this on futures version, and maybe I will work to add another mechanism. But for now, I only have this. You can add this piece of code on any, any project, even in your data tests project.</p>  <p>A little explanation of the process; in order to get intellisense working, HqlAddin need access to your nhibernate configuration, so you have to export (with System.ComponentModel) an instance of NHibernate.Cfg.Configuration. It doesn’t care what version of NHibernate you are using. HqlAddin will search your configuration when:</p>  <ul>   <li>You open a solution. </li>    <li>You build a solution. </li> </ul>  <p>The intellisense working:</p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6D2B2763.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_659FB7F6.png" width="576" height="269" /></a> </p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_2E95B3F0.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7693C00C.png" width="480" height="312" /></a> </p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_19940BB0.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_3006AA37.png" width="523" height="283" /></a> </p>  <p>&#160;</p>  <h1>This combo comes with french fries</h1>  <p>Because you are given me an instance of NHibernate’s Configuration, I know when you fail. So, I call this feature “strongly typed hbm’s”. Because, configuring NHibernate actually means “to compile mappings”</p>  <p>This is the snapshot:</p>  <p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3BBBF169.png"><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="image" border="0" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_69E5C756.png" width="603" height="409" /></a> </p>  <p>This is not a desired feature just a <span style="text-decoration: underline">side effect</span> :) and its out of the scope of the addin.</p>  <p>That’s all, as always said, I am way interested in your opinion.</p>]]></content>
      <post-name type="text"><![CDATA[hqladdin on hbms]]></post-name>
      <categories>
        <category ref="1122" />
      </categories>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="718" date-created="2010-10-05T16:28:00" date-modified="2010-10-05T16:28:00" approved="true" post-url="/blogs/nhibernate/archive/2010/10/05/nhibernate-3-0-cookbook.aspx" type="normal" hasexcerpt="false" views="14120">
      <title type="text"><![CDATA[NHibernate 3.0 Cookbook]]></title>
      <content type="text"><![CDATA[<p>This week Packt published the <a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">NHibernate 3.0 Cookbook</a>. Packt are offering all members of the NHibernate community 20% off the book. </p>
<p>The book helps users to get solutions to common NHibernate problems to develop high-quality performance-critical data access applications.</p>
<p>The book, which is 328 pages long, contains quick-paced self-explanatory recipes organized in progressive skill levels and functional areas.</p>
<p><strong>Overview of NHibernate 3.0 Cookbook</strong></p>
<ul>
<li>Master the full range of NHibernate features</li>
<li>Reduce hours of application development time and get better application architecture and performance</li>
<li>Create, maintain, and update your database structure automatically with the help of NHibernate</li>
<li>Written and tested for NHibernate 3.0 with input from the development team distilled in to easily accessible concepts and examples</li>
<li>Part of Packt's Cookbook series: each recipe is a carefully organized sequence of instructions to complete the task as efficiently as possible</li>
</ul>
<p><strong>Is this book for you? </strong></p>
<p>This book is written for NHibernate users at all levels of experience. Examples are written in C# and XML. Some basic knowledge of SQL is assumed.</p>
<p>To get your exclusive 20% discount when you buy through PacktPub.com, just enter the discount code <strong>NHIBCBK20</strong> (case sensitive), to the shopping cart.</p>
<p>Click here to read more about the <a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">NHibernate 3.0 Cookbook</a>.</p>
<p><strong>Note</strong> :&nbsp;<span style="text-decoration: underline;">the customers must be logged in to PacktPub.com for&nbsp;discount code&nbsp;to be applied</span></p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 3 0 cookbook]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
      </categories>
      <comments>
        <comment id="723" date-created="2010-10-15T10:44:19" date-modified="2010-10-15T10:44:19" approved="true" user-name="Malediction" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate 3.0 Cookbook]]></title>
          <content type="text"><![CDATA[Just received this book in the post from Packtpub, I can recommend it as a solid read for anyone that wants to sharpen their nhibernate skills. :)]]></content>
        </comment>
        <comment id="730" date-created="2010-11-10T12:48:29" date-modified="2010-11-10T12:48:29" approved="true" user-name="Tal Shterzer" user-url="http://nhforge.org/members/Tal.Shterzer/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 3.0 Cookbook]]></title>
          <content type="text"><![CDATA[Bought the eBook and I can tell that it's an excellent read for both beginners and advanced users of NHibernate]]></content>
        </comment>
        <comment id="753" date-created="2010-12-23T02:10:44" date-modified="2010-12-23T02:10:44" approved="true" user-name="green smoke" user-url="http://smokelesscigreviews.com/green-smoke-review">
          <title type="text"><![CDATA[re: NHibernate 3.0 Cookbook]]></title>
          <content type="text"><![CDATA[it helps me a lot, especially for me as a beginner for cooking.thnks for sharing.]]></content>
        </comment>
        <comment id="996" date-created="2011-10-27T21:08:54" date-modified="2011-10-27T21:08:54" approved="true" user-name="West Valley Detention Center" user-url="http://www.westvalleydetentioncenterbail.com">
          <title type="text"><![CDATA[re: NHibernate 3.0 Cookbook]]></title>
          <content type="text"><![CDATA[NHibernate is a nice competitor to Entity Framework.  It's not as obvious why an ORM is useful to many .NET guys, but it sure saves a ton of time.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2102" date-created="2008-08-29T16:20:25" date-modified="2011-05-11T20:29:06" approved="true" email="fabiomaulo@gmail.com">
          <title type="text"><![CDATA[fabiomaulo]]></title>
        </author>
      </authors>
    </post>
    <post id="721" date-created="2010-10-07T17:33:00" date-modified="2010-10-07T17:33:00" approved="true" post-url="/blogs/nhibernate/archive/2010/10/07/delphi-conference-brazil-introducing-nh-to-delphi-world.aspx" type="normal" hasexcerpt="false" views="4708">
      <title type="text"><![CDATA[Delphi Conference - Brazil (Introducing NH to Delphi world)]]></title>
      <content type="text"><![CDATA[<p>Hi Friends!&nbsp; Next October 26th I'll be introducing NHibernate for Delphi users in the Delphi Conference day. It's a free event, you just have to register&nbsp; for it. </p>
<p>So, if you will be here in Brazil, make a visit [:D]</p>
<p>Event website: http://latam.embarcadero.com/br/delphiconference/</p>
<p>See you there!</p>]]></content>
      <post-name type="text"><![CDATA[delphi conference brazil introducing nh to delphi world]]></post-name>
      <authors>
        <author id="2350" date-created="2008-10-30T19:57:53" date-modified="2010-10-07T17:32:39" approved="true" email="pauloquicoli@gmail.com">
          <title type="text"><![CDATA[quicoli]]></title>
        </author>
      </authors>
    </post>
    <post id="722" date-created="2010-10-10T22:10:00" date-modified="2010-10-10T22:10:00" approved="true" post-url="/blogs/nhibernate/archive/2010/10/10/simple-cqrs-nhibernate-event-store.aspx" type="normal" hasexcerpt="false" views="11124">
      <title type="text"><![CDATA[Simple CQRS + NHibernate event store]]></title>
      <content type="text"><![CDATA[<p>(From my personal blog @ <a href="http://jasondentler.com">http://jasondentler.com</a>)</p>
<p>I had hoped to include a CQRS-related recipe in the <a target="_blank" href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">Data Access Layer chapter of my book</a>. Of course, not having any real world CQRS experience myself, I couldn't offer any authoritative guidance. Now that I have some free time, I'm determined to remedy that situation. </p>
<p>I won't go in to the specifics of CQRS or even event sourcing. The internet already has plenty of people explaining it better than I ever could. If you're like me, you need code to learn. You need to hack away at something for a few days before you really get it. </p>
<p>In the spirit of "learning in the open," I'm sharing this weekend's effort to fix up <a target="_blank" href="http://github.com/gregoryyoung/m-r">Greg Young's Simple CQRS example</a>. His solution is called "SimplestPossibleThing.sln" which describes it perfectly. It's a great learning tool, but it's all built on top of in-memory collections, not persistent storage. </p>
<p>In this post, I'm going to make his event store persistent. With some luck, I'll move on to the read model and bring it full circle in a later post. </p>
<p> Before we dive in, take a look at <a target="_blank" href="http://github.com/gregoryyoung/m-r/blob/master/SimpleCQRS/EventStore.cs">Greg's in-memory implementation</a>. There's a few things to note:   </p>
<ol>
<li>Rather than persisting the actual events, he&rsquo;s &ldquo;persisting&rdquo; EventDescriptor structs with references to the Events. I&rsquo;m going to steal this idea to make our NHibernate code easier. </li>
<li>The expectedVersion parameter should match the version of the most recent event. When it doesn&rsquo;t, we know we have a concurrency violation. </li>
</ol>
<h4>A persistent event store</h4>
<p>First, let's do a little refactoring of the EventStore implementation:</p>
<pre class="brush:csharp">public abstract class BaseEventStore : IEventStore
{
  private readonly IEventPublisher _publisher;

  protected BaseEventStore(IEventPublisher publisher)
  {
    _publisher = publisher;
  }

  public void SaveEvents(Guid aggregateId, 
    IEnumerable&lt;Event&gt; events, 
    int expectedVersion)
  {
    var eventDescriptors = new List&lt;EventDescriptor&gt;();
    var i = expectedVersion;
    foreach (var @event in events)
    {
      i++;
      @event.Version = i;
      eventDescriptors.Add(new EventDescriptor(aggregateId, @event, i));
    }

    AddEvents(eventDescriptors, aggregateId, expectedVersion);

    foreach (var @event in events)
    {
      _publisher.Publish(@event);
    }
  }

  public List&lt;Event&gt; GetEventsForAggregate(Guid aggregateId)
  {
    var eventDescriptors = GetEventDescriptorsForAggregate(aggregateId);
    if (null == eventDescriptors || !eventDescriptors.Any())
    {
      throw new AggregateNotFoundException();
    }
    return eventDescriptors.Select(desc =&gt; desc.EventData).ToList();
  }

  protected abstract IEnumerable&lt;EventDescriptor&gt;
    LoadEventDescriptorsForAggregate(Guid aggregateId);

  protected abstract void PersistEventDescriptors(
    IEnumerable&lt;EventDescriptor&gt; newEventDescriptors,
    Guid aggregateId,
    int expectedVersion);

}</pre>
<h4>Concurrency violation checking</h4>
<p>Greg's implementation explicitly checked for concurrency violations before persisting. Since he's working in memory, it's a simple check and a cheap operation. With a database, it gets more complicated. We could lock and query for the max version, but that's extreme and unnecessary. </p>
<p>We assume that the expectedVersion value is not greater than the actual current version. Since we're not deleting events from the event stream, I think this is a safe assumption. Essentially, while there's a small chance someone may have done something to our aggregate, they'll never undo something from our aggregate. </p>
<p>We can rely on our database for the check. If we insert an event with version 2 after events 0, 1, 2, and 3 are written, we'll get a primary key constraint violation. Since this is the only PK in our database, we know exactly why this happened. We'll convert this to a ConcurrencyException.</p>
<h4>Persistence implementation</h4>
<p>Now we have a base class that handles the transformation and event publishing and lets us implement our own persistence. </p>
<pre class="brush:csharp">public class NHibernateEventStore : BaseEventStore
{
  private readonly IStatelessSession _session;

  public NHibernateEventStore(
    IEventPublisher publisher,
    IStatelessSession session)
    : base(publisher)
  {
    _session = session;
  }

  protected override IEnumerable&lt;EventDescriptor&gt; 
    LoadEventDescriptorsForAggregate(Guid aggregateId)
  {
    var query = _session.GetNamedQuery("LoadEventDescriptors")
      .SetGuid("aggregateId", aggregateId);
    return Transact(() =&gt; query.List&lt;EventDescriptor&gt;());
  }

  protected override void PersistEventDescriptors(
    IEnumerable&lt;EventDescriptor&gt; newEventDescriptors, 
    Guid aggregateId, int expectedVersion)
  {
    // Don't bother to check expectedVersion. Since we can't delete 
    // events, we won't skip a version. If we do have a true concurrency 
    // violation, we'll get a PK violation exception. 
    // SqlExceptionConverter will change it to a ConcurrencyViolation.
    Transact(() =&gt;
                {
                  foreach (var ed in newEventDescriptors)
                    _session.Insert(ed);
                });
  }

  protected virtual TResult Transact&lt;TResult&gt;(Func&lt;TResult&gt; func)
  {
    if (!_session.Transaction.IsActive)
    {
      // Wrap in transaction
      TResult result;
      using (var tx = _session.BeginTransaction())
      {
        result = func.Invoke();
        tx.Commit();
      }
      return result;
    }

    // Don't wrap;
    return func.Invoke();
  }

  protected virtual void Transact(Action action)
  {
    Transact&lt;bool&gt;(() =&gt;
    {
      action.Invoke();
      return false;
    });
  }

}</pre>
<p>We&rsquo;re using stateless sessions because it&rsquo;s easy. We don&rsquo;t need a big unit of work implementation, automatic dirty checking, lazy loading, or any of that other stuff we rely on for traditional applications. We&rsquo;re just stuffing rows in to a table. </p>
<p>For those of you who&rsquo;ve read <a target="_blank" href="https://www.packtpub.com/nhibernate-3-0-cookbook/book">my book</a>, the Transact methods are taken right from the first section of my Data Access Layer chapter. They let us manage the <a target="_blank" href="http://nhforge.org">NHibernate</a> transaction when we need to, and handle it for us when we don&rsquo;t. </p>
<h4>Query and Model</h4>
<p>The LoadEventDescriptors query is dead simple:</p>
<pre class="brush:xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"&gt;
  &lt;query name="LoadEventDescriptors"&gt;
    &lt;![CDATA[
    from EventDescriptor ed
    where ed.Id = :aggregateId
    order by ed.Version
    ]]&gt;
  &lt;/query&gt;
&lt;/hibernate-mapping&gt;</pre>
<p>Next, we redesign the EventDescriptor for use with NHibernate.</p>
<pre class="brush:csharp">public class EventDescriptor
{

  public Event EventData { get; private set; }
  public Guid Id { get; private set; }
  public int Version { get; private set; }

  public EventDescriptor(Guid id, Event eventData, int version)
  {
    EventData = eventData;
    Version = version;
    Id = id;
  }

  private EventDescriptor()
  {
  }

  public override bool Equals(object obj)
  {
    return Equals(obj as EventDescriptor);
  }

  public bool Equals(EventDescriptor other)
  {
    return null == other
              ? false
              : other.Id == Id &amp;&amp; other.Version == Version;
  }

  public override int GetHashCode()
  {
    return Id.GetHashCode() ^ Version.GetHashCode();
  }

}</pre>
<p>We've switched from a struct to a class, converted the readonly fields to properties with private setters, added a private constructor, and implemented Equals and GetHashCode. We did all of this to make NHibernate happy. We won't be doing any lazy loading, so we don't need to make our properties virtual. Because we'll use a composite key (Id and Version), we need to override Equals and GetHashCode. </p>
<p>Here&rsquo;s our mapping for EventDescriptor:</p>
<pre class="brush:xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
                   assembly="SimpleCQRS"
                   namespace="SimpleCQRS.EventStore"&gt;
  &lt;typedef class="SimpleCQRS.EventStore.NHibernate.JsonType, SimpleCQRS.EventStore.NHibernate"
           name="json" /&gt;
  &lt;class name="EventDescriptor" table="Events"
         mutable="false" lazy="false"&gt;
    &lt;composite-id&gt;
      &lt;key-property name="Id" /&gt;
      &lt;key-property name="Version" /&gt;
    &lt;/composite-id&gt;
    &lt;property name="EventData" type="json" &gt;
      &lt;column name="Type"/&gt;
      &lt;column name="Data"/&gt;
    &lt;/property&gt;
  &lt;/class&gt;
&lt;/hibernate-mapping&gt;</pre>
<p>EventDescriptor is immutable. We&rsquo;ve disabled lazy loading. Our primary key is a composite of the Id and Version. Our EventData is stored in two columns. The first stored the assembly qualified name of the .NET type. The second column stores the event as json serialized data. We use the JsonType IUserType to handle the serialization and deserialization transparently. Newtonsoft json.Net does all of the heavy lifting.</p>
<pre class="brush:csharp">[Serializable]
public class JsonType : IUserType
{

  private static object Deserialize(string data, string type)
  {
    return Deserialize(data, TypeNameHelper.GetType(type));
  }

  private static object Deserialize(string data, Type type)
  {
    return JsonConvert.DeserializeObject(data, type);
  }

  private static string Serialize(object value)
  {
    return null == value
              ? null
              : JsonConvert.SerializeObject(value);
  }

  private static string GetType(object value)
  {
    return null == value
              ? null
              : TypeNameHelper.GetSimpleTypeName(value);
  }

  public object NullSafeGet(IDataReader rs, string[] names, object owner)
  {
    int typeIndex = rs.GetOrdinal(names[0]);
    int dataIndex = rs.GetOrdinal(names[1]);
    if (rs.IsDBNull(typeIndex) || rs.IsDBNull(dataIndex))
    {
      return null;
    }

    var type = (string) rs.GetValue(typeIndex);
    var data = (string) rs.GetValue(dataIndex);
    return Deserialize(data, type);
  }

  public void NullSafeSet(IDbCommand cmd, object value, int index)
  {
    if (value == null)
    {
      NHibernateUtil.String.NullSafeSet(cmd, null, index);
      NHibernateUtil.String.NullSafeSet(cmd, null, index + 1);
      return;
    }

    var type = GetType(value);
    var data = Serialize(value);
    NHibernateUtil.String.NullSafeSet(cmd, type, index);
    NHibernateUtil.String.NullSafeSet(cmd, data, index + 1);
  }

  public object DeepCopy(object value)
  {
    return value == null
              ? null
              : Deserialize(Serialize(value), GetType(value));
  }

  public object Replace(object original, object target, object owner)
  {
    return original;
  }

  public object Assemble(object cached, object owner)
  {
    var parts = cached as string[];
    return parts == null
              ? null
              : Deserialize(parts[1], parts[0]);
  }

  public object Disassemble(object value)
  {
    return (value == null)
              ? null
              : new string[]
                  {
                    GetType(value),
                    Serialize(value)
                  };
  }

  public SqlType[] SqlTypes
  {
    get
    {
      return new[]
                {
                  SqlTypeFactory.GetString(10000), // Type
                  SqlTypeFactory.GetStringClob(10000) // Data
                };
    }
  }

  public Type ReturnedType
  {
    get { return typeof(Event); }
  }

  public bool IsMutable
  {
    get { return false; }
  }

  public new bool Equals(object x, object y)
  {
    if (ReferenceEquals(x, y))
    {
      return true;
    }
    if (ReferenceEquals(null, x) || ReferenceEquals(null, y))
    {
      return false;
    }

    return x.Equals(y);
  }

  public int GetHashCode(object x)
  {
    return (x == null) ? 0 : x.GetHashCode();
  }
}</pre>
<p>
TypeNameHelper still needs some work. GetSimpleTypeName should strip out the version, public key, processor architecture, and all that goo from the assembly qualified name. 
</p>
<pre class="brush:csharp">public static class TypeNameHelper
{
    
  public static string GetSimpleTypeName(object obj)
  {
    return null == obj
              ? null
              : obj.GetType().AssemblyQualifiedName;
  }

  public static Type GetType(string simpleTypeName)
  {
    return Type.GetType(simpleTypeName);
  }

}</pre>
<p>Finally, we need a bit of NHibernate magic to convert to primary key constraint violations in to ConcurrencyExceptions. I probably could have made this simpler, but it works.</p>
<pre class="brush:csharp">public class SqlExceptionConverter : ISQLExceptionConverter 
{

  public Exception Convert(AdoExceptionContextInfo exInfo)
  {
    var dbException = ADOExceptionHelper.ExtractDbException(exInfo.SqlException);

    var ns = dbException.GetType().Namespace ?? string.Empty;
    if (ns.ToLowerInvariant().StartsWith("system.data.sqlite"))
    {
      // SQLite exception
      switch (dbException.ErrorCode)
      {
        case -2147467259: // Abort due to constraint violation
          throw new ConcurrencyException();
      }
    }

    if (ns.ToLowerInvariant().StartsWith("system.data.sqlclient"))
    {
      // MS SQL Server
      switch (dbException.ErrorCode)
      {
        case -2146232060:
          throw new ConcurrencyException();
      }
    }

    return SQLStateConverter.HandledNonSpecificException(exInfo.SqlException,
        exInfo.Message, exInfo.Sql);
  }

}</pre>
<p>Fabio has a <a target="_blank" href="http://fabiomaulo.blogspot.com/2009/06/improving-ado-exception-management-in.html">blog post</a> all about NHibernate&rsquo;s SQLExceptionConverter. To turn this on, just set the sql_exception_converter property in your NHibernate configuration. </p>
<p>While I was working on this, I ran in to NH-2020, despite being resolved. Basically, batching and the SQL exception converter don&rsquo;t mix, so turn off batching. I told <a target="_blank" href="http://fabiomaulo.blogspot.com/">Fabio</a> about it. I&rsquo;ll do what I can to get it fixed for good in NH 3 GA. </p>
<p>Thanks to Greg Young for all his efforts to teach the world CQRS through <a target="_blank" href="http://cqrsinfo.com">CQRSInfo.com</a>, including his 6 1/2 hour screen cast. Also, thank you Fabio for sharing your json user type with me and answering my questions. </p>]]></content>
      <post-name type="text"><![CDATA[simple cqrs nhibernate event store]]></post-name>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="731" date-created="2010-11-26T13:40:00" date-modified="2010-11-26T13:40:00" approved="true" post-url="/blogs/nhibernate/archive/2010/11/26/nhibernate-code-base-analysis.aspx" type="normal" hasexcerpt="false" views="10097">
      <title type="text"><![CDATA[NHibernate Code Base Analysis]]></title>
      <content type="text"><![CDATA[<p>Patrick Smacchia writing. I am not a NH developer but the creator of a static analysis tool for .NET developer: <a href="http://www.NDepend.com">NDepend</a>. I recently analyzed NH v3.0.0 Candidate Release 1 with NDepend and I had a chance to discuss some results with NH developer Fabio Maulo. Fabio suggested me to show some results on the NH blog, so here it is.</p>
<p>NDepend generated a report by analyzing NH v3.0.0 CR1 code base. See the report <a target="_blank" href="http://www.ndepend.com/SampleReports/OnNHibernate/NDependReport.html">here</a>. NDepend has also the ability to show static analysis results live, inside Visual Studio. The live results are richer than the static report results. Here, I will mostly focus on results extracted from the report, but a few additional results will be obtained from the richer NDepend live capabilities.</p>
<p>&nbsp;</p>
<h4>Code Size<br /></h4>
<p>NH code base weights almost 63K Lines of Code (<a href="http://www.ndepend.com/Metrics.aspx#NbLinesOfCode">LoC</a> as defined here). Developers hates LoC as a productivity yardstick measurement, but it doesn't mean that the LoC code metric is useless. LoC represents a great way to compare code base size and gets an idea of the overall development effort. In the <i>report namespace metrics section</i>, we can see that the namespace <b>NHibernate.Hql.Ast.ANTLR.*</b> generated by ANTLR weights around 18K LoC. So we can consider that NH handcrafted code weights <b>45 LoC</b>. Now we have a number to compare to the <b>19K LoC</b> of NUnit, the <b>28K LoC</b> of CC.NET, the <b>32K LoC</b> of Db4o, the <b>110K LoC</b> of NDepend, the roughly <b>130 KLoC</b> of Llblgen, the roughly <b>500K LoC</b> (or so) of R# (that certainly contains a significant portion of generated code) and the roughly <b>2M LoC </b>of the .NET Fx 4.</p>
<p>So not only NH is one of the most successful OSS initiative, it is also one of the biggest OSS code base. To quote one NH contributor, <i>NH is a big beast</i>!</p>
<p>&nbsp;</p>
<h4>Assembly Partitioning<br /></h4>
<p>NH is packaged in a single <i>NHibernate.dll</i> assembly. I am a big advocate of reducing the number of assemblies and one assembly seems an ideal number. This way:</p>
<ul>
<li>Projects consumers of NH just need to link, maintain the reference to just one assembly. This is a very good thing compared to many other OSS Fx that force to reference, maintain many assemblies.</li>
<li>Compilation time is much (much) faster. Compilation time of one single VS project can be easily 10 times faster than the compilation time of the same code base partitioned in many VS projects.</li>
<li>Startup-time of an application using NH is a bit faster. Indeed, the CLR comes with a slight overhead for each extra assemblies to load at runtime.</li>
</ul>
<p>On the dependency graph or dependency matrix diagrams of the report, I can see that the NH assembly is linking 3 extra assemblies that needs to be redistributed as well: <i>Antlr3.Runtime</i>, <i>Remotion.Data.Linq</i>, and <i>Iesi.Collections</i>.</p>
<p>&nbsp;</p>
<p><b>Code Coverage and NH Code Correctness<br /></b></p>
<p>The report shows the number <b>75.93%</b> code coverage ratio. This is an excellent score, especially taken account the large code size. I consider code coverage ratio as the queen the of the code quality metrics. The higher it is, the less likely it is to release a bug in production. However things are not so simple.&nbsp; High code coverage ratio matters if (<b>and only if)</b> the number of checks performed while running unit tests is also high. These checks are usually done in test code (through API like <b>Assert.IsTrue(...)</b> ). But few developers realize that checks have the same value if they are done in the code tested itself through the API <b>Debug.Assert(...)</b> or through the new <b>Microsoft Code Contract API</b>. The two important things is that checks (or contract if you prefer) must not slow down execution, and must fail abruptly when the condition is violated.</p>
<p>I can quickly see that NH doesn't use Debug.Assert(...) nor the new Microsoft Code Contract API. But on the other hands I can see that NH comes with 2735 unit tests, all successfully executed. This significant number, coupled with the <b>75,93%</b> code coverage ratio, advocate for an excellent testing plan for NH. To quote one NH contributor I talked with once:&nbsp; <i>NH is very hard to break</i>! (but by using code contracts and striving for an even higher code coverage ratio it would be even harder to break).</p>
<p>An another and obvious reason why NH code is rock solid, is related to the huge NH community size, that can be counted in hundred of thousands of developers and projects. In this condition, any bug has very few chances to live for a long time.</p>
<p>&nbsp;</p>
<p><b>Code Architecture</b></p>
<p>Most of .NET developers consider (wrongly IMHO) that .NET code must be componentized through .NET assembly (meaning through VS projects). As discussed above, having very few assemblies comes with important benefits. The essential point is that assemblies are physical artifacts while components are logical artifacts. Hence assembly partitioning must be driven by physical reasons (like lazy-code loading or an addin system).</p>
<p>Nevertheless a 63K LoC code base needs a solid architecture. A solid architecture is the key for high code maintainability. How to define components in .NET code? Personally my preference goes to the usage of namespaces to define component. This way of doing comes wit many advantages: namespaces are logical artifacts, namespaces can be structured hierarchically, architecture explorer tooling can deal out-of-the-box with namespaces, namespaces are supported at language-level and namespaces can be used to draw explicit and concrete boundaries.</p>
<p>In a framework such as NH, namespaces are essentially used to organize the public API. This way of doing is not incompatible with componentizing the code through namespaces. But in the case of NH, the project inherited the API structure of the Hibernate project in the Java sphere. The former Hibernate project doesn't rely on code componentization through namespaces, so NH doesn't as well. And there is no hope for any refactoring : this would result in a fatal tsunami of breaking changes in the NH public API.</p>
<p>So NH code base has no obvious (at least to me) nor explicit componentization. I know there are architecture guidelines that NH contributors must learn, understand and follow, but sitting outside of the project, I cannot easily figure them out.</p>
<p><b><br /></b></p>
<p><b>Code Quality</b></p>
<p>If you look back at the report, you'll see many typical <a href="http://www.ndepend.com/SampleReports/OnNHibernate/NDependReport.html">Code Quality rules</a> violated. As said, I consider Code Coverage ratio as the queen of code quality rules, but that doesn't mean that other code quality metrics don't matter. So I can see through the rule <b style="color: #008000; background-color: #e6ffe6;">Methods&nbsp;too&nbsp;complex&nbsp;-&nbsp;critical&nbsp;(ILCyclomaticComplexity) </b>two dozens of awfully complex methods.&nbsp; Most of them seems to be generated by ANTLR . So there is room here to refine the NDepend Code Query Rule to exclude this generated code, like for example...</p>
<p>
<span style="color: #008000;">//&nbsp;&lt;Name&gt;</span><b style="color:#008000;background-color:#E6FFE6">Methods&nbsp;too&nbsp;complex&nbsp;-&nbsp;critical&nbsp;(ILCyclomaticComplexity)</b><span style="color: #008000;">&lt;/Name&gt;<br /></span><span style="color: #0000ff;">WARN</span>&nbsp;<span style="color: #0000ff;">IF</span>&nbsp;<span style="color: #000064;">Count</span>&nbsp;<span style="color: #000000;">&gt;</span>&nbsp;<b style="color:#000000;background-color:#FFFF99">0</b>&nbsp;<span style="color: #0000ff;">IN</span>&nbsp;<span style="color: #0000ff;">SELECT</span>&nbsp;<span style="color: #0000ff;">METHODS</span><span style="color: #000000;">&nbsp;<br /></span><b><span style="color: #0000ff;">OUT</span>&nbsp;<span style="color: #0000ff;">OF</span>&nbsp;<span style="color: #0000ff;">NAMESPACES</span>&nbsp;<span style="color: #a31515;">"NHibernate.Hql.Ast.ANTLR"</span></b>&nbsp;<span style="color: #0000ff;">WHERE</span><span style="color: #000000;">&nbsp;<br />&nbsp;&nbsp;</span><span style="color: #000064;">ILCyclomaticComplexity</span>&nbsp;<span style="color: #000000;">&gt;</span>&nbsp;<b style="color:#000000;background-color:#FFFF99">40</b>&nbsp;<span style="color: #0000ff;">AND</span><span style="color: #000000;">&nbsp;<br />&nbsp;&nbsp;</span><span style="color: #000064;">ILNestingDepth</span>&nbsp;<span style="color: #000000;">&gt;</span>&nbsp;<b style="color:#000000;background-color:#FFFF99">4</b><span style="color: #000000;">&nbsp;<br />&nbsp;&nbsp;</span><span style="color: #0000ff;">ORDER</span>&nbsp;<span style="color: #0000ff;">BY</span>&nbsp;<span style="color: #000064;">ILCyclomaticComplexity</span>&nbsp;<span style="color: #0000ff;">DESC</span><span style="color: #008000;"><br /></span><span style="color: #008000;"><a href="http://www.NDepend.com/Metrics.aspx#ILNestingDepth" target="_blank"></a></span></p>
<p>...and see than now only 3 handcrafted methods are matched (one of those, <b>NHibernate.Cfg.Configuration.GenerateSchemaUpdateScript(Dialect,DatabaseMetadata)</b> has 49 lines of code, a Cyclomatic Complexity of 25 and is 87% covered by tests).</p>
<p>The rule violated <b style="color: #008000; background-color: #e6ffe6;">Methods&nbsp;with&nbsp;too&nbsp;many&nbsp;parameters&nbsp;-&nbsp;critical&nbsp;(NbParameters)</b> is more a concern since we can see here a redundant code smell of having many constructors with plenty of parameters (up to 22 parameters for the ctor of the class <b>NHibernate.Cfg.Mappings</b>).</p>
<p>The rule violated <b style="color: #008000; background-color: #e6ffe6;">Type&nbsp;should&nbsp;not&nbsp;have&nbsp;too&nbsp;many&nbsp;responsibilities&nbsp;(Efferent&nbsp;Coupling) </b>seems to me another concern. It exhibits several <i>god classes</i>, meaning classes with too many responsibilities. Here NDepend bases its measure on the <i>Efferent Coupling</i> code metric, that represents, the number of other types a type is using. The notion of class responsibility is a bit abstract, it is often translated to the tenet: <i>a class should have only one reason to change</i> which is still abstract in my opinion. Obviously the higher the <i>Efferent Coupling</i>, the more likely a class has too many responsibilities. <i>God classes</i> often result from the lack of refactoring during project evolution, iterations after iterations. The <i>god class</i> represented an initial clear concept that has evolved without appropriate refactoring, and developers got used to live with this code smell. In the context of a public framework such as NH, refactoring a public god class or interface might be not and option if this implies unacceptable API public breaking changes.</p>
<p>The rule violated <b style="color: #008000; background-color: #e6ffe6;">Complex&nbsp;methods&nbsp;should&nbsp;be&nbsp;100%&nbsp;covered&nbsp;by&nbsp;tests</b><span style="color: #008000;"> </span>exhibits a few hundreds of relatively complex methods not thoroughly covered by tests. Here also a lot of these methods belong to <b>NHibernate.Hql.Ast.ANTLR</b> and by filtering them, we still have more than 200 matches. This fact is a concern because having high code coverage ratio is not enough. What is important is to have a lot of methods and classes, 100% covered by tests. Indeed, empirically I noticed that: <i>code that is hard to test is often code that contains subtle and hard to find bugs</i>. Unfortunately, the 10% code hard to test is the code that demands more than 50% of test writing resources.</p>
<p>We could continue to enumerate one by one Code Quality rules violated. The truth is that any sufficiently large code base contains thousands of violation of most basic code quality rules. An important decision must be taken to care for code quality before the code becomes so messy that it discourage developers to work on it (and to be honest, I had feedback from two NH contributors that left the project, partly for that reason). Once again, the NH situation here is more the rule than the exception and I'd say that if you are a real-world developer yourself, there are 9 chances on 10 that you are not satisfied by the code quality of the everyday code base you are working on. The problem when deciding to begin to care for code quality is that tooling like NDepend or FxCop reports literally thousands of flaws. However, a tool like NDepend makes things easier through its support for baseline. Concretely one can decide to continuously compare the code base against, say, the last release, and then fix flaws only on code refactored or added since the baseline. This way the team follow the rule <i>if it's not broken don't fix it</i> and it achieves better and better code quality without significant effort. Concretely a CQL rule that should take account of the baseline can be refactored as easily as:</p>
<p>
<span style="color: #008000;">//&nbsp;&lt;Name&gt;</span><b style="color:#008000;background-color:#E6FFE6">From&nbsp;now,&nbsp;all&nbsp;methods&nbsp;added&nbsp;or&nbsp;refactored&nbsp;should not be too complex</b><span style="color: #008000;">&lt;/Name&gt;<br /></span><span style="color: #0000ff;">WARN</span>&nbsp;<span style="color: #0000ff;">IF</span>&nbsp;<span style="color: #000064;">Count</span>&nbsp;<span style="color: #000000;">&gt;</span>&nbsp;<b style="color:#000000;background-color:#FFFF99">0</b>&nbsp;<span style="color: #0000ff;">IN</span>&nbsp;<span style="color: #0000ff;">SELECT</span>&nbsp;<span style="color: #0000ff;">METHODS</span>&nbsp;<span style="color: #0000ff;">WHERE</span><span style="color: #000000;"><br /><br /></span><b><span style="color: #008000;">//&nbsp;Match&nbsp;methods&nbsp;new&nbsp;or&nbsp;modified&nbsp;since&nbsp;Baseline&nbsp;for&nbsp;Comparison...<br /></span><span style="color: #000000;">&nbsp;&nbsp;</span><span style="color: #000000;">(</span><span style="color: #000064;">WasAdded</span>&nbsp;<span style="color: #0000ff;">OR</span>&nbsp;<span style="color: #000064;">CodeWasChanged</span><span style="color: #000000;">)</span></b>&nbsp;<span style="color: #0000ff;">AND</span><span style="color: #000000;"><br /><br /></span><span style="color: #008000;">//&nbsp;...that&nbsp;are too complex<br /></span><span style="color: #000000;">&nbsp; </span><span style="color: #000064;">CyclomaticComplexity</span> <span style="color: #000000;">&gt;</span> <b style="color:#000000;background-color:#FFFF99">10</b></p>
<p><b style="color:#000000;background-color:#FFFF99"></b><span style="color: #000000;"><br /><br /></span><b>Code Evolution</b></p>
<p>And this was a good transition to the last part I'd like to comment: Code Diff. As said NDepend can compare 2 versions of a code base and in the report we compared NH v3.0.0.CR1 with v2.1.2.GA. The rule <b style="color: #008000; background-color: #e6ffe6;">API&nbsp;Breaking&nbsp;Changes:&nbsp;Types</b> seems to exhibit a few matches:</p>
<p>
<span style="color: #008000;">//&nbsp;&lt;Name&gt;</span><b style="color:#008000;background-color:#E6FFE6">API&nbsp;Breaking&nbsp;Changes:&nbsp;Types</b><span style="color: #008000;">&lt;/Name&gt;<br /></span><span style="color: #0000ff;">WARN</span>&nbsp;<span style="color: #0000ff;">IF</span>&nbsp;<span style="color: #000064;">Count</span>&nbsp;<span style="color: #000000;">&gt;</span>&nbsp;<b style="color:#000000;background-color:#FFFF99">0</b>&nbsp;<span style="color: #0000ff;">IN</span>&nbsp;<span style="color: #0000ff;">SELECT</span>&nbsp;<span style="color: #0000ff;">TYPES</span><span style="color: #000000;"><br /></span><span style="color: #0000ff;">WHERE</span>&nbsp;<span style="color: #000064;">IsPublic</span>&nbsp;<span style="color: #0000ff;">AND</span>&nbsp;<span style="color: #000000;">(</span><span style="color: #000064;">VisibilityWasChanged</span>&nbsp;<span style="color: #0000ff;">OR</span>&nbsp;<span style="color: #000064;">WasRemoved</span><span style="color: #000000;">)</span><span style="color: #000000;"><br /></span></p>
<p>Types like <b>NHibernate.Dialect.SybaseAnywhereDialect</b>, <b>NHibernate.Cache.ISoftLock</b> or <b>NHibernate.Cfg.ConfigurationSchema.ClassCacheUsage</b> were public types that have either be removed, renamed, or set to internal types. Also we can see that some public interfaces such as, <b>NHibernate.Proxy.IProxyFactory</b> or <b>NHibernate.Hql.IQueryTranslator</b> have been changed. This can break client code if these interfaces were meant to be implemented by clients.</p>
<p>In the Code diff report section, the query <b style="color:#008000;background-color:#E6FFE6">Public&nbsp;Types&nbsp;added </b>and also <b style="color:#008000;background-color:#E6FFE6">Namespaces added </b>represent a mean to list new features added to NH v3.</p>
<p>
<span style="color: #008000;">//&nbsp;&lt;Name&gt;</span><b style="color:#008000;background-color:#E6FFE6">Public&nbsp;Types&nbsp;added</b><span style="color: #008000;">&lt;/Name&gt;<br /></span><span style="color: #0000ff;">SELECT</span>&nbsp;<span style="color: #0000ff;">TYPES</span>&nbsp;<span style="color: #0000ff;">WHERE</span>&nbsp;<span style="color: #000064;">WasAdded</span>&nbsp;<span style="color: #0000ff;">AND</span>&nbsp;<span style="color: #000064;">IsPublic</span><span style="color: #008000;"><br /></span></p>
<p>Here, we mostly see the prominent new NH v3 linq capabilities through the numerous <b>NHibernate.Linq.*</b> namespaces added, and we can also focus on the many secondary featurettes like <b>NHibernate.SqlTypes.XmlSqlType</b> or <b>NHibernate.Transaction.AdoNetWithDistributedTransactionFactory</b>.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate code base analysis]]></post-name>
      <categories>
        <category ref="1036" />
        <category ref="1089" />
      </categories>
      <comments>
        <comment id="747" date-created="2010-12-13T12:10:58" date-modified="2010-12-13T12:10:58" approved="true" user-name="almaz" user-url="http://nhforge.org/members/almaz/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Code Base Analysis]]></title>
          <content type="text"><![CDATA[>>The essential point is that assemblies are physical artifacts while components are logical artifacts

I still treat projects (and assemblies produced from them) as logical artifacts. What makes them physical artifacts is "ilmerge" that combines several logical components (dlls) into physical deployable unit.]]></content>
        </comment>
        <comment id="751" date-created="2010-12-20T17:30:10" date-modified="2010-12-20T17:30:10" approved="true" user-name="Patrick Smacchia" user-url="http://nhforge.org/members/Patrick-Smacchia/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Code Base Analysis]]></title>
          <content type="text"><![CDATA[Sergei, what about high compilation durations and VS slow down due to numerous projects? VS can compile the NH project in 5 seconds on my machine. If NH was made of, say, 20 .csproj, this would take likely more than 30s to Rebuild a few touched projects.

Hopefully you have the skill to master what you are doing. But in real-world corp, I've seen literally dozens of projects rooted in hundreds of assemblies. These guys have compilation times measured in mintes instead of seconds. The productivity of developers is significantly affected by this fact.
]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="732" date-created="2010-11-30T16:34:40" date-modified="2010-11-30T16:34:40" approved="true" url="http://codebetter.com/blogs/patricksmacchia/archive/2010/11/30/nhibernate-code-base-analysis.aspx">
          <title type="text"><![CDATA[NHibernate Code Base Analysis]]></title>
        </trackback>
        <trackback id="755" date-created="2010-12-27T18:53:25" date-modified="2010-12-27T18:53:25" approved="true" url="http://feedproxy.google.com/~r/CodeBetter/~3/7mBb4k80ly0/">
          <title type="text"><![CDATA[NHibernate Code Base Analysis]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="13950" date-created="2010-11-25T16:44:46" date-modified="2010-11-26T13:29:33" approved="true" email="psmacchia@gmail.com">
          <title type="text"><![CDATA[Patrick Smacchia]]></title>
        </author>
      </authors>
    </post>
    <post id="737" date-created="2010-12-05T13:51:00" date-modified="2010-12-05T13:51:00" approved="true" post-url="/blogs/nhibernate/archive/2010/12/05/nhibernate-3-0-released.aspx" type="normal" hasexcerpt="false" views="30497">
      <title type="text"><![CDATA[NHibernate 3.0 released]]></title>
      <content type="text"><![CDATA[<p>First, <a href="http://www.packtpub.com/nhibernate-3-0-cookbook/book?utm_source=jasondentler.com&amp;utm_medium=blog&amp;utm_content=authorsite&amp;utm_campaign=mdb_004974">NHibernate 3.0 Cookbook</a> is now a Packt Publishing best seller. Thank you everyone who bought a copy. The NHibernate project gets a portion of each and every sale.</p>
<p>Yesterday, <a href="http://fabiomaulo.blogspot.com/">Fabio</a> announced the release of <a href="/">NHibernate</a> 3.0 General Availability. Go get it! </p>
<p>The previous official release of NHibernate was version 2.1.2, just over 1 year ago. Since then, the team has made a ton of improvements and bug fixes.</p>
<p>Most importantly, NHibernate now targets .NET 3.5, allowing us to use lambda expressions and LINQ. This has led to an explosion of new ways to configure and query. </p>
<p>There are a few very minor breaking changes mentioned in the release notes:</p>
<ul>
<li><a target="_blank" href="http://216.121.112.228/browse/NH-2392">[NH-2392]</a> ICompositeUserType.NullSafeSet method signature has changed </li>
<li><a target="_blank" href="http://216.121.112.228/browse/NH-2199">[NH-2199]</a> null values in maps/dictionaries are no longer silently ignored/deleted </li>
<li><a target="_blank" href="http://216.121.112.228/browse/NH-1894">[NH-1894]</a> SybaseAnywhereDialect has been removed, and replaced with SybaseASA9Dialect. Sybase Adaptive Server Enterprise (ASE) dialects removed. </li>
<li><a target="_blank" href="http://216.121.112.228/browse/NH-2251">[NH-2251]</a> Signature change for GetLimitString in Dialect </li>
<li><a target="_blank" href="http://216.121.112.228/browse/NH-2284">[NH-2284]</a> Obsolete members removed </li>
<li><a target="_blank" href="http://216.121.112.228/browse/NH-2358">[NH-2358]</a> DateTimeOffset type now works as a DateTimeOffset instead a "surrogate" of DateTime </li>
</ul>
<p>Plans for version 3.1 include additional bug fixes and patches, as well as enhancements for the new LINQ provider.</p>
<p>As Fabio says, Happy Persisting!</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 3 0 released]]></post-name>
      <comments>
        <comment id="742" date-created="2010-12-07T10:08:41" date-modified="2010-12-07T10:08:41" approved="true" user-name="CuriousCoder" user-url="http://nhforge.org/members/CuriousCoder/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 3.0 released]]></title>
          <content type="text"><![CDATA[Seriously, well done everyone, this project is so important to our company - and so many others like us.  

I've already purchase the NH 3.0 cookbook and its a fantastic resource, definitely worth picking up to support the NH team and development!

Great job!]]></content>
        </comment>
        <comment id="744" date-created="2010-12-07T19:47:04" date-modified="2010-12-07T19:47:04" approved="true" user-name="sashas" user-url="http://nhforge.org/members/sashas/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 3.0 released]]></title>
          <content type="text"><![CDATA[Awesome. I'm especially excited about the improved UTC handling (http://216.121.112.228/browse/NH-1135)!]]></content>
        </comment>
        <comment id="745" date-created="2010-12-08T13:18:35" date-modified="2010-12-08T13:18:35" approved="true" user-name="amachado" user-url="http://">
          <title type="text"><![CDATA[re: NHibernate 3.0 released]]></title>
          <content type="text"><![CDATA[Cool.  Can you guys publish updated NuGet packages for this release?]]></content>
        </comment>
        <comment id="748" date-created="2010-12-13T18:34:46" date-modified="2010-12-13T18:34:46" approved="true" user-name="sashas" user-url="http://nhforge.org/members/sashas/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 3.0 released]]></title>
          <content type="text"><![CDATA[Great job! 
Have there been any changes to allow adding 'with nolock hints'
 to queries? I can't wait to start using this new build at work but the nolocks are group policy...'
]]></content>
        </comment>
        <comment id="759" date-created="2011-01-08T08:46:05" date-modified="2011-01-08T08:46:05" approved="true" user-name="Namer" user-url="http://nhforge.org/members/namer315/default.aspx">
          <title type="text"><![CDATA[re: NHibernate 3.0 released]]></title>
          <content type="text"><![CDATA[that is very Goooooood News
I was waiting new version one year
thank you for every one worked in this project  ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="738" date-created="2010-12-05T14:09:40" date-modified="2010-12-05T14:09:40" approved="true" url="http://www.philliphaydon.com/post/2010/12/05/Yay-for-NHibernate-30.aspx">
          <title type="text"><![CDATA[Yay for NHibernate 3.0]]></title>
        </trackback>
        <trackback id="741" date-created="2010-12-06T22:56:32" date-modified="2010-12-06T22:56:32" approved="true" url="http://www.antonsetiawan.com/post/NHibernate-30-Is-Released!.aspx">
          <title type="text"><![CDATA[NHibernate 3.0 General Availability]]></title>
        </trackback>
        <trackback id="743" date-created="2010-12-07T16:55:08" date-modified="2010-12-07T16:55:08" approved="true" url="http://progg.ru/%D0%92%D1%8B%D0%BF%D1%83%D1%89%D0%B5%D0%BD-NHibernate-30">
          <title type="text"><![CDATA[Выпущен NHibernate 3.0]]></title>
        </trackback>
        <trackback id="746" date-created="2010-12-09T15:45:47" date-modified="2010-12-09T15:45:47" approved="true" url="http://msug.vn.ua/blogs/romank/archive/2010/12/09/nhibernate-3-0-released.aspx">
          <title type="text"><![CDATA[NHibernate 3.0 released]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4101" date-created="2009-08-11T15:32:47" date-modified="2011-08-26T14:18:42" approved="true" email="jasondentler@gmail.com">
          <title type="text"><![CDATA[Jason Dentler]]></title>
        </author>
      </authors>
    </post>
    <post id="739" date-created="2010-12-05T15:59:00" date-modified="2010-12-05T15:59:00" approved="true" post-url="/blogs/nhibernate/archive/2010/12/05/nhibernate-bootstrapper-unit-tests-and-project-references.aspx" type="normal" hasexcerpt="false" views="6365">
      <title type="text"><![CDATA[NHibernate Bootstrapper: Unit Tests and Project References]]></title>
      <content type="text"><![CDATA[<p>This post is the second one about the NHibernate Bootstrapper. <a target="_blank" href="/blogs/nhibernate/archive/2010/07/11/nhibernate-bootstrapper-unitofwork-and-sessionperrequest.aspx">The first is located here</a>. The first post set up the project structure, introduced the generic DAO, and demonstrated the SessionPerRequest implementation in an IHttpModule. This post will factor the reference to NHibernate out of the web application project and cover some unit testing techniques.&nbsp; Programmers that are not familiar with <a target="_blank" href="http://en.wikipedia.org/wiki/Solid_(object-oriented_design)">SOLID</a> should review the Wikipedia page and the references there. The first post noted that the version of NHibernate Bootstrapper presented there was not suitable for use in anything other than a demonstration program. The version of the solution discussed in this post is suitable for use in a small-scale system where there no more than 15 classes involved. The version following this post should be suitable for even the largest deployments, though there will be at least one additional post that refines the capabilities of an enterprise ready solution. The project sources are in a zip file located <a target="_blank" href="https://public.me.com/jw_davidson/NHibernateBootstrap_V2.0.zip">here</a> and are updated to use the NHibernate 3.0.0 GA release.</p>
<h3>PresentationManager</h3>
<p>The solution in the first post used NHibernate references in the web application project. In this version of the solution those references have been moved to the presenter project. Now the solution is taken on the characteristics of the Model-View-Presenter (MVP) , discussed by Martin Fowler <a target="_blank" href="http://www.martinfowler.com/eaaDev/uiArchs.html">here</a>, and later refined into a <a target="_blank" href="http://www.martinfowler.com/eaaDev/SupervisingPresenter.html">Supervising Presenter</a> and <a target="_blank" href="http://www.martinfowler.com/eaaDev/PassiveScreen.html">Passive View</a>. The solution employed here follows the Passive View pattern, where the view has no direct interaction with the model. The solution builds on 2 Code Project articles, originally released in Jul 2006. The first reference used is <a target="_blank" href="http://www.codeproject.com/KB/architecture/ModelViewPresenter.aspx">Model View Presenter with ASP.Net</a> by Bill McCafferty and the second is <a target="_blank" href="http://www.codeproject.com/KB/architecture/Advanced_MVP.aspx">Advancing the Model-View-Presenter Pattern &ndash; Fixing the Common Problems</a> by Acoustic. There are a number of reasons for using the MVP pattern, but the most important of them is the enabling of testing. The second half of this post will show how it becomes possible to test the code behind of an aspx page.</p>
<p>In the first post the BusinessServices project, that would hold the presenters, was empty. Now there is a Presentation Manager and a Presenter classes. The PresentationManager is able to register the view of the ASP.Net page and associate it with the correct presenter. It is also remarkable in that it automatically instantiates the correct presenter for use by the ASP.Net page. This is done in the LoadPresenter method. The auto-instantiation is how ASP.Net pages are able to function with only a reference to the PresenterTypeAttribute in the web application project.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b87679f5-54da-4ba8-a1af-675406b4b213" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PresentationManager.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> Infrastructure;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BusinessServices</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">PresentationManager</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> T RegisterView&lt;T&gt;(<span style="color:#2b91af">Type</span> presenterType, <span style="color:#2b91af">IView</span> myView) <span style="color:#0000ff">where</span> T : <span style="color:#2b91af">Presenter</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> RegisterView&lt;T&gt;(presenterType, myView, <span style="color:#0000ff">null</span>);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> T RegisterView&lt;T&gt;(<span style="color:#2b91af">Type</span> presenterType, <span style="color:#2b91af">IView</span> view, <span style="color:#2b91af">IHttpSessionProvider</span> httpSession) <span style="color:#0000ff">where</span> T : <span style="color:#2b91af">Presenter</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> (LoadPresenter(presenterType, view, httpSession)) <span style="color:#0000ff">as</span> T;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">void</span> RegisterView(<span style="color:#2b91af">Type</span> presenterType, <span style="color:#2b91af">IView</span> view)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegisterView(presenterType, view, <span style="color:#0000ff">null</span>);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">void</span> RegisterView(<span style="color:#2b91af">Type</span> presenterType, <span style="color:#2b91af">IView</span> view, <span style="color:#2b91af">IHttpSessionProvider</span> httpSession)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadPresenter(presenterType, view, httpSession);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">static</span> <span style="color:#2b91af">Object</span> LoadPresenter(<span style="color:#2b91af">Type</span> presenterType, <span style="color:#2b91af">IView</span> view, <span style="color:#2b91af">IHttpSessionProvider</span> httpSession)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">int</span> arraySize = ((httpSession == <span style="color:#0000ff">null</span>) ? 1 : 2);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Object</span>[] constructorParams = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Object</span>[arraySize];</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constructorParams[0] = view;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (arraySize.Equals(2))</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constructorParams[1] = httpSession;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> <span style="color:#2b91af">Activator</span>.CreateInstance(presenterType, constructorParams);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The PresenterTypeAttribute is what each page uses to drive SelfRegister. This is the mechanism that ties the individual web pages to the appropriate presenter in an automated fashion. This is one aspect of a poor man&rsquo;s Inversion of Control without requiring a separate container to hold the various dependencies.</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2d3ca1d6-8372-409a-8d21-9ddd21115f53" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PresenterTypeAttribute.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BusinessServices</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//[AttributeUsage(AttributeTargets.All, Inherited = true)]</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">PresenterTypeAttribute</span> : <span style="color:#2b91af">Attribute</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">Type</span> _presenterType;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> PresenterTypeAttribute(<span style="color:#2b91af">Type</span> presenterType)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_presenterType = presenterType;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#2b91af">Type</span> PresenterType</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _presenterType; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _presenterType = <span style="color:#0000ff">value</span>; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<h3>Revised Web Application Project</h3>
<p>The code behind for the web page has been revised to work with a presenter. You will note that a large amount of code that was in the original code behind file has now been commented out, as it has been revised slightly and moved to the the PersonPresenter class. The code behind file is now left with just event declarations, a number of properties and the occasional method for working with gridview or dropdown controls and the Page_Load event. All that remains in the code behind are methods and properties that are referencing System.Web, while the various presenter classes have no reference to System.Web. It is important to note that the removal of the reference to System.Web in the presenter classes is what enables a high degree of code coverage in the Unit Tests.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c205af0b-8bc8-4b46-9cb6-6de13c501dfc" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Default.aspx.cs (Part 1)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Web.UI;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Web.UI.WebControls;</li>
<li><span style="color:#0000ff">using</span> BusinessServices;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BusinessServices.Interfaces;</li>
<li><span style="color:#0000ff">using</span> BusinessServices.Presenters;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> DataServices.Person;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> WebNHibernate</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">PresenterType</span>(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">PersonPresenter</span>))]</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">partial</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">_Default</span> : <span style="color:#2b91af">BasePage</span>, <span style="color:#2b91af">IPersonView</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">GridViewBtnEvent</span> OnEditCommand;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">GridViewBtnEvent</span> OnDeleteCommand;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnRefreshPersonGrid;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnSaveEditPerson;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnClearEditPerson;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//added event for presenter</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyEvent</span> OnPageLoadNoPostback;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//private ISession m_session = null;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> Page_Load(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">EventArgs</span> e)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//added for the presenter</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">base</span>.SelfRegister(<span style="color:#0000ff">this</span>);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//OnEditCommand += new GridViewBtnEvent(_view_OnEditCommand);</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//OnDeleteCommand += new GridViewBtnEvent(_view_OnDeleteCommand);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//OnRefreshPersonGrid += new EmptyBtnEvent(_view_OnRefreshPersonGrid);</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//OnSaveEditPerson += new EmptyBtnEvent(_view_OnSaveEditPerson);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//OnClearEditPerson += new EmptyBtnEvent(_view_OnClearEditPerson);</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//if (m_session == null)</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;m_session = SessionManager.SessionFactory.GetCurrentSession();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!Page.IsPostBack)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//added line below for presenter</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnPageLoadNoPostback();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//IList&lt;PersonDto&gt; gvData = Get_PersonData();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//Fill_gvPerson(gvData);</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5bc58955-a373-4e5b-af1f-4f1c34babbb0" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Default.aspx.cs (Part 2)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> gvPerson_OnRowCommand(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">GridViewCommandEventArgs</span> e)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Guid</span> id = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>(gvPerson.DataKeys[<span style="color:#2b91af">Convert</span>.ToInt32(e.CommandArgument)].Value.ToString());</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (e.CommandName == <span style="color:#a31515">"EditRow"</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnEditCommand(id);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span> <span style="color:#0000ff">if</span> (e.CommandName == <span style="color:#a31515">"DeleteRow"</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnDeleteCommand(id);</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//public void _view_OnEditCommand(Guid id)</span></li>
<li><span style="color:#008000">//{</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;if (m_session == null)</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = SessionManager.SessionFactory.GetCurrentSession();</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;PersonDAOImpl dao = new PersonDAOImpl(m_session);</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;Person pers = dao.GetByID(id);</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtPersonIdValue = pers.Id.ToString();</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtFirstNameValue = pers.FirstName;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtLastNameValue = pers.LastName;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtEmailValue = pers.Email;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtUserIdValue = pers.UserID;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;pers = null;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;dao = null;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//public void _view_OnDeleteCommand(Guid id)</span></li>
<li><span style="color:#008000">//{</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;if (m_session == null)</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = SessionManager.SessionFactory.GetCurrentSession();</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;PersonDAOImpl dao = new PersonDAOImpl(m_session);</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;using (var tx = m_session.BeginTransaction())</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;{</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dao.Delete(id);</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;dao = null;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;_view_OnRefreshPersonGrid();</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//}</span></li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:19e1af1a-1ed6-4c21-9e41-210d8c97e036" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Default.aspx.cs (Part 3)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#008000">//public void _view_OnRefreshPersonGrid()</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//{</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;PersonDto&gt; gvData = Get_PersonData();</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;Fill_gvPerson(gvData);</span></li>
<li><span style="color:#008000">//}</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//public void _view_OnSaveEditPerson()</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//{</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;if (m_session == null)</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = SessionManager.SessionFactory.GetCurrentSession();</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;Guid editId = new Guid();</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;Person editPers = new Person();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;if (!string.IsNullOrEmpty(txtPersonIdValue))</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editId = new Guid(txtPersonIdValue);</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;PersonDAOImpl dao = new PersonDAOImpl(m_session);</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;using (var tx = m_session.BeginTransaction())</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;{</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (editId.ToString().Length == 36)</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers = dao.GetByID(editId);</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.FirstName = txtFirstNameValue;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.LastName = txtLastNameValue;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.Email = txtEmailValue;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.UserID = txtUserIdValue;</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers = dao.Save(editPers);</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;}</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;editPers = null;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;dao = null;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;_view_OnRefreshPersonGrid();</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;_view_OnClearEditPerson();</span></li>
<li><span style="color:#008000">//}</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//public void _view_OnClearEditPerson()</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//{</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtPersonIdValue = null;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtFirstNameValue = null;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtLastNameValue = null;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtEmailValue = null;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;txtUserIdValue = null;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//}</span></li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aff824c0-d04a-426b-8b0d-88a26f850221" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Default.aspx.cs (Part 4)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> btnRefresh_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">EventArgs</span> e)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;OnRefreshPersonGrid();</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> btnSave_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">EventArgs</span> e)</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;OnSaveEditPerson();</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> btnClear_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">EventArgs</span> e)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;OnClearEditPerson();</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Fill_gvPerson(<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; data)</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;gvPerson.DataSource = data;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;gvPerson.DataBind();</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//public IList&lt;PersonDto&gt; Get_PersonData()</span></li>
<li><span style="color:#008000">//{</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;PersonDto&gt; retVal = null;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;if (m_session == null)</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = SessionManager.SessionFactory.GetCurrentSession();</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;ICriteria crit = m_session.CreateCriteria(typeof(Person));</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;PersonDAOImpl dao = new PersonDAOImpl(m_session);</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;Person&gt; people = dao.GetByCriteria(crit);</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;retVal = (from person in people</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select new PersonDto</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PersonID = person.Id,</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FirstName = person.FirstName,</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LastName = person.LastName,</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = person.Email,</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UserID = person.UserID</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).ToList&lt;PersonDto&gt;();</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;crit = null;</span></li>
<li><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;dao = null;</span></li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;people = null;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#008000">//&nbsp;&nbsp;&nbsp;&nbsp;return retVal;</span></li>
<li><span style="color:#008000">//}</span></li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:65eef155-a0e6-442d-8755-8d6f70a2ac2e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Default.aspx.cs (Part 5)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtPersonIdValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> txtPersonID.Text; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { txtPersonID.Text = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtFirstNameValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> txtFirstName.Text; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { txtFirstName.Text = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtLastNameValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> txtLastName.Text; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { txtLastName.Text = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtEmailValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> txtEmail.Text; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { txtEmail.Text = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtUserIdValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> txtUserID.Text; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { txtUserID.Text = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<h3>BasePage</h3>
<p>The web project has had a BasePage class added to reuse element and methods common to more than just a single web page. This includes the SelfRegister method and various properties for RequestString, RequestUrl and IsPostBack. These are sample functions which have common utility throughout all the web pages. It is here that additional utility methods and functions with similar commonality would be added.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:25ecec0b-901b-48ad-a3ae-1d4a417748ce" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">BasePage.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Specialized;</li>
<li><span style="color:#0000ff">using</span> BusinessServices;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">namespace</span> WebNHibernate</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">BasePage</span> : System.Web.UI.<span style="color:#2b91af">Page</span>, <span style="color:#2b91af">IView</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _requestUrl;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> T RegisterView&lt;T&gt;() <span style="color:#0000ff">where</span> T : <span style="color:#2b91af">Presenter</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> <span style="color:#2b91af">PresentationManager</span>.RegisterView&lt;T&gt;(<span style="color:#0000ff">typeof</span>(T), <span style="color:#0000ff">this</span>, <span style="color:#0000ff">new</span> <span style="color:#2b91af">HttpSessionProvider</span>());</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> SelfRegister(System.Web.UI.<span style="color:#2b91af">Page</span> page)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (page != <span style="color:#0000ff">null</span> &amp;&amp; page <span style="color:#0000ff">is</span> <span style="color:#2b91af">IView</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">object</span>[] attributes = page.GetType().GetCustomAttributes(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">PresenterTypeAttribute</span>), <span style="color:#0000ff">true</span>);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (attributes != <span style="color:#0000ff">null</span> &amp;&amp; attributes.Length &gt; 0)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">foreach</span> (<span style="color:#2b91af">Attribute</span> viewAttribute <span style="color:#0000ff">in</span> attributes)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (viewAttribute <span style="color:#0000ff">is</span> <span style="color:#2b91af">PresenterTypeAttribute</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PresentationManager</span>.RegisterView((viewAttribute <span style="color:#0000ff">as</span> <span style="color:#2b91af">PresenterTypeAttribute</span>).PresenterType,</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page <span style="color:#0000ff">as</span> <span style="color:#2b91af">IView</span>, <span style="color:#0000ff">new</span> <span style="color:#2b91af">HttpSessionProvider</span>());</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">break</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#2b91af">NameValueCollection</span> RequestString</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> Request.QueryString; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> RequestUrl</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> Request.RawUrl;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _requestUrl = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">bool</span> IsPostback</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> <span style="color:#0000ff">this</span>.IsPostBack; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<h3>PersonPresenter</h3>
<p>The PersonPresenter class now inherits the code that was commented out in the code behind file. It must also setup event listeners for events that will be raised from the web page. It is these event listeners that improve the testability of the solution, as now this functionality can be unit tested separate from any System.Web dependency. At this point the various presenters have a reference to NHibernate and work directly with the data access layer. The next iteration of the bootstrapper will refactor the presenter and place a data services layer between the presenter and the data access layer. The presenter will then no longer reference NHibernate.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7d07adf1-9f15-4b40-a73b-7aa5c52d2f72" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenter.cs (Part 1)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate;</li>
<li><span style="color:#0000ff">using</span> NHibernateDAO;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernateDAO.DAOImplementations;</li>
<li><span style="color:#0000ff">using</span> DataServices.Person;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> DomainModel.Person;</li>
<li><span style="color:#0000ff">using</span> Infrastructure;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BusinessServices.Interfaces;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BusinessServices.Presenters</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">PersonPresenter</span> : <span style="color:#2b91af">Presenter</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">ISession</span> m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> PersonPresenter(<span style="color:#2b91af">IPersonView</span> view)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <span style="color:#0000ff">this</span>(view, <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ }</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> PersonPresenter(<span style="color:#2b91af">IPersonView</span> view, <span style="color:#2b91af">IHttpSessionProvider</span> httpSession)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <span style="color:#0000ff">base</span>(view, httpSession)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.OnEditCommand += <span style="color:#0000ff">new</span> <span style="color:#2b91af">GridViewBtnEvent</span>(_view_OnEditCommand);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.OnDeleteCommand += <span style="color:#0000ff">new</span> <span style="color:#2b91af">GridViewBtnEvent</span>(_view_OnDeleteCommand);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.OnRefreshPersonGrid += <span style="color:#0000ff">new</span> <span style="color:#2b91af">EmptyBtnEvent</span>(_view_OnRefreshPersonGrid);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.OnSaveEditPerson += <span style="color:#0000ff">new</span> <span style="color:#2b91af">EmptyBtnEvent</span>(_view_OnSaveEditPerson);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.OnClearEditPerson += <span style="color:#0000ff">new</span> <span style="color:#2b91af">EmptyBtnEvent</span>(_view_OnClearEditPerson);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.OnPageLoadNoPostback += <span style="color:#0000ff">new</span> <span style="color:#2b91af">EmptyEvent</span>(_personView_OnPageLoadNoPostback);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _personView_OnPageLoadNoPostback()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; gvData = Get_PersonData();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_personView.Fill_gvPerson(gvData);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d09457d4-b769-4853-b707-f67bb576077a" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenter.cs (Part 2)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _view_OnEditCommand(<span style="color:#2b91af">Guid</span> id)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> dao = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;DomainModel.Person.<span style="color:#2b91af">Person</span> pers = dao.GetByID(id);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtPersonIdValue = pers.Id.ToString();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtFirstNameValue = pers.FirstName;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtLastNameValue = pers.LastName;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtEmailValue = pers.Email;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtUserIdValue = pers.UserID;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;pers = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;dao = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _view_OnDeleteCommand(<span style="color:#2b91af">Guid</span> id)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> dao = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dao.Delete(id);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;dao = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_view_OnRefreshPersonGrid();</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _view_OnRefreshPersonGrid()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; gvData = Get_PersonData();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_personView.Fill_gvPerson(gvData);</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b7e2d6d0-49f9-4728-b8ab-c3b484eb9d0d" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenter.cs (Part 3)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _view_OnSaveEditPerson()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Guid</span> editId = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> editPers = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!<span style="color:#0000ff">string</span>.IsNullOrEmpty(_personView.txtPersonIdValue))</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editId = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>(_personView.txtPersonIdValue);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> dao = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> ((editId != <span style="color:#0000ff">null</span>) &amp;&amp; (!editId.Equals(System.<span style="color:#2b91af">Guid</span>.Empty))) <span style="color:#008000">//was a bug here</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers = dao.GetByID(editId);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.FirstName = _personView.txtFirstNameValue;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.LastName = _personView.txtLastNameValue;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.Email = _personView.txtEmailValue;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers.UserID = _personView.txtUserIdValue;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;editPers = dao.Save(editPers);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;editPers = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;dao = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_view_OnRefreshPersonGrid();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_view_OnClearEditPerson();</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> _view_OnClearEditPerson()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtPersonIdValue = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtFirstNameValue = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtLastNameValue = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtEmailValue = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_personView.txtUserIdValue = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a89a7aac-d47a-47b3-a512-6a7c17b9d67e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenter.cs (Part 4)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; Get_PersonData()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _personView = <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; retVal = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> dao = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = dao.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal = (<span style="color:#0000ff">from</span> person <span style="color:#0000ff">in</span> people</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">select</span> <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDto</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PersonID = person.Id,</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FirstName = person.FirstName,</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LastName = person.LastName,</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Email = person.Email,</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UserID = person.UserID</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).ToList&lt;<span style="color:#2b91af">PersonDto</span>&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;crit = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dao = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retVal;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#2b91af">IPersonView</span> personView</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> <span style="color:#0000ff">base</span>.GetView&lt;<span style="color:#2b91af">IPersonView</span>&gt;(); }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>The interface for the PersonView web page has also had to be revised. Here the methods that are commented out have had the implementations moved from the web page to the presenter. One new event has been added for the presenter.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:de494a79-160f-4b71-a667-e9f2c4176186" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">IPersonView.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> DataServices.Person;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BusinessServices.Interfaces</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">interface</span> <span style="color:#2b91af">IPersonView</span> : <span style="color:#2b91af">IView</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">event</span> <span style="color:#2b91af">GridViewBtnEvent</span> OnEditCommand;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">event</span> <span style="color:#2b91af">GridViewBtnEvent</span> OnDeleteCommand;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnRefreshPersonGrid;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnSaveEditPerson;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnClearEditPerson;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//the event below had to be added for the presenter</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyEvent</span> OnPageLoadNoPostback;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//void _view_OnEditCommand(Guid id);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//void _view_OnDeleteCommand(Guid id);</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//void _view_OnRefreshPersonGrid();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//void _view_OnSaveEditPerson();</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//void _view_OnClearEditPerson();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">string</span> txtPersonIdValue { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">string</span> txtFirstNameValue { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">string</span> txtLastNameValue { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">string</span> txtEmailValue { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">string</span> txtUserIdValue { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">void</span> Fill_gvPerson(<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; data);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#008000">//IList&lt;PersonDto&gt; Get_PersonData();</span></li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<h3>Data Access Objects Improvements</h3>
<p>The data access objects have been expanded to include support for NHibernate LINQ, which is now part of the core. Also support for selection of an unique object has been included, rather than always returning an IList. This means that there has been an update to the IRead.cs file as shown below.</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9c544314-49ea-4fe2-b3e5-934df1ab97b8" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">IRead.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li>
<li><span style="color:#0000ff">using</span> DomainModel;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> NHibernateDAO</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">interface</span> <span style="color:#2b91af">IRead</span>&lt;TEntity&gt; <span style="color:#0000ff">where</span> TEntity : <span style="color:#2b91af">Entity</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity GetByID(<span style="color:#2b91af">Guid</span> ID);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;TEntity&gt; GetByCriteria(<span style="color:#2b91af">ICriteria</span> criteria);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity GetUniqByCriteria(<span style="color:#2b91af">ICriteria</span> criteria);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;TEntity&gt; GetByQueryable(<span style="color:#2b91af">IQueryable</span>&lt;TEntity&gt; queryable);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity GetUniqByQueryable(<span style="color:#2b91af">IQueryable</span>&lt;TEntity&gt; queryable);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The implementation file for the data access objects has been revised to include the implementation details for LINQ and unique object support.</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:97028b4c-6ac8-4409-9227-743eec62889a" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">GenericDAOImpl.cs (Pt 1)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li>
<li><span style="color:#0000ff">using</span> DomainModel;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> NHibernateDAO</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">GenericDAOImpl</span>&lt;TEntity&gt; : <span style="color:#2b91af">IRead</span>&lt;TEntity&gt;, <span style="color:#2b91af">ISave</span>&lt;TEntity&gt; <span style="color:#0000ff">where</span> TEntity : <span style="color:#2b91af">Entity</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> GenericDAOImpl(<span style="color:#2b91af">ISession</span> Session)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Session = Session;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> <span style="color:#0000ff">readonly</span> <span style="color:#2b91af">ISession</span> m_Session;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> TEntity GetByID(<span style="color:#2b91af">Guid</span> ID)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = m_Session.Get&lt;TEntity&gt;(ID);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> m_Session.Get&lt;TEntity&gt;(ID);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:598c70fc-4dff-47b9-9869-f64de78fa126" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">GenericDAOImpl.cs (Pt 2)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li><span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;TEntity&gt; GetByCriteria(<span style="color:#2b91af">ICriteria</span> criteria)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;TEntity&gt; retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = criteria.List&lt;TEntity&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> criteria.List&lt;TEntity&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> TEntity GetUniqByCriteria(<span style="color:#2b91af">ICriteria</span> criteria)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = criteria.UniqueResult&lt;TEntity&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> criteria.UniqueResult&lt;TEntity&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e6915aec-5fa6-4fd8-84b2-8fa5bfd68e6e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">GenericDAOImpl.cs (Pt 3)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li><span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;TEntity&gt; GetByQueryable(<span style="color:#2b91af">IQueryable</span>&lt;TEntity&gt; queryable)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;TEntity&gt; retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = queryable.ToList&lt;TEntity&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> queryable.ToList&lt;TEntity&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> TEntity GetUniqByQueryable(<span style="color:#2b91af">IQueryable</span>&lt;TEntity&gt; queryable)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEntity retval;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retval = queryable.Single&lt;TEntity&gt;();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> retval;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> queryable.Single&lt;TEntity&gt;();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:467b4de6-bc73-4700-8625-506fdb7af897" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">GenericDAOImpl.cs (Pt 4)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> TEntity Save(TEntity entity)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!m_Session.Transaction.IsActive)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_Session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Session.SaveOrUpdate(entity);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Session.SaveOrUpdate(entity);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> entity;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<h3>&nbsp;</h3>
<h3>Unit Test</h3>
<p>The unit testing capabilities of the solution have been expanded. It starts with a fake PersonView class in the unit test project that includes functionality similar to that in the web page, but implemented without any reference to System.Web</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b1024b57-18cd-4ccc-967d-bb776b3e544e" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonView.cs (Part 1)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> BusinessServices;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BusinessServices.Interfaces;</li>
<li><span style="color:#0000ff">using</span> BusinessServices.Presenters;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> DataServices.Person;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BootstrapperUnitTests.Views</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">PresenterType</span>(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">PersonPresenter</span>))]</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">PersonView</span> : <span style="color:#2b91af">BaseView</span>, <span style="color:#2b91af">IPersonView</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">bool</span> blnRegistered = <span style="color:#0000ff">false</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _txtPersonID;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _txtFirstName;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _txtLastName;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _txtEmail;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _txtUserID;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">static</span> <span style="color:#0000ff">bool</span> postBack;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; _gvPerson;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">GridViewBtnEvent</span> OnEditCommand;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">GridViewBtnEvent</span> OnDeleteCommand;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnRefreshPersonGrid;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnSaveEditPerson;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyBtnEvent</span> OnClearEditPerson;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">event</span> <span style="color:#2b91af">EmptyEvent</span> OnPageLoadNoPostback;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> PersonView()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postBack = <span style="color:#0000ff">false</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">base</span>.SelfRegister(<span style="color:#0000ff">this</span>);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blnRegistered = <span style="color:#0000ff">true</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;summary&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080">///</span><span style="color:#008000"> This is used by the test subsystem to avoid the self-registry action and allow normal</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080">///</span><span style="color:#008000"> object creation.</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;/summary&gt;</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;param name="noRegister"&gt;&lt;/param&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> PersonView(<span style="color:#0000ff">bool</span> noRegister)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blnRegistered = <span style="color:#0000ff">false</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postBack = <span style="color:#0000ff">false</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1ff49c92-7a51-4a4e-ae08-5d8130df4674" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonView.cs (Part 2)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Fill_gvPerson(<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; data)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_gvPerson = data;</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">protected</span> <span style="color:#0000ff">internal</span> <span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; GvPerson</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _gvPerson; }</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnEditCommand(<span style="color:#2b91af">Guid</span> id)</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;OnEditCommand(id);</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnDeleteCommand(<span style="color:#2b91af">Guid</span> id)</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;OnDeleteCommand(id);</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnRefreshPersonGrid()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;OnRefreshPersonGrid();</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnSaveEditPerson()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (_txtUserID != <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnSaveEditPerson();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnClearEditPerson()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;OnClearEditPerson();</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnPageLoadNoPostback()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;OnPageLoadNoPostback();</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b21e10e1-f01e-448d-9a7b-1b70cadf62f0" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonView.cs (Part 3)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtPersonIdValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _txtPersonID; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _txtPersonID = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtFirstNameValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _txtFirstName; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _txtFirstName = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtLastNameValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _txtLastName; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _txtLastName = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtEmailValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _txtEmail; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _txtEmail = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> txtUserIdValue</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _txtUserID; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _txtUserID = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">bool</span> <span style="color:#2b91af">IView</span>.IsPostback</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> </li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (!postBack)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;postBack = <span style="color:#0000ff">true</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> <span style="color:#0000ff">false</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> <span style="color:#0000ff">true</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>BasePage.cs must also be copied to the unit test project, and it also no longer references System.Web. It is renamed to BaseView.cs in the actual solution. You will note that the property IsPostBack throws a NotImplementedException, but it could be set to a read/write property and provide values through an external property setter in the tests.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:91b0366b-fee6-4930-875b-844407f5e0c1" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">BaseView.cs</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Collections.Specialized;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Linq;</li>
<li><span style="color:#0000ff">using</span> System.Text;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BusinessServices;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BootstrapperUnitTests</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">BaseView</span> : <span style="color:#2b91af">IView</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> _requestUrl;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">NameValueCollection</span> _queryString = <span style="color:#0000ff">new</span> <span style="color:#2b91af">NameValueCollection</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> T RegisterView&lt;T&gt;() <span style="color:#0000ff">where</span> T : <span style="color:#2b91af">Presenter</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">return</span> <span style="color:#2b91af">PresentationManager</span>.RegisterView&lt;T&gt;(<span style="color:#0000ff">typeof</span>(T), <span style="color:#0000ff">this</span>, <span style="color:#0000ff">null</span>);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">protected</span> <span style="color:#0000ff">void</span> SelfRegister(<span style="color:#2b91af">IView</span> page)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (page != <span style="color:#0000ff">null</span> &amp;&amp; page <span style="color:#0000ff">is</span> <span style="color:#2b91af">IView</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">object</span>[] attributes = page.GetType().GetCustomAttributes(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">PresenterTypeAttribute</span>), <span style="color:#0000ff">true</span>);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (attributes != <span style="color:#0000ff">null</span> &amp;&amp; attributes.Length &gt; 0)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">foreach</span> (<span style="color:#2b91af">Attribute</span> viewAttribute <span style="color:#0000ff">in</span> attributes)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (viewAttribute <span style="color:#0000ff">is</span> <span style="color:#2b91af">PresenterTypeAttribute</span>)</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PresentationManager</span>.RegisterView((viewAttribute <span style="color:#0000ff">as</span> <span style="color:#2b91af">PresenterTypeAttribute</span>).PresenterType,</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page <span style="color:#0000ff">as</span> <span style="color:#2b91af">IView</span>, <span style="color:#0000ff">null</span>);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">break</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#2b91af">NameValueCollection</span> RequestString</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _queryString; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> RequestUrl</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> _requestUrl; }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">set</span> { _requestUrl = <span style="color:#0000ff">value</span>; }</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">bool</span> IsPostback</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">get</span> { <span style="color:#0000ff">throw</span> <span style="color:#0000ff">new</span> <span style="color:#2b91af">NotImplementedException</span>(); }</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The tests themselves have been expanded and now show a considerably increased code coverage. In doing so the tests are now a combination of unit tests and integration tests, but I would argue that this is desirable as it increases the overall reliability of the solution, which is the purpose of automated tests.</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fec18d45-5ad3-4586-8edc-3afc547c1350" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 1)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> NUnit.Framework;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> DomainModel.Person;</li>
<li><span style="color:#0000ff">using</span> NHibernate;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate.Context;</li>
<li><span style="color:#0000ff">using</span> NHibernateDAO;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernateDAO.DAOImplementations;</li>
<li><span style="color:#0000ff">using</span> BootstrapperUnitTests.Views;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BootstrapperUnitTests.TestData;</li>
<li><span style="color:#0000ff">using</span> BusinessServices.Interfaces;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BusinessServices.Presenters;</li>
<li><span style="color:#0000ff">using</span> DataServices.Person;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li><span style="color:#0000ff">namespace</span> BootstrapperUnitTests.PresenterTests</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">TestFixture</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">PersonPresenterTests</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">ISession</span> m_session;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">TestFixtureSetUp</span>]</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> TestFixtureSetup()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">var</span> session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.OpenSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">CallSessionContext</span>.Bind(session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">TestFixtureTearDown</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> TestFixtureTeardown()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">var</span> session = <span style="color:#2b91af">CallSessionContext</span>.Unbind(<span style="color:#2b91af">SessionManager</span>.SessionFactory);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session != <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session.Transaction != <span style="color:#0000ff">null</span> &amp;&amp; session.Transaction.IsActive)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Transaction.Rollback();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Flush();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Close();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Dispose();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0253bdc8-1d9d-4f48-a59b-e39dd25fa957" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 2)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> View_OnEditCommandTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(1);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp =<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pp._view_OnEditCommand(people[0].Id);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = _pp.personView;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsTrue(<span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>(_pv.txtPersonIdValue).Equals(people[0].Id));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsTrue(_pv.txtUserIdValue.Equals(people[0].UserID));</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:28cca321-414c-43bb-abce-3d242388b123" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 3)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnEditCommandTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(1);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnEditCommand(people[0].Id);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsTrue(<span style="color:#0000ff">new</span> <span style="color:#2b91af">Guid</span>(_pv.txtPersonIdValue).Equals(people[0].Id));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsTrue(_pv.txtUserIdValue.Equals(people[0].UserID));</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:241a06f7-7a17-4679-9740-589416723f59" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 4)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> View_OnDeleteCommandTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(1);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = _pp.personView;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pp._view_OnDeleteCommand(people[0].Id);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(people.Count, 0);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:50f8a62f-076c-4a1b-ab73-9082d8827018" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 5)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnDeleteCommandTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(1);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnDeleteCommand(people[0].Id);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(people.Count, 0);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:831c154b-958e-4c28-a52c-35ba9983b96b" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 6)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> View_OnClearEditPerson()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = _pp.personView;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtFirstNameValue = <span style="color:#a31515">"testData"</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pp._view_OnClearEditPerson();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsNullOrEmpty(_pv.txtFirstNameValue);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">Test</span>]</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnClearEditPerson()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtFirstNameValue = <span style="color:#a31515">"testData"</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnClearEditPerson();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsNullOrEmpty(_pv.txtFirstNameValue);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> Get_PersonDataTest()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsInstanceOf&lt;<span style="color:#2b91af">PersonPresenter</span>&gt;(_pp);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li> </li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">PersonDto</span>&gt; pers = _pp.Get_PersonData();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(pers.Count, 3);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f1445c7b-12cc-4dd5-a5e8-34479402d209" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 7)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnPageLoadNoPostbackTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnPageLoadNoPostback();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(_pvc.GvPerson.Count, 3);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f75afdb0-536c-4213-9488-04084124c8e2" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt 8)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> View_OnRefreshPersonGridTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = _pp.personView;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnRefreshPersonGrid();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(_pvc.GvPerson.Count, 3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:40878cfe-ab22-4ecf-b300-f32f424de88d" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenter.cs (Pt 9)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnRefreshPersonGridTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnRefreshPersonGrid();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(_pvc.GvPerson.Count, 3);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b3529696-8f55-4f96-a710-f87d99593483" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt10)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> View_OnSaveEditPersonNewTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = _pp.personView;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtPersonIdValue = <span style="color:#a31515">""</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtFirstNameValue = <span style="color:#a31515">"Mary"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtLastNameValue = <span style="color:#a31515">"Johnston"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtEmailValue = <span style="color:#a31515">"some@email"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtUserIdValue = <span style="color:#a31515">"mj1"</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pp._view_OnSaveEditPerson();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:44ea6842-4800-47d3-a2b3-92d42dcfdc15" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresneterTests.cs (Pt11)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnSaveEditPersonNewTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtPersonIdValue = <span style="color:#a31515">""</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtFirstNameValue = <span style="color:#a31515">"Mary"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtLastNameValue = <span style="color:#a31515">"Johnston"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtEmailValue = <span style="color:#a31515">"some@email"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtUserIdValue = <span style="color:#a31515">"mj1"</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnSaveEditPerson();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:706dee03-b53e-49f4-ad6a-830186640738" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt12)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> View_OnSaveEditPersonExistingTest()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(1);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonPresenter</span> _pp = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonPresenter</span>(<span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>(<span style="color:#0000ff">false</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = _pp.personView;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtPersonIdValue = people[0].Id.ToString();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtFirstNameValue = people[0].FirstName;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtLastNameValue = people[0].LastName;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtEmailValue = people[0].Email;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtUserIdValue = <span style="color:#a31515">"differentUser"</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pp._view_OnSaveEditPerson();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_pp = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:494b9cab-e8a9-4d30-af6c-3f5ef52e1405" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonPresenterTests.cs (Pt13)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FireEvent_OnSaveEditPersonExistingTest()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(1);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IPersonView</span> _pv = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonView</span>();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtPersonIdValue = people[0].Id.ToString();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtFirstNameValue = people[0].FirstName;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtLastNameValue = people[0].LastName;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtEmailValue = people[0].Email;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv.txtUserIdValue = <span style="color:#a31515">"differentUser"</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonView</span> _pvc = _pv <span style="color:#0000ff">as</span> <span style="color:#2b91af">PersonView</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pvc.FireEvent_OnSaveEditPerson();</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pv = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_pvc = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<p>Unit tests have also been included for an unique object and also for the added NHibernate LINQ capabilities</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:27285490-e990-46ad-bd9d-b3d61e09595b" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTest.cs (Pt 1)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li><span style="color:#0000ff">using</span> System;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.Generic;</li>
<li><span style="color:#0000ff">using</span> System.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Text;</li>
<li><span style="color:#0000ff">using</span> DomainModel.Person;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernateDAO;</li>
<li><span style="color:#0000ff">using</span> NHibernateDAO.DAOImplementations;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NUnit.Framework;</li>
<li><span style="color:#0000ff">using</span> NHibernate;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> NHibernate.Context;</li>
<li><span style="color:#0000ff">using</span> NHibernate.Linq;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">using</span> BootstrapperUnitTests.TestData;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BootstrapperUnitTests</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">TestFixture</span>]</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">PersonDAOImplTests</span></li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">private</span> <span style="color:#2b91af">ISession</span> m_session;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">TestFixtureSetUp</span>]</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> TestFixtureSetup()</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">var</span> session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.OpenSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">CallSessionContext</span>.Bind(session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">TestFixtureTearDown</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> TestFixtureTeardown()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">var</span> session = <span style="color:#2b91af">CallSessionContext</span>.Unbind(<span style="color:#2b91af">SessionManager</span>.SessionFactory);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session != <span style="color:#0000ff">null</span>)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">if</span> (session.Transaction != <span style="color:#0000ff">null</span> &amp;&amp; session.Transaction.IsActive)</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Transaction.Rollback();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Flush();</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Close();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.Dispose();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
</ol> </div>
</div>
</div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1202f449-2eea-4999-8825-ccd865ae3ccf" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTests.cs (Pt 2)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonSaveTestWithTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> _person = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.FirstName = <span style="color:#a31515">"John"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.LastName = <span style="color:#a31515">"Davidson"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.Email = <span style="color:#a31515">"jwdavidson@gmail.com"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.UserID = <span style="color:#a31515">"jwd"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> newPerson = daoPerson.Save(_person);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(_person, newPerson);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">[<span style="color:#2b91af">Test</span>]</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonCriteriaQueryTestWithTx()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 3);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:922c45bf-24f2-40f3-a0f7-5825f740197a" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTest.cs (Pt 3)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonDeleteTestWithTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session.FlushMode = <span style="color:#2b91af">FlushMode</span>.Commit;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> _person = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.FirstName = <span style="color:#a31515">"John"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.LastName = <span style="color:#a31515">"Davidson"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.Email = <span style="color:#a31515">"jwdavidson@gmail.com"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.UserID = <span style="color:#a31515">"jwd"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> newPerson;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPerson = daoPerson.Save(_person);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(_person, newPerson);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"Person ID: {0}"</span>, newPerson.Id);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Int32</span> pers = 0;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.Greater(people.Count, 0);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pers = people.Count;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"Count After Add: {0}"</span>, pers);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daoPerson.Delete(newPerson);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#0000ff">var</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"Count after Delete: {0}"</span>, people.Count);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsTrue(pers.Equals(people.Count + 1));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6734dc8a-c2b4-49eb-b3f3-40e4a00ae313" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTests.cs (Pt 4)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonSaveTestWithoutTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> _person = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.FirstName = <span style="color:#a31515">"John"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.LastName = <span style="color:#a31515">"Davidson"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person.Email = <span style="color:#a31515">"jwdavidson@gmail.com"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;_person.UserID = <span style="color:#a31515">"jwd"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> newPerson = daoPerson.Save(_person);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(_person, newPerson);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;_person = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;newPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">[<span style="color:#2b91af">Test</span>]</li>
<li><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonCriteriaQueryTestWithoutTx()</li>
<li style="background: #f3f3f3">{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 3);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5db9c3d2-c4a1-475d-9313-c057989304e6" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTest.cs (Pt 5)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonLinqQueryTestWithTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IQueryable</span>&lt;<span style="color:#2b91af">Person</span>&gt; qry = <span style="color:#0000ff">from</span> p <span style="color:#0000ff">in</span> m_session.Query&lt;<span style="color:#2b91af">Person</span>&gt;() <span style="color:#0000ff">select</span> p;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#2b91af">ITransaction</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByQueryable(qry);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 3);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonLinqQueryWhereTestWithTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">string</span> userid = <span style="color:#a31515">"jwd2"</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IQueryable</span>&lt;<span style="color:#2b91af">Person</span>&gt; qry = <span style="color:#0000ff">from</span> p <span style="color:#0000ff">in</span> m_session.Query&lt;<span style="color:#2b91af">Person</span>&gt;() <span style="color:#0000ff">where</span> p.UserID == userid <span style="color:#0000ff">select</span> p;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">using</span> (<span style="color:#2b91af">ITransaction</span> tx = m_session.BeginTransaction())</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByQueryable(qry);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 1);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:24cfefcd-ef60-4667-a9c8-3aead4b11d22" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTests.cs (Pt 6)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap">
<li>[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonLinqQueryTestWithoutTx()</li>
<li>{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonTestData</span> ptd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonTestData</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.CreatePersonEntries(3);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IQueryable</span>&lt;<span style="color:#2b91af">Person</span>&gt; qry = <span style="color:#0000ff">from</span> p <span style="color:#0000ff">in</span> m_session.Query&lt;<span style="color:#2b91af">Person</span>&gt;() <span style="color:#0000ff">select</span> p;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByQueryable(qry);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.GreaterOrEqual(people.Count, 3);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;ptd.RemoveAllPersonEntries();</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;ptd = <span style="color:#0000ff">null</span>;</li>
<li>}</li>
</ol> </div>
</div>
</div>
<div class="wlWriterEditableSmartContent" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e6ff1a59-3655-4582-8ff2-b99fc8b758a9" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">PersonDAOImplTests.cs (Pt 7)</div>
<div style="background: #ddd; overflow: auto"> <ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;">
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span style="color:#2b91af">Test</span>]</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> PersonDeleteTestWithoutTx()</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#2b91af">SessionManager</span>.SessionFactory.GetCurrentSession();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session.FlushMode = <span style="color:#2b91af">FlushMode</span>.Commit;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> _person = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Person</span>();</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_person.FirstName = <span style="color:#a31515">"John"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_person.LastName = <span style="color:#a31515">"Davidson"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_person.Email = <span style="color:#a31515">"jwdavidson@gmail.com"</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_person.UserID = <span style="color:#a31515">"jwd"</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">PersonDAOImpl</span> daoPerson = <span style="color:#0000ff">new</span> <span style="color:#2b91af">PersonDAOImpl</span>(m_session);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Person</span> newPerson = daoPerson.Save(_person);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.AreEqual(_person, newPerson);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"Person ID: {0}"</span>, newPerson.Id);</li>
<li style="background: #f3f3f3">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">ICriteria</span> crit = m_session.CreateCriteria(<span style="color:#0000ff">typeof</span>(<span style="color:#2b91af">Person</span>));</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">Person</span>&gt; people = daoPerson.GetByCriteria(crit);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.Greater(people.Count, 0);</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Int32</span> pers = people.Count;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"Count After Add: {0}"</span>, pers);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daoPerson.Delete(newPerson);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = daoPerson.GetByCriteria(crit);</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"Count after Delete: {0}"</span>, people.Count);</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af">Assert</span>.IsTrue(pers.Equals(people.Count + 1));</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;people = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_person = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;daoPerson = <span style="color:#0000ff">null</span>;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_session = <span style="color:#0000ff">null</span>;</li>
<li style="background: #f3f3f3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;}</li>
<li style="background: #f3f3f3">}</li>
</ol> </div>
</div>
</div>
<h3>Summary </h3>
<h3></h3>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>This solution retains all the functionality as was included in the original solution, but it has now been placed in an architecture that improves testability and simplifies the creation of functionality as each element now has a clear project where it belongs within the solution. The next evolution of the bootstrapper will investigate data service usage and more complex mappings. However this version of the bootstrapper is now appropriate to use for simple projects with NHibernate where the domain model is relatively simple.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>If you remember back to the code behind file discussion there were still methods that remained for working with the gridview and drop down controls on the web page. These could be moved up to the presenter if these controls were redesigned as composite controls in a separate project in the solution so that they were no longer inherited through System.Web.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate bootstrapper unit tests and project references]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1123" />
        <category ref="1130" />
      </categories>
      <comments>
        <comment id="790" date-created="2011-02-09T21:26:14" date-modified="2011-02-09T21:26:14" approved="true" user-name="nanhibernate" user-url="http://nhforge.org/members/nanhibernate/default.aspx">
          <title type="text"><![CDATA[re: NHibernate Bootstrapper: Unit Tests and Project References]]></title>
          <content type="text"><![CDATA[Great work!!!]]></content>
        </comment>
      </comments>
      <authors>
        <author id="7683" date-created="2010-01-29T17:05:41" date-modified="2013-03-18T13:24:45" approved="true" email="jwdavidson@gmail.com">
          <title type="text"><![CDATA[jwdavidson]]></title>
        </author>
      </authors>
    </post>
    <post id="750" date-created="2010-12-14T00:03:00" date-modified="2010-12-14T00:03:00" approved="true" post-url="/blogs/nhibernate/archive/2010/12/13/using-convention-to-resolve-sequence-names.aspx" type="normal" hasexcerpt="false" views="4469">
      <title type="text"><![CDATA[Using convention to resolve sequence names]]></title>
      <content type="text"><![CDATA[<p>I&rsquo;m currently working in a project with a legacy database. The database use a convention, where every table has his own identifier (one-column) and it must be generated by a sequence.</p>
<p>The name of the sequence follows a convention, first 26 characters of the Table name + the subfix &ldquo;seq&rdquo;. For instance, the sequence for the table Nationality is NATIONALITY_SEQ.</p>
<p>I take advantage of the convention as follows:</p>
<ul>
<li>I&rsquo;ve mapped everything as &ldquo;native&rdquo;.</li>
<li>I wrote a new id generator as follows:</li>
</ul>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">SequenceByConvention </span>: <span style="color: #2b91af">SequenceGenerator
</span>{
    <span style="color: blue">public override void </span>Configure(<span style="color: #2b91af">IType </span>type, <span style="color: #2b91af">IDictionary</span>&lt;<span style="color: blue">string</span>, <span style="color: blue">string</span>&gt; parms, <span style="color: #2b91af">Dialect </span>dialect)
    {
        parms[<span style="color: #a31515">"sequence"</span>] = GetSequenceNameFromTableName(parms[<span style="color: #a31515">"target_table"</span>]);
        <span style="color: blue">base</span>.Configure(type, parms, dialect);
    }
    <span style="color: blue">private static string </span>GetSequenceNameFromTableName(<span style="color: blue">string </span>tableName)
    {
        <span style="color: blue">return </span>tableName.Substring(0, <span style="color: #2b91af">Math</span>.Min(26, tableName.Length)) + <span style="color: #a31515">"_SEQ"</span>;
    }
}</pre>
<ul>
<li>And finally this is the dialect for this project:</li>
</ul>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">MyDialect </span>: <span style="color: #2b91af">Oracle10gDialect
</span>{
    <span style="color: blue">public override </span>System.<span style="color: #2b91af">Type </span>NativeIdentifierGeneratorClass
    {
        <span style="color: blue">get </span>{ <span style="color: blue">return typeof </span>(<span style="color: #2b91af">SequenceByConvention</span>); }
    }
}</pre>]]></content>
      <post-name type="text"><![CDATA[using convention to resolve sequence names]]></post-name>
      <categories>
        <category ref="1138" />
      </categories>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="754" date-created="2010-12-26T11:52:00" date-modified="2010-12-26T11:52:00" approved="true" post-url="/blogs/nhibernate/archive/2010/12/26/many-to-many-relationships-with-properties.aspx" type="normal" hasexcerpt="false" views="13781">
      <title type="text"><![CDATA[Many-to-many relationships with properties]]></title>
      <content type="text"><![CDATA[<p>There's a question that seems to appear at least once a month in StackOverflow or the <a href="https://groups.google.com/forum/#!forum/nhusers">NH users</a> group:</p>  <blockquote>   <p><em>How can I add properties to a many-to-many relationship?</em></p> </blockquote>  <p>The user of course means adding columns to the &quot;junction&quot; table used to store the many-to-many relationship, and being able to populate them without changing his object model.</p>  <p>That makes some sense from a relational perspective (a table is just a table after all), but not from an OOP one: <strong>a relationship does not have properties</strong>.</p>  <p>The easiest solution, of course, is to map the relationship as an entity, with regular one-to-many collections from both sides.</p>  <p>This would be the end of it... if it weren't for the fact that it's <strong>not</strong> what the user wants. If you dig a little further, you'll find that, in most of his use cases, the additional properties don't matter. They are used for auditing purposes, activation/deactivation, etc.</p>  <p>So, how can we code such a model? Answer: using LINQ-to-objects.</p>  <p>Let's consider a typical <strong>Users - Roles</strong> relationship (a user has many roles, a role is applied by many users).</p>  <p><em>Step 1: Create the entities</em></p>  <p>   <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:f119f9c6-53a0-419c-ba56-f60a33879f1e" class="wlWriterEditableSmartContent"><pre style=" width: 640px; height: 576px;background-color:White;overflow: visible;;font-family:Consolas;font-size:12"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">class</span><span style="color: #000000;"> User
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> User()
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        _UserRoles </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000FF;">new</span><span style="color: #000000;"> List</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">UserRole</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">();
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> </span><span style="color: #0000FF;">string</span><span style="color: #000000;"> Name { </span><span style="color: #0000FF;">get</span><span style="color: #000000;">; </span><span style="color: #0000FF;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    ICollection</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">UserRole</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> _UserRoles;
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">protected</span><span style="color: #000000;"> </span><span style="color: #0000FF;">internal</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> ICollection</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">UserRole</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> UserRoles
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">get</span><span style="color: #000000;"> { </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> _UserRoles; }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">15</span> <span style="color: #000000;">}
</span><span style="color: #008080;">16</span> <span style="color: #000000;">
</span><span style="color: #008080;">17</span> <span style="color: #000000;"></span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">class</span><span style="color: #000000;"> Role
</span><span style="color: #008080;">18</span> <span style="color: #000000;">{
</span><span style="color: #008080;">19</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> Role()
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">21</span> <span style="color: #000000;">        _UserRoles </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000FF;">new</span><span style="color: #000000;"> List</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">UserRole</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">();
</span><span style="color: #008080;">22</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">23</span> <span style="color: #000000;">
</span><span style="color: #008080;">24</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> </span><span style="color: #0000FF;">string</span><span style="color: #000000;"> Description { </span><span style="color: #0000FF;">get</span><span style="color: #000000;">; </span><span style="color: #0000FF;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">
</span><span style="color: #008080;">26</span> <span style="color: #000000;">    ICollection</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">UserRole</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> _UserRoles;
</span><span style="color: #008080;">27</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">protected</span><span style="color: #000000;"> </span><span style="color: #0000FF;">internal</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> ICollection</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">UserRole</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> UserRoles
</span><span style="color: #008080;">28</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">29</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">get</span><span style="color: #000000;"> { </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> _UserRoles; }
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> <span style="color: #000000;">}
</span><span style="color: #008080;">32</span> <span style="color: #000000;">
</span><span style="color: #008080;">33</span> <span style="color: #000000;"></span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">class</span><span style="color: #000000;"> UserRole
</span><span style="color: #008080;">34</span> <span style="color: #000000;">{
</span><span style="color: #008080;">35</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> User User { </span><span style="color: #0000FF;">get</span><span style="color: #000000;">; </span><span style="color: #0000FF;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;">36</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> Role Role { </span><span style="color: #0000FF;">get</span><span style="color: #000000;">; </span><span style="color: #0000FF;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;">37</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> DateTime AssignedDate { </span><span style="color: #0000FF;">get</span><span style="color: #000000;">; </span><span style="color: #0000FF;">set</span><span style="color: #000000;">; }
</span><span style="color: #008080;">38</span> <span style="color: #000000;">}</span></div></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
</p>

<p><em>Step 2: Map them <em>(only one side shown; the other is exactly the same)</em></em></p>

<p>
  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:3a93f648-8aa5-461d-a58a-3433600bf2f7" class="wlWriterEditableSmartContent"><pre style=" width: 681px; height: 210px;background-color:White;overflow: visible;;font-family:Consolas;font-size:12"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #0000FF;">&lt;</span><span style="color: #800000;">class </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;User&quot;</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">id </span><span style="color: #FF0000;">...</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">...</span><span style="color: #0000FF;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">property </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;Name&quot;</span><span style="color: #FF0000;"> </span><span style="color: #0000FF;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">bag </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;UserRoles&quot;</span><span style="color: #FF0000;"> access</span><span style="color: #0000FF;">=&quot;nosetter.pascalcase-underscore&quot;</span><span style="color: #FF0000;">
</span><span style="color: #008080;"> 5</span> <span style="color: #FF0000;">       inverse</span><span style="color: #0000FF;">=&quot;true&quot;</span><span style="color: #FF0000;"> cascade</span><span style="color: #0000FF;">=&quot;all,delete-orphan&quot;</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">key </span><span style="color: #FF0000;">column</span><span style="color: #0000FF;">=&quot;UserId&quot;</span><span style="color: #FF0000;"> on-delete</span><span style="color: #0000FF;">=&quot;cascade&quot;</span><span style="color: #FF0000;"> </span><span style="color: #0000FF;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">one-to-many </span><span style="color: #FF0000;">class</span><span style="color: #0000FF;">=&quot;UserRole&quot;</span><span style="color: #FF0000;"> </span><span style="color: #0000FF;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;/</span><span style="color: #800000;">bag</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;"></span><span style="color: #0000FF;">&lt;/</span><span style="color: #800000;">class</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">10</span> <span style="color: #000000;"></span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">class </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;UserRole&quot;</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">11</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">id </span><span style="color: #FF0000;">...</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">...</span><span style="color: #0000FF;">&lt;/</span><span style="color: #800000;">id</span><span style="color: #0000FF;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">12</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">many-to-one </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;User&quot;</span><span style="color: #FF0000;"> </span><span style="color: #0000FF;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">13</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">many-to-one </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;Role&quot;</span><span style="color: #FF0000;"> </span><span style="color: #0000FF;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">14</span> <span style="color: #000000;">  </span><span style="color: #0000FF;">&lt;</span><span style="color: #800000;">property </span><span style="color: #FF0000;">name</span><span style="color: #0000FF;">=&quot;AssignedDate&quot;</span><span style="color: #FF0000;"> </span><span style="color: #0000FF;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">15</span> <span style="color: #000000;"></span><span style="color: #0000FF;">&lt;/</span><span style="color: #800000;">class</span><span style="color: #0000FF;">&gt;</span></div></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
</p>

<p>&#160;</p>

<p>As far as NHibernate is concerned, that is all there is. Now let's make it usable.</p>

<p><em>Step 3: Add the projection and method (one side shown)</em></p>

<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:7dd6a4f6-9f62-4131-9856-621ab09dfdfc" class="wlWriterEditableSmartContent"><pre style=" width: 640px; height: 401px;background-color:White;overflow: visible;;font-family:Consolas;font-size:12"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">class</span><span style="color: #000000;"> User
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> IEnumerable</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">Role</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> Roles
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">get</span><span style="color: #000000;"> { </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> from ur </span><span style="color: #0000FF;">in</span><span style="color: #000000;"> UserRoles select ur.Role; }
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> </span><span style="color: #0000FF;">void</span><span style="color: #000000;"> Add(Role role)
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        var userRole </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000FF;">new</span><span style="color: #000000;"> UserRole
</span><span style="color: #008080;">11</span> <span style="color: #000000;">            {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">                User </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000FF;">this</span><span style="color: #000000;">,
</span><span style="color: #008080;">13</span> <span style="color: #000000;">                Role </span><span style="color: #000000;">=</span><span style="color: #000000;"> role,
</span><span style="color: #008080;">14</span> <span style="color: #000000;">                AssignedDate </span><span style="color: #000000;">=</span><span style="color: #000000;"> DateTime.Now
</span><span style="color: #008080;">15</span> <span style="color: #000000;">            };
</span><span style="color: #008080;">16</span> <span style="color: #000000;">        UserRoles.Add(userRole);
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        role.UserRoles.Add(userRole);
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> <span style="color: #000000;">
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">virtual</span><span style="color: #000000;"> </span><span style="color: #0000FF;">void</span><span style="color: #000000;"> Remove(Role role)
</span><span style="color: #008080;">21</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        var userRole </span><span style="color: #000000;">=</span><span style="color: #000000;"> UserRoles.Single(r </span><span style="color: #000000;">=&gt;</span><span style="color: #000000;"> r.Role </span><span style="color: #000000;">==</span><span style="color: #000000;"> role);
</span><span style="color: #008080;">23</span> <span style="color: #000000;">        UserRoles.Remove(userRole);
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        role.UserRoles.Remove(userRole);
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> <span style="color: #000000;">}</span></div></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>

<p>Voilà! That's all you need to use it.</p>

<p>Note that I made the <strong>UserRoles</strong> collection <strong>protected internal</strong>. If you have code that actually needs to manipulate it, you can expose it.</p>

<p>One small catch: you can't use the <strong>Roles</strong> projection in queries, because NHibernate knows nothing about it. Still, this should be enough for the expected use cases.</p>]]></content>
      <post-name type="text"><![CDATA[many to many relationships with properties]]></post-name>
      <authors>
        <author id="4430" date-created="2009-10-28T17:56:49" date-modified="2014-08-19T12:35:14" approved="true" email="diego@mijelshon.com.ar">
          <title type="text"><![CDATA[diegose]]></title>
        </author>
      </authors>
    </post>
    <post id="760" date-created="2011-01-08T11:54:35" date-modified="2011-01-08T11:54:35" approved="true" post-url="/blogs/nhibernate/archive/2011/01/08/composite-with-only-a-many-to-one-bad-idea.aspx" type="normal" hasexcerpt="false" views="8142">
      <title type="text"><![CDATA[Composite with only a Many-To-One = Bad Idea]]></title>
      <content type="text"><![CDATA[<p>I can’t count with one hand, how many times I’ve seen this mapping in my few years of using nhibernate:</p>  <pre class="code">  <span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">Profile</span>&quot;<span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">composite-id</span><span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">key-many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">User</span>&quot; <span style="color: red">column</span><span style="color: blue">=</span>&quot;<span style="color: blue">UserId</span>&quot; <span style="color: red">class</span><span style="color: blue">=</span>&quot;<span style="color: blue">User</span>&quot; <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">composite-id</span><span style="color: blue">&gt;

    &lt;!-- </span><span style="color: green">properties </span><span style="color: blue">--&gt;
  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;
</span></pre>

<p>The explanation that comes when you ask is almost always:</p>

<blockquote>
  <p>Well… It is the only way you can use a many-to-one as a primary key.</p>
</blockquote>

<p>There are two things that you can see in that quote:</p>

<ul>
  <li>The developer found a workaround (and sometimes he is proud)</li>

  <li>He wants a many to one!</li>
</ul>

<p>&#160;</p>

<p>First of all, it is not a <strong>many</strong>-to-one, because you CAN’T have many profiles for one user. It is not a many-to-one, so we need to find a better way to tell nhibernate what we want.</p>

<p>On the other hand, it is not a composite-id if you only have <strong>one thing</strong>.</p>

<p>This kind of relationship is named “one-to-one” because you have only one profile for only one user. As you can read in the reference documentation ( <a href="http://nhforge.org/doc/nh/en/index.html#mapping-declaration-onetoone">here</a> ) :</p>

<blockquote>
  <p>There are two varieties of one-to-one association:</p>

  <ul>
    <li>
      <p>primary key associations</p>
    </li>

    <li>
      <p>unique foreign key associations</p>
    </li>
  </ul>
</blockquote>

<p>If we want to have such schema (UserId as the PK) we are talking about the first one.</p>

<p>The mapping is as follow:</p>

<pre class="code">  <span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">UserProfile</span>&quot; <span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">id </span><span style="color: red">column</span><span style="color: blue">=</span>&quot;<span style="color: blue">Id</span>&quot;<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>&quot;<span style="color: blue">foreign</span>&quot;<span style="color: blue">&gt;
        &lt;</span><span style="color: #a31515">param </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">property</span>&quot;<span style="color: blue">&gt;</span>User<span style="color: blue">&lt;/</span><span style="color: #a31515">param</span><span style="color: blue">&gt;
      &lt;/</span><span style="color: #a31515">generator</span><span style="color: blue">&gt;
    &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;
    
    &lt;</span><span style="color: #a31515">one-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">User</span>&quot;
        <span style="color: red">class</span><span style="color: blue">=</span>&quot;<span style="color: blue">User</span>&quot;
        <span style="color: red">constrained</span><span style="color: blue">=</span>&quot;<span style="color: blue">true</span>&quot;<span style="color: blue">/&gt;
  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;
</span></pre>



<p>And the class is pretty easy too:</p>

<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">UserProfile
</span>{
    <span style="color: blue">public int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
    <span style="color: blue">public </span>User User { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
    <span style="color: green">//other properties
</span>}</pre>



<p>This tell nhibernate to use the id from User when inserting a Profile. There rest is like any other class.</p>

<p>If you want to get an UserProfile, without getting the user, you can execute: session.Get&lt;UserProfile&gt;(userId). </p>]]></content>
      <post-name type="text"><![CDATA[composite with only a many to one bad idea]]></post-name>
      <categories>
        <category ref="1026" />
      </categories>
      <comments>
        <comment id="761" date-created="2011-01-12T09:54:51" date-modified="2011-01-12T09:54:51" approved="true" user-name="Lee" user-url="http://">
          <title type="text"><![CDATA[re: Composite with only a Many-To-One = Bad Idea]]></title>
          <content type="text"><![CDATA[The trouble i have is that if i add a property on the User class to get the Details then lazy loading doesn't work.  If i specific it is constrained then lazy loading works fine but when i insert a user it throws back an exception.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="770" date-created="2011-01-21T21:54:07" date-modified="2011-01-21T21:54:07" approved="true" post-url="/blogs/nhibernate/archive/2011/01/21/loquacious-configuration-in-nhibernate-3.aspx" type="normal" hasexcerpt="false" views="9664">
      <title type="text"><![CDATA[Loquacious Configuration in NHibernate 3]]></title>
      <content type="text"><![CDATA[<p>[This article was originally published on my personal blog <a href="http://jameskovacs.com/2011/01/21/loquacious-configuration-in-nhibernate-3/">here</a>. I hereby grant myself permission to re-publish it on NHForge.org.]</p>  <p>[Code for this article is available on GitHub <a href="https://github.com/JamesKovacs/NH3Features/tree/01-Loquacious">here</a>.]</p>  <p>One of the new features in NHibernate 3 is the addition of a fluent API for configuring NHibernate through code. Fluent NHibernate has provided a fluent configuration API for awhile, but now we have an option built into NHibernate itself. (Personally I prefer the new Loquacious API to Fluent NHibernate’s configuration API as I find Loquacious more discoverable. Given that Fluent NHibernate is built on top of NHibernate, you can always use Loquacious with Fluent NHibernate too. N.B. I still really like Fluent NHibernate’s ClassMap&lt;T&gt;, automapping capabilities, and PersistenceSpecification&lt;T&gt;. So don’t take my preference regarding fluent configuration as a denouncement of Fluent NHibernate.)</p>  <p>The fluent configuration API built into NHibernate is called Loquacious configuration and exists as a set of extensions methods on NHibernate.Cfg.Configuration. You can access these extension methods by importing in the NHibernate.Cfg.Loquacious namespace.</p>  <pre class="brush: csharp;">var cfg = new Configuration();
cfg.Proxy(p =&gt; p.ProxyFactoryFactory&lt;ProxyFactoryFactory&gt;())
   .DataBaseIntegration(db =&gt; {
                            db.ConnectionStringName = &quot;scratch&quot;;
                            db.Dialect&lt;MsSql2008Dialect&gt;();
                            db.BatchSize = 500;
                        })
   .AddAssembly(typeof(Blog).Assembly)
   .SessionFactory().GenerateStatistics();</pre>

<p>On the second line, we configure the ProxyFactoryFactory, which is responsible for generating the proxies needed for lazy loading. The ProxyFactoryFactory type parameter (stuff between the &lt;&gt;) is in the NHibernate.ByteCode.Castle namespace. (I have a reference to the NHibernate.ByteCode.Castle assembly too.) So we’re using Castle to generate our proxies. We could also use LinFu or Spring.</p>

<p>Setting db.ConnectionStringName causes NHibernate to read the connection string from the &lt;connectionStrings/&gt; config section of the [App|Web].config. This keeps your connection strings in an easily managed location without being baked into your code. You can perform the same trick in XML-based configuration by using the <em>connection.connection_string_name</em> property instead of the more commonly used <em>connection.connection_string</em>.</p>

<p>Configuring BatchSize turns on update batching in databases, which support it. (Support is limited to SqlClient and OracleDataClient currently and relies on features of these drivers.) Updating batching allows NHibernate to group together multiple, related INSERT, UPDATE, or DELETE statements in a single round-trip to the database. This setting isn’t strictly necessary, but can give you a nice performance boost with DML statements. The value of 500 represents the maximum number of DML statements in one batch. The choice of 500 is arbitrary and should be tuned for your application.</p>

<p>The assembly that we are adding is the one that contains our hbm.xml files as embedded resources. This allows NHibernate to find and parse our mapping metadata. If you have your metadata located in multiple files, you can call cfg.AddAssembly() multiple times.</p>

<p>The last call, cfg.SessionFactory().GenerateStatistics(), causes NHibernate to output additional information about entities, collections, connections, transactions, sessions, second-level cache, and more. Although not required, it does provide additional useful information about NHibernate’s performance.</p>

<p>Notice that there is no need to call <em>cfg.Configure()</em>. cfg.Configure() is used to read in configuration values from [App|Web].config (from the hibernate-configuration config section) or from hibernate.cfg.xml. If we’ve not using XML configuration, cfg.Configure() is not required.</p>

<p>Loquacious and XML-based configuration are not mutually exclusive. We can combine the two techniques to allow overrides or provide default values – it all comes down to the order of the Loquacious configuration code and the call to cfg.Configure().</p>

<pre class="brush: csharp; highlight: [2];">var cfg = new Configuration();
cfg.Configure();
cfg.Proxy(p =&gt; p.ProxyFactoryFactory&lt;ProxyFactoryFactory&gt;())
   .SessionFactory().GenerateStatistics();</pre>

<p>Note the cfg.Configure() on the second line. We read in the standard XML-based configuration and then force the use of a particular ProxyFactoryFactory and generation of statistics via Loquacious configuration.</p>

<p>If instead we make the call to cfg.Configure() after the Loquacious configuration, the Loquacious configuration provides default values, but we can override any and all values using XML-based configuration.</p>

<pre class="brush: csharp; highlight: [10];">var cfg = new Configuration();
cfg.Proxy(p =&gt; p.ProxyFactoryFactory&lt;ProxyFactoryFactory&gt;())
   .DataBaseIntegration(db =&gt; {
                            db.ConnectionStringName = &quot;scratch&quot;;
                            db.Dialect&lt;MsSql2008Dialect&gt;();
                            db.BatchSize = 500;
                        })
   .AddAssembly(typeof(Blog).Assembly)
   .SessionFactory().GenerateStatistics();
cfg.Configure();</pre>

<p>You can always mix and match the techniques by doing some Loquacious configuration before and som after the call to cfg.Configure().</p>

<p><strong>WARNING</strong>: If you call cfg.Configure(), you need to have &lt;hibernate-configuration/&gt; in your [App|Web].config or a hibernate.cfg.xml file. If you don’t, you’ll throw a HibernateConfigException. They can contain an empty root element, but it needs to be there. Another option would be to check whether File.Exists(‘hibernate.cfg.xml’) before calling cfg.Configure().</p>

<p>So there you have it. The new Loquacious configuration API in NHibernate 3. This introduction was not meant as a definitive reference, but as a jumping off point. I would recommend that you explore other extension methods in the NHibernate.Cfg.Loquacious namespace as they provide the means to configure the 2nd-leve cache, current session context, custom LINQ functions, and more. Anything you can do in XML-based configuration can now be accomplished with Loquacious or the existing methods on NHibernate.Cfg.Configuration. So get out there and start coding – XML is now optional…</p>]]></content>
      <post-name type="text"><![CDATA[loquacious configuration in nhibernate 3]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1128" />
      </categories>
      <authors>
        <author id="2146" date-created="2008-09-01T04:05:07" date-modified="2011-03-15T02:05:04" approved="true" email="jkovacs@post.harvard.edu">
          <title type="text"><![CDATA[James Kovacs]]></title>
        </author>
      </authors>
    </post>
    <post id="772" date-created="2011-01-26T16:00:00" date-modified="2011-01-26T16:00:00" approved="true" post-url="/blogs/nhibernate/archive/2011/01/26/date-time-support-in-nhibernate.aspx" type="normal" hasexcerpt="false" views="12116">
      <title type="text"><![CDATA[Date/Time Support in NHibernate]]></title>
      <content type="text"><![CDATA[<p>[This article was originally published on my personal blog <a href="http://jameskovacs.com/2011/01/26/datetime-support-in-nhibernate/">here</a>. I hereby grant myself permission to re-publish it on NHForge.org.]</p>  <p>[Code for this article is available on GitHub <a href="https://github.com/JamesKovacs/NH3Features/tree/02-DateTimeSupport">here</a>.]</p>  <p>In this post, we’ll examine the ways that NHibernate supports the DateTime-related data types, including some new features introduced in NHibernate 2 and 3. Here is a quick summary for the impatient.</p>  <table border="1" cellspacing="0" cellpadding="2"><tbody>     <tr>       <td><strong>DbType</strong></td>        <td><strong>.NET</strong></td>        <td><strong>SQL Type</strong></td>     </tr>      <tr>       <td>DateTime</td>        <td>System.DateTime</td>        <td>datetime</td>     </tr>      <tr>       <td>LocalDateTime</td>        <td>System.DateTime</td>        <td>datetime</td>     </tr>      <tr>       <td>UtcDateTime</td>        <td>System.DateTime</td>        <td>datetime</td>     </tr>      <tr>       <td>DateTimeOffset</td>        <td>System.DateTimeOffset</td>        <td>datetimeoffset</td>     </tr>      <tr>       <td>DateTime2</td>        <td>System.DateTime</td>        <td>datetime2</td>     </tr>      <tr>       <td>Date</td>        <td>System.DateTime</td>        <td>date</td>     </tr>      <tr>       <td>Time</td>        <td>System.DateTime</td>        <td>time</td>     </tr>      <tr>       <td>TimeAsTimeSpan</td>        <td>System.TimeSpan</td>        <td>time</td>     </tr>      <tr>       <td>TimeSpan</td>        <td>System.TimeSpan</td>        <td>bigint (int64)</td>     </tr>   </tbody></table>  <h3>Local/UTC</h3>  <p>Let’s take a look at a few DateTime-related problems that developers have run into in the past…</p>  <pre class="brush: csharp;">public class DateTimeEntity {
    public DateTimeEntity() {
        CreationTime = DateTime.Now;
    }

    public virtual Guid Id { get; private set; }
    public virtual DateTime CreationTime { get; set; }
}</pre>

<p>Note that CreationTime is initialized using DateTime.Now. The corresponding mapping file would be:</p>

<pre class="brush: xml;"><p>&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;</p><p>                   namespace=&quot;Nh3Hacking&quot;</p><p>                   assembly=&quot;Nh3Hacking&quot;&gt;
  &lt;class name=&quot;DateTimeEntity&quot;&gt;
    &lt;id name=&quot;Id&quot;&gt;
      &lt;generator class=&quot;guid.comb&quot; /&gt;
    &lt;/id&gt;
    &lt;property name=&quot;CreationTime&quot;/&gt;
  &lt;/class&gt;
&lt;/hibernate-mapping&gt;</p></pre>

<p>If we create an instance of our DateTimeEntity and reload it, we get:</p>

<pre>Original entity:
Id: 09bead07-5a05-4459-a108-9e7501204918
        CreationTime: 2011-01-24 5:29:36 PM (Local)
Reloaded entity:
Id: 09bead07-5a05-4459-a108-9e7501204918
        CreationTime: 2011-01-24 5:29:36 PM (Unspecified)</pre>

<p>Note that I am outputting both CreationTime.ToString() and CreationTime.Kind. DateTime.Kind returns a DateTimeKind (surprising, huh?), which indicates whether this DateTime represents Local time or UTC time. We initialized the value with DateTime.Now, which is the local time. (If we wanted UTC time, we would use DateTime.UtcNow.) When the object is reloaded, the DateTimeKind is Unspecified. This is because the database does not store whether the DateTime value is Local or UTC. NHibernate has no way of knowing which one it is, hence Unspecified.</p>

<p>NHibernate 3 includes two new DbTypes that allow us to resolve this ambiguity. In our mapping file, we can write:</p>

<pre class="brush: xml;">&lt;property name=&quot;CreationTimeAsLocalDateTime&quot; type=&quot;LocalDateTime&quot;/&gt;
&lt;property name=&quot;CreationTimeAsUtcDateTime&quot; type=&quot;UtcDateTime&quot;/&gt;</pre>

<p>We are explicitly telling NHibernate whether the database stores Local or UTC times.</p>

<pre>Original entity:
Id: 09bead07-5a05-4459-a108-9e7501204918
        CreationTimeAsDateTime: 2011-01-24 5:29:36 PM (Local)
        CreationTimeAsLocalDateTime: 2011-01-24 5:29:36 PM (Local)
        CreationTimeAsUtcDateTime: 2011-01-25 12:29:36 AM (Utc)
Reloaded entity:
Id: 09bead07-5a05-4459-a108-9e7501204918
        CreationTimeAsDateTime: 2011-01-24 5:29:36 PM (Unspecified)
        CreationTimeAsLocalDateTime: 2011-01-24 5:29:36 PM (Local)
        CreationTimeAsUtcDateTime: 2011-01-25 12:29:36 AM (Utc)</pre>

<p>This is strictly metadata and it is up to the developer to ensure that the proper DateTime is present in the property/field. For instance, if I initialize the entity as follows:</p>

<pre class="brush: csharp;">public DateTimeEntity() {
    CreationTimeAsDateTime = DateTime.Now;
    CreationTimeAsLocalDateTime = DateTime.UtcNow;
    CreationTimeAsUtcDateTime = DateTime.Now;
}</pre>

<p>Note that the LocalDateTime property contains a UTC DateTime and the UTC property contains a Local DateTime. The results are:</p>

<pre>Original entity:
Id: 4579d245-46f3-4c3f-893b-9e750124a90b
        CreationTimeAsDateTime: 2011-01-24 5:45:32 PM (Local)
        CreationTimeAsLocalDateTime: 2011-01-25 12:45:32 AM (Utc)
        CreationTimeAsUtcDateTime: 2011-01-24 5:45:32 PM (Local)
Reloaded entity:
Id: 4579d245-46f3-4c3f-893b-9e750124a90b
        CreationTimeAsDateTime: 2011-01-24 5:45:32 PM (Unspecified)
        CreationTimeAsLocalDateTime: 2011-01-25 12:45:32 AM (Local)
        CreationTimeAsUtcDateTime: 2011-01-24 5:45:32 PM (Utc)</pre>

<p>Notice that NHibernate did not perform any conversions or throw an exception when saving/loading a DateTime value with the wrong DateTimeKind. (It could be argued that NHibernate should throw an exception when asked to save a Local DateTime and the property is mapped as a UtcDateTime.) It is up to the developer to ensure that the proper kind of DateTime is in the appropriate field/property.</p>

<h3>System.DateTimeOffset</h3>

<p>One problem that LocalDateTime and UtcDateTime does not solve is the offset problem. If you have a DateTime and its Kind is Local, all you know is that it is a Local DateTime. You do not know if that Local DateTime is Mountain (MST), Eastern (EST), Pacific (PST), etc. You do not know whether it has been corrected for daylight savings time. All you know is that it is a Local DateTime. You have to assume that the local time is based on the time zone of the current computer. Although this is often a reasonable assumption, it’s not always. (Consider for example that you’re collecting log files from a distributed system and servers reside in multiple time zones.) The problem is that System.DateTime class does not contain a place to record the timezone offset. Microsoft solved this problem starting in .NET 3.5 by introducing the System.DateTimeOffset class. It looks a lot like System.DateTime, but does include the timezone offset rather than the DateTimeKind. So we can just use System.DateTimeOffset in our applications rather than System.DateTime.</p>

<p>Except… Date/time types in SQL databases do not have anywhere to store the timezone offset. The notable exception is SQL Server 2008, which introduced the datetimeoffset type. NHibernate 2 introduced support for System.DateTimeOffset, but only for SQL Server 2008 onwards. (If you’re using SQL Server 2005 or earlier or another database server, you’ll have to implement your own IUserType to store System.DateTimeOffset in two separate columns – one for the DateTime and the other for the timezone offset.) The additional code in DateTimeEntity.cs looks like this:</p>

<pre class="brush: csharp;">public virtual DateTimeOffset CreationTimeAsDateTimeOffset { get; set; }</pre>

<p>The mapping file just needs the new property added:</p>

<pre class="brush: xml;">&lt;property name=&quot;CreationTimeAsDateTimeOffset&quot;/&gt;</pre>

<p>Note that I don’t need to specify the type in the mapping as NHibernate can infer it from the property type in DateTimeEntity. The resulting output is:</p>

<pre>Original entity:
Id: 95aa6c15-86f5-4398-aa9e-9e7600ae4580
        CreationTimeAsDateTime: 2011-01-25 10:34:30 AM (Local)
        CreationTimeAsLocalDateTime: 2011-01-25 10:34:30 AM (Local)
        CreationTimeAsUtcDateTime: 2011-01-25 5:34:30 PM (Utc)
        CreationTimeAsDateTimeOffset: 2011-01-25 10:34:30 AM -07:00
Reloaded entity:
Id: 95aa6c15-86f5-4398-aa9e-9e7600ae4580
        CreationTimeAsDateTime: 2011-01-25 10:34:30 AM (Unspecified)
        CreationTimeAsLocalDateTime: 2011-01-25 10:34:30 AM (Local)
        CreationTimeAsUtcDateTime: 2011-01-25 5:34:30 PM (Utc)
        CreationTimeAsDateTimeOffset: 2011-01-25 10:34:30 AM -07:00</pre>

<h3>Support for DateTime2, Date, and Time</h3>

<p>Let’s look at some C# and the corresponding mapping file for these types:</p>

<pre class="brush: csharp;">public virtual DateTime CreationTimeAsDateTime2 { get; set; }
public virtual DateTime CreationTimeAsDate { get; set; }
public virtual DateTime CreationTimeAsTime { get; set; }
public virtual TimeSpan CreationTimeAsTimeAsTimeSpan { get; set; }
public virtual TimeSpan CreationTimeAsTimeSpan { get; set; }</pre>

<p>Modifications to the hbm.xml:</p>

<pre class="brush: xml;">&lt;property name=&quot;CreationTimeAsDateTime2&quot; type=&quot;DateTime2&quot;/&gt;
&lt;property name=&quot;CreationTimeAsDate&quot; type=&quot;Date&quot;/&gt;
&lt;property name=&quot;CreationTimeAsTime&quot; type=&quot;Time&quot;/&gt;
&lt;property name=&quot;CreationTimeAsTimeAsTimeSpan&quot; type=&quot;TimeAsTimeSpan&quot;/&gt;
&lt;property name=&quot;CreationTimeAsTimeSpan&quot;/&gt;</pre>

<p>We’ll examine each of these in turn…</p>

<p>DbType.DateTime2 is a higher precision, wider range version of DbType.DateTime. DbType.DateTime maps to the datetime (or smalldatetime) SQL type, which has a range of 1753-01-01 to 9999-12-31. DbType.DateTime2 maps to the datetime2 SQL type, which has a range of 0001-01-01 to 9999-12-31. (Precision can be as high as 1/10 of a microsecond with a datetime2(7).) One of the niceties of DateTime2 is that an uninitialized DateTime struct (which has a value of 0001-01-01 12:00:00 AM (Unspecified)) does not cause a SqlTypeException with a SqlDateTime underflow.</p>

<p>DbType.Date does just what it advertises. It represents a Date without a Time component. It is stored in the database as only a date. .NET does not have a Date type and NHibernate represents it via a DateTime with the time portion set to 12:00:00 AM. I personally prefer to define my own Date class, which has no time component, and create an IUserType to handle the mapping. My custom Date class can handle the time truncation and provide a more natural programing model for my domain, but that’s a post for another day.</p>

<p>Time-related DbTypes stores just the time, but no date. In .NET, there is no Time class and so NHibernate uses a DateTime with the date component set to 1753-01-01, the minimum value for a SQL datetime or a System.TimeSpan – depending on the DbType that we choose. DbType.Time stores a System.DateTime in a time SQL type. DbType.TimeAsTimeSpan stores a System.TimeSpan as a time SQL type. DbType.TimeSpan stores a Syste.TimeSpan as a 64-bit integer (bigint) SQL type. As I mentioned for DbType.Date, I am more inclined to write my own Time class and custom IUserType to achieve a better programming model than relying on the .NET constructs of System.DateTime and System.TimeSpan. (I typically use System.DateTime or System.TimeSpan as a field in my custom Date or Time class for storing the data, but provide my own API for consistently working with the data.)</p>

<p><strong>WARNING</strong>: Not all databases support all date/time SQL types. So before choosing .NET and SQL types for your entities, make sure that they’re available in all databases that you plan to support.</p>

<p>Now we’ll take a look at these date/time types in action:</p>

<pre>Original entity:
Id: 6b2fb9ff-8036-4c17-b9ef-9e7600bf37e3
        CreationTimeAsDateTime: 2011-01-25 11:36:12 AM (Local)
        CreationTimeAsLocalDateTime: 2011-01-25 11:36:12 AM (Local)
        CreationTimeAsUtcDateTime: 2011-01-25 6:36:12 PM (Utc)
        CreationTimeAsDateTimeOffset: 2011-01-25 11:36:12 AM -07:00
        CreationTimeAsDateTime2: 2011-01-25 11:36:12 AM (Local)
        CreationTimeAsDate: 2011-01-25 11:36:12 AM (Local)
        CreationTimeAsTime: 2011-01-25 11:36:12 AM (Local)
        CreationTimeAsTimeAsTimeSpan: 11:36:12.2688265
        CreationTimeAsTimeSpan: 11:36:12.2688265
Reloaded entity:
Id: 6b2fb9ff-8036-4c17-b9ef-9e7600bf37e3
        CreationTimeAsDateTime: 2011-01-25 11:36:12 AM (Unspecified)
        CreationTimeAsLocalDateTime: 2011-01-25 11:36:12 AM (Local)
        CreationTimeAsUtcDateTime: 2011-01-25 6:36:12 PM (Utc)
        CreationTimeAsDateTimeOffset: 2011-01-25 11:36:12 AM -07:00
        CreationTimeAsDateTime2: 2011-01-25 11:36:12 AM (Unspecified)
        CreationTimeAsDate: 2011-01-25 12:00:00 AM (Unspecified)
        CreationTimeAsTime: 1753-01-01 11:36:12 AM (Unspecified)
        CreationTimeAsTimeAsTimeSpan: 11:36:12.2700000
        CreationTimeAsTimeSpan: 11:36:12.2688265</pre>

<h3>Summary</h3>

<p>As you have seen, NHibernate has a wide variety of options for mapping date/time-related types to and from the database. The right choice is highly dependent on your application and database server. I hope that this post has given you a few more tricks up your sleeve for effectively mapping date/time-related types using NHibernate.</p>]]></content>
      <post-name type="text"><![CDATA[date time support in nhibernate]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1073" />
        <category ref="1131" />
        <category ref="1132" />
        <category ref="1133" />
      </categories>
      <comments>
        <comment id="786" date-created="2011-02-07T13:12:58" date-modified="2011-02-07T13:12:58" approved="true" user-name="suresh.rajamani" user-url="http://nhforge.org/members/suresh.rajamani/default.aspx">
          <title type="text"><![CDATA[re: Date/Time Support in NHibernate]]></title>
          <content type="text"><![CDATA[How to Map Oracle Date with dotnet nullable System.DateTime]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2146" date-created="2008-09-01T04:05:07" date-modified="2011-03-15T02:05:04" approved="true" email="jkovacs@post.harvard.edu">
          <title type="text"><![CDATA[James Kovacs]]></title>
        </author>
      </authors>
    </post>
    <post id="773" date-created="2011-01-28T12:46:00" date-modified="2011-01-28T12:46:00" approved="true" post-url="/blogs/nhibernate/archive/2011/01/28/how-to-use-0-instead-of-null-for-foreign-keys.aspx" type="normal" hasexcerpt="false" views="15227">
      <title type="text"><![CDATA[How to use 0 instead of null for foreign keys]]></title>
      <content type="text"><![CDATA[<p>My twitter friend <a href="http://twitter.com/#!/hotgazpacho">@hotgazpacho</a> is having a nightmare with a legacy database, which has the following rule:</p>  <blockquote>   <p>“0 represents the absence of an entity without an actual row in the database”</p> </blockquote>  <p>It is pretty interesting how many times I’ve seen this scenario on nhibernate forums. </p>  <p>The first thing people do is to add “not-found=ignore” to every relationship, but not-found ignore is an evil, because NHibernate need to know if the row exist when lazy load. So not-found ignore is like a lazy loading killer. Also, with not-found=ignore doesn’t work when you insert or update, nhibernate will persist a null value instead of 0. </p>  <p>We want to keep and follow the rule until no legacy applications use this database and we can fix the data, maybe never (or like the spanish saying “provisoriamente para siempre”).</p>  <p>NHibernate is bad in many aspects, but the only thing we can’t blame is extensibility. We can tweak NHibernate to work in this scenario and in many more.</p>  <p>First a test:</p>  <pre class="code">[<span style="color: #2b91af">TestFixture</span>]
<span style="color: blue">public class </span><span style="color: #2b91af">Fixture
</span>{
    <span style="color: blue">private </span><span style="color: #2b91af">ISessionFactory </span>sf;
    <span style="color: blue">private </span><span style="color: #2b91af">Configuration </span>configuration;

    [<span style="color: #2b91af">TestFixtureSetUp</span>]
    <span style="color: blue">public void </span>SetUp()
    {
        configuration = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>().Configure();

        <span style="color: green">//export the schema
        </span><span style="color: blue">var </span>schemaExport = <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(configuration);
        schemaExport.Execute(<span style="color: blue">true</span>, <span style="color: blue">true </span>,<span style="color: blue">false</span>);
        sf = configuration.BuildSessionFactory();
    }

    [<span style="color: #2b91af">TestFixtureTearDown</span>]
    <span style="color: blue">public void </span>TearDown()
    {
        <span style="color: blue">var </span>schemaExport = <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(configuration);
        schemaExport.Execute(<span style="color: blue">true</span>, <span style="color: blue">true</span>, <span style="color: blue">true</span>);
    }


    [<span style="color: #2b91af">Test</span>]
    <span style="color: blue">public void </span>WhenInsertingAPersonWithNullCountryThenInsert0ValueInCountry()
    {
        <span style="color: blue">int </span>personId;
        <span style="color: blue">using</span>(<span style="color: blue">var </span>s = sf.OpenSession())
        <span style="color: blue">using</span>(<span style="color: blue">var </span>tx = s.BeginTransaction())
        {
            <span style="color: blue">var </span>p = <span style="color: blue">new </span><span style="color: #2b91af">Person </span>{Name = <span style="color: #a31515">&quot;tito&quot;</span>};
            s.Save(p);
            tx.Commit();
            personId = p.Id;
        }
        <span style="color: blue">using</span>(<span style="color: blue">var </span>s = sf.OpenSession())
        {
            s.CreateSQLQuery(<span style="color: #a31515">&quot;select CountryId from Person where id = :id&quot;</span>)
                .SetInt32(<span style="color: #a31515">&quot;id&quot;</span>, personId)
                .UniqueResult&lt;<span style="color: blue">int</span>?&gt;()
                .Should().Be.EqualTo(0);
        }

    }

    [<span style="color: #2b91af">Test</span>]
    <span style="color: blue">public void </span>WhenSelectingAPersonWithCountryWithIdEqualsTo0ThenCountryShouldBeNull()
    {
        <span style="color: blue">int </span>personId;
        <span style="color: blue">using </span>(<span style="color: blue">var </span>s = sf.OpenSession())
        <span style="color: blue">using </span>(<span style="color: blue">var </span>tx = s.BeginTransaction())
        {
            <span style="color: blue">var </span>p = <span style="color: blue">new </span><span style="color: #2b91af">Person </span>{ Name = <span style="color: #a31515">&quot;tito&quot; </span>};
            s.Save(p);
            tx.Commit();
            personId = p.Id;
        }

        <span style="color: blue">using </span>(<span style="color: blue">var </span>s = sf.OpenSession())
        <span style="color: blue">using </span>(s.BeginTransaction())
        {
            s.Get&lt;<span style="color: #2b91af">Person</span>&gt;(personId)
                .Country.Should().Be.Null();

        }

    }
}</pre>

<p>The first test persist a Person with null Country, and goes to the database to test if the CountryId is equals to 0.</p>

<p>The second test, persist a Person with null Country, in other session executes Get&lt;Person&gt; and test if the Country is null.</p>

<p>The mapping for person is trivial:</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">Person</span>&quot;<span style="color: blue">&gt;
&lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">Id</span>&quot;<span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>&quot;<span style="color: blue">hilo</span>&quot;<span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">param </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">max_lo</span>&quot;<span style="color: blue">&gt;</span>100<span style="color: blue">&lt;/</span><span style="color: #a31515">param</span><span style="color: blue">&gt;
  &lt;/</span><span style="color: #a31515">generator</span><span style="color: blue">&gt;
&lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;    
&lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">Name</span>&quot; <span style="color: blue">/&gt;
&lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>&quot;<span style="color: blue">Country</span>&quot; 
             <span style="color: red">class</span><span style="color: blue">=</span>&quot;<span style="color: blue">Country</span>&quot; 
             <span style="color: red">column</span><span style="color: blue">=</span>&quot;<span style="color: blue">CountryId</span>&quot; 
             <span style="color: red">foreign-key</span><span style="color: blue">=</span>&quot;<span style="color: blue">none</span>&quot; <span style="color: blue">/&gt;
&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>

<p>Note: <strike>I am killing the constraint for this test</strike>&#160; foreign-key=”none” tells the schema export to not create a foreign key, that is how the db must be on real life <img style="border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none" class="wlEmoticon wlEmoticon-winkingsmile" alt="Guiño" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/wlEmoticon_2D00_winkingsmile_5F00_2AC68689.png" />.</p>

<p>The solution is pretty simple:</p>

<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">NullableTuplizer </span>: <span style="color: #2b91af">PocoEntityTuplizer
</span>{
    <span style="color: blue">public </span>NullableTuplizer(<span style="color: #2b91af">EntityMetamodel </span>entityMetamodel, <span style="color: #2b91af">PersistentClass </span>mappedEntity)
        : <span style="color: blue">base</span>(entityMetamodel, mappedEntity)
    {
    }

    <span style="color: blue">public override object</span>[] GetPropertyValuesToInsert(
        <span style="color: blue">object </span>entity, <span style="color: #2b91af">IDictionary </span>mergeMap, <span style="color: #2b91af">ISessionImplementor </span>session)
    {
        <span style="color: blue">object</span>[] values = <span style="color: blue">base</span>.GetPropertyValuesToInsert(entity, mergeMap, session);
        <span style="color: green">//dirty hack 1
        </span><span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; values.Length; i++)
        {
            <span style="color: blue">if </span>(values[i ] == <span style="color: blue">null </span>&amp;&amp; <span style="color: blue">typeof </span>(<span style="color: #2b91af">IEntity</span>).IsAssignableFrom(getters[i ].ReturnType))
            {
                values[i ] = ProxyFactory.GetProxy(0, <span style="color: blue">null</span>);
            }
        }
        <span style="color: blue">return </span>values;
    }

    <span style="color: blue">public override object</span>[] GetPropertyValues(<span style="color: blue">object </span>entity)
    {
        <span style="color: blue">object</span>[] values = <span style="color: blue">base</span>.GetPropertyValues(entity);
        <span style="color: green">//dirty hack 2
        </span><span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; values.Length; i++)
        {
            <span style="color: blue">if </span>(values[i ] == <span style="color: blue">null </span>&amp;&amp; <span style="color: blue">typeof </span>(<span style="color: #2b91af">IEntity</span>).IsAssignableFrom(getters[i ].ReturnType))
            {
                values[i ] = ProxyFactory.GetProxy(0, <span style="color: blue">null</span>);
            }
        }
        <span style="color: blue">return </span>values;
    }


    <span style="color: blue">public override void </span>SetPropertyValues(<span style="color: blue">object </span>entity, <span style="color: blue">object</span>[] values)
    {
        <span style="color: green">//dirty hack 3.
        </span><span style="color: blue">for </span>(<span style="color: blue">int </span>i = 0; i &lt; values.Length; i++)
        {
            <span style="color: blue">if </span>(<span style="color: blue">typeof </span>(<span style="color: #2b91af">IEntity</span>).IsAssignableFrom(getters[i ].ReturnType)
                &amp;&amp; ((<span style="color: #2b91af">IEntity</span>) values[i ]).Id == 0)
            {
                values[i ] = <span style="color: blue">null</span>;
            }
        }
        <span style="color: blue">base</span>.SetPropertyValues(entity, values);
    }
}</pre>

<p>We lie to nhibernate three times:</p>

<ul>
  <li>When getting the values for insert, we change a&#160; “null” in the Country property, for a proxy of country with Id equals to 0. NHibernate assumes that such country exist and executes: </li>

  <li>When getting the values for update , we do the same than for the insert. </li>

  <li>When loading the values in the entity, we will get a nhibernate proxy or entity with Id = 0, we change this value to null. </li>
</ul>

<p>To register the NullableTuplizer for all the mappings:</p>

<pre class="code"><span style="color: blue">foreach </span>(<span style="color: blue">var </span>persistentClass <span style="color: blue">in </span>configuration.ClassMappings)
{
    persistentClass.AddTuplizer(<span style="color: #2b91af">EntityMode</span>.Poco, <span style="color: blue">typeof</span>(<span style="color: #2b91af">NullableTuplizer</span>).AssemblyQualifiedName);
}</pre>]]></content>
      <post-name type="text"><![CDATA[how to use 0 instead of null for foreign keys]]></post-name>
      <categories>
        <category ref="1038" />
        <category ref="1094" />
        <category ref="1099" />
      </categories>
      <comments>
        <comment id="774" date-created="2011-01-28T13:39:42" date-modified="2011-01-28T13:39:42" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[You don't need to create the drop script.
Using foreign-key="none" is enough.
;)]]></content>
        </comment>
        <comment id="776" date-created="2011-01-31T19:43:41" date-modified="2011-01-31T19:43:41" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[@fabio @apweb2010 i just updated the post. Thanks for the tip.]]></content>
        </comment>
        <comment id="824" date-created="2011-03-16T11:50:36" date-modified="2011-03-16T11:50:36" approved="true" user-name="MBDTeam" user-url="http://nhforge.org/members/MBDTeam/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[@Jose Thanks for charing this! I tried your solution with NH 3.1 GA. But I have a little problem. Reading Entities from the DB works as aspected. A entity with parentid=0 returns as nothing. But if I save an entity with parent=nothing I get an ADO exception claiming insert of null in parentid is not allowed. I tracked it down to AbstractSaveEventListener.cs -> PerformSaveOrReplicate. In line 'object[] values = persister.GetPropertyValuesToInsert(entity, GetMergeMap(anything), source);' the property parent is set to a dummy Object with id 0. This is ok. But a few lines later:
			if (substitute)
			{
				persister.SetPropertyValues(entity, values, source.EntityMode);
			}
the parent property is set to null again :-(

What can I do?

Michael]]></content>
        </comment>
        <comment id="825" date-created="2011-03-16T12:04:56" date-modified="2011-03-16T12:04:56" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[Hi @MBDTeam, there last version of this code is on bitbucket; https://bitbucket.org/jfromaniello/hotgazpachoeg
with some tests, please can you try that version and if it fail... try to write me a short test inside that solution.
I'll have a look ASAP.

Thanks]]></content>
        </comment>
        <comment id="826" date-created="2011-03-16T12:09:28" date-modified="2011-03-16T12:09:28" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[@ExternalBlogs Sorry this is an english post. I don't speak italian; tried to translate your comment but i don't understand. May your write your comment in english? i'll kindly answer your questions.

Thanks]]></content>
        </comment>
        <comment id="827" date-created="2011-03-16T13:47:53" date-modified="2011-03-16T13:47:53" approved="true" user-name="MBDTeam" user-url="http://nhforge.org/members/MBDTeam/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[@Jose, thanks for your quick response. A failing test is easy to get. Just add 
		public virtual Person Parent { get; set; }
		public virtual IList<Person> Childs { get; set; }
to Person and 
	<many-to-one name="Parent"
				 class="Person"
				 column="ParentId"
				 not-null="true"
				 foreign-key="none" />
	<bag name="Childs" 
		 inverse="true" 
		 lazy="true" 
		 cascade="all">
		 <key column="ParentId" />
		 <one-to-many class="Person" />
	</bag>

to person.hbm.xml and all your tests will fail. I think just adding a IList of Entity X will do it also, because then substitue in AbstractSaveEventListener.cs -> PerformSaveOrReplicate becomes true. 
I have found a workaround for me. My base entity class has a property isTransient that is set to true if my dao creates the objects for me. And in my Interceptor -> PostFlush it is set back to false. So i can do the following in SetPropertyValues:

if (!entity.isTransient) {
	values(i) = null;
}

Now everything works as aspected. But I would like to now if there is a cleaner way to detect if the entity in SetPropertyValues is Transient???

Michael]]></content>
        </comment>
        <comment id="838" date-created="2011-03-22T15:32:52" date-modified="2011-03-22T15:32:52" approved="true" user-name="hotgazpacho" user-url="http://nhforge.org/members/hotgazpacho/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[Yes, it seems that as soon as you add a collection of child entities, GetPropertyValues(object entity), and thus CreateFakeProxy(int i) does not get called.]]></content>
        </comment>
        <comment id="841" date-created="2011-03-22T18:54:27" date-modified="2011-03-22T18:54:27" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[Thank you both! I'll have a look ASAP]]></content>
        </comment>
        <comment id="842" date-created="2011-03-23T19:42:00" date-modified="2011-03-23T19:42:00" approved="true" user-name="hotgazpacho" user-url="http://nhforge.org/members/hotgazpacho/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[OK, the way I'm going about solving this is eschewing the Tuplizer altogether and using Event Listeners. Specifically IPreInsertEventListener and IPreUpdateEventListeners. Ayende outlined their use in a blog post: http://ayende.com/Blog/archive/2009/04/29/nhibernate-ipreupdateeventlistener-amp-ipreinserteventlistener.aspx

Still need to figure out a way to abstract it a bit so that I am not hard-coding entity names and properties in the event listeners, but it's a good start, and my tests pass!]]></content>
        </comment>
        <comment id="872" date-created="2011-04-27T12:11:25" date-modified="2011-04-27T12:11:25" approved="true" user-name="DsA" user-url="http://nhforge.org/members/DsA/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[I have a problem. If I use NullableTuplizer in my project, then all of my object with null child are becoming dirty and NHibernate is sending UPDATE command for each object when Session.Flush()]]></content>
        </comment>
        <comment id="953" date-created="2011-07-27T22:03:05" date-modified="2011-07-27T22:03:05" approved="true" user-name="digitalpacman" user-url="http://nhforge.org/members/digitalpacman/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[I only need this tuplizer for a single class. And I am using Fluent NHibernate. I can't figure out how to apply the tuplizer to it since i'm using fluent. Any help?]]></content>
        </comment>
        <comment id="1004" date-created="2011-11-15T07:16:12" date-modified="2011-11-15T07:16:12" approved="true" user-name="pvginkel" user-url="http://nhforge.org/members/pvginkel/default.aspx">
          <title type="text"><![CDATA[re: How to use 0 instead of null for foreign keys]]></title>
          <content type="text"><![CDATA[I solved this issue with a custom persister. I inherited from NHibernate.Persister.Entity.SingleTableEntityPersister and overriden just IdentifierType to return a custom implementation. In the identifier type, in the NullSafeGet and NullSafeSet methods, I convert null to the value I want (a space in my case, but this should work equally well for integers).

The only problem I couldn't solve through this method is that our database requires that "sometimes", null is converted, and "sometimes" it isn't.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="800" date-created="2011-02-22T13:32:49" date-modified="2011-02-22T13:32:49" approved="true" url="http://www.dotnetmarche.org/blogs/externalblogs/archive/2011/02/22/nhibernate-utilizzare-lo-0-per-rappresentare-l-amp-rsquo-assenza-di-entit-amp-agrave.aspx">
          <title type="text"><![CDATA[NHibernate: utilizzare lo 0 per rappresentare l&amp;rsquo;assenza di entit&amp;agrave;]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="789" date-created="2011-02-07T23:51:00" date-modified="2011-02-07T23:51:00" approved="true" post-url="/blogs/nhibernate/archive/2011/02/08/visual-nhibernate-using-templates.aspx" type="normal" hasexcerpt="false" views="13510">
      <title type="text"><![CDATA[Visual NHibernate – Using Templates]]></title>
      <content type="text"><![CDATA[<p><a target="_blank" href="http://www.slyce.com/VisualNHibernate/">Visual NHibernate</a> can be customized in many ways. Today we&rsquo;ll look at the built-in template engine. You can easily create the exact output you need by tweaking the built-in templates or creating new custom templates.</p>
<p>Visual NHibernate currently has two built-in templates: </p>
<ul>
<li>The standard NHibernate template </li>
<li>The new <a target="_blank" href="http://www.sharparchitecture.net/">Sharp Architecture</a> template. </li>
</ul>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/editor_5F00_09CDAF73.png"><img height="338" width="585" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/editor_5F00_thumb_5F00_1F877203.png" alt="editor" border="0" title="editor" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" /></a></p>
<h4>Template Editor</h4>
<p>The template editor enables you to specify how the generated files and folders should be laid out in the destination folder, WYSIWYG style. Script can be written to generate dynamic files, while static files such as images and DLLs can also be included in the output.</p>
<p>The code editor has IntelliSense and syntax-highlighting, as well as live feedback about errors. Compile errors are underlined in red squiggly lines. They also appear in the errors grid and cause the title-bar to change color from green to red.</p>
<p>Find and replace can be accessed via the standard keyboard shortcuts (Ctrl+F, Ctrl+Shift+F, Ctrl+H, Ctrl+Shift+H).</p>
<h4>Laying out folders and files</h4>
<p>Add the first folder or file by right-clicking the &lsquo;Output Folder&rsquo; node in the treeview.</p>
<p>Folders and files can have iterators. You can generate either a single file, or generate one file or folder per Entity, Table, Column, Component or View. If you select an iterator then you will have access to the iterator in script via a lowercase name, such as entity.Name or table.Name.</p>
<p>File-names and folder-names can be dynamic and can contain script:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_3B68812E.png"><img height="118" width="347" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_7D8BE9B1.png" alt="image" border="0" title="image" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" /></a></p>
<h5><em>Folders</em></h5>
<p>Add a folder by right-clicking on the parent folder.</p>
<h5><em>Dynamic files</em></h5>
<p>A dynamic file is one in which the body is created dynamically via script. Add a file by right-clicking on the parent folder.</p>
<h5><em>Static files</em></h5>
<p>A static file is one that is distributed as-is. It can be an image file, a readme file, a DLL etc.</p>
<p>Static files need to be added to the Resources collection. To do this, select the Resources tab on the left then click the Add button to select the file.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_29C87096.png"><img height="207" width="360" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0EAFA188.png" alt="image" border="0" title="image" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" /></a></p>
<h4>Scripting</h4>
<p>Dynamic files output text. Create dynamic content by using either ASP-style delimiters &lt;%...%&gt; or T4-style delimiters &lt;#...#&gt;.</p>
<p>Select the delimiter style towards the top right corner of the screen.</p>
<h5><em>Writing output</em></h5>
<p>Dynamic text can be inserted into the document in a number of ways:</p>
<ol>
<li>Mixing script and output text, similar to ASP </li>
<li>Placeholders: &lt;%=entity.Name%&gt; </li>
<li>Write(text) </li>
<li>WriteLine(text) </li>
<li>WriteFormat(formatText, args) </li>
<li>WriteIf(boolean expression, trueText) </li>
<li>WriteIf(boolean expression, trueText, falseText) </li>
</ol>
<h5><em>Skipping files</em></h5>
<p>A dynamic file can be skipped via script by setting SkipThisFile = true and returning the reason. For example:</p>
<blockquote>
<div>
<pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">if</span> (!Project.Settings.UseFluentNHibernate)<br />{<br />    SkipThisFile = <span style="color: #0000ff">true</span>;<br />    <span style="color: #0000ff">return</span> &ldquo;Project.Settings.UseFluentNHibernate <span style="color: #0000ff">is</span> <span style="color: #0000ff">false</span>&rdquo;;<br />}</pre>
</div>
</blockquote>
<h4>Testing</h4>
<p>Visual NHibernate has a smooth edit-test cycle, giving immediate feedback on your template and scripts. It also enables you to test individual entities, tables, views etc.</p>
<ol>
<li>Create your template script </li>
<li>Select the &lsquo;Test&rsquo; tab </li>
<li>If the file has an iterator, select the iterator you want to test with. Example: if you&rsquo;ve specified that one file should be created for each entity, then select an entity to test with. If the iterator is a table then a list of tables will be presented for you to make a selection.</li>
<li>Click the &lsquo;Test&rsquo; button to run the test. </li>
<li>The script will execute and display the generated text (file-body) or errors if they occur. </li>
</ol>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_6FF56544.png"><img height="251" width="316" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_12F5B0E8.png" alt="image" border="0" title="image" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" /></a></p>
<h4>Scripting API</h4>
<p>The API available for scripting exposes all details about the current project. You have full access to all properties or entities, tables, relationships etc.</p>
<p>The editor has full IntelliSense and the API is easily discoverable:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_07F88406.png"><img height="273" width="423" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_1B75BDDA.png" alt="image" border="0" title="image" style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" /></a></p>
<p>Here&rsquo;s a small portion of the API:</p>
<ul>
<li><strong>CurrentFilePath:</strong> Gets or sets the path of the file being written. You can override the path specified in the filename editor via code. </li>
<li><strong>SkipThisFile:</strong> Set this to true to stop the current file from being generated. Return the reason for skipping. This reason will be displayed when testing this dynamic file. </li>
<li><strong>Project:</strong> Object containing all project-level variables, objects and settings. 
    
<ul>
<li><strong>Project.Settings:</strong> The Settings object allows access to the values of all settings on the Settings tab. </li>
<li><strong>Project.Entities:</strong> A collection of all entities. </li>
<li><strong>Project.Components:</strong> A collection of all components. </li>
<li><strong>Project.Tables:</strong> A collection of all tables. </li>
<li><strong>Project.Views:</strong> A collection of all views. </li>
<li><strong>Project.OutputFolder:</strong> The path of the output folder selected by the user. </li>
</ul>
</li>
</ul>
<h4>Extend your existing NHibernate projects</h4>
<p>Visual NHibernate can reverse-engineer your existing NHibernate Visual Studio projects. Your existing code becomes the model. This enables you to create new code based on your existing code. Create a new template, import your existing code, generate new code.</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7A722565.png"><img height="235" width="238" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_0D46A910.png" alt="image" border="0" title="image" style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" /></a></p>
<h4>Conclusion</h4>
<p>Custom templates give you a tremendous amount of freedom and power. The best way to learn about the capabilities of templates is to inspect the built-in templates. Download <a target="_blank" href="http://www.slyce.com/VisualNHibernate/">Visual NHibernate</a>, have a play, and tell us what you think.</p>]]></content>
      <post-name type="text"><![CDATA[visual nhibernate using templates]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1125" />
        <category ref="1168" />
      </categories>
      <trackbacks>
        <trackback id="1091" date-created="2014-09-24T10:06:45" date-modified="2014-09-24T10:06:45" approved="true" url="http://www.sensitiv.dk/sys6_site/modules/import_template/showme.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Ftake4live.com%2Fscuttle%2Fbookmarks.php%2Fcornegersten%3Eonline+shopping+haul+2014%3C%2Fa%3E">
          <title type="text"><![CDATA[online shopping offer codes]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2556" date-created="2009-02-24T04:55:21" date-modified="2011-02-07T23:58:17" approved="true" email="gareth.hayter@slyce.com">
          <title type="text"><![CDATA[gareth]]></title>
        </author>
      </authors>
    </post>
    <post id="792" date-created="2011-02-16T22:46:00" date-modified="2011-02-16T22:46:00" approved="true" post-url="/blogs/nhibernate/archive/2011/02/16/get-load-polymorphism-in-nhibernate-3.aspx" type="normal" hasexcerpt="false" views="13193">
      <title type="text"><![CDATA[Get/Load Polymorphism in NHibernate 3]]></title>
      <content type="text"><![CDATA[<p>[This article was originally published on my personal blog <a href="http://jameskovacs.com/2011/02/16/getload-polymorphism-in-nhibernate-3/">here</a>. I hereby grant myself permission to re-publish it on NHForge.org.]</p>  <p>[Code for this article is available on GitHub <a href="https://github.com/JamesKovacs/NH3Features/tree/03-GetLoadPolymorphism-Updated">here</a>.]</p>  <p>Nothing gets an OO zealot hot under the collar the way the term polymorphism does. You probably have three questions right now… What does polymorphism have to do with object-relational mapping? How does it relate to NHibernate? And why should I care?</p>  <p>An ORM that supports polymorphic loading allows us to request one type of object, but potentially get an object of a derived type back. As an example, let's say we have the following simple inheritance hierarchy in our application:</p>  <p><img style="border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Animal Inheritance Hierarchy" border="0" alt="Animal Inheritance Hierarchy" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/_5F00_ClassDiagram_5F00_35C5B6A3.png" width="383" height="233" /></p>  <p>We can query for an Animal, but receive back an instance of Dog or Cat instead.</p>  <pre class="brush: csharp;">var dog = session.Get&lt;Animal&gt;(dogId);</pre>

<p>NHibernate has supported this type of polymorphic loading behaviour for awhile, but the base class (or interface) had to be mapped. If it wasn’t, polymorphic loading would only work when querying with Criteria or LINQ. The following works for both NH 2.1.2 and NH3 regardless of whether the Animal base class is mapped or not.</p>

<pre class="brush: csharp;">var animal = session.CreateCriteria&lt;Animal&gt;()
                    .Add(Restrictions.IdEq(dogId))
                    .UniqueResult&lt;Animal&gt;();

// N.B. Use session.Linq&lt;Animal&gt;() in NH2.1.2
var query = from a in session.Query&lt;Animal&gt;()
            where a.Id == dogId
            select a;
var animal = query.Single();</pre>

<p>In NHibernate 2.1.2 and earlier, ISession.Get&lt;T&gt;(id) or ISession.Load&lt;T&gt;(id) would fail if T was an unmapped base class or interface. With NHibernate 3, these methods now work regardless of whether T is mapped or not.*</p>

<pre class="brush: csharp;">// Works in NH3; works in NH2.1.2 only if Animal is mapped
// In the sample code, works in NH3 for both Animal and UnmappedAnimal base classes
// In NH2.1.2 and before, works for Animal (mapped), but not UnmappedAnimal
var dog = session.Get&lt;Animal&gt;(dogId);
var cat = session.Load&lt;Animal&gt;(catId);</pre>

<p>ASIDE: ISession.Get(id) returns null when the entity doesn’t exist in the database, whereas ISession.Load(id) throws an exception. Generally ISession.Load(id) is preferred if you know the entity should exist as NHibernate can return a proxy object that delays hitting the database until the last possible moment. ISession.Get(id) requires querying the database immediately because there is no way to return an object (e.g. a proxy), but later change it to null when accessed.</p>

<p>In NHibernate 3, polymorphic loading works for Criteria, LINQ, and Get/Load. <strike>It has not been implemented for HQL. (If you want/need this feature, the NHibernate team is always willing to accept a feature request with patch.)</strike> HQL in NH3 supports polymorphic loading if the queried class is imported via &lt;import class=”UnmappedClass”/&gt; in a hbm.xml file.</p>

<pre class="brush: csharp;">// Criteria works in NH2.1.2 and NH3
var animal = session.CreateCriteria&lt;UnmappedAnimal&gt;()
                    .Add(Restrictions.IdEq(dogId))
                    .UniqueResult&lt;UnmappedAnimal&gt;());

// LINQ works in NH2.1.2 and NH3 (NH2.1.2 uses session.Linq&lt;T&gt;())
var query = from a in session.Query&lt;UnmappedAnimal&gt;()
            where a.Id == dogId
            select a;
var animal = query.Single();

// Get/Load works in NH3, but fails in NH2.1.2 and earlier
var animal = session.Get&lt;UnmappedAnimal&gt;(dogId);

// HQL works for NH3 if UnmappedAnimal is imported, but fails for NH2.1.2
var animal = session.CreateQuery(&quot;from a in AbstractAnimal where a.id = :id&quot;)
                    .SetParameter(&quot;id&quot;, dogId)
                    .UniqueResult&lt;UnmappedAnimal&gt;());</pre>

<p>* I should note one restriction on the generic parameter T when calling ISession.Get&lt;T&gt;(id) and ISession.Load&lt;T&gt;(). Polymorphic loading only works if there is a unique persister for T. Otherwise NHibernate throws a HibernateException, “Ambiguous persister for [T] implemented by more than one hierarchy”. What does this mean? Let’s say you have an unmapped abstract base class, such as Entity. (Entity is a class defined in our application, which includes properties common across all persistent entities, such as primary key, audit fields, and similar. It is not required by NHibernate, but often useful for extracting common domain code.) Consider the following contrived example:</p>

<p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Contrived Inheritance Hierarchy" border="0" alt="Contrived Inheritance Hierarchy" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/_5F00_ClassDiagram_5F00_215FF118.png" width="599" height="497" /></p>

<p>Note that the Animal inheritance hierarchy is mapped and so is Customer. If we try to execute the following code:</p>

<pre class="brush: csharp;">var id = 42;
var entity = session.Get&lt;Entity&gt;(id);</pre>

<p>We will get a HibernateException as mentioned above. We are asking NHibernate to load an Entity with an id of 42. But primary keys are only unique within a mapped inheritance hierarchy. So there could be a Cat (or Dog) with id of 42 <b>and</b> a Customer with id of 42! So NHibernate fails with a HibernateException since it has no way of returning a list of objects from Get/Load. If you really want to query across inheritance hierarchies, you can do so with Critera or LINQ where you return a list of objects. The following code will work:</p>

<pre class="brush: csharp;">var id = 42;
var entities = session.CreateCriteria&lt;Entity&gt;()
                      .Add(Restrictions.IdEq(id))
                      .List&lt;Entity&gt;();</pre>

<p>Here’s a NHibernate trick that makes for a good demo, but isn’t terribly practical in real applications… Retrieve a list of all entities in the database:</p>

<pre class="brush: csharp;">var allEntities = session.CreateCriteria&lt;object&gt;()
                         .List&lt;object&gt;();</pre>

<p>Happy coding!</p>

<p><strong>UPDATE</strong>: Fabio Maulo, NH project lead, pointed out to me that HQL in NHibernate 3 can load unmapped classes so long as you make NHibernate aware of the classes via an &lt;import class=”UnmappedAnimal”/&gt; directive in a hbm.xml file. Thanks, Fabio.</p>]]></content>
      <post-name type="text"><![CDATA[get load polymorphism in nhibernate 3]]></post-name>
      <categories>
        <category ref="1112" />
      </categories>
      <comments>
        <comment id="793" date-created="2011-02-16T23:53:53" date-modified="2011-02-16T23:53:53" approved="true" user-name="Phillip" user-url="http://www.philliphaydon.com">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[How do you go about mapping something like Cat/Dog? I've never seen this sort of thing done before.

Also does this work with QueryOver? ]]></content>
        </comment>
        <comment id="794" date-created="2011-02-17T00:24:26" date-modified="2011-02-17T00:24:26" approved="true" user-name="James Kovacs" user-url="http://jameskovacs.com">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[<p>@Natural - ISession.QueryOver&lt;T&gt;() is a strongly-typed API around Criteria. Since it works with Critera, it works with QueryOver. As for the mapping files, there are many ways to represent inheritance in NHibernate. I chose to use table-per-class-hierarchy inheritance:</p>
<p> &nbsp;&lt;class name="Animal" abstract="true"&gt;</p>
<p> &nbsp; &nbsp;&lt;id name="Id"&gt;</p>
<p> &nbsp; &nbsp; &nbsp;&lt;generator class="guid.comb" /&gt;</p>
<p> &nbsp; &nbsp;&lt;/id&gt;</p>
<p> &nbsp; &nbsp;&lt;discriminator column="AnimalType"/&gt;</p>
<p> &nbsp; &nbsp;&lt;property name="Name"/&gt;</p>
<p> &nbsp; &nbsp;&lt;subclass name="Cat" discriminator-value="C" /&gt;</p>
<p> &nbsp; &nbsp;&lt;subclass name="Dog" discriminator-value="D" /&gt;</p>
<p> &nbsp;&lt;/class&gt;</p>
<p>You can read about all the options in the NH docs:</p>
<p><a rel="nofollow" target="_new" href="/doc/nh/en/index.html#inheritance">nhforge.org/.../index.html</a></p>]]></content>
        </comment>
        <comment id="795" date-created="2011-02-17T03:02:30" date-modified="2011-02-17T03:02:30" approved="true" user-name="Phillip" user-url="http://www.philliphaydon.com/">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[@James - Awesome, thank you. My weekend is now going to be spent playing around with this.

As for the QueryOver, I was asking because there's stuff missing from QueryOvery, or atleast I haven't found the documentation/blogs to say otherwise. For example a strongly typed way of writing distinct projections. ]]></content>
        </comment>
        <comment id="796" date-created="2011-02-17T23:03:08" date-modified="2011-02-17T23:03:08" approved="true" user-name="James Kovacs" user-url="http://jameskovacs.com">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[@Natural - WRT QueryOver... I haven't checked whether it supports everything that Criteria itself supports. For distinct projections, try session.QueryOver<Foo>().Select(new Distinct(projection)). If there is some unsupported feature, you can always access the criteria built up to that point using IQueryOver<T>.UnderlyingCriteria and then treat it as a normal ICriteria<T>. HTH.]]></content>
        </comment>
        <comment id="797" date-created="2011-02-18T12:39:09" date-modified="2011-02-18T12:39:09" approved="true" user-name="Fabio Maulo" user-url="http://fabiomaulo.blogspot.com/">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[It work in HQL too if you import the class.]]></content>
        </comment>
        <comment id="798" date-created="2011-02-18T12:40:27" date-modified="2011-02-18T12:40:27" approved="true" user-name="Fabio Maulo" user-url="http://fabiomaulo.blogspot.com/">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[The doc.
http://nhforge.org/doc/nh/en/index.html#mapping-declaration-import]]></content>
        </comment>
        <comment id="799" date-created="2011-02-18T18:35:08" date-modified="2011-02-18T18:35:08" approved="true" user-name="James Kovacs" user-url="http://jameskovacs.com">
          <title type="text"><![CDATA[re: Get/Load Polymorphism in NHibernate 3]]></title>
          <content type="text"><![CDATA[Thanks, Fabio. Post updated.]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2146" date-created="2008-09-01T04:05:07" date-modified="2011-03-15T02:05:04" approved="true" email="jkovacs@post.harvard.edu">
          <title type="text"><![CDATA[James Kovacs]]></title>
        </author>
      </authors>
    </post>
    <post id="803" date-created="2011-02-24T16:00:00" date-modified="2011-02-24T16:00:00" approved="true" post-url="/blogs/nhibernate/archive/2011/02/24/net-client-profile-support-in-nhibernate-3.aspx" type="normal" hasexcerpt="false" views="6858">
      <title type="text"><![CDATA[.NET Client Profile Support in NHibernate 3]]></title>
      <content type="text"><![CDATA[<p>[This article was originally published on my personal blog <a href="http://jameskovacs.com/2011/02/24/net-client-profile-support-in-nhibernate-3/">here</a>. I hereby grant myself permission to re-publish it on NHForge.org.]</p>  <p>[Code for this article is available on GitHub <a href="https://github.com/JamesKovacs/NH3Features/tree/04-ClientProfileSupport">here</a>.]</p>  <p>NHibernate 3 introduces support for both the .NET 3.5 Client Profile and .NET 4.0 Client Profile. This means that applications built with NHibernate can be deployed to client desktops without the full .NET Framework installed. Why hasn’t this been available all along?</p>  <p>NHibernate 2.X was built to support .NET 2.0 and above. The Client Profile wasn’t introduced until after NHibernate 2.0 was released. Microsoft introduced the Client Profile in .NET 3.5 to reduce the size of the .NET Framework on client machines. (The reality is that end users don’t need ASP.NET, server-side WCF features, and MSBuild on their machines to run client-side applications.)</p>  <p>So why didn’t NHibernate support the Client Profile once it was released? What was holding them back? What was holding NHibernate back from supporting the Client Profile immediately was a dependency on System.Web. Now why the heck would NHibernate depend on System.Web? There aren’t many places that NHibernate touches System.Web, but there are a few. The first is in supporting session-per-request semantics in web applications using <a href="/doc/nh/en/index.html#architecture-current-session">Contextual Sessions</a>. I won’t go into the details here, but once you configure cfg.CurrentSessionContext&lt;T&gt;() in Loquacious or hibernate.current_session_context_class in hibernate.cfg.xml, you can get the current session from your static session factory. (ASIDE: If none of the built-in ICurrentSessionContext classes suffices for your needs, it is very easy to implement your own.)</p>  <pre class="brush: csharp;">var session = sessionFactory.GetCurrentSession();</pre>

<p>The ManagedWebSessionContext and WebSessionContext classes can be used for session-per-request semantics and both store the current session in the HttpContext. Hence they need a reference to System.Web. So to support the Client Profile, the NHibernate team had to break this dependency on System.Web. They did this by accessing the HttpContext via a compiled dynamic method, which is evaluated at run-time. (A compiled dynamic method has much better performance than accessing properties through reflection.)</p>

<p>Another more insidious dependency on System.Web was in the logging infrastructure. Before NHibernate 3, NHibernate took a hard dependency on log4net. If you wanted logging, you used log4net. Now here is the insidious part… log4net has a dependency on System.Web for its AspNetTraceAppender, which writes to the ASP.NET TraceContext. (You can access the ASP.NET TraceContext via <a href="http://example.com/trace.axd">http://example.com/trace.axd</a>.) To break this dependency, NHibernate 3 introduces LoggerProvider and the IInternalLogger. If a logger is explicitly configured, it uses that one. Now for a bit of cleverness. If no logger is explicitly configured, and LoggerProvider is asked for an IInternalLogger, it checks the bin directory. If it finds log4net, it uses log4net. Otherwise it defaults to the NoLoggingLogger. (N.B. Out-of-the-box NHibernate 3 only supports log4net or no logging, though it isn’t too onerous support other logging frameworks by implementing an IInternalLogger adapter and some support classes.)</p>

<p>I haven’t done an exhaustive search of the NHibernate 2.X codebase looking for other dependencies on System.Web, but those two give you an idea of why supporting the .NET Client Profile wasn’t as simple as recompiling NHibernate 2.X. The team had to break some dependencies on assemblies not include with the .NET Client Profile while not breaking backward compatibility. For most developers, supporting the .NET Client Profile is as simple as switching the Target Framework on their assemblies.</p>

<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClientProfileTargetFramework_5F00_26C98B5A.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="ClientProfileTargetFramework" border="0" alt="ClientProfileTargetFramework" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/ClientProfileTargetFramework_5F00_thumb_5F00_3B6B1273.png" width="637" height="484" /></a></p>

<p>One word of warning… If you’re using <a href="http://nhprof.com">NHibernate Profiler</a> (and you should be), the NHibernateProfiler.Appender doesn’t support the .NET Client Profile because it requires log4net. You can use a preprocessor directive around the initialization line of NHibernate Profiler and then define that conditional compilation constant (using #define ENABLE_NHPROF) to enable/disable profiling. You’ll also have to change the target framework to .NET 3.5 or .NET 4.0 temporarily for the profiling session so that your project compiles.</p>

<pre class="brush: csharp;">#if ENABLE_NHPROF
HibernatingRhinos.Profiler.Appender.NHibernate.NHibernateProfiler.Initialize();
#endif</pre>

<p>UPDATE: NHibernate Profiler build 796 and later supports profiling applications built against the .NET Client Profile. More information can be found <a href="http://groups.google.com/group/nhprof/browse_frm/thread/3d2ff9dc83955156?hl=en">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[net client profile support in nhibernate 3]]></post-name>
      <categories>
        <category ref="1045" />
        <category ref="1169" />
      </categories>
      <authors>
        <author id="2146" date-created="2008-09-01T04:05:07" date-modified="2011-03-15T02:05:04" approved="true" email="jkovacs@post.harvard.edu">
          <title type="text"><![CDATA[James Kovacs]]></title>
        </author>
      </authors>
    </post>
    <post id="804" date-created="2011-03-01T05:03:00" date-modified="2011-03-01T05:03:00" approved="true" post-url="/blogs/nhibernate/archive/2011/03/01/integrating-adobe-flex-applications-with-nhibernate.aspx" type="normal" hasexcerpt="false" views="22813">
      <title type="text"><![CDATA[Integrating Adobe Flex Applications with NHibernate]]></title>
      <content type="text"><![CDATA[<p>If you are using NHibernate and suddenly find yourself needing to integrate with a Flex client, this article written by Joseph Magly will be helpful. <a target="_blank" href="http://www.adobe.com/devnet/flex/articles/flex-nhibernate.html">http://www.adobe.com/devnet/flex/articles/flex-nhibernate.html</a></p>]]></content>
      <post-name type="text"><![CDATA[integrating adobe flex applications with nhibernate]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1170" />
        <category ref="1171" />
      </categories>
      <trackbacks>
        <trackback id="1034" date-created="2014-09-11T16:57:25" date-modified="2014-09-11T16:57:25" approved="true" url="http://xn--schlsser-burgen-ctb.net/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Ffree-netflix-account%2F%3Efree+netflix+account%3C%2Fa%3E">
          <title type="text"><![CDATA[http://xn--schlsser-burgen-ctb.net/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.socialcheats.com%2Ffree-netflix-account%2F%3Efree+netflix+account%3C%2Fa%3E]]></title>
        </trackback>
        <trackback id="1036" date-created="2014-09-11T22:50:04" date-modified="2014-09-11T22:50:04" approved="true" url="https://www.diigo.com/item/note/4u8c0/eu3m">
          <title type="text"><![CDATA[www.diigo.com]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="13917" date-created="2010-11-23T19:40:26" date-modified="2011-03-01T04:55:23" approved="true" email="kathleen@themidnightcoders.com">
          <title type="text"><![CDATA[mcoderkat]]></title>
        </author>
      </authors>
    </post>
    <post id="809" date-created="2011-03-03T04:09:00" date-modified="2011-03-03T04:09:00" approved="true" post-url="/blogs/nhibernate/archive/2011/03/03/effective-nhibernate-session-management-for-web-apps.aspx" type="normal" hasexcerpt="false" views="73142">
      <title type="text"><![CDATA[Effective NHibernate Session management for web apps]]></title>
      <content type="text"><![CDATA[<p>In this post I’ll describe a mechanism to manage nhibernate session following the widely known patter “session-per-request”.</p>  <h1>Introduction</h1>  <p>The session-per-request pattern is very well defined and widely used; as follows</p>  <blockquote>   <p>A single <tt>Session</tt> and a single database transaction implement the processing of a particular request event (for example, a Http request in a web application).</p> </blockquote>  <h1>What do we have currently?</h1>  <p>The first thing you will notice when talking about nhibernate session management is a little interface inside NHibernate;</p>  <pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> ICurrentSessionContext
{
    ISession CurrentSession();
}</pre>

<p><style type="text/css">





<!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></p>

<p>The only purpose of the implementors is to store and retrieve the current session from somewhere. This class is used by the SessionFactory of nhibernate when calling the method GetCurrentSession().</p>

<p>There are lot of implementations of ICurrentSessionContext but for web the two more important are:</p>

<ul>
  <li>WebSessionContext inside NHibernate (namespace NHibernate.Context) </li>

  <li>WebSessionContext inside uNhAddIns.Web (namespace Session.Easier) </li>
</ul>

<p>They are pretty similar but the one inside uNhAddins supports multi-session-factory scenarios.</p>

<h1>Where do we init &amp; store the session?</h1>

<p>We have an <a href="http://code.google.com/p/unhaddins/source/browse/uNhAddIns/uNhAddIns.Web/NHSessionWebModule.cs">httpmodule</a> in uNhAddins which add handler for the BeginRequest as follows:</p>

<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Untitleddrawing_2D00_2_5F00_2DCB97C5.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Untitleddrawing (2)" border="0" alt="Untitleddrawing (2)" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/Untitleddrawing_2D00_2_5F00_thumb_5F00_50CBE368.png" width="433" height="378" /></a></p>

<h1>The problem</h1>

<p>Although the afore mentioned handler does not open a session and a transaction for images or JavaScript files there might be some request to pages that will not talk with the persistence and we don’t want a OpenSession/BeginTransaction there.</p>

<p><a href="http://ayende.com/Blog/archive/2009/08/16/what-is-the-cost-of-opening-a-session.aspx">Ayende already talked about this in his blog.</a> But the problem is that he only wrote about the Session which is really light to instantiate. The problem is how do we handle the scope of the transaction which is not so light?</p>

<h1>Alternative solutions</h1>

<p>There are currently three solutions for this problem:</p>

<ul>
  <li>Use BeginRequest/EndRequest to open/close the session. Handle the transaction with AOP – attributes. I am not sure but I think this is the case for the AutoTransaction facility of castle. </li>

  <li>To use Asp.Net MVC ActionFilters to Open/Close the session and the transaction. </li>

  <li>There is a third which is an <a href="http://nhprof.com/Learn/Alerts/DoNotUseImplicitTransactions">antipattern; using implicit transactions</a> for most of the cases and explicit for some others. </li>
</ul>

<p>The main problem with these approaches is that you need to explicitly put something to say that some piece of code will use a session/transaction. Even if you do it with AOP!</p>

<h1>My new solution</h1>

<p>My new solution is to store a Lazy&lt;ISession&gt; per request instead of an ISession. Initialize in the first usage and finalize in the EndRequest – only if it was used/opened.</p>

<p>The implementation I’ll show also support multi-session factories.</p>

<p>The ICurrentSessionContext looks as follows:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> LazySessionContext : ICurrentSessionContext
{
    <span class="kwrd">private</span> <span class="kwrd">readonly</span> ISessionFactoryImplementor factory;
    <span class="kwrd">private</span> <span class="kwrd">const</span> <span class="kwrd">string</span> CurrentSessionContextKey = <span class="str">&quot;NHibernateCurrentSession&quot;</span>;

    <span class="kwrd">public</span> LazySessionContext(ISessionFactoryImplementor factory)
    {
        <span class="kwrd">this</span>.factory = factory;
    }

    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Retrieve the current session for the session factory.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="kwrd">public</span> ISession CurrentSession()
    {
        Lazy&lt;ISession&gt; initializer;
        var currentSessionFactoryMap = GetCurrentFactoryMap();
        <span class="kwrd">if</span>(currentSessionFactoryMap == <span class="kwrd">null</span> || 
            !currentSessionFactoryMap.TryGetValue(factory, <span class="kwrd">out</span> initializer))
        {
            <span class="kwrd">return</span> <span class="kwrd">null</span>;
        }
        <span class="kwrd">return</span> initializer.Value;
    }

    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Bind a new sessionInitializer to the context of the sessionFactory.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="rem">/// &lt;param name=&quot;sessionInitializer&quot;&gt;&lt;/param&gt;</span>
    <span class="rem">/// &lt;param name=&quot;sessionFactory&quot;&gt;&lt;/param&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Bind(Lazy&lt;ISession&gt; sessionInitializer, ISessionFactory sessionFactory)
    {
        var map = GetCurrentFactoryMap();
        map[sessionFactory] = sessionInitializer;
    }

    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Unbind the current session of the session factory.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="rem">/// &lt;param name=&quot;sessionFactory&quot;&gt;&lt;/param&gt;</span>
    <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="kwrd">public</span> <span class="kwrd">static</span> ISession UnBind(ISessionFactory sessionFactory)
    {
        var map = GetCurrentFactoryMap();
        var sessionInitializer = map[sessionFactory];
        map[sessionFactory] = <span class="kwrd">null</span>;
        <span class="kwrd">if</span>(sessionInitializer == <span class="kwrd">null</span> || !sessionInitializer.IsValueCreated) <span class="kwrd">return</span> <span class="kwrd">null</span>;
        <span class="kwrd">return</span> sessionInitializer.Value;
    }

    <span class="rem">/// &lt;summary&gt;</span>
    <span class="rem">/// Provides the CurrentMap of SessionFactories.</span>
    <span class="rem">/// If there is no map create/store and return a new one.</span>
    <span class="rem">/// &lt;/summary&gt;</span>
    <span class="rem">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="kwrd">private</span> <span class="kwrd">static</span> IDictionary&lt;ISessionFactory, Lazy&lt;ISession&gt;&gt; GetCurrentFactoryMap()
    {
        var currentFactoryMap = (IDictionary&lt;ISessionFactory,Lazy&lt;ISession&gt;&gt;)
                                HttpContext.Current.Items[CurrentSessionContextKey];
        <span class="kwrd">if</span>(currentFactoryMap == <span class="kwrd">null</span>)
        {
            currentFactoryMap = <span class="kwrd">new</span> Dictionary&lt;ISessionFactory, Lazy&lt;ISession&gt;&gt;();
            HttpContext.Current.Items[CurrentSessionContextKey] = currentFactoryMap;
        }
        <span class="kwrd">return</span> currentFactoryMap;
    }
}</pre>

<p><style type="text/css">





<!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></p>

<p>The new HttpModule is:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> NHibernateSessionModule : IHttpModule
{
    <span class="kwrd">private</span> HttpApplication app;
    <span class="kwrd">private</span> ISessionFactoryProvider sfp;

    <span class="kwrd">public</span> <span class="kwrd">void</span> Init(HttpApplication context)
    {
        app = context;
        sfp = (ISessionFactoryProvider) 
                  context.Application[SessionFactoryProvider.Key];
        context.BeginRequest += ContextBeginRequest;
        context.EndRequest += ContextEndRequest;
    }

    <span class="kwrd">private</span> <span class="kwrd">void</span> ContextBeginRequest(<span class="kwrd">object</span> sender, EventArgs e)
    {
        <span class="kwrd">foreach</span> (var sf <span class="kwrd">in</span> sfp.GetSessionFactories())
        {
            var localFactory = sf;
            LazySessionContext.Bind(
                <span class="kwrd">new</span> Lazy&lt;ISession&gt;(() =&gt; BeginSession(localFactory)), 
                sf);
        }
    }

    <span class="kwrd">private</span> <span class="kwrd">static</span> ISession BeginSession(ISessionFactory sf)
    {
        var session = sf.OpenSession();
        session.BeginTransaction();
        <span class="kwrd">return</span> session;
    }

    <span class="kwrd">private</span> <span class="kwrd">void</span> ContextEndRequest(<span class="kwrd">object</span> sender, EventArgs e)
    {
        <span class="kwrd">foreach</span> (var sf <span class="kwrd">in</span> sfp.GetSessionFactories())
        {
            var session = LazySessionContext.UnBind(sf);
            <span class="kwrd">if</span> (session == <span class="kwrd">null</span>) <span class="kwrd">continue</span>;
            EndSession(session);
        }
    }

    <span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> EndSession(ISession session)
    {
        <span class="kwrd">if</span>(session.Transaction != <span class="kwrd">null</span> &amp;&amp; session.Transaction.IsActive)
        {
            session.Transaction.Commit();
        }
        session.Dispose();
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Dispose()
    {
        app.BeginRequest -= ContextBeginRequest;
        app.EndRequest -= ContextEndRequest;
    }
}</pre>

<p><style type="text/css">





<!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></p>

<p>You can see here how we bind to the Lazy<isession> to the current context and the initializer. The BeginSession method initializes a session and a transaction.</isession></p>

<p>The UnBind method returns a session only if the Lazy<isession> was initialized. If it returns something we properly commit the transaction and dispose the session.</isession></p>

<p>The ISessionFactoryProvider is:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> ISessionFactoryProvider
{
    IEnumerable&lt;ISessionFactory&gt; GetSessionFactories();
}</pre>

<p><style type="text/css">





<!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></p>

<p>and the SessionFactoryProvider is just an store for the constant:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> SessionFactoryProvider
{
    <span class="kwrd">public</span> <span class="kwrd">const</span> <span class="kwrd">string</span> Key = <span class="str">&quot;NHibernateSessionFactoryProvider&quot;</span>;
}</pre>

<p><style type="text/css">





<!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></p>

<p>I didn't write an implementation for ISessionFactoryProvider because I’m using <a href="http://docs.castleproject.org/Windsor.Typed-Factory-Facility-interface-based-factories.ashx">castle typed factories</a>.</p>

<p>The <a href="http://docs.castleproject.org/Windsor.Installers.ashx">IWindsorInstaller</a> for castle looks as follows:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> NHibernateInstaller : IWindsorInstaller
{
    <span class="preproc">#region</span> IWindsorInstaller Members

    <span class="kwrd">public</span> <span class="kwrd">void</span> Install(IWindsorContainer container, IConfigurationStore store)
    {
        container.Register(Component.For&lt;ISessionFactory&gt;()
                               .UsingFactoryMethod(k =&gt; BuildSessionFactory()));

        container.Register(Component.For&lt;NHibernateSessionModule&gt;());

        container.Register(Component.For&lt;ISessionFactoryProvider&gt;().AsFactory());
        
        container.Register(Component.For&lt;IEnumerable&lt;ISessionFactory&gt;&gt;()
                                    .UsingFactoryMethod(k =&gt; k.ResolveAll&lt;ISessionFactory&gt;()));

        HttpContext.Current.Application[SessionFactoryProvider.Key]
                        = container.Resolve&lt;ISessionFactoryProvider&gt;();
    }

    <span class="preproc">#endregion</span>

    <span class="kwrd">public</span> ISessionFactory BuildSessionFactory()
    { 
        var config = <span class="kwrd">new</span> Configuration().Configure();
        <span class="rem">//your code here :)</span>
        <span class="kwrd">return</span> config.BuildSessionFactory();
    }
}</pre>

<p><style type="text/css">





<!--
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }
--></style></p>

<p>The only thing you have to do in NHibernate is to tell which is the CurrentSessionContextClass as follows:</p>

<p>configuration.Properties[Environment.CurrentSessionContextClass]
  <br />&#160;&#160;&#160; = typeof (LazySessionContext).AssemblyQualifiedName;

  <br /></p>





<h1>Working with multiples session factories</h1>

<p>When working with multiples session factories, the way to go is to name your components in the container:</p>

<pre class="csharpcode">container.Register(Component.For&lt;ISessionFactory&gt;()
                            .UsingFactoryMethod(...)
                            .Named(<span class="str">&quot;MySf1&quot;</span>));</pre>

<p><style type="text/css">


.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style></p>

<p>Then you can start naming your Daos and explicitly overriden whenever they are injected:</p>

<pre class="csharpcode">container.Register(Component.For(<span class="kwrd">typeof</span>(IDao&lt;&gt;))
                            .ImplementedBy(<span class="kwrd">typeof</span>(Dao&lt;&gt;))
                            .ServiceOverrides(ServiceOverrides.ForKey(<span class="str">&quot;sessionFactory&quot;</span>).Eq(MySf1))
                            .Named(<span class="str">&quot;SalesDao&quot;</span>));

container.Register(Component.For(<span class="kwrd">typeof</span>(IMyService&lt;&gt;))
                            .ImplementedBy(<span class="kwrd">typeof</span>(MyService&lt;&gt;))
                            .ServiceOverrides(ServiceOverrides.ForKey(<span class="str">&quot;dao&quot;</span>).Eq(MyDao1)));</pre>

<p><style type="text/css">


.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style></p>

<p>Another way is to have a factory like this one:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> IDaoFactory
{
     IDao&lt;T&gt; GetSalesDao();
     IDao&lt;T&gt; GetCMSDao();
}</pre>
<style type="text/css">


.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>This will work out of the box with castle typed factories, following the pattern Get[Dao component name]. With other containers you will have to implement the interface. </p>

<p>Remember also that NHibernate lets you name your session factory through the configuration, that is sometimes useful.</p>

<h1>How to use the ISession from my code?</h1>

<p>The same way I do since long time ago;</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Dao&lt;T&gt; : IDao&lt;T&gt;
{
    <span class="kwrd">private</span> <span class="kwrd">readonly</span> ISessionFactory sessionFactory;

    <span class="kwrd">public</span> Dao(ISessionFactory sessionFactory)
    {
        <span class="kwrd">this</span>.sessionFactory = sessionFactory;
    }

    <span class="kwrd">public</span> <span class="kwrd">void</span> Save(T transient)
    {
        sessionFactory.GetCurrentSession().Save(transient);
    }

    //Other methods</pre>

<p>Injecting the ISessionFactory instead an ISession has the following advantages:</p>

<ul>
  <li>It is very handy to use stateless session or a short lived session in some methods for some queries through OpenStatelessSession/OpenSession </li>

  <li>The lifestyle of the Dao is not tied to the Session.&#160; It could be even singleton.</li>
</ul>

<h1>Other session managements</h1>

<p>In unhaddins there are various contexts;</p>

<ul>
  <li>PerThread </li>

  <li>ConversationalPerThread </li>

  <li>Web </li>
</ul>

<p>And ways to hook such contexts;</p>

<ul>
  <li>In winforms; for use with the pattern Conversation per Business transaction.</li>

  <li>In WCF; an OperationBehavior </li>

  <li>In web an httpmodule</li>
</ul>

<p>It is up to you to choose the combination. For instance when doing WCF that will run inside iis, you can use the operationbehavior + web. But when you do WCF out of IIS, you can use OperationBehavior + PerThread.</p>

<p>The important thing about this is that your DAOs are exactly the same despite the management you use.</p>

<h1>Notes</h1>

<p>-For non-.Net 4 projects; as <a href="http://twitter.com/rbirkby">Richard Birkby</a> points out you can use the <a href="https://github.com/tgiphil/Mono-Class-Libraries/blob/ab6da0a6a290b73db812bd080ceae00f57670c2c/mcs/class/corlib/System/Lazy.cs">Lazy&lt;T&gt; inside Mono</a>.</p>

<h1>Finally</h1>

<p>I hope you find this useful. </p>

<p>This code is not going to be in uNhAddins for now. You can copy&amp;paste all the code from this <a href="https://gist.github.com/852307">gist</a>.</p>]]></content>
      <post-name type="text"><![CDATA[effective nhibernate session management for web apps]]></post-name>
      <categories>
        <category ref="1029" />
        <category ref="1107" />
        <category ref="1141" />
        <category ref="1147" />
      </categories>
      <comments>
        <comment id="810" date-created="2011-03-03T07:05:41" date-modified="2011-03-03T07:05:41" approved="true" user-name="Bogdan Marian" user-url="http://nhforge.org/members/satrapu/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[Hello,

This is a very illuminating article, thanks for writing it. 
I do have a question: why are you passing an ISessionFactory to your DAO? An ISession is not good enough ? 
And a second question: if my application uses several ISessionFactories, how can I choose the right one using your ICurrentSessionContext implementation ?]]></content>
        </comment>
        <comment id="812" date-created="2011-03-03T08:41:32" date-modified="2011-03-03T08:41:32" approved="true" user-name="Robert Mircea" user-url="http://nhforge.org/members/nokiola/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[What kind of setup/ICurrentSessionContext do you recommend for managing sessions in an WCF application where you don't have access to HttpContext?

Is there any abstraction in uNhAddIns which allows session management independently of the type of application: web, WCF, console?]]></content>
        </comment>
        <comment id="813" date-created="2011-03-03T11:06:29" date-modified="2011-03-03T11:06:29" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[@Bogdan Marian
Thank you for your comments i updated the article;
1. It is explained at the end of "How to use the ISession from my code?" section.
2. I added a new Section called "Working with various session"

@nokiola
Thanks for your comments too.
1. For the first question (nhibernate setup) you have to do:
configuration.Properties[Environment.CurrentSessionContextClass] = typeof (LazySessionContext).AssemblyQualifiedName; 
I added this to the article.

2.I added a new section "Other session managements"]]></content>
        </comment>
        <comment id="820" date-created="2011-03-13T19:42:02" date-modified="2011-03-13T19:42:02" approved="true" user-name="codepuke" user-url="http://nhforge.org/members/codepuke/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[I really like the sound of this lazy session-per-request pattern, but I am struggling to implement it using StructureMap rather than Windsor.

The Bind and Unbind methods seem to always refer to different instances of sessionFactory, so the Unbind map[sessionFactory] always fails with an unknown key exception.

I am guessing my implementation of ISessionFactoryProvider.GetSessionFactories() is incorrect.  Does anyone have a working StructureMap based implementation of the above working?

Thanks.]]></content>
        </comment>
        <comment id="821" date-created="2011-03-13T19:59:50" date-modified="2011-03-13T19:59:50" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[@codepuke why do you get differents instances of SessionFactory?

Each ISessionFactory must be registered as "singleton".

ISessionFactoryProvider.GetSessionFactories() should do "return container.ResolveAll<ISessionFactory>()" or the equivalent in StructureMap.

does this help?]]></content>
        </comment>
        <comment id="822" date-created="2011-03-13T20:25:18" date-modified="2011-03-13T20:25:18" approved="true" user-name="codepuke" user-url="http://nhforge.org/members/codepuke/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[@Jose - yep it does help.

It was the singleton issue.  Incorrect structuremap definition to meet this purpose.  

Perfect.  Now to play around.  :)

Thanks]]></content>
        </comment>
        <comment id="849" date-created="2011-04-05T07:53:46" date-modified="2011-04-05T07:53:46" approved="true" user-name="mynkow" user-url="http://nhforge.org/members/mynkow/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[Hi, nice article. :)

I have a question. You have 2 methods in NHibSessionModule: BeginSession (where a transaction begins) and EndSession (where the transaction.Active is always false). What I am missing?]]></content>
        </comment>
        <comment id="850" date-created="2011-04-05T10:10:56" date-modified="2011-04-05T10:10:56" approved="true" user-name="Jose Romaniello" user-url="http://nhforge.org/members/jfromainello/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[I don't know about your code.. If you asked for a session somewhere in the request IsActive must be true.

There is a complete example of this here:
https://bitbucket.org/jfromaniello/nugetspeed

using the chinook database at codeplex. Try it and let me know if it works for you.]]></content>
        </comment>
        <comment id="851" date-created="2011-04-07T09:17:59" date-modified="2011-04-07T09:17:59" approved="true" user-name="mynkow" user-url="http://nhforge.org/members/mynkow/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[10x Jose, it was my mistake. I wrap the session in unit of work. When the UoW is accepted the transaction is committed and domain events are published. So I moved the commit to the UoW accept method and I am OK. I am thinking... should I instantiate the UoW like the session, per web request? Currently I have a UoW factory which creates an instance to a thread static member. I think that I am doing this wrong... https://gist.github.com/907399]]></content>
        </comment>
        <comment id="926" date-created="2011-07-15T08:23:14" date-modified="2011-07-15T08:23:14" approved="true" user-name="mynkow" user-url="http://nhforge.org/members/mynkow/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[Hey, Jose

Do you have an idea why I get "Event handlers can only be bound to HttpApplication events during IHttpModule initialization" in IIS7, asp.net 4.0 integrated mode. The error is in the dispose() method of the http module. My web.config is perfect. Any idea how to fix it?]]></content>
        </comment>
        <comment id="956" date-created="2011-07-28T03:47:46" date-modified="2011-07-28T03:47:46" approved="true" user-name="Leonardo Lima Silva" user-url="http://www.desenvolvimentoweb.net.br">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[Hi, 

I´m trying to use this code.. 
But I got error on the following line
container.Register(Component.For<ISessionFactoryProvider>().AsFactory());

Like AsFactory() don´t exists.... 

How could I fix this??]]></content>
        </comment>
        <comment id="957" date-created="2011-07-28T10:27:19" date-modified="2011-07-28T10:27:19" approved="true" user-name="Jose Romaniello" user-url="http://joseoncode.com">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[AsFactory is an extension method in Castle.Facilities.TypedFactory



http://docs.castleproject.org/Default.aspx?Page=Typed-Factory-Facility-interface-based-factories&NS=Windsor&AspxAutoDetectCookieSupport=1


Please check this guide to use all this and configure quickly

http://joseoncode.com/2011/03/07/create-an-asp-net-mvc-application-with-windsor-and-nhibernate-at-the-speed-of-nuget/]]></content>
        </comment>
        <comment id="958" date-created="2011-07-28T11:35:58" date-modified="2011-07-28T11:35:58" approved="true" user-name="danyolgiax" user-url="http://nhforge.org/members/danyolgiax/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[@Leonardo Lima Silva:

try to add:

using Castle.Facilities.TypedFactory;]]></content>
        </comment>
        <comment id="959" date-created="2011-07-28T13:00:01" date-modified="2011-07-28T13:00:01" approved="true" user-name="Leonardo Lima Silva" user-url="http://www.desenvolvimentoweb.net.br">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[@Jose Romaniello and @danyolgiax 

Complete right... I got it working now... but I saw that I needed this include after download @Jose Romaniello sample project on gist....

I've another problem... 

I need user 2 different´s databases, and I'm using FluentNHibernate, any problem with this???
Someone can help me clear my ideas? and show me a piece of code for doing that???  ]]></content>
        </comment>
        <comment id="960" date-created="2011-07-28T13:10:32" date-modified="2011-07-28T13:10:32" approved="true" user-name="Leonardo Lima Silva" user-url="http://nhforge.org/members/Leonardo-Lima-Silva/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[@Jose Romaniello 

Hey... sorry...
But now I got another question... 
I was trying to make Castle Windsor on a ASP.NET WebForms app.. but now I saw that it isn´t possible... without use MVP approach... but I could not use it...
So... my question... is possible use your SessionManagement on a old ASP.NET WebForms app ??? 
If yes... how???]]></content>
        </comment>
        <comment id="961" date-created="2011-07-28T13:25:59" date-modified="2011-07-28T13:25:59" approved="true" user-name="Jose Romaniello" user-url="http://joseoncode.com">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[Yes, you can. how? i don't recall.... try to lookup in google how to do dependency injection in webforms. There isn't an extensibility point like the controller factory, but you can hydrate with dependencies the page object after... 
To be honest i don't recall how.]]></content>
        </comment>
        <comment id="987" date-created="2011-09-27T19:03:11" date-modified="2011-09-27T19:03:11" approved="true" user-name="linloil" user-url="http://nhforge.org/members/linloil/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[Jose, thank you for the post!

What about error handling? Don't you have to subscribe to OnError message at http module to prevent ISession lost?]]></content>
        </comment>
        <comment id="1017" date-created="2012-07-16T09:50:52" date-modified="2012-07-16T09:50:52" approved="true" user-name="Hainesy" user-url="http://nhforge.org/members/Hainesy/default.aspx">
          <title type="text"><![CDATA[re: Effective NHibernate Session management for web apps]]></title>
          <content type="text"><![CDATA[There seems to be a problem with the Dispose method attempting to de-hook the event handlers.

I get an exception "Event handlers can only be bound to HttpApplication events during IHttpModule initialization."

Other than that, great article.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="814" date-created="2011-03-07T00:53:19" date-modified="2011-03-07T00:53:19" approved="true" url="http://dotnetshoutout.com/Effective-NHibernate-Session-management-for-web-apps-NHibernate-blog">
          <title type="text"><![CDATA[Effective NHibernate Session management for web apps - NHibernate blog]]></title>
        </trackback>
        <trackback id="992" date-created="2011-10-17T13:12:55" date-modified="2011-10-17T13:12:55" approved="true" url="http://jeffreypalermo.com/blog/challenging-non-local-session-scope-session-per-request/">
          <title type="text"><![CDATA[Challenging non-local session scope (session-per-request)]]></title>
        </trackback>
        <trackback id="1001" date-created="2011-11-12T00:10:41" date-modified="2011-11-12T00:10:41" approved="true" url="http://devlicio.us/blogs/billy_mccafferty/archive/2011/11/11/s-arp-lite-the-basicss.aspx">
          <title type="text"><![CDATA[S#arp Lite: The Basics]]></title>
        </trackback>
        <trackback id="1003" date-created="2011-11-12T00:29:55" date-modified="2011-11-12T00:29:55" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2011/11/11/s-arp-lite-the-basics.aspx">
          <title type="text"><![CDATA[S#arp Lite: The Basics]]></title>
        </trackback>
        <trackback id="1028" date-created="2014-09-10T03:49:54" date-modified="2014-09-10T03:49:54" approved="true" url="http://ww.isaev.info/?a%5B%5D=buy+cheap+carpets+online+%28%3Ca+href%3Dhttp%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DEyUR8BdaGBs%3Eclick+the+up+coming+webpage%3C%2Fa%3E%29">
          <title type="text"><![CDATA[visit these guys]]></title>
        </trackback>
        <trackback id="1033" date-created="2014-09-11T15:23:47" date-modified="2014-09-11T15:23:47" approved="true" url="http://teamenergizer.myorganogold.com">
          <title type="text"><![CDATA[Organo Gold Review]]></title>
        </trackback>
        <trackback id="1047" date-created="2014-09-13T14:46:37" date-modified="2014-09-13T14:46:37" approved="true" url="http://open.gytvu.com.cn/phpinfo.php?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.empirezhack.com%3Eempire+z+hack%3C%2Fa%3E">
          <title type="text"><![CDATA[empire z hack]]></title>
        </trackback>
        <trackback id="1080" date-created="2014-09-20T23:23:48" date-modified="2014-09-20T23:23:48" approved="true" url="http://163.16.74.4/?a%5B%5D=%3Ca+href%3Dhttp%3A%2F%2Fwww.instructables.com%2Fmember%2Fvirgiliomadgwick%2F%3EVideo%3C%2Fa%3E">
          <title type="text"><![CDATA[click for more info]]></title>
        </trackback>
        <trackback id="1096" date-created="2014-09-26T13:26:56" date-modified="2014-09-26T13:26:56" approved="true" url="http://www.racingraptors.com/phpinfo.php?a%5B%5D=Video+%28%3Ca+href%3Dhttp%3A%2F%2Fwww.5hdwallpapers.com%2Fprofile%2Fdaf66%3ERead+the+Full+Article%3C%2Fa%3E%29">
          <title type="text"><![CDATA[click through the following website]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="823" date-created="2011-03-16T01:26:06" date-modified="2011-03-16T01:26:06" approved="true" post-url="/blogs/nhibernate/archive/2011/03/15/using-lt-set-gt-in-mappings-without-iesi-collections-net-4.aspx" type="normal" hasexcerpt="false" views="18898">
      <title type="text"><![CDATA[Using &lt;set /&gt; in mappings without Iesi.Collections (.Net 4)]]></title>
      <content type="text"><![CDATA[<p>I’ve created a new nuget package; “NHibernate.SetForNet4”. </p>  <p>The package is only one file that will be inserted in your project. This class contains the implementation for the Set&lt;T&gt; and SortedSet&lt;T&gt;.</p>  <p>After you install NHibernate.SetForNet4; the only thing you have to do is to add the collection factory to your configuration as follows:</p>  <pre class="csharpcode">configuration.Properties[Environment.CollectionTypeFactoryClass] 
        = <span class="kwrd">typeof</span>(Net4CollectionTypeFactory).AssemblyQualifiedName; </pre>
<style type="text/css">




.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<br />this is a sample mapping: 

<pre class="csharpcode"><span class="kwrd">&lt;?</span><span class="html">xml</span> <span class="attr">version</span><span class="kwrd">=&quot;1.0&quot;</span> <span class="attr">encoding</span><span class="kwrd">=&quot;utf-8&quot;</span> ?<span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">hibernate-mapping</span> <span class="attr">xmlns</span><span class="kwrd">=&quot;urn:nhibernate-mapping-2.2&quot;</span>
        <span class="attr">assembly</span><span class="kwrd">=&quot;NHibernateSetForNet4&quot;</span>
        <span class="attr">namespace</span><span class="kwrd">=&quot;NHibernateSetForNet4&quot;</span><span class="kwrd">&gt;</span>
  <span class="kwrd">&lt;</span><span class="html">class</span> <span class="attr">name</span><span class="kwrd">=&quot;Person&quot;</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">id</span> <span class="attr">name</span><span class="kwrd">=&quot;Id&quot;</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">generator</span> <span class="attr">class</span><span class="kwrd">=&quot;hilo&quot;</span><span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">id</span><span class="kwrd">&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">=&quot;Name&quot;</span> <span class="kwrd">/&gt;</span>
    
    <span class="kwrd">&lt;</span><span class="html">property</span> <span class="attr">name</span><span class="kwrd">=&quot;Age&quot;</span> <span class="kwrd">/&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">set</span> <span class="attr">name</span><span class="kwrd">=&quot;Tags&quot;</span> <span class="attr">access</span><span class="kwrd">=&quot;field.camelcase&quot;</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">key</span> <span class="attr">column</span><span class="kwrd">=&quot;PersonId&quot;</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">element</span> <span class="attr">column</span><span class="kwrd">=&quot;Tag&quot;</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">set</span><span class="kwrd">&gt;</span>

    <span class="kwrd">&lt;</span><span class="html">set</span> <span class="attr">name</span><span class="kwrd">=&quot;Childs&quot;</span> 
        <span class="attr">access</span><span class="kwrd">=&quot;field.camelcase&quot;</span> 
        <span class="attr">cascade</span><span class="kwrd">=&quot;persist&quot;</span> 
        <span class="attr">sort</span><span class="kwrd">=&quot;PersonByAgeComparator&quot;</span><span class="kwrd">&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">key</span> <span class="attr">column</span><span class="kwrd">=&quot;ParentId&quot;</span> <span class="kwrd">/&gt;</span>
      <span class="kwrd">&lt;</span><span class="html">one-to-many</span> <span class="attr">class</span><span class="kwrd">=&quot;Person&quot;</span> <span class="kwrd">/&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">set</span><span class="kwrd">&gt;</span>

  <span class="kwrd">&lt;/</span><span class="html">class</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">hibernate-mapping</span><span class="kwrd">&gt;</span></pre>

<p>this is the class:</p>

<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> Person
{
    <span class="kwrd">private</span> <span class="kwrd">readonly</span> ISet&lt;<span class="kwrd">string</span>&gt; tags 
        = <span class="kwrd">new</span> HashSet&lt;<span class="kwrd">string</span>&gt;();
    <span class="kwrd">private</span> <span class="kwrd">readonly</span> ISet&lt;Person&gt; childs 
        = <span class="kwrd">new</span> SortedSet&lt;Person&gt;(<span class="kwrd">new</span> PersonByAgeComparator());

    <span class="kwrd">public</span> <span class="kwrd">virtual</span> <span class="kwrd">int</span> Id { get; set; }

    <span class="kwrd">public</span> <span class="kwrd">virtual</span> <span class="kwrd">string</span> Name { get; set; }

    <span class="kwrd">public</span> <span class="kwrd">virtual</span> <span class="kwrd">int</span> Age { get; set; }

    <span class="kwrd">public</span> <span class="kwrd">virtual</span> ISet&lt;<span class="kwrd">string</span>&gt; Tags
    {
        get { <span class="kwrd">return</span> tags; }
    }

    <span class="kwrd">public</span> <span class="kwrd">virtual</span> ISet&lt;Person&gt; Childs
    {
        get
        {
            <span class="kwrd">return</span> childs;
        }
    }
}</pre>

<p><style type="text/css">



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style></p>

<p>ISet&lt;T&gt;, HashSet&lt;T&gt; and SortedSet&lt;T&gt; are from System.Collections.Generics (.Net 4).</p>

<p>All these tests are green:</p>

<pre class="csharpcode">[TestFixture]
<span class="kwrd">public</span> <span class="kwrd">class</span> Fixture
{
    <span class="kwrd">private</span> ISessionFactory sessionFactory;
    <span class="kwrd">private</span> <span class="kwrd">int</span> personId;

    [TestFixtureSetUp]
    <span class="kwrd">public</span> <span class="kwrd">void</span> SetUp()
    {
        var configuration = <span class="kwrd">new</span> Configuration();
        configuration.Properties[Environment.CollectionTypeFactoryClass]
                = <span class="kwrd">typeof</span>(Net4CollectionTypeFactory).AssemblyQualifiedName;
        configuration.Configure();
        

        var schemaExport = <span class="kwrd">new</span> SchemaExport(configuration);
        schemaExport.Execute(<span class="kwrd">true</span>, <span class="kwrd">true</span>, <span class="kwrd">false</span>);
        sessionFactory = configuration.BuildSessionFactory();
        InitializeData();
    }

    <span class="kwrd">private</span> <span class="kwrd">void</span> InitializeData()
    {
        <span class="kwrd">using</span> (var s = sessionFactory.OpenSession())
        <span class="kwrd">using</span> (var tx = s.BeginTransaction())
        {
            var person = <span class="kwrd">new</span> Person
            {
                Name = <span class="str">&quot;Pipo&quot;</span>
            };
            person.Childs.Add(<span class="kwrd">new</span> Person { Name = <span class="str">&quot;Jose&quot;</span>, Age = 1 });
            person.Childs.Add(<span class="kwrd">new</span> Person { Name = <span class="str">&quot;Juan&quot;</span>, Age = 5 });
            person.Childs.Add(<span class="kwrd">new</span> Person { Name = <span class="str">&quot;Francisco&quot;</span>, Age = 10 });

            person.Tags.Add(<span class="str">&quot;one&quot;</span>);
            person.Tags.Add(<span class="str">&quot;two&quot;</span>);
            person.Tags.Add(<span class="str">&quot;three&quot;</span>);

            s.Persist(person);
            personId = person.Id;
            tx.Commit();
        }
    }

    [Test]
    <span class="kwrd">public</span> <span class="kwrd">void</span> CanGetAPersonWithTags()
    {
        <span class="kwrd">using</span>(var s = sessionFactory.OpenSession())
        <span class="kwrd">using</span> (s.BeginTransaction())
        {
            var person = s.Get&lt;Person&gt;(personId);
            person.Tags.Should().Have.SameValuesAs(<span class="str">&quot;one&quot;</span>, <span class="str">&quot;two&quot;</span>, <span class="str">&quot;three&quot;</span>);
        }
    }
    
    [Test]
    <span class="kwrd">public</span> <span class="kwrd">void</span> SortedSetShouldWork()
    {
        <span class="kwrd">using</span> (var s = sessionFactory.OpenSession())
        <span class="kwrd">using</span> (s.BeginTransaction())
        {
            var person = s.Get&lt;Person&gt;(personId);
            person.Childs
                .Select(p =&gt; p.Age).ToArray()
                .Should().Have.SameSequenceAs(10, 5, 1);
        }
    }


    [Test]
    <span class="kwrd">public</span> <span class="kwrd">void</span> LazyLoadShouldWork()
    {
        <span class="kwrd">using</span> (var s = sessionFactory.OpenSession())
        <span class="kwrd">using</span> (s.BeginTransaction())
        {
            var person = s.Get&lt;Person&gt;(personId);
            s.Statistics.EntityCount.Should().Be.EqualTo(1);
            person.Childs.ToArray();
            s.Statistics.EntityCount.Should().Be.EqualTo(4);

        }
    }
}</pre>

<p>The implementation of the proxy collections is a copy from the Iesi version. Let me know if you find some bug. The raw code is <a href="https://bitbucket.org/jfromaniello/nhibernate.setfornet4">here</a>.</p>

<p>Note: you still need Iesi.Collections.dll somewhere because nhibernate internals are tied to these collections, but you don’t longer need to reference it in your domain.</p>]]></content>
      <post-name type="text"><![CDATA[using lt set gt in mappings without iesi collections net 4]]></post-name>
      <categories>
        <category ref="1027" />
      </categories>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="873" date-created="2011-05-05T21:57:43" date-modified="2011-05-05T21:57:43" approved="true" post-url="/blogs/nhibernate/archive/2011/05/05/generate-better-nhibernate-logs.aspx" type="normal" hasexcerpt="false" views="16248">
      <title type="text"><![CDATA[Generate better NHibernate logs]]></title>
      <content type="text"><![CDATA[<p>I will show you in this post two tricks you can do to enhance and add value to your nhibernate logs. </p>  <h1>Format Sql</h1>  <p>This is widely know trick, you can add a configuration setting to your hibernate.cfg.xml, app.config or web.config as follow:</p>  <pre class="brush: xml; wrap-line: false;">&lt;property name=&quot;hibernate.format_sql&quot; value=&quot;true&quot; /&gt;</pre>

<p>or you can simply do it in code:</p>

<pre class="brush: csharp; wrap-line: false;">config.DataBaseIntegration(db =&gt; db.LogFormatedSql = true)</pre>

<p>with this trick you will get nicely formated sql in your logs files.</p>

<h1>Logging the session identifier</h1>

<p>All nice, we have a bunch of sql logs, but we don’t know which queries belongs to which sessions. This might be useful when you are debugging an application with multiples threads or requests.</p>

<p>I found this trick inside NHibernate, the easy way I found so far is to add a log4net appender like this one:</p>

<pre class="brush: xml; wrap-line: false;">&lt;appender name=&quot;NHibernateAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;
  &lt;appendToFile value=&quot;true&quot;/&gt;
  &lt;datePattern value=&quot;yyyyMMdd&quot;/&gt;
  &lt;file value=&quot;./logs/NHibernate.log&quot;/&gt;
  &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;
    &lt;conversionPattern value=&quot;%date Session id: %property{sessionId} - %message%newline&quot;/&gt;
  &lt;/layout&gt;
  &lt;rollingStyle value=&quot;Date&quot;/&gt;
&lt;/appender&gt;</pre>

<p>See the %property{sessionId} in the conversion pattern?</p>

<p>Well, in order to log something there you need to do two steps.</p>

<p>Add a class like this one:</p>

<pre class="brush: csharp; wrap-line: false;">public class SessionIdCapturer
{
    public override string ToString()
    {
        return SessionIdLoggingContext.SessionId.ToString();
    }
}</pre>

<p>Add the following code in some place at the application initialization:</p>

<pre class="brush: csharp; wrap-line: false;">ThreadContext.Properties[&quot;sessionId&quot;] = new SessionIdCapturer();</pre>

<p>That is all! I found this code inside a nhibernate test.. it is something not very known.</p>

<p>After doing so, your logs will look like:</p>

<pre>2011-05-05 18:35:59,899 Session id: 5e172068-5064-44b6-bf96-99362ca05c46 - 
    SELECT
        myFoo0_.AccountId as AccountId3_0_,
        myFoo0_.Name as Name3_0_,
        myFoo0_.Version as Version3_0_ 
    FROM
        MyFoo myFoo0_
    WHERE
        myFoo0_.AccountId=@p0;
    @p0 = 1 [Type: Int32 (0)]</pre>

<p>Another way to have this information (and much more) is to use the <a href="http://nhprof.com/">nhprof</a> tool.</p>]]></content>
      <post-name type="text"><![CDATA[generate better nhibernate logs]]></post-name>
      <categories>
        <category ref="1045" />
      </categories>
      <comments>
        <comment id="951" date-created="2011-07-27T03:04:01" date-modified="2011-07-27T03:04:01" approved="true" user-name="Randy Lee" user-url="http://nhforge.org/members/Randy-Lee/default.aspx">
          <title type="text"><![CDATA[re: Generate better NHibernate logs]]></title>
          <content type="text"><![CDATA[If you all like SQL profiling, please check out my NuGet package ( http://nuget.org/List/Packages/Nvergent ).  There's also a few other goodies in there.  I would love some feedback.]]></content>
        </comment>
        <comment id="983" date-created="2011-09-12T09:27:34" date-modified="2011-09-12T09:27:34" approved="true" user-name="felicepollano" user-url="http://www.felicepollano.com">
          <title type="text"><![CDATA[re: Generate better NHibernate logs]]></title>
          <content type="text"><![CDATA[Very useful post. I noticed in the NH code the helper to format the SQL and I was asking why they don't use it, I wasn't aware it was just a config :) Thanks for sharing.]]></content>
        </comment>
        <comment id="985" date-created="2011-09-13T05:48:29" date-modified="2011-09-13T05:48:29" approved="true" user-name="luedi" user-url="http://nhforge.org/members/luedi/default.aspx">
          <title type="text"><![CDATA[re: Generate better NHibernate logs]]></title>
          <content type="text"><![CDATA[in the config file it must be (for NH 3.1.0)

<property name="format_sql">true</property>

else you will get an exception.]]></content>
        </comment>
        <comment id="986" date-created="2011-09-13T05:54:39" date-modified="2011-09-13T05:54:39" approved="true" user-name="luedi" user-url="http://nhforge.org/members/luedi/default.aspx">
          <title type="text"><![CDATA[re: Generate better NHibernate logs]]></title>
          <content type="text"><![CDATA[and also this has no effect. So what do i wrong???]]></content>
        </comment>
      </comments>
      <authors>
        <author id="2720" date-created="2009-04-25T21:00:48" date-modified="2011-07-28T13:25:39" approved="true" email="jfromaniello@gmail.com">
          <title type="text"><![CDATA[jfromainello]]></title>
        </author>
      </authors>
    </post>
    <post id="975" date-created="2011-08-29T20:27:00" date-modified="2011-08-29T20:27:00" approved="true" post-url="/blogs/nhibernate/archive/2011/08/29/nhibernate-3-beginners-guide-published.aspx" type="normal" hasexcerpt="false" views="19986">
      <title type="text"><![CDATA[NHibernate 3 Beginners Guide published]]></title>
      <content type="text"><![CDATA[<p>Note: This post has been cross posted from my <a href="http://lostechies.com/gabrielschenker/2011/08/29/nhibernate-3-beginners-guide-published/">own blog</a> at Los Techies.</p>
<p>I am very pleased to announce that my book <a href="http://www.packtpub.com/nhibernate-3-beginners-guide/book">NHibernate 3 Beginners Guide</a> has finally been published. It is a wonderful feeling to finally have a book in my hands that cost me a couple of months of intense work. But I think the result is well worth it.</p>
<p>If you are interested in the book then there is also a <a href="http://www.packtpub.com/sites/default/files/6020OS-Chapter-3-Creating-a-%20Model.pdf?utm_source=packtpub&amp;utm_medium=free&amp;utm_campaign=pdf">free chapter</a> available for download.</p>
<p>I was lucky to have <a href="http://fabiomaulo.blogspot.com/">Fabio Maulo</a> and <a href="http://joseoncode.com/">Jos&eacute; F. Romaniello</a> as my reviewer, the former being the lead of the <a href="http://www.nhforge.org">NHibernate</a> project and the latter an active contributor to the the project.</p>
<p>My goal for this book has been to provide an easy to follow introduction to NHibernate 3.x. The text covers NHibernate up to version 3.1 GA and even references some of the new features of NHibernate 3.2 GA. It was very important to me to not use a data centric approach but rather choose a <strong>model first</strong> approach. </p>
<p>In this regard this book is NOT just an updated version of <a href="https://www.packtpub.com/nhibernate-2-beginners-guide/book">NHibernate 2 Beginners Guide</a> but rather a complete rewrite.</p>
<p>I also have paid attention to cover all foundational topics in a clear and concise way. In no way did I want to abandon the reader in the dust of uncertainty.</p>
<p>Let me provide you the list of chapters found in the book with a short introduction about the respective content of each chapter.</p>
<p><strong>Chapter 1, First Look&hellip;</strong> explains what NHibernate is and why we would use it in an application that needs to access data in a relational database. The chapter also briefly presents what is new in NHibernate 3.x compared to the version 2.x and discusses how one can get this framework. Links to various sources providing documentation and help are presented.</p>
<p><strong>Chapter 2, A First Complete Sample&hellip;</strong>walks through a simple yet complete sample where the core concepts of NHibernate and its usage are introduced.</p>
<p><strong>Chapter 3, Creating a Model&hellip;</strong> discusses what a domain model is and what building blocks constitute such a model. In an exercise the reader creates a domain model for a simple ordering system.</p>
<p><strong>Chapter 4, Defining the Database Schema&hellip;</strong>explains what a database schema is and describes in details the individual parts comprising such a schema. A schema for the ordering system is created in an exercise.</p>
<p><strong>Chapter 5, Mapping the Model to the Database&hellip;</strong>teaches how to bridge the gap between the domain model and the database schema with the aid of some wiring. This chapter presents four distinct techniques how the model can be mapped to the underlying database or vice versa. It is also shown how we can use NHibernate to automatically create the database schema by leveraging the meta-information contained in the domain model.</p>
<p><strong>Chapter 6, Sessions and Transactions&hellip;</strong>teaches how to create NHibernate sessions to communicate with the database and how to use transactions to group multiple tasks into one consistent operation which succeeds or fails as a whole. </p>
<p><strong>Chapter 7, Testing, Profiling, Monitoring and Logging&hellip;</strong>introduces how to test and profile our system during development to make sure we deliver a reliable, robust and maintainable application. It also shows how an application can be monitored in a productive environment and how it can log any unexpected or faulty behavior.</p>
<p><strong>Chapter 8, Configuration&hellip; </strong>explains how we can tell NHibernate which database to use, as well as provide it the necessary credentials to get access to the stored data. In addition to that many more settings for NHibernate to tweak and optimize the database access are explained in this chapter.</p>
<p><strong>Chapter 9, Writing Queries&hellip;</strong> discusses the various means how we can easily and efficiently query data from the database to create meaningful reports on screen or on paper.</p>
<p><strong>Chapter 10, Validating the data to persist&hellip;</strong>discusses why data collected by an application needs to be correct, complete and consistent. It shows how we can instrument NHibernate to achieve this goal through various validation techniques.</p>
<p><strong>Chapter 11, Common Pitfalls &ndash; Things to avoid&hellip;</strong> as the last chapter of this book presents the most common errors developers can make when using NHibernate to write or read data to and from the database. Each such pitfall is discussed in details and possible solutions to overcome the problems are shown.</p>]]></content>
      <post-name type="text"><![CDATA[nhibernate 3 beginners guide published]]></post-name>
      <categories>
        <category ref="1089" />
        <category ref="1145" />
      </categories>
      <authors>
        <author id="2134" date-created="2008-08-31T09:49:35" date-modified="2011-09-08T19:10:14" approved="true" email="gnschenker@gmail.com">
          <title type="text"><![CDATA[gabriel.schenker]]></title>
        </author>
      </authors>
    </post>
    <post id="977" date-created="2011-09-05T07:24:00" date-modified="2011-09-05T07:24:00" approved="true" post-url="/blogs/nhibernate/archive/2011/09/05/using-nh3-2-mapping-by-code-for-automatic-mapping.aspx" type="normal" hasexcerpt="false" views="23306">
      <title type="text"><![CDATA[Using NH3.2 mapping by code for Automatic Mapping]]></title>
      <content type="text"><![CDATA[<p>Note: this is a cross post <a href="http://www.felicepollano.com/2011/09/01/UsingNH32MappingByCodeForAutomaticMapping.aspx" target="_blank">from my own blog</a>.</p>
<p>Since version 3.2.0 <a href="http://nhforge.org" target="_blank">NHibernate</a>&nbsp; has an embedded strategy for mapping by code, that basically comes from <a href="http://fabiomaulo.blogspot.com/" target="_blank">Fabio Maulo</a>&rsquo;s <a href="http://code.google.com/p/codeconform/" target="_blank">ConfORM</a>. With some reading at <a href="http://fabiomaulo.blogspot.com/2011/04/nhibernate-32-mapping-by-code.html" target="_blank">this</a> Fabio post,&nbsp; <a href="http://fabiomaulo.blogspot.com/search?updated-max=2011-07-19T13%3A34%3A00-03%3A00&amp;max-results=3" target="_blank">this other one</a>, <a href="http://fabiomaulo.blogspot.com/2011/07/nhibernate-playing-with-mapping-by-code.html" target="_blank">and this one too</a>, I wrote my own sample just to see what we can do.</p>
<p>Even if we can use mapping by code to map class by class the entire model, something more interesting can be done by writing some convention-based automatic mapper, that can help us even when we face legacy ( non code first ) databases with some (perverted) naming convention. </p>
<p>We have to consider first the <b><i>ModelMapper</i></b> class, this class in the NH mapping by code is the one responsible for driving the mapping generator. It provides a suite of events to intercept the actual generation of each elements in the mapping. By listening these event we can decorate the detail of the single element, for example the Id generator class, the SqlType, the <i>column name</i>, and so on. ModelMapper uses a <b><i>ModelInspector </i></b>to<b><i> </i></b>get the way we want to map each portion of the entity ( properties, many-to-one, collections ), or if we have a component, or a subclass and so on. We realize our AutoMapper class by deriving a ModelMapper and internally subscribing some events, and passing to it a custom ModelInspector ( we named it AutoModelInspector ).</p>
<p>Let&rsquo;s start with a very basic model:</p>
<p> <img src="http://www.felicepollano.com/public/WindowsLiveWriter/UsingN.2mappingbycodeforAutomaticMapping_D407/ultra%20simple%20model_thumb.png" /></p>
<p>&nbsp;</p>
<p>Basically an entity that unidirectionally associates with a referred one. Let&rsquo;s say we have these example database conventions:</p>
<ul>
<li>Identifier column are named <b>&ldquo;c&rdquo;+EntityName+&rdquo;Id&rdquo;</b> and are <b>autoincrement</b> </li>
<li>Column description are named <b>&ldquo;txt&rdquo;+EntityName+&rdquo;Descr&rdquo;</b> </li>
<li>Column of type string have to be prefixed with <b>&ldquo;txt&rdquo;</b> </li>
<li>Column of type string have to be <b>AnsiString</b> ( for DDL generation of CHAR instead of NChar ) </li>
<li>Foreign key column have to be called<b> &ldquo;c&rdquo;+ForeignEntityName+&rdquo;Id&rdquo;</b> </li>
</ul>
<p>So let&rsquo;s see how we wrote the custom model mapper:</p>
<pre class="code"><span style="color: blue">class </span><span style="color: #2b91af">AutoMapper</span>:<span style="color: #2b91af">ModelMapper
    </span>{
        <span style="color: blue">public </span>AutoMapper()
            : <span style="color: blue">base</span>(<span style="color: blue">new </span><span style="color: #2b91af">AutoModelInspector</span>())
        {
            <span style="color: green">//subscribe required ebvents for this simple strategy ...
            </span><span style="color: blue">this</span>.BeforeMapClass += <span style="color: blue">new </span>RootClassMappingHandler(AutoMapper_BeforeMapClass);
            <span style="color: blue">this</span>.BeforeMapProperty += <span style="color: blue">new </span>PropertyMappingHandler(AutoMapper_BeforeMapProperty);
            <span style="color: blue">this</span>.BeforeMapManyToOne += <span style="color: blue">new </span>ManyToOneMappingHandler(AutoMapper_BeforeMapManyToOne);
            <span style="color: green">//...
            //other events....
        </span>}
        
        <span style="color: blue">void </span>AutoMapper_BeforeMapManyToOne(IModelInspector modelInspector, <span style="color: #2b91af">PropertyPath </span>member, IManyToOneMapper propertyCustomizer)
        {
            <span style="color: green">//
            // name the column for many to one as
            // "c"+foreignEntityName+"id"
            //
            </span><span style="color: blue">var </span>pi = member.LocalMember <span style="color: blue">as </span><span style="color: #2b91af">PropertyInfo</span>;
            <span style="color: blue">if </span>(<span style="color: blue">null </span>!= pi)
            {
                propertyCustomizer.Column(k =&gt; k.Name(<span style="color: #a31515">"c"</span>+pi.PropertyType.Name+<span style="color: #a31515">"Id"</span>));
            }
        }

        <span style="color: blue">void </span>AutoMapper_BeforeMapProperty(IModelInspector modelInspector, <span style="color: #2b91af">PropertyPath </span>member, IPropertyMapper propertyCustomizer)
        {
            <span style="color: green">//
            // Treat description as a special case: "txt"+EntityName+"Descr"
            // but for all property of type string prefix with "txt"
            //
            </span><span style="color: blue">if </span>(member.LocalMember.Name == <span style="color: #a31515">"Description"</span>)
            {
                propertyCustomizer.Column(k =&gt;
                    {
                        k.Name(<span style="color: #a31515">"txt" </span>+ member.GetContainerEntity(modelInspector).Name + <span style="color: #a31515">"Descr"</span>);
                        k.SqlType(<span style="color: #a31515">"AnsiString"</span>);
                    }
                    );
            }
            <span style="color: blue">else
            </span>{
                <span style="color: blue">var </span>pi = member.LocalMember <span style="color: blue">as </span><span style="color: #2b91af">PropertyInfo</span>;
                
                <span style="color: blue">if </span>(<span style="color: blue">null </span>!= pi &amp;&amp; pi.PropertyType == <span style="color: blue">typeof</span>(<span style="color: blue">string</span>))
                {
                    propertyCustomizer.Column(k =&gt;
                    {
                        k.Name(<span style="color: #a31515">"txt" </span>+ member.LocalMember.Name);
                        k.SqlType(<span style="color: #a31515">"AnsiString"</span>);
                    }
                   );
                }
            }
        }
       
        <span style="color: blue">void </span>AutoMapper_BeforeMapClass(IModelInspector modelInspector, <span style="color: #2b91af">Type </span>type, IClassAttributesMapper classCustomizer)
        {
            <span style="color: green">//
            // Create the column name as "c"+EntityName+"Id"
            //
            </span>classCustomizer.Id(k =&gt; { k.Generator(<span style="color: #2b91af">Generators</span>.Native); k.Column(<span style="color: #a31515">"c" </span>+ type.Name + <span style="color: #a31515">"Id"</span>); });
        }

        
    }</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>&nbsp;</p>
<p>The event handlers apply the convention we said before. As we see we pass a special model inspector in the constructor, that is implemented as below:</p>
<pre class="code"><span style="color: blue">class </span><span style="color: #2b91af">AutoModelInspector</span>:IModelInspector
    {
        <span style="color: blue">#region </span>IModelInspector Members

       
        <span style="color: blue">public </span>IEnumerable&lt;<span style="color: blue">string</span>&gt; GetPropertiesSplits(<span style="color: #2b91af">Type </span>type)
        {
            <span style="color: blue">return new string</span>[0];
        }

        <span style="color: blue">public bool </span>IsAny(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return false</span>;
        }

        
        <span style="color: blue">public bool </span>IsComponent(<span style="color: #2b91af">Type </span>type)
        {
            <span style="color: blue">return false</span>;
        }

       
        <span style="color: blue">public bool </span>IsEntity(<span style="color: #2b91af">Type </span>type)
        {
            <span style="color: blue">return true</span>;
        }

       
        
        <span style="color: blue">public bool </span>IsManyToOne(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: green">//property referring other entity is considered many-to-ones...
            </span><span style="color: blue">var </span>pi = member <span style="color: blue">as </span><span style="color: #2b91af">PropertyInfo</span>;
            <span style="color: blue">if </span>(<span style="color: blue">null </span>!= pi)
            {
                <span style="color: blue">return </span>pi.PropertyType.FullName.IndexOf(<span style="color: #a31515">"MappingByCode"</span>) != -1;
            }
            <span style="color: blue">return false</span>;
        }

        <span style="color: blue">public bool </span>IsMemberOfComposedId(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return false</span>;
        }

        <span style="color: blue">public bool </span>IsMemberOfNaturalId(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return false</span>;
        }

      
        <span style="color: blue">public bool </span>IsPersistentId(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return </span>member.Name == <span style="color: #a31515">"Id"</span>;
        }

        <span style="color: blue">public bool </span>IsPersistentProperty(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return </span>member.Name != <span style="color: #a31515">"Id"</span>;
        }

        <span style="color: blue">public bool </span>IsProperty(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">if </span>(member.Name != <span style="color: #a31515">"Id"</span>) <span style="color: green">// property named id have to be mapped as keys...
            </span>{
                <span style="color: blue">var </span>pi = member <span style="color: blue">as </span><span style="color: #2b91af">PropertyInfo</span>;
                <span style="color: blue">if </span>(<span style="color: blue">null </span>!= pi)
                {
                    <span style="color: green">// just simple stading that if a property is an entity we have 
                    // a many-to-one relation type, so property is false
                    </span><span style="color: blue">if </span>(pi.PropertyType.FullName.IndexOf(<span style="color: #a31515">"MappingByCode"</span>) == -1)
                        <span style="color: blue">return true</span>;
                }

            }
            <span style="color: blue">return false</span>;
                
        }

        <span style="color: blue">public bool </span>IsRootEntity(<span style="color: #2b91af">Type </span>type)
        {
            <span style="color: blue">return </span>type.BaseType == <span style="color: blue">typeof</span>(<span style="color: blue">object</span>);
        }

       
        
        <span style="color: blue">public bool </span>IsTablePerClassSplit(<span style="color: #2b91af">Type </span>type, <span style="color: blue">object </span>splitGroupId, System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return false</span>;
        }

       
        <span style="color: blue">public bool </span>IsVersion(System.Reflection.<span style="color: #2b91af">MemberInfo </span>member)
        {
            <span style="color: blue">return false</span>;
        }

        <span style="color: blue">#endregion
    </span>}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>&nbsp;</p>
<p>As we say there is a bounch of <b>IsXXXXX</b> function, that are called for each portion of the class in order to know what to do with it. Our implementation is absolutely incomplete ( not implemented function omitted ), but it feet the simple requirement we stated. Then we can see how we actually realize the mapping:</p>
<pre class="code"><span style="color: blue">static void </span>Main(<span style="color: blue">string</span>[] args)
       {
           <span style="color: #2b91af">AutoMapper </span>mapper = <span style="color: blue">new </span><span style="color: #2b91af">AutoMapper</span>();
          
           <span style="color: green">//this line simple rely on the fact
           //all and just the entities are exported...
           </span><span style="color: blue">var </span>map = mapper.CompileMappingFor(<span style="color: #2b91af">Assembly</span>.GetExecutingAssembly().GetExportedTypes());

           <span style="color: green">//dump the mapping on the console
           </span><span style="color: #2b91af">XmlSerializer </span>ser = <span style="color: blue">new </span><span style="color: #2b91af">XmlSerializer</span>(map.GetType());
           ser.Serialize(<span style="color: #2b91af">Console</span>.Out, map);
       }</pre>
<p>Simple, isn&rsquo;t ?</p>
<p>The resulting map, as dumped on the console is:</p>
<p>
<img src="http://www.felicepollano.com/public/WindowsLiveWriter/UsingN.2mappingbycodeforAutomaticMapping_D407/image_thumb.png" /></p>
<p>&nbsp;</p>
<p>That fulfill the actually simple requirements. So is just a matter of recognize the convention and the exceptions, and let&rsquo;s go auto-mapping!</p>]]></content>
      <post-name type="text"><![CDATA[using nh3 2 mapping by code for automatic mapping]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1173" />
      </categories>
      <comments>
        <comment id="994" date-created="2011-10-20T12:58:54" date-modified="2011-10-20T12:58:54" approved="true" user-name="Fabio Maulo" user-url="http://nhforge.org/members/fabiomaulo/default.aspx">
          <title type="text"><![CDATA[re: Using NH3.2 mapping by code for Automatic Mapping]]></title>
          <content type="text"><![CDATA[you can use:
Console.Write(map.AsString());

You have two extensions methods to work with XML results.
AsString work with HbmMapping.
WriteAllXmlMapping work with IEnumerable<HbmMapping>]]></content>
        </comment>
      </comments>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="978" date-created="2011-09-05T07:28:00" date-modified="2011-09-05T07:28:00" approved="true" post-url="/blogs/nhibernate/archive/2011/09/05/automatic-mapping-pluralize-table-names.aspx" type="normal" hasexcerpt="false" views="12030">
      <title type="text"><![CDATA[Automatic Mapping: Pluralize table names]]></title>
      <content type="text"><![CDATA[<p>Note: this is a cross post <a href="http://www.felicepollano.com/2011/09/02/AutomaticMappingPluralizeTableNames.aspx" target="_blank">from my own blog</a>.</p>
<p>In <a href="http://www.felicepollano.com/2011/09/01/UsingNH32MappingByCodeForAutomaticMapping.aspx" target="_blank">this post</a> we done some effort in automatically generate the mapping based on convention, but we miss a very common one: table names is usually the pluralized entity name. This is usually done by using an inflector. Thanks to <a href="http://www.stackoverflow.com" target="_blank">Stack Overflow</a>, <a href="http://stackoverflow.com/questions/2552816/alternatives-to-inflector-net" target="_blank">I found this question about it</a>, and choose <a href="http://cid-net.googlecode.com/svn/trunk/src/Cid.Mvc/Inflector.cs" target="_blank">that one</a>, that is a single easily embeddable file. So we modify a little our AutoMapper class as below:</p>
<blockquote>
<pre class="code"><span style="color: blue">void </span>AutoMapper_BeforeMapClass(<span style="color: #2b91af">IModelInspector </span>modelInspector, <span style="color: #2b91af">Type </span>type, <span style="color: #2b91af">IClassAttributesMapper </span>classCustomizer)
       {
           <span style="color: green">//
           // Create the column name as "c"+EntityName+"Id"
           //
           </span>classCustomizer.Id(k =&gt; 
                               { 
                                   k.Generator(<span style="color: #2b91af">Generators</span>.Native); k.Column(<span style="color: #a31515">"c" </span>+ type.Name + <span style="color: #a31515">"Id"</span>); 
                               }
                               );
           classCustomizer.Table(<span style="color: #2b91af">Inflector</span>.Pluralize(type.Name));
        }</pre>
</blockquote>
<p><a href="http://11011.net/software/vspaste"></a>&nbsp;</p>
<p>And this is all, the generated mapping will change as:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns:xsi</span><span style="color: blue">=</span>"<span style="color: blue">http://www.w3.org/2001/XMLSchema-instance</span>" <span style="color: red">xmlns:x</span><span style="color: blue">=</span>""
<span style="color: red">sd</span><span style="color: blue">=</span>"<span style="color: blue">http://www.w3.org/2001/XMLSchema</span>" <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">MappingByCode</span>" <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">Mappin
gByCode</span>" <span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">SimpleEntity</span>" <span style="color: #00ff00;"><b><span style="font-size: medium;"><span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">SimpleEntities</span>"</span></b></span><span style="color: blue"><span style="color: #00ff00; font-size: medium;"><b>&gt;</b></span>
    &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">cSimpleEntityId</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Int32</span>"<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">native</span>" <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">column </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">txtSimpleEntityDescr</span>" <span style="color: red">sql-type</span><span style="color: blue">=</span>"<span style="color: blue">AnsiString</span>" <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Referred</span>" <span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">cReferredId</span>" <span style="color: blue">/&gt;
  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;
</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a>&hellip; 
</p>
<p>Just for better sharing, <a href="https://bitbucket.org/Felice_Pollano/mappingbycode" target="_blank">I published this &ldquo;laboratory&rdquo; project here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[automatic mapping pluralize table names]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1173" />
      </categories>
      <trackbacks>
        <trackback id="982" date-created="2011-09-12T08:32:46" date-modified="2011-09-12T08:32:46" approved="true" url="http://nhforge.org/blogs/nhibernate/archive/2011/09/12/nh-mapping-by-code-vs-the-untouchable-db.aspx">
          <title type="text"><![CDATA[NH Mapping by code VS the Untouchable DB]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="981" date-created="2011-09-12T08:30:00" date-modified="2011-09-12T08:30:00" approved="true" post-url="/blogs/nhibernate/archive/2011/09/12/nh-mapping-by-code-vs-the-untouchable-db.aspx" type="normal" hasexcerpt="false" views="13195">
      <title type="text"><![CDATA[NH Mapping by code VS the Untouchable DB]]></title>
      <content type="text"><![CDATA[<p>Note: this is a cross post <a href="http://www.felicepollano.com/2011/09/09/NHMappingByCodeVSTheUntouchableDB.aspx">from my own blog</a>.</p>
<p>This post is an exercise, similar to <a href="/blogs/nhibernate/archive/2011/09/05/automatic-mapping-pluralize-table-names.aspx" target="_blank">this</a> and <a href="http://www.felicepollano.com/2011/09/01/UsingNH32MappingByCodeForAutomaticMapping.aspx">this</a> previous posts about using <a href="http://nhforge.org" target="_blank">NHibernate</a>&nbsp; mapping by code new features present form version 3.2. The source inspiring it is an <a href="http://ayende.com/blog/4695/nhibernate-complex-relationships" target="_blank">old post form</a> <a href="http://ayende.com/blog/" target="_blank">Ayende</a>, showing a non trivial requirement to map.</p>
<p>Here the DB model:</p>
<p> <img src="http://ayende.com/Blog/images/ayende_com/Blog/WindowsLiveWriter/NHibernateComplexrelationships_AB1C/image_2.png" /></p>
<p>And the wanted object model:</p>
<p> <img src="http://ayende.com/Blog/images/ayende_com/Blog/WindowsLiveWriter/NHibernateComplexrelationships_AB1C/image_4.png" /></p>
<p>So there is a lot of <a href="http://ayende.com/blog/4695/nhibernate-complex-relationships#comments" target="_blank">comments</a> about DB refactoring needing, or on needing to have the linking entity as a visible entity in the model, but:</p>
<ul>
<li>I like the idea of collapsing the linking entity. </li>
<li>I suppose that the DB is untouchable, as frequently happens. </li>
</ul>
<p>Ayende solves the trouble by the &lt;join/&gt; mapping having an entity spawning two tables, so Address will be represented by joining the Table Address and PeopleAddress.</p>
<p>This can be done very easily in Mapping by code too, lets see how:</p>
<p>&nbsp;</p>
<pre class="code"><span style="color: #2b91af">ModelMapper </span>mapper = <span style="color: blue">new </span><span style="color: #2b91af">ModelMapper</span>();
            mapper.Class&lt;<span style="color: #2b91af">Person</span>&gt;(m =&gt;
                {
                    m.Id(k =&gt; k.Id,g=&gt;g.Generator(<span style="color: #2b91af">Generators</span>.Native));
                    m.Table(<span style="color: #a31515">"People"</span>);
                    m.Property(k =&gt; k.Name);
                    m.Bag(k =&gt; k.Addresses, t =&gt; 
                            { 
                                t.Table(<span style="color: #a31515">"PeopleAddresses"</span>);
                                t.Key(c=&gt;c.Column(<span style="color: #a31515">"PersonId"</span>));
                                t.Inverse(<span style="color: blue">true</span>);
                                
                            }
                         ,rel=&gt;rel.ManyToMany(many=&gt;many.Column(<span style="color: #a31515">"AddressId"</span>))
                        );
                }

                );

            mapper.Class&lt;<span style="color: #2b91af">Address</span>&gt;(m =&gt;
                {
                    m.Id(k =&gt; k.Id, g =&gt; g.Generator(<span style="color: #2b91af">Generators</span>.Native));
                    m.Table(<span style="color: #a31515">"Addresses"</span>);
                    m.Property(p =&gt; p.City);

                     m.Join(<span style="color: #a31515;">"PeopleAddresses"</span>, z =&gt; <br />                    { <br />                      z.Property(p =&gt; p.IsDefault); <br />                      z.Property(p =&gt; p.ValidFrom);<br />                      z.Property(p =&gt; p.ValidTo);<br />                      z.Key(k =&gt; k.Column(<span style="color: #a31515;">"PersonId"</span>)); <br />                    });      
                }
                );</pre>
<p>That yield&nbsp; the following mapping:</p>
<pre class="code"><span style="color: blue">&lt;?</span><span style="color: #a31515">xml </span><span style="color: red">version</span><span style="color: blue">=</span>"<span style="color: blue">1.0</span>" <span style="color: red">encoding</span><span style="color: blue">=</span>"<span style="color: blue">utf-16</span>"<span style="color: blue">?&gt;
&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns:xsi</span><span style="color: blue">=</span>"<span style="color: blue">http://www.w3.org/2001/XMLSchema-instance</span>" <span style="color: red">xmlns:xsd</span><span style="color: blue">=</span>"<span style="color: blue">http://www.w3.org/2001/XMLSchema</span>" <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">TestMappingByCode</span>" <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">TestMappingByCode</span>" <span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Person</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">People</span>"<span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Int32</span>"<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">native</span>" <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>" <span style="color: blue">/&gt;
    &lt;</span><span style="color: #a31515">bag </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Addresses</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">PeopleAddresses</span>" <span style="color: red">inverse</span><span style="color: blue">=</span>"<span style="color: blue">true</span>"<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">PersonId</span>" <span style="color: blue">/&gt;
      &lt;</span><span style="color: #a31515">many-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Address</span>" <span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">AddressId</span>" <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">bag</span><span style="color: blue">&gt;
  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;
  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Address</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">Addresses</span>"<span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Int32</span>"<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">native</span>" <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;
    &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">City</span>" <span style="color: blue">/&gt;
    &lt;</span><span style="color: #a31515">join </span><span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">PeopleAddresses</span>"<span style="color: blue">&gt;
      &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">PersonId</span>" <span style="color: blue">/&gt;
      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">IsDefault</span>" <span style="color: blue">/&gt;
      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">ValidFrom</span>" <span style="color: blue">/&gt;
      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">ValidTo</span>" <span style="color: blue">/&gt;
    &lt;/</span><span style="color: #a31515">join</span><span style="color: blue">&gt;
  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;
&lt;/</span><span style="color: #a31515">hibernate-mapping</span><span style="color: blue">&gt;
</span></pre>
<p>&nbsp;</p>
<p>Exactly the ones that Ayende proposed. As you can see is pretty straightforward map even a not so common situation.</p>]]></content>
      <post-name type="text"><![CDATA[nh mapping by code vs the untouchable db]]></post-name>
      <categories>
        <category ref="1026" />
        <category ref="1173" />
      </categories>
      <comments>
        <comment id="989" date-created="2011-09-30T11:46:32" date-modified="2011-09-30T11:46:32" approved="true" user-name="Rob Benwell" user-url="http://twitter.com/#!/robbenwell">
          <title type="text"><![CDATA[re: NH Mapping by code VS the Untouchable DB]]></title>
          <content type="text"><![CDATA[You covered this topic well. It helps me a lot and all newbies out there. Looking forward for more. ]]></content>
        </comment>
      </comments>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
    <post id="1002" date-created="2011-11-12T00:19:00" date-modified="2011-11-12T00:19:00" approved="true" post-url="/blogs/nhibernate/archive/2011/11/11/s-arp-lite-the-basics.aspx" type="normal" hasexcerpt="false" views="18271">
      <title type="text"><![CDATA[S#arp Lite: The Basics]]></title>
      <content type="text"><![CDATA[<p><span style="font-weight: normal;"><i>[The motivations for releasing S#arp Lite, in relation to S#arp Architecture, are described <a href="http://devlicio.us/blogs/billy_mccafferty/archive/2011/10/26/s-arp-lite-like-beer-but-better.aspx">here</a>.]</i></span></p>
<h2><strong>What is S#arp Lite?</strong></h2>
<p><span style="font-weight: normal;"><i>S#arp Lite is an architectural framework for the development of well-designed, custom-built, ASP.NET MVC applications using NHibernate for data access.</i></span></p>
<p><span style="font-weight: normal;"><img border="0" src="http://devlicio.us/resized-image.ashx/__size/550x0/__key/CommunityServer.Blogs.Components.WeblogFiles/billy_5F00_mccafferty/SharpLite_5F00_Logo.png" style="border: 0; float: right;" width="350" />ASP.NET MVC 3 is a terrific platform for delivering web-based applications. &nbsp;But, similar to ASP.NET, it does not provide specific guidelines for how to best use it in different project contexts. &nbsp;That's certainly the point; it exists to provide a flexible platform which may be used in a variety of situations without being biased towards one architecture or another, beyond the fundamentals of Model-View-Controller. &nbsp;The benefit of this is that you can structure MVC projects almost anyway you'd like; the drawback is that it's possible to have almost no consistency among your organization's projects, even if they're all using ASP.NET MVC.</span></p>
<p><span style="font-weight: normal;">That's where <a href="https://github.com/codai/Sharp-Lite">S#arp Lite</a> comes in to play. &nbsp;S#arp Lite comes packaged with three primary assets to provide a turnkey solution for developing well-designed, MVC applications:</span></p>
<ul>
<li>A project template to facilitate the creation of new S#arp Lite projects, pre-configured to communicate with your database using NHibernate;</li>
<li>A set of reusable class libraries which encapsulates infrastructural concerns (including a base repository); and&nbsp;</li>
<li>Architectural guidance on how to build out a S#arp Lite project.</li>
</ul>
<p>
Currently, the architectural guidance is demonstrated via the sample project which has been included in the S#arp Lite release package. &nbsp;Architectural guidelines are also enforced by the direction of dependencies among the project layers. &nbsp;(This will be discussed in more detail below.)</p>
<p>The overall objective is to allow your development team to more easily develop ASP.NET MVC applications which adhere to well founded principles, such as <a href="http://www.infoq.com/minibooks/domain-driven-design-quickly">domain-driven design</a> and <a href="http://www.agiledata.org/essays/tdd.html">test-driven development</a>; without being bogged down with infrastructural setup and without sacrificing long-term maintainability and scalability of the solution.</p>
<p>As a quick side, the base repository class which S#arp Lite exposes is purposefully&nbsp;<i>very </i>simplistic. &nbsp;The base repository only includes the following methods:</p>
<ul>
<li>Get(id): &nbsp;returns an entity from the database having the Id provided,</li>
<li>GetAll(): &nbsp;returns an IQueryable&lt;&gt; which may be further filtered/transformed via LINQ,</li>
<li>SaveOrUpdate(entity): &nbsp;persists an entity to the database, and</li>
<li>Delete(entity): &nbsp;deletes an entity from the database.</li>
</ul>
<p>Keeping the base repository very light has greatly reduced bloat and places greater emphasis on the use of LINQ for retrieving results from GetAll(). &nbsp;We'll discuss this in more detail a bit later.</p>
<h2>Who is this intended for?</h2>
<p>The motivation for S#arp Lite came from working with many teams (including my own) who had been developing projects with <a href="https://github.com/sharparchitecture/Sharp-Architecture">S#arp Architecture</a>. &nbsp;To many, S#arp Architecture is simply too big of an architectural framework to easily get your head. &nbsp;When I used to discuss S#arp Architecture with teams who were considering using it, I would always suggest that their developers be very experienced and well versed with topics such as dependency inversion, low-level NHibernate, and domain-driven design.</p>
<p>The reality of business is that it's not likely that your team will be made up of all senior level developers who are all experts in these topics. &nbsp;S#arp Lite is intended to epitomize the underlying values of S#arp Architecture, strive to be equally scalable to larger projects, all while being tenable to a larger audience. &nbsp;In other words, you should be able to have a realistically skill-balanced team and still be able to successfully deliver a S#arp Lite application.</p>
<p>S#arp Lite is recommended for any mid-to-large sized ASP.NET MVC project. &nbsp;If you have a small mom &amp; pop store, you'd likely be better off using a less-tiered application setup. &nbsp;It scales well to very large projects. &nbsp;We're using it effectively on for applications which integrate with a half dozen other systems...so it certainly holds up to larger tasks as well.</p>
<h2>What does a S#arp Lite project look like?</h2>
<p>Creating a new S#arp Lite project is trivially simple:</p>
<ol>
<li>Download and unzip the <a href="https://github.com/codai/Sharp-Lite/downloads">S#arp Lite release package</a>&nbsp;from GitHub.</li>
<li>Follow the instructions within the <a href="https://github.com/codai/Sharp-Lite/blob/master/README.txt">README.txt</a> to creation your S#arp Lite project with <a href="http://opensource.endjin.com/templify/">Templify</a>&nbsp;(a brilliant little tool).</li>
</ol>
<p>After you've created a S#arp Lite project, you'll find the following directory structure under the root folder:</p>
<ul>
<li><strong>app</strong>: &nbsp;This folder holds the source of the project; i.e., the code that you're getting paid to write.</li>
<li><strong>build</strong>: &nbsp;This initially empty folder is a placeholder for your build-related artifacts, such as your "publish" folder, NAnt or MSBuild artifacts, etc.</li>
<li><strong>docs</strong>: &nbsp;This initially empty folder contains all of the documents for your project. &nbsp;Keeping them here keeps all of your docs checked in with the code.</li>
<li><strong>lib</strong>: &nbsp;This folder contains all of the DLL dependencies for your project, such as log4net.dll, SharpLite.Domain.dll, System.Web.Mvc.dll, etc.</li>
<li><strong>logs</strong>: &nbsp;This initially empty folder is intended to hold any generated log files. &nbsp;The generated project's web.config used this folder for dumping out log4net logs.</li>
<li><strong>tools</strong>: &nbsp;This initially empty folder is intended to hold any third party install files or other dependencies which the team may need to work on the project. &nbsp;For example, this is where we store the latest installation of Telerik ASP.NET MVC and NUnit, used by the project. &nbsp;Having all of your installable dependencies, checked in with the code, makes it much easier to get "the new guy" up and running quickly.</li>
</ul>
<p>The auto-generated folder structure is just a means to help keep your digital assets and solution files organized. &nbsp;The more interesting stuff is in the /app folder which houses the source code of the solution. &nbsp;Before we delve into the projects included in a S#arp Lite project, let's take a birds eye view of the overall architecture.</p>
<p><img src="http://devlicio.us/resized-image.ashx/__size/550x0/__key/CommunityServer.Blogs.Components.WeblogFiles/billy_5F00_mccafferty/SharpLiteArchitecture.png" border="0" style="border: 0;" /></p>
<p>The diagram above reflects the layers of a S#arp Lite project, implemented as separate class libraries and an ASP.NET MVC Web Project. &nbsp;Having the tiers in separate class libraries allows you to enforce the direction of dependency among them. &nbsp;For example, because YourProject.Tasks depends on YourProject.Domain, YourProject.Domain cannot have any direct dependencies on a calss within YourProject.Tasks. &nbsp;This singled-directional dependency helps to enforce how the architecture is to remain organized.</p>
<p>While the diagram above describes the basic purpose of each layer, it's most assistive to look at an example project to have a clearer understanding of the scope of responsibilities of each layer. &nbsp;Accordingly, let's examine the tiers of the MyStore example application which was included in the S#arp Lite release package.</p>
<h3>Examining the Layers of MyStore Sample Application</h3>
<p>The MyStore sample application, included in the release zip, demonstrates the use of S#arp Lite for a fairly typical CRUD (create/read/update/delete) application. &nbsp;It includes managing data and relationships such as one:one, one:many, many:many, and parent/child. &nbsp;Let's take a closer look at the relational model.</p>
<p><img border="0" src="http://devlicio.us/resized-image.ashx/__size/550x0/__key/CommunityServer.Blogs.Components.WeblogFiles/billy_5F00_mccafferty/MyStoreRelationalModel.png" style="border: 0;" /></p>
<p>The diagram above represents the relational object model, as implemented within a SQL Server database. &nbsp;It's a very simple model with basic relationships, but it still brings up a lot of interesting discussion points when we go to translate this relational model into the object-oriented design of our application.</p>
<p>For example, each customer entity contains address information (stored as StreetAddress and ZipCode in the Customers table); in the domain, we want the address information pulled out into a separate object called Address. &nbsp;Having this information as a separate object more easily allows us to add behavior to the Address object while keeping those concerns separate from the Customer object, such as integration with a USPS address validation service. &nbsp;(Arguably, such a service would be in a stand-alone service class, but you get the idea.)</p>
<p>As another example, the many:many Products_ProductCategories table shouldn't have a similarly named class in our object model; instead, we would expect Products to have a listing of ProductCategories and/or vice-versa.</p>
<p>The sample application includes examples of how all of this and mappings of the classes themselves have been achieved almost entirely via <a href="http://en.wikipedia.org/wiki/Convention_over_configuration">coding-by-convention</a>. &nbsp;Let's now look at the sample application, layer-by-layer, and interesting points along the way.</p>
<hr />
<h4>MyStore.Domain</h4>
<p>This layer of the application contains the heart of the application; it represents the core domain of our product. &nbsp;All the other layers exist simply to support the user's need to interact with the domain. &nbsp;In a S#arp Lite project, the domain layer contains four types of objects:</p>
<ul>
<li>Domain Objects</li>
<li>Query Objects</li>
<li>Query Interfaces</li>
<li>Custom Validators</li>
</ul>
<p>Let's review each in turn.</p>
<p><strong><i>Domain Objects</i></strong></p>
<p>Alright, so maybe this is a whole bunch of types of objects, but they all have the same purpose - they exist to implement the domain of our application. &nbsp;They consist of entities, value objects, services (e.g., calculators), factories, aggregates...all organized into modules, usually expressed as separate namespaces. &nbsp;(I highly recommend Eric Evans' <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain-Driven Design</a>, Jimmy Nilsson's <a href="http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202">Applying Domain Driven Design and Patterns</a>, and <a href="http://www.amazon.com/Software-Development-Principles-Patterns-Practices/dp/0135974445">Agile Software Development</a> by Robert Martin to help guide you.) &nbsp;There are two namespaces in the sample project: &nbsp;the "ProductMgmt" namespace which contains everything related to product management, and the "root" namespace for, well, everything else. &nbsp;Your project will likely have others.</p>
<p>Let's now take a look at the Customer class within the sample project as an example of an entity. &nbsp;There are some important items to note:</p>
<ul>
<li>Customer inherits from Entity (which is from SharpLite.Domain.dll). &nbsp;The Entity base class A) signals that this class is a persisted object which has an associated table in the database, B) provides an Id property (no biggie there), and C) facilitates comparing two entities to each other. &nbsp;If two entities are of the same type and have the same Id, then you know they're the same object. &nbsp;But what if you're comparing two "transient" entities; i.e., two entities which have not yet been persisted to the database. &nbsp;As another example, how would you go about comparing a transient entity to entities that have been persisted.<br /><br />For this we need to compare "domain signatures." &nbsp;A domain signature is the fingerprint of what makes the entity unique <i>from a business perspective</i>. &nbsp;In other words, which property(s) of an object would make it identifiable without having an Id property? &nbsp;Looking at the Customer class, we see that there are two properties decorated with the attribute "DomainSignature." &nbsp;Furthermore, the class itself is decorated with the attribute "HasUniqueDomainSignature." &nbsp;This means that no two objects may exist having the same first and last name. &nbsp;(This will not be appropriate in all scenarios; but should reflect the domain signature of the object in the context of the application.) &nbsp;The described attributes are included in SharpLite.Domain.dll and support automatic validation of the class' domain signature. &nbsp;So if you try to add a new customer with the same first and last name as an existing customer, a validation message will let you know this is not allowed.<br />
<pre name="code" class="c#">[HasUniqueDomainSignature(...
public class Customer : Entity
{
    [DomainSignature]
    ...
    public virtual string FirstName { get; set; }</pre>
&nbsp;</li>
<li>The Customer class pulls encapsulates the address information from the Customers table into a separate Address class. &nbsp;Interestingly, NHibernate "loquacious" mapping (aka - code by convention) automatically maps the related table columns into this "component" object.</li>
<li>Customer has an IList of Orders with a protected setter; the collection is initialized in the constructor. &nbsp;This is done for two reasons: &nbsp;1) by design, the collection will <i>never</i>&nbsp;be null (which avoids a lot of object reference exception avoidance), and 2) we don't have to worry about NHibernate losing its pointer to the original collection loaded from the database. &nbsp;This collection "pattern" is simply good practice for exposing/protecting the collection.<br />
<pre name="code" class="c#">public class Customer : Entity
{
    public Customer() {
        Orders = new List<order>();
    }

    public virtual IList<order> Orders { get; protected set; }</order></order></pre>
</li>
<li>Validation is enforced with standard, .NET <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.aspx">data annotations</a>. &nbsp;No need for NHibernate.Validator or other validation mechanism when it's all available via the .NET library. &nbsp;And whenever you run into limitations, you can simply create a custom validator.</li>
</ul>
<p><i style="font-weight: bold;">Query Objects</i></p>
<p>Regularly, we need to filter information returned from the database. &nbsp;For example, we may just want to return "active" customers vs. all the customers in the database. &nbsp;For performance reasons, it's obviously better to put as much filtering work on the shoulders of the database. &nbsp;Before LINQ providers, it was difficult to find the appropriate balance between filtering on the domain side or filtering on the database side. &nbsp;But with LINQ and IQueryable, filtering can be developed within the domain while it's still executed on the database. &nbsp; Brilliant! &nbsp;To facilitate this, every repository (e.g., IRepository&lt;Customer&gt;) exposes the method GetAll() which returns IQueryable&lt;&gt;.</p>
<p>The abso-friggin-spectacular side effect of this is that we can avoid having specialty "repository" methods which exist simply to hide away the details of the underlying data-access mechanism. &nbsp;There are two kinds of query objects in a S#arp Lite project:</p>
<ul>
<li><strong>Specification Query Objects</strong>: &nbsp;Specification query objects take a list and filter the results down to a smaller list, based on some criteria. &nbsp;In the sample project, the specification query class, MyStore.Domain.FindActiveCustomers, provides an extension method to IQueryable&lt;&gt; with any filter parameters passed in to the method. &nbsp;Alternatively, the query object could be a POCO class, accepting an IQueryable&lt;&gt; and filtering, accordingly. &nbsp;The benefit to setting up the specification query object as an extension, albeit, with additional indirection, is that multiple queries may be chained, all while taking advantage of IQuerable&lt;&gt;'s delayed querying (i.e., only one query will be sent to the database even if you chain multiple queries.<br />
<pre name="code" class="c#">public static class FindActiveCustomersExtension
{
    public static IQueryable<customer> FindActiveCustomers(this IQueryable<customer> customers) {
        return customers.FindActiveCustomers(MINIMUM_ORDERS_TO_BE_CONSIDERED_ACTIVE);
    }

    public static IQueryable<customer> FindActiveCustomers(this IQueryable<customer> customers, int minimumOrders) {
        return customers.Where(c =&gt;
            c.Orders.Count &gt;= minimumOrders);
    }

    private const int MINIMUM_ORDERS_TO_BE_CONSIDERED_ACTIVE = 3;
}</customer></customer></customer></customer></pre>
To me, the real beauty in this is that the query object may live in the domain, and be tested as a first class citizen of the domain, without introducing any dependencies to the underlying data-access layer (whether that be NHibernate, Entity Framework, etc.).&nbsp;&nbsp;&nbsp;</li>
<li><strong>Report Query Objects</strong>: &nbsp;Report query objects take a list, filtering if necessary, transforming and returning the results as a DTO or list of DTOs. &nbsp;Imagine that you have a summary dashboard in your application; e.g., a page which shows how many orders each customer has placed and what is each customer's most frequently purchased product. &nbsp;In this scenario, we'd ultimately like a list of DTOs containing each customer's name, his/her order count, and his/her favorite product. &nbsp;There are a few options to tackling this:
<ul>
<li>Create a DB stored procedure, binding the results to the DTOs list (and thus put processing logic onto the DB),</li>
<li>Use NHibernate Criteria, HQL or named query to retrieve the results (and tightly couple your data-access code to NHibernate),</li>
<li>Traverse the object model on the domain side to collate the information (can you say <a href="http://use-the-index-luke.com/sql/join/nested-loops-join-n1-problem">n+1</a>?), or</li>
<li>Use clean and simple, data-access agnostic LINQ (and keep it in the domain).</li>
</ul>
<br />2 points if you guess which one I'm leaning towards.  Let's look MyStore.Domain.Queries.QueryForCustomerOrderSummariesExtension for an example:
<pre name="code" class="c#">public static class QueryForCustomerOrderSummariesExtension
{
    public static IQueryable<customerordersummarydto> QueryForCustomerOrderSummaries(this IQueryable<customer> customers) {
        return from customer in customers
                select new CustomerOrderSummaryDto() {
                    FirstName = customer.FirstName,
                    LastName = customer.LastName,
                    OrderCount = customer.Orders.Count
                };
    }
}</customer></customerordersummarydto></pre>
Again, the advantage of this is that it can live within the domain layer and act as a reusable reporting query without introducing dependencies to the underlying data-access layer.
</li>
</ul>
<p>You have a lot of flexibility on how you use query objects and where they live. &nbsp;For example, you could use an ad-hoc report query (i.e., a LINQ query not encapsulated by a class) which lives within a method in the tasks layer. &nbsp;Although I'd advise against it, you could even use an ad-hoc query within a controller's method. &nbsp;So the provided samples are just that, samples of a particular approach. &nbsp;What's most important is to agree as a team how you'll encapsulate and organize query objects. &nbsp;In the sample project, queries are encapsulated as query objects and stored within a "Queries" folder - one folder per namespace.</p>
<p><strong><strong>Query Interfaces</strong></strong></p>
<p>In the <i>very </i>unlikely event that you need to leverage the data-access mechanism directly, instead of LINQing IQueryable, the domain layer may also contain any query interfaces which define a query to be implemented by the data-access layer. &nbsp;(This is akin to creating custom repository interfaces in S#arp Architecture.)</p>
<p>The disadvantages to this approach are three-fold:</p>
<ul>
<li>It introduces a layer of indirection to the developer,</li>
<li>It more tightly couples your code to the underlying data-access layer (since some of your application's logic is now <i>in</i> the data-access layer), and</li>
<li>It becomes trickier to unit test the query since you need an in-memory or live database to test the implementation.</li>
</ul>
<p>But, I can foresee that there may be a situation where this is necessary if you have a very complicated query, need to leverage NHibernate detached queries, or simply can't do what needs to be done via LINQ. &nbsp;Accordingly, three steps would need to be taken to support the query:</p>
<ol>
<li>Define the query interface in YourAppProject.Domain (e.g.,&nbsp;MyStore.Domain.ProductMgmt.Queries.IQueryForProductOrderSummaries.cs),</li>
<li>Implement the concrete query class in YourAppProject.NHibernateProvider (e.g.,&nbsp;MyStore.NHibernateProvider.Queries.QueryForProductOrderSummaries.cs), and</li>
<li>Register the implementation with the IoC to resolve requests to the interface (e.g.,&nbsp;MyStore.Init.DependencyResolverInitializer).</li>
</ol>
<p>Obviously, not as clean as using Specification and Report Query Objects, but available if absolutely necessary.</p>
<p><strong><span></span>Custom Validators</strong></p>
<p>As discussed previously, S#arp Lite uses .NET's data annotations for supporting validation. &nbsp;(You could use something else, like <a href="/wikis/validator/nhibernate-validator-1-0-0-documentation.aspx">NHibernate.Validator</a> if you prefer.) &nbsp;The data annotations are added directly to entity classes, but could instead be added to form DTOs if you feel that entities shouldn't act as form validation objects as well.</p>
<p>Sometimes, data annotations aren't powerful enough for the needs of your domain; e.g., if you want to compare two properties. &nbsp;Accordingly, you can develop <a href="http://odetocode.com/blogs/scott/archive/2011/02/21/custom-data-annotation-validator-part-i-server-code.aspx">custom validators</a> and store them within a "Validators" folder. &nbsp;If the custom validator is specific to a class, and never reused, then I'll usually just add the custom validator class as a private subclass to the class which uses it. &nbsp;In this way, the class-specific validator is neatly tucked away, only accessible by the class which needs it. &nbsp;S#arp Lite uses a custom validator to determine if an object is a duplicate of an existing object, using its domain signature: &nbsp;\SharpLiteSrc\app\SharpLite.Domain\Validators\HasUniqueDomainSignatureAttribute.cs.</p>
<p><strong>
</strong></p>
<hr />
<p><strong>
</strong></p>
<h4><strong>MyStore.Tasks</strong></h4>
<p><strong>
</strong></p>
<p>This layer of the application contains the task-coordination logic, reacting to commands sent from, e.g., a controller in the presentation layer. &nbsp;(This layer is also described as a <a href="http://martinfowler.com/eaaCatalog/serviceLayer.html">Service Layer</a> in Martin Fowler's <a href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420">PoEAA</a>.) &nbsp;For example, let's assume that your application integrates with a number of other applications. &nbsp;This layer would communicate with all of the other applications (preferably via interfaces), collating the information, and handing it off to the domain layer for performing domain logic on the data. &nbsp;As a simpler example, if your domain layer contains some kind of FinancialCalculator class, the tasks layer would gather the information needed by the calculator, from repositories or other sources, and pass the data via a method to FinancialCalculator.</p>
<p>As a secondary responsibility, the tasks layer returns data, as view-models, DTOs, or entities, to the presentation layer. &nbsp;For example, the presentation layer may need to show a listing of customers along with Create/Edit/Delete buttons if the logged in user has sufficient rights to do so. &nbsp;The tasks layer would get the listing of customers to show and would determine what security access the user has; it would then return a view model containing the customers listing along with a bool (or security object) describing if the user has rights to modify the data.</p>
<p>It's important to note the difference between the logic found within the tasks layer and that found within the domain layer. &nbsp;The tasks layer should contain minimal logic to coordinate activities among services (e.g., repositories, web services, etc.) and the domain layer (e.g., calculator services). &nbsp;Think of the tasks layer as an effective boss (does that exist?)...the boss helps to facilitate communications among the team and tells the team members what to do, but doesn't do the job itself.</p>
<p>The tasks layer contains two kinds of objects:</p>
<ul>
<li>Task Objects</li>
<li>View Models</li>
</ul>
<p><strong><i>Task Objects</i></strong></p>
<p>These are the tasks themselves. &nbsp;The most common kind of task is coordinating CUD logic (CRUD without the read). &nbsp;It's so common, in fact, that S#arp Lite projects includes a (completely customizable) BaseEntityCudTasks class to encapsulate this common need. &nbsp;Looking at the sample project, you can see how&nbsp;BaseEntityCudTasks&nbsp;is extended and used; e.g., within MyStore.Tasks.ProductMgmt.ProductCudTasks.</p>
<p>As the project grows, the task-layer responsibilities will inevitably grow as well. &nbsp;For example, on a current project which integrates with multiple external applications, a task class pulls schedule information from Primavera 6, cost information from Prism, and local data from the database via a repository. &nbsp;It then passes all of this information to a MasterReportGenerator class which resides in the domain. &nbsp;Accordingly, although the task class is non-trivial, it's simply pulling data from various sources, leaving it up to the domain to the heavy processing of the data.</p>
<p>It's important to note that a task object's service dependencies (repositories, web services, query interfaces, etc.) should be injected via <a href="/blogs/billy_mccafferty/archive/2009/11/09/dependency-injection-101.aspx">dependency injection</a>. &nbsp;This facilitates the ability to unit test the task objects with <a href="http://martinfowler.com/articles/mocksArentStubs.html">stubbed/mocked</a> services. &nbsp;With MVC 3, setting up dependency injection is very simple and makes defining your task objects dependencies a breeze:</p>
<pre name="code" class="c#">public ProductCategoryCudTasks(IRepository&lt;ProductCategory&gt; productCategoryRepository) : base(productCategoryRepository) {
    _productCategoryRepository = productCategoryRepository;
}</pre>
<p>Here we see that the&nbsp;<span>ProductCategoryCudTasks class requires a&nbsp;</span><span>IRepository&lt;ProductCategory&gt; injected into it, which will be provided at runtime by the IoC container or by you when unit testing.</span></p>
<p><strong><i>View Models</i></strong></p>
<p>A view model class encapsulates information to be shown to the user. &nbsp;It doesn't say <i>how</i>&nbsp;the data should be displayed, only <i>what</i>&nbsp;data should be displayed. &nbsp;Frequently, it'll also include supporting information for the presentation layer to then decide <i>how</i>&nbsp;the information is displayed; e.g., permissions information.</p>
<p>There's a lot of debate about where view model classes should reside. &nbsp;In my projects, I keep them in the tasks layer, with one ViewModels folder per namespace. &nbsp;But arguably, view model classes could live in a separate class library; that's for your team to decide at the beginning of a project.</p>
<hr />
<p><strong>MyStore.Web</strong></p>
<p>There's not much to say here. &nbsp;A S#arp Lite project uses all out-of-the-box MVC 3 functionality for the presentation layer, defaulting to Razor view engines, which you may change if preferred. &nbsp;The only S#arp Lite-isms (totally a word) in this layer are as follows:</p>
<ul>
<li>MyStore.Web.Global.asax invokes <code>DependencyResolverInitializer.Initialize();</code> to initialize the IoC container (discussed below),</li>
<li>MyStore.Web.Global.asax uses&nbsp;SharpModelBinder to act as the preferred form/model binder, and</li>
<li>Web.config includes an HttpModule to leverage a <a href="/blogs/nhibernate/archive/2011/03/03/effective-nhibernate-session-management-for-web-apps.aspx">session-per-request, NHibernate HTTP module</a>, found within the S#arp Lite source at \SharpLiteSrc\app\SharpLite.NHibernateProvider\Web\SessionPerRequestModule.cs.</li>
</ul>
<p>SharpModelBinder extends the basic form/model binding with capabilities to populate relationships. &nbsp;For example, suppose you have a Product class with a many:many relationship to ProductCategory. &nbsp;When editing the Product, the view could include a list of checkboxes for associating the product with one or more product categories. &nbsp;SharpModelBinder looks for such associations in the form and populates the relationships when posted to the controller; i.e., the Product which gets posted to the controller will have its ProductCategories populated, containing one ProductCategory for each checkbox that was checked. &nbsp;You can take a look at MyStore.Web/Areas/ProductMgmt/Views/Products/Edit.cshtml as an example.</p>
<p>Like task objects, controllers also accept dependencies via injection; e.g.&nbsp;MyStore.Web.Areas.ProductMgmt.Controllers.ProductsController.cs:</p>
<pre name="code" class="c#">public ProductsController(IRepository&lt;Product&gt; productRepository,
    ProductCudTasks productMgmtTasks, IQueryForProductOrderSummaries queryForProductOrderSummaries) {

    _productRepository = productRepository;
    _productMgmtTasks = productMgmtTasks;
    _queryForProductOrderSummaries = queryForProductOrderSummaries;
}</pre>
<p>In the example above, the controller requires an instance of&nbsp;<span>IRepository&lt;Product&gt;,&nbsp;</span><span>ProductCudTasks, and&nbsp;</span><span>IQueryForProductOrderSummaries passed to its constructor from the IoC container. &nbsp;</span>IQueryForProductOrderSummaries&nbsp;is an example of using a query interface, defined in the domain, for providing data-access layer specific needs. &nbsp;It's a very exceptive case and has only been included for illustrive purposes. &nbsp;You'd almost always be able to use specification and report query objects instead...or simply LINQ right off of&nbsp;IRepository&lt;Product&gt;.GetAll().</p>
<p>If you'd like to learn more about dependency injection in ASP.NET MVC 3, check out <a href="http://bradwilson.typepad.com/blog/2010/07/service-location-pt1-introduction.html">Brad Wilson's series of posts</a>&nbsp;on the subject. &nbsp;And for learning more about the basics of developing in the web layer, Steve Sanderson's <a href="http://www.amazon.com/Pro-ASP-NET-MVC-3-Framework/dp/1430234040/ref=sr_1_1?ie=UTF8&amp;qid=1321046999&amp;sr=8-1">Pro ASP.NET MVC 3 Framework</a>&nbsp;is a great read.</p>
<hr />
<h4><strong>MyStore.Init</strong></h4>
<p>This nearly anemic layer has one responsibility: &nbsp;perform generic, application initialization logic. &nbsp;Specifically, the initialization code included with a S#arp Lite project initializes the IoC container (<a href="http://structuremap.net/structuremap/">StructureMap</a>) and invokes the initialization of the NHibernate session factory. &nbsp;Arguably, this layer is so thin that its responsibilities could easily be subsumed by MyStore.Web. &nbsp;The great advantage to pulling the initialization code out into a separate class library is that MyStore.Web requires far fewer dependencies. &nbsp;Note that MyStore has no reference to NHibernate.dll nor to StructureMap.dll. &nbsp;Accordingly, there is very little coupling&nbsp;(i.e., none)&nbsp;to these dependencies from the web layer...we like that. &nbsp;Among other things, this prevents anyone from invoking an NHibernate-specific function from a controller. &nbsp;This, in turn, keeps the controllers very decoupled from the underlying data-access mechanism as well.</p>
<hr />
<h4>MyStore.NHibernateProvider</h4>
<p>The next stop on our tour of the layers of a S#arp Lite project is the NHibernate provider layer. &nbsp;With S#arp Architecture, this layer would frequently get quite sizable with custom repositories and named queries. &nbsp;With the alternative use of query objects and LINQ on IQueryable&lt;&gt;, this class library should remain very thin. &nbsp;This class library contains three kinds of objects:</p>
<ul>
<li>NHibernate Initializer,</li>
<li>NHibernate Conventions,</li>
<li>Mapping Overrides, and</li>
<li>(very&nbsp;occasionally) Query Implementations.</li>
</ul>
<p>Let's look at each in turn.</p>
<p><strong><i>NHibernate Initializer</i></strong></p>
<p>NHibernate 3.2.0 introduces a built-in fluent API for configuration and mapping classes, nicknamed&nbsp;<a href="/wikis/howtonh/a-fully-working-skeleton-for-sexy-loquacious-nh.aspx">NHibernate's "Loquacious" API</a>. &nbsp;This is a direct&nbsp;<a href="http://lostechies.com/jamesgregory/2011/04/13/me-on-nhibernate-3-2/">affront</a>&nbsp;to <a href="http://fluentnhibernate.org/">Fluent NHibernator</a> which (as much as I have truly loved it...a sincere thank you to James Gregory) I feel is headed for obsolescence with these capabilities now being built right in to NHibernate. &nbsp;NHibernate 3.2's Loquacious API isn't yet as powerful as Fluent NHibernate, but will get there soon as more of <a href="http://code.google.com/p/codeconform/">ConfORM</a> is ported over to Loquacious API. &nbsp;On with the show...</p>
<p>There is one NHibernate initialization class with a S#arp Lite project; e.g.,&nbsp;MyStore.NHibernateProvider.NHibernateInitializer.cs. &nbsp;This class sets the connection string (from web.config), sets the dialect, tells NHibernate where to find mapped classes, and invokes convention setup (discussed next). &nbsp;Initializing NHibernate is very expensive and should only be performed once when the application starts. &nbsp;Accordingly, take heed of this if you decide to switch out the IoC initialization code (in MyStore.Init) with another IoC container.</p>
<p><strong><i>NHibernate Conventions</i></strong></p>
<p>The beauty of conventions is that we no longer need to include a class mapping (HBM or otherwise) for mapping classes to the database. &nbsp;We simply define conventions, adhere to those conventions, and NHibernate knows which table/columns to go to for what. &nbsp;S#arp Lite projects come prepackaged with the following, <i>customizable</i> conventions:</p>
<ul>
<li>Table names are a plural form of the entity name. &nbsp;E.g., if the entity is Customer, the table is Customers.</li>
<li>Every entity has an Id property mapped to an "Id" identity column (which can easily be changed to HiLo, Guid, or otherwise).</li>
<li>Primitive type column names are the same name as the property. &nbsp;E.g., if the property is FirstName, the column name is FirstName.</li>
<li>Foreign keys (associations) are the name of the property suffixed with "Fk." &nbsp;E.g., if the property is Order.WhoPlacedOrder, the column name (in the Orders table) is WhoPlacedOrderFk with a foreign key to the respective type's table (e.g., Customers).</li>
</ul>
<p>There is typically just one convention-setup class in a S#arp Lite project; e.g., MyStore.NHibernateProvider.Conventions. &nbsp;The only convention that isn't supported "out of the box" is a many:many relationship, which we'll discuss more below.</p>
<p><strong><i>Mapping Overrides</i></strong></p>
<p>There are times when conventions don't hold up. &nbsp;Examples include:</p>
<ul>
<li>Many-to-many relationships,</li>
<li>Enum as a property type,&nbsp;</li>
<li>Legacy databases which don't stick to (your) conventions, and&nbsp;</li>
<li>Anytime a convention is not followed for one reason or another.</li>
</ul>
<p>On the upside, this isn't too many cases...but we need to be able to handle the exceptions. &nbsp;Any exceptions to the conventions are defined as "mapping overrides." &nbsp;Examples of overrides may be found in MyStore.NHibernateProvider/Overrides. &nbsp;To make things easy, if an override needs to be added, simply implement MyStore.NHibernateProvider.Overrides.IOverride and include your override code. &nbsp;The MyStore.NHibernateProvider.Conventions class looks through the assembly for any classes which implements IOverride and applies them in turn. &nbsp;As a rule, I create one override class for each respective entity which requires an override.</p>
<p><strong><i>Query Implementations</i></strong></p>
<p>Lastly, the .NHibernateProvider layer contains any NHibernate-specific queries, which are implementations of respective query interfaces defined in the .Domain layer. &nbsp;97.6831% of the time, this will not be necessary as querying via LINQ, off of IQueryable&lt;&gt;, is the preferred approach to querying. &nbsp;But in the rare case that you need to implement a query using NHibernate Criteria, HQL, or otherwise, this is the layer to house it. &nbsp;A sample has been included as&nbsp;MyStore.NHibernateProvider.Queries.QueryForProductOrderSummaries.</p>
<hr />
<h4>MyStore.Tests</h4>
<p>At the end of our tour of the layers of a S#arp Lite project is the .Tests layer. &nbsp;This layer holds all of the unit tests for the project. &nbsp;S#arp Lite projects are generated with two unit tests out of the box:</p>
<ul>
<li>MyStore.Tests.NHibernateProvider.MappingIntegrationTests.CanGenerateDatabaseSchema(): &nbsp;This unit tests initializes NHibernate and generates SQL to reflect those mappings. &nbsp;This is a great test to run to verify that a class is being mapped to the database as expected; i.e., you can look at the generated SQL (in the Text Output tab in NUnit) to verify how a class is being mapped. &nbsp;As a side-benefit, you can copy the generated SQL and run it to make modifications to the database. &nbsp;Finally, the unit tests saves the generated SQL into /app/MyStore.DB/Schema/UnitTestGeneratedSchema.sql for additional reference.</li>
<li>MyStore.Tests.NHibernateProvider.MappingIntegrationTests.CanConfirmDatabaseMatchesMappings(): &nbsp;This unit tests initializes NHibernate and verifies that every entity maps successfully to the database. &nbsp;If you have a missing column, this test will let you know. &nbsp;It doesn't test everything, such as many-to-many relationships, but certainly 97.6831% of everything else.</li>
</ul>
<p>For an introduction to test-driven development, read Kent Beck's&nbsp;<a href="http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530">Test Driven Development: By Example</a>. &nbsp;Going a step further, go with Gerard Meszaros' <a href="http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1321055197&amp;sr=1-1">xUnit Test Patterns</a> and Michael Feathers' <a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1321055177&amp;sr=1-1">Working Effectively with Legacy Code</a>.</p>
<p>In S#arp Architecture, SQLLite was used to provide an in-memory database for testing custom repository methods. &nbsp;Since custom repositories have been mostly relegated to&nbsp;obsolescence, keeping SQLLite testing built-in to S#arp Lite would have been overkill and has been removed to keep things simpler. &nbsp;(Besides, you can always look at the S#arp Architecture code for that functionality if needed.)</p>
<h2>What's in the S#arp Lite Libraries?</h2>
<p>Most of what's relevant in the S#arp Lite class libraries has already been discussed while going through the sample project, but let's take a moment to see what all is in the reusalbe, S#arp Lite class libraries.</p>
<h4>SharpLite.Domain</h4>
<p>This class library provides support for the domain layer of your S#arp Lite project.</p>
<ul>
<li>ComparableObject.cs: &nbsp;Provides robust, hash code generator for any object which inherits from it. &nbsp;(It's much trickier to implement than you think. ;)</li>
<li>DomainSignatureAttribute.cs: &nbsp;An attribute used to decorate properties which make up a class' domain signature.</li>
<li>EntityWithTypedId (defined in Entity.cs): &nbsp;Provides a (non-mandatory)&nbsp;generic&nbsp;base class for your entities, including an Id property and the inclusion of domain signature properties when comparing like objects. &nbsp;It takes a single, generic parameter declaring the type of the Id property; e.g., int or Guid.</li>
<li>Entity.cs: &nbsp;Provides an&nbsp;EntityWithTypedId base class with an Id assumed to be of type int.</li>
<li>IEntityWithTypedId.cs: &nbsp;Provides an interface which may be used to implement your own entity base class.</li>
<li>/DataInterfaces/IDbContext.cs: &nbsp;Exposes an interface for controlling transactions.</li>
<li>/DataInterfaces/IEntityDuplicateChecker.cs: &nbsp;Exposes an interface for checking if an entity is a duplicate of one already in the database.</li>
<li>/DataInterfaces/IRepository.cs: &nbsp;Exposes a very basic repository including Get, GetAll (returning IQueryable), SaveorUpdate, and Delete.</li>
<li>/Validators/HasUniqueDomainSignatureAttribute.cs: &nbsp;An attribute which may be used to decorate a class to ensure that duplicates do not exist in the database having the same domain signature.</li>
</ul>
<h4><strong>SharpLite.EntityFrameworkProvider</strong></h4>
<p>The idea of this library is to provide a pluggable replacement for the NHibernateProvider (discussed next), if the team so chooses. &nbsp;This library has not been fully developed yet. &nbsp;Let me know if you're interested in contributing with this effort.</p>
<h4><strong>SharpLite.NHibernateProvider</strong></h4>
<p>This infrastructural class library provides everything necessary for S#arp Lite projects to communicate with the database via NHibernate.</p>
<ul>
<li>DbContext.cs: &nbsp;Implements IDbContext for transaction management.</li>
<li>EntityDuplicateChecker.cs: &nbsp;Implements&nbsp;IEntityDuplicateChecker for checking for entity duplicates.</li>
<li>LazySessionContext.cs: &nbsp;Supports NHibernate open-session-in-view; <a href="/blogs/nhibernate/archive/2011/03/03/effective-nhibernate-session-management-for-web-apps.aspx">originally written by&nbsp;Jose Romaniello</a>.</li>
<li>Repository.cs: &nbsp;Provides a minimalist base repository...feel free to extend as needed.</li>
<li>/Web/SessionPerRequestModule.cs: &nbsp;Provides the HTTP module in support of NHibernate open-session-in-view.</li>
</ul>
<h4>SharpLite.Web</h4>
<p>This class library provides MVC-specific needs for S#arp Lite projects...which consists entirely of SharpModelBinder.cs. &nbsp;This may be viewed as completely optional for your use in S#arp Lite projects.</p>
<ul>
<li>/Mvc/ModelBinder/EntityCollectionValueBinder.cs: &nbsp;Used by SharpModelBinder for translating a collection of inputs from the form into a collection of entities bound to the containing object.</li>
<li>/Mvc/ModelBinder/EntityRetriever.cs: &nbsp;Used by SharpModelBinder related classes for retrieving an entity from the database without knowing which repository to use <i>a priori</i>.</li>
<li>/Mvc/ModelBinder/EntityValueBinder.cs: &nbsp;Used by SharpModelBinder for translating a drop-down selection into an entity association bound to the containing object.</li>
<li>/Mvc/ModelBinder/SharpModelBinder.cs: &nbsp;Extends the ASP.NET MVC model binder with additional capabilities for populating associations with entities from the database.</li>
</ul>
<p>&nbsp;</p>
<p>Well, that's it in a nutshell for now. &nbsp;I sincerely hope that S#arp Lite will prove helpful to you and your team in developing well-designed, maintainable ASP.NET MVC applications that scale well as the project evolves. &nbsp;This architectural framework reflects lessons learned from years of <span style="text-decoration: line-through;">experience</span> blood, sweat, &amp; tears and countless ideas shamelessly stolen from those much smarter than I.</p>
<p>Enjoy!<br />Billy McCafferty<br /><a href="http://devlicio.us/blogs/billy_mccafferty">http://devlicio.us/blogs/billy_mccafferty</a>&nbsp;</p>]]></content>
      <post-name type="text"><![CDATA[s arp lite the basics]]></post-name>
      <categories>
        <category ref="1174" />
      </categories>
      <trackbacks>
        <trackback id="1087" date-created="2014-09-23T07:11:57" date-modified="2014-09-23T07:11:57" approved="true" url="https://www.diigo.com/item/note/4tiho/hesi">
          <title type="text"><![CDATA[visit the following internet site]]></title>
        </trackback>
        <trackback id="1099" date-created="2014-09-27T02:19:11" date-modified="2014-09-27T02:19:11" approved="true" url="http://bmd-wiki.de/phpinfo.php?a%5B%5D=Video+-+%3Ca+href%3Dhttp%3A%2F%2Fwww.pulsaraviation.com%2Fwiki%2Findex.php%2FUser%3ABettyePowlett%3Eofficial+source%3C%2Fa%3E%2C">
          <title type="text"><![CDATA[click the following website]]></title>
        </trackback>
      </trackbacks>
      <authors>
        <author id="2182" date-created="2008-09-03T16:53:06" date-modified="2011-11-12T00:19:43" approved="true" email="nhforge@emccafferty.com">
          <title type="text"><![CDATA[bmccafferty]]></title>
        </author>
      </authors>
    </post>
    <post id="1005" date-created="2011-11-17T13:18:00" date-modified="2011-11-17T13:18:00" approved="true" post-url="/blogs/nhibernate/archive/2011/11/17/dynamic-linq-to-nhibernate.aspx" type="normal" hasexcerpt="false" views="29189">
      <title type="text"><![CDATA[Dynamic LINQ to NHibernate]]></title>
      <content type="text"><![CDATA[<p align="justify">Even if Linq To NHibernate provider allow us to write query in a strongly type manner, it is sometimes needed to works with property names literally. For example in a RIA application a service can receive a column as a string containing the name of the property to order by. Since Linq to <a href="http://nhforge.org" target="_blank">NHibernate</a> is a standard Linq provider, we can leverage a standard dynamic linq parser. This is achieved by using an old code by MS, known as <a href="http://weblogs.asp.net/scottgu/archive/2008/01/07/dynamic-linq-part-1-using-the-linq-dynamic-query-library.aspx">System.Linq.Dynamic</a>. By following the link you will find a <a href="http://msdn.microsoft.com/en-us/vstudio/bb894665.aspx">download location</a> that point to an almost just a sample project that eventually contains the file <a href="https://raw.github.com/gist/1372806/f22488235a328af162f94de83b34bfe68f5975ce/Dynamic.cs">Dynamic.cs</a> that contains some extension method allowing to merge literal parts in a type safe linq query.</p>
<p align="justify">Let&rsquo;see an example:</p>
<pre class="code"><span style="color: blue">var </span>elist = session.Query&lt;<span style="color: #2b91af">MyEntity</span>&gt;()
              <b>.OrderBy(&ldquo;Name descending&rdquo;)</b>
              .Skip(first)
              .Take(count)
              .ToList();</pre>
<p align="justify">I supposed we have a property called Name on the class MyEntity. The OrderBy taking a string as a parameter is an extension method provided by <a href="https://raw.github.com/gist/1372806/f22488235a328af162f94de83b34bfe68f5975ce/Dynamic.cs">Dynamic.cs</a>, and in order to have it working you just need to merge the file <b>dynamic.cs</b> in your project and import <b>System.Linq.Dynamic</b>. Of course you will have extension for Where and for other linq operators too.</p>
<p>( <a href="http://www.felicepollano.com/">cross post from my blog</a> )</p>]]></content>
      <post-name type="text"><![CDATA[dynamic linq to nhibernate]]></post-name>
      <categories>
        <category ref="1130" />
      </categories>
      <comments>
        <comment id="1007" date-created="2011-12-03T01:17:25" date-modified="2011-12-03T01:17:25" approved="true" user-name="wjkhappy14" user-url="http://nhforge.org/members/wjkhappy14/default.aspx">
          <title type="text"><![CDATA[re: Dynamic LINQ to NHibernate]]></title>
          <content type="text"><![CDATA[It is very good]]></content>
        </comment>
      </comments>
      <authors>
        <author id="4311" date-created="2009-10-17T15:44:37" date-modified="2012-04-20T14:27:32" approved="true" email="felice@felicepollano.com">
          <title type="text"><![CDATA[felicepollano]]></title>
        </author>
      </authors>
    </post>
  </posts>
</blog>