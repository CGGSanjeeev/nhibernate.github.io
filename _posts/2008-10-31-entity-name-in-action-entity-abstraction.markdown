---
layout: post
title: "entity-name in action: Entity Abstraction"
date: 2008-10-31 22:53:00 +1300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["NH2.1", "Entity-Name", "Inversion of Control"]
alias: ["/blogs/nhibernate/archive/2008/10/31/entity-name-in-action-entity-abstraction.aspx"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p><a href="http://fabiomaulo.blogspot.com/2008/10/less-than-few-is-gof.html">Another time</a> I start from :</p>
<p><strong><span style="font-size: 130%; color: #000080; font-family: t">&ldquo;Program to an interface and not to an implementation&rdquo;</span></strong></p>
<p>I want have the same approach, I&rsquo;m using for DAOs, Models, Presenters, Validation, and so on, for my domain.</p>
<p>The domain:</p>
<pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IEntity</span>&lt;TIdentity&gt;: <span style="color: #2b91af">IEquatable</span>&lt;<span style="color: #2b91af">IEntity</span>&lt;TIdentity&gt;&gt;<br />{<br />  TIdentity Id { <span style="color: blue">get</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IAnimal </span>: <span style="color: #2b91af">IEntity</span>&lt;<span style="color: blue">int</span>&gt;<br />{<br />  <span style="color: blue">string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IReptile </span>: <span style="color: #2b91af">IAnimal<br /></span>{<br />  <span style="color: blue">float </span>BodyTemperature { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IHuman </span>: <span style="color: #2b91af">IAnimal<br /></span>{<br />  <span style="color: blue">string </span>Name { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">string </span>NickName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: #2b91af">DateTime </span>Birthdate { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}<br /><br /><span style="color: blue">public interface </span><span style="color: #2b91af">IFamily</span>&lt;T&gt; : <span style="color: #2b91af">IEntity</span>&lt;<span style="color: blue">int</span>&gt; <span style="color: blue">where </span>T : <span style="color: #2b91af">IAnimal<br /></span>{<br />  T Father { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  T Mother { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: #2b91af">ISet</span>&lt;T&gt; Childs { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />}</pre>
<p>Because I&rsquo;m going to work with interfaces I will need a sort of factory to have transient-instances of my entities. For this example I&rsquo;m going to use something simple and more &ldquo;general purpose&rdquo;; a class resolver:</p>
<pre class="code"><span style="color: blue">public interface </span><span style="color: #2b91af">IClassResolver </span>: <span style="color: #2b91af">IDisposable<br /></span>{<br />  T Resolve&lt;T&gt;() <span style="color: blue">where </span>T : <span style="color: blue">class</span>;<br />  T Resolve&lt;T&gt;(<span style="color: blue">string </span>service) <span style="color: blue">where </span>T : <span style="color: blue">class</span>;<br />}</pre>
<p>The responsibility of the <span style="color: #2b91af">IClassResolver</span> implementor is return an instance for a given <span style="color: #2b91af">Type</span> where the <span style="color: #2b91af">Type</span> is an interface (well&hellip; in general is an interface). The concrete implementation of a <span style="color: #2b91af">IClassResolver</span> will be injected using some <a href="http://en.wikipedia.org/wiki/Inversion_of_control">IoC</a> framework but for this post I will use a simple static exposer:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">DI<br /></span>{<br />  <span style="color: blue">private static </span><span style="color: #2b91af">IClassResolver </span>resolver;<br />  <span style="color: blue">private </span>DI() {}<br /><br />  <span style="color: blue">public static </span><span style="color: #2b91af">IClassResolver </span>Resolver<br />  {<br />      <span style="color: blue">get<br />      </span>{<br />          <span style="color: blue">if </span>(resolver == <span style="color: blue">null</span>)<br />          {<br />              <span style="color: blue">throw new </span><span style="color: #2b91af">InvalidOperationException</span>(<span style="color: #a31515">"Resolver was not initialized. Use StackResolver."</span>);<br />          }<br /><br />          <span style="color: blue">return </span>resolver;<br />      }<br />  }<br /><br />  <span style="color: blue">public static void </span>StackResolver(<span style="color: #2b91af">IClassResolver </span>dependencyResolver)<br />  {<br />      resolver = dependencyResolver;<br />  }<br />}</pre>
<p>As you can see nothing so complicated.</p>
<p>Now I have all needed to write a test for my domain:</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>DomainAbstraction()<br />{<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>rf = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rf.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rm = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rm.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rc1 = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rc1.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rc2 = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IReptile</span>&gt;();<br />      rc2.Description = <span style="color: #a31515">"Crocodile"</span>;<br /><br />      <span style="color: blue">var </span>rfamily = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IReptile</span>&gt;&gt;();<br />      rfamily.Father = rf;<br />      rfamily.Mother = rm;<br />      rfamily.Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">IReptile</span>&gt; { rc1, rc2 };<br /><br />      s.Save(rfamily);<br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>hf = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IHuman</span>&gt;();<br />      hf.Description = <span style="color: #a31515">"Flinstone"</span>;<br />      hf.Name = <span style="color: #a31515">"Fred"</span>;<br /><br />      <span style="color: blue">var </span>hm = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IHuman</span>&gt;();<br />      hm.Description = <span style="color: #a31515">"Flinstone"</span>;<br />      hm.Name = <span style="color: #a31515">"Wilma"</span>;<br /><br />      <span style="color: blue">var </span>hc1 = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IHuman</span>&gt;();<br />      hc1.Description = <span style="color: #a31515">"Flinstone"</span>;<br />      hc1.Name = <span style="color: #a31515">"Pebbles"</span>;<br /><br />      <span style="color: blue">var </span>hfamily = <span style="color: #2b91af">DI</span>.Resolver.Resolve&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IHuman</span>&gt;&gt;();<br />      hfamily.Father = hf;<br />      hfamily.Mother = hm;<br />      hfamily.Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">IHuman</span>&gt; { hc1 };<br /><br />      s.Save(hfamily);<br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      <span style="color: blue">var </span>hf = s.CreateQuery(<span style="color: #a31515">"from HumanFamily"</span>).List&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IHuman</span>&gt;&gt;();<br />    <br />      <span style="color: #2b91af">Assert</span>.That(hf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />      <span style="color: #2b91af">Assert</span>.That(hf[0].Father.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Fred"</span>));<br />      <span style="color: #2b91af">Assert</span>.That(hf[0].Mother.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Wilma"</span>));<br />      <span style="color: #2b91af">Assert</span>.That(hf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br /><br />      <span style="color: blue">var </span>rf = s.CreateQuery(<span style="color: #a31515">"from ReptilesFamily"</span>).List&lt;<span style="color: #2b91af">IFamily</span>&lt;<span style="color: #2b91af">IReptile</span>&gt;&gt;();<br /><br />      <span style="color: #2b91af">Assert</span>.That(rf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />      <span style="color: #2b91af">Assert</span>.That(rf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(2));<br /><br />      tx.Commit();<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />  {<br />      s.Delete(<span style="color: #a31515">"from HumanFamily"</span>);<br />      s.Delete(<span style="color: #a31515">"from ReptilesFamily"</span>);<br />      tx.Commit();<br />  }<br />}</pre>
<p><strong><span style="color: #004080">Note</span>: s.Save(hfamily)</strong> &lt;&lt;=== there isn&rsquo;t a string for the <em>entity-name</em>; <span style="text-decoration: underline;">now NH are supporting it</span>.</p>
<p>As you can see the users of my domain (the test in this case), are working only using interfaces; there isn&rsquo;t a reference to a concrete implementation of my domain. The concrete implementation of the domain is trivial and you can see it downloading the code. The main thing you will notice, in the implementation, is the <span style="text-decoration: underline;">absence</span> of the <span style="color: #0000ff; font-family: courier new">virtual</span> modifier.</p>
<h3>Wiring&hellip;</h3>
<p>To wire the interface, with its concrete implementation, I want use NHibernate. The mapping is similar to the <a href="http://fabiomaulo.blogspot.com/2008/10/power-of-orm.html">previous</a>:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<br />                 <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Impl</span>"<br />                 <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Impl.Naturalness</span>"<br />                 <span style="color: red">default-access</span><span style="color: blue">=</span>"<span style="color: blue">backfield</span>"<span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyAnimal</span>" <span style="color: red">abstract</span><span style="color: blue">=</span>"<span style="color: blue">true</span>"<br />         <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IAnimal, EntityNameInAction.Abstraction.Entities</span>"<br />         <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>" <span style="color: red">access</span><span style="color: blue">=</span>"<span style="color: blue">field</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">discriminator </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">kind</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyHuman</span>"<br />               <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IHuman, EntityNameInAction.Abstraction.Entities</span>"<br />               <span style="color: red">extends</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<br />               <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">NickName</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Birthdate</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Date</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">subclass</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyReptile</span>"<br />               <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IReptile, EntityNameInAction.Abstraction.Entities</span>"<br />               <span style="color: red">extends</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<br />               <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">BodyTemperature</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">subclass</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IReptile, EntityNameInAction.Abstraction.Entities]]</span>"<br />         <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IReptile, EntityNameInAction.Abstraction.Entities]], EntityNameInAction.Abstraction.Entities</span>"<br />         <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">Families</span>" <span style="color: red">discriminator-value</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>" <span style="color: red">where</span><span style="color: blue">=</span>"<span style="color: blue">familyKind = 'Reptile'</span>"<br />         <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">ReptilesFamily</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>" <span style="color: red">access</span><span style="color: blue">=</span>"<span style="color: blue">field</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">discriminator </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyKind</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />  &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IHuman, EntityNameInAction.Abstraction.Entities]]</span>"<br />         <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction.Abstraction.Entities.Naturalness.IFamily`1[[EntityNameInAction.Abstraction.Entities.Naturalness.IHuman, EntityNameInAction.Abstraction.Entities]], EntityNameInAction.Abstraction.Entities</span>"<br />         <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">Families</span>" <span style="color: red">discriminator-value</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>" <span style="color: red">where</span><span style="color: blue">=</span>"<span style="color: blue">familyKind = 'Human'</span>"<br />         <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">HumanFamily</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>" <span style="color: red">access</span><span style="color: blue">=</span>"<span style="color: blue">field</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">discriminator </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyKind</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-mapping</span><span style="color: blue">&gt;</span></pre>
<h4>Mapping highlight</h4>
<ul>
<br />
<li><span style="color: #800000">class</span>/<span style="color: #800000">subclass</span> name: are my concrete classes (implementors of domain) </li>
<li><span style="color: #ff0000">proxy</span> : is the interface (the domain); using it as proxy I can <strong>avoid</strong> <span style="color: #0000ff; font-family: courier new">virtual</span> methods in the implementation because the underlining Dynamic-Proxy will inherit from the interface. Using interface I have many others vantages but is to long explain each (only one for example: I can cast a proxy-instance to an interface) </li>
<li><span style="color: #ff0000">entity-name</span> :&nbsp; is the name I will use for persistence and represent <span style="text-decoration: underline;">another abstraction-level</span>. For persistence stuff I can use a &ldquo;<em>conceptual-name</em>&rdquo; of the entity without take care about its representation in C#. As you can see the entity-name are playing on each association/aggregation/<span style="color: #ff0000">extends</span>; not the concrete class nor the interface. </li>
<li>As in <a href="http://fabiomaulo.blogspot.com/2008/10/power-of-orm.html">this post</a> the domain is represented in two tables. </li>
</ul>
<h4>Class Resolver</h4>
<p>In the implementation of <span style="color: #2b91af; font-family: courier new">IClassResolver</span> I&rsquo;m going to use the NHibernate&rsquo;s mapping to wire the interface of the domain (ex: <span style="color: #2b91af; font-family: courier new">IHuman</span>) to its concrete class (ex: <span style="color: #2b91af; font-family: courier new">MyHuman</span>) trough the entity-name. Is it not clear ? ok perhaps the code will be more clear</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">NhEntityClassResolver </span>: <span style="color: #2b91af">IClassResolver<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">Dictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: blue">string</span>&gt; serviceToEntityName = <span style="color: blue">new </span><span style="color: #2b91af">Dictionary</span>&lt;<span style="color: #2b91af">Type</span>, <span style="color: blue">string</span>&gt;();<br />  <span style="color: blue">public </span>NhEntityClassResolver(<span style="color: #2b91af">ISessionFactoryImplementor </span>factory)<br />  {<br />      <span style="color: blue">if</span>(factory == <span style="color: blue">null</span>)<br />      {<br />          <span style="color: blue">throw new </span><span style="color: #2b91af">ArgumentNullException</span>(<span style="color: #a31515">"factory"</span>);<br />      }<br />      Factory = factory;<br />      InitializeTypedPersisters();<br />  }<br /><br />  <span style="color: blue">private void </span>InitializeTypedPersisters()<br />  {<br />      <span style="color: blue">foreach </span>(<span style="color: blue">var </span>entityName <span style="color: blue">in </span>Factory.GetAllClassMetadata().Keys)<br />      {<br />          serviceToEntityName<br />              .Add(Factory.GetEntityPersister(entityName)<br />                  .GetConcreteProxyClass(<span style="color: #2b91af">EntityMode</span>.Poco), entityName);<br />      }<br />  }<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">ISessionFactoryImplementor </span>Factory { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br /><br />  <span style="color: blue">#region </span>Implementation of IDisposable<br /><br />  <span style="color: blue">public void </span>Dispose()<br />  {<br />  }<br /><br />  <span style="color: blue">#endregion<br /><br />  #region </span>Implementation of IClassResolver<br /><br />  <span style="color: blue">public </span>T Resolve&lt;T&gt;() <span style="color: blue">where </span>T : <span style="color: blue">class<br />  </span>{<br />      <span style="color: blue">string </span>entityName;<br />      <span style="color: blue">if</span>(serviceToEntityName.TryGetValue(<span style="color: blue">typeof</span>(T), <span style="color: blue">out </span>entityName))<br />      {<br />          <span style="color: blue">return </span>Resolve&lt;T&gt;(entityName);<br />      }<br />      <span style="color: blue">return null</span>;<br />  }<br /><br />  <span style="color: blue">public </span>T Resolve&lt;T&gt;(<span style="color: blue">string </span>service) <span style="color: blue">where </span>T: <span style="color: blue">class<br />  </span>{<br />      <span style="color: blue">return </span>Factory.GetEntityPersister(service).Instantiate(<span style="color: blue">null</span>, <span style="color: #2b91af">EntityMode</span>.Poco) <span style="color: blue">as </span>T;<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>The <span style="color: #2b91af; font-family: courier new">ISessionFactoryImplementor</span> is one of the interfaces implemented by the NH <a href="/wikis/reference2-0en/architecture.aspx">SessionFactory</a>. The method <span style="font-family: courier new">Resolve&lt;T&gt;(string)</span> are using the parameter <span style="font-family: courier new">service</span> as the entity-name. The hard-work is done by the method <span style="font-family: courier new">InitializeTypedPersisters</span>; what I&rsquo;m doing there is map each interface with its entity-name&hellip; nothing more.</p>
<h3>Conclusions</h3>
<p><strong>&ldquo;Program to an interface and not to an implementation&rdquo;</strong> is really wonderful.</p>
<p><span style="font-size: 130%">Do you really have some doubt about how NHibernate implements &ldquo;Persistence ignorance&rdquo; ?</span></p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/EntityNameInAction.Abstraction">here</a>.</p>
