---
layout: post
title: "Less than GoF is hbm"
date: 2008-10-16 17:30:00 +1300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["NHibernate", "Dynamic-Map", "Entity-Name", "EntityMode"]
redirect_from: ["/blogs/nhibernate/archive/2008/10/16/less-than-gof-is-hbm.aspx"]
author: fabiomaulo
gravatar: cd6db202ce94ed7e5f1fde30e702dc7f
---
{% include imported_disclaimer.html %}
<p>In <a href="/blogs/nhibernate/archive/2008/10/12/less-than-few-is-gof.aspx">Less than &ldquo;Few&rdquo; is GoF</a> I show how have a single implementation for the whole domain entities using <strong>Tuplizers</strong>.</p>
<p>In this post I will show another NH2.1 feature : <strong><span style="color: #0080ff">EntityMode</span>.Map</strong></p>
<p>Suppose you want prototype the persistence of your application; you don&rsquo;t want write any entity-interface nor any entity-implementation.</p>
<p>Suppose you want test the <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>, in the strictly meaning of the anachronism, to a legacy data base; you don&rsquo;t want write any entity-interface nor any entity-implementation.</p>
<p>Suppose a company send you some NH-mappings-files, to optimize data access, but they don&rsquo;t want send you their implementation; you don&rsquo;t have the implementation.</p>
<p>To prototype a entirely system there are various tools; one of these is <a href="http://www.codeplex.com/ajgenesis">AjGenesis</a> and it&rsquo;s IDE <a href="http://www.codeplex.com/ajgenesisstudio">AjGenesisStudio</a>. AjGenesis is a CodeGenerator that use an XML source (at the end, who are using only the designer for WebForm or WPF ? ). In practices AjGenesis start from a conceptual model written in XML, and NOT from a DB model, to generate your system. </p>
<p>As I can do with AjGenesis (explain how it work is not a target of this post), I&rsquo;m going to prototype, a little system, using an XML:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">ProductLine</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">length</span><span style="color: blue">=</span>"<span style="color: blue">200</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">string</span>"<span style="color: blue">/&gt;<br /><br />   &lt;</span><span style="color: #a31515">bag </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Models</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>" <span style="color: red">inverse</span><span style="color: blue">=</span>"<span style="color: blue">true</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">productId</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Model</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">bag</span><span style="color: blue">&gt;<br /><br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;</span><span style="color: #a31515">class </span><span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">Model</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">int</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br /><br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">length</span><span style="color: blue">=</span>"<span style="color: blue">25</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">string</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">length</span><span style="color: blue">=</span>"<span style="color: blue">200</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">string</span>"<span style="color: blue">/&gt;<br />   &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">ProductLine</span>" <span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">productId</span>" <span style="color: red">not-null</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">ProductLine</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<br />Do you are seeing something familiar ? 
</p>
<p>Yes! it is only a NHibernate2.1 mapping file. 
  </p>
<p>How I can write a persistence-test without write a single class ? well&hellip; with my hands, VisualStudio, NUnit and&hellip; of course our dear <strong>NHibernate</strong>. 
  </p>
<p>The configuration:</p>
<p>
[<span style="color: #2b91af">TestFixtureSetUp</span>] 
</p>
<pre class="code"><span style="color: blue">public void </span>TestFixtureSetUp()<br />{<br />   cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();<br />   cfg.Configure();<br />   cfg.AddResource(<span style="color: #a31515">"LessThanGoF.Prototype.ProductLine.hbm.xml"</span>, <span style="color: blue">typeof </span>(<span style="color: #2b91af">PrototypeSystemFixture</span>).Assembly);<br />   <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(cfg).Create(<span style="color: blue">false</span>, <span style="color: blue">true</span>);<br /><br />   cfg.SetProperty(<span style="color: #a31515">"default_entity_mode"</span>, <span style="color: #2b91af">EntityModeHelper</span>.ToString(<span style="color: #2b91af">EntityMode</span>.Map));<br /><br />   sessions = (<span style="color: #2b91af">ISessionFactoryImplementor</span>) cfg.BuildSessionFactory();<br />}</pre>
<p>
The line to pay attention is the set of <span style="color: #a31515">"default_entity_mode"</span>. If you paid attention in the mappings of the previous <a href="http://fabiomaulo.blogspot.com/2008/10/less-than-few-is-gof.html">post</a> you sure noted <span style="color: #ff0000"><strong>entity-mode</strong></span><span style="color: #0000ff"><strong>="poco"</strong><span style="color: #000000">. The <strong><span style="color: #0080ff">EntityMode</span>.Poco</strong> is the <span style="color: #0080ff">EntityMode</span> you are using until today. The <strong><span style="color: #0080ff">EntityMode</span>.Map</strong> is not something new; if you are using </span></span><a href="/doc/nh/en/index.html#mapping-declaration-component"><span style="color: #ff0000">dynamic-component</span></a>, even in NH2.0, you are using part of the implementation of <strong><span style="color: #0080ff">EntityMode</span>.Map</strong>.</p>
<div>The <span style="color: #0080ff">EntityMode</span> work together with <strong>Tuplizers</strong>. In practice the tuplizer defines the way on how transform a <em>Property-Value</em> to it&rsquo;s persistent representation, and viceversa a <em>Column-Value</em> to it&rsquo;s in-memory representation, and the <span style="color: #0080ff">EntityMode</span> defines which tuplizer is in use (I have simplified the &ldquo;definition&rdquo; of tuplizer).</div>
<p>
<br />In NH2.1 each entity may have tree representations: 
</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/POCO">POCO</a> 
    <br /></li>
<li>Dynamic-Map (aka Dictionary&lt;PropertyName, PropertyValue&gt;) 
    <br /></li>
<li>Xml (Not implemented yet) 
    <br /></li>
</ul>
<p>
And now the test 
</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>DynamicClasses()<br />{<br />   <span style="color: #2b91af">IDictionary </span>cars;<br />   <span style="color: #2b91af">IList </span>models;<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   {<br />       <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>t = s.BeginTransaction())<br />       {<br />           cars = <span style="color: blue">new </span><span style="color: #2b91af">Hashtable</span>();<br />           cars[<span style="color: #a31515">"Description"</span>] = <span style="color: #a31515">"Cars"</span>;<br /><br />           <span style="color: #2b91af">IDictionary </span>ferrari = <span style="color: blue">new </span><span style="color: #2b91af">Hashtable</span>();<br />           ferrari[<span style="color: #a31515">"ProductLine"</span>] = cars;<br />           ferrari[<span style="color: #a31515">"Name"</span>] = <span style="color: #a31515">"Dino"</span>;<br />           ferrari[<span style="color: #a31515">"Description"</span>] = <span style="color: #a31515">"Ferrari Dino."</span>;<br /><br />           <span style="color: #2b91af">IDictionary </span>lamborghini = <span style="color: blue">new </span><span style="color: #2b91af">Hashtable</span>();<br />           lamborghini[<span style="color: #a31515">"ProductLine"</span>] = cars;<br />           lamborghini[<span style="color: #a31515">"Name"</span>] = <span style="color: #a31515">"Countach"</span>;<br />           lamborghini[<span style="color: #a31515">"Description"</span>] = <span style="color: #a31515">"Lamborghini Countach"</span>;<br /><br />           models = <span style="color: blue">new </span><span style="color: #2b91af">List</span>&lt;<span style="color: #2b91af">IDictionary</span>&gt; {ferrari, lamborghini};<br /><br />           cars[<span style="color: #a31515">"Models"</span>] = models;<br /><br />           s.Save(<span style="color: #a31515">"ProductLine"</span>, cars);<br />           t.Commit();<br />       }<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   {<br />       <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>t = s.BeginTransaction())<br />       {<br />           cars = (<span style="color: #2b91af">IDictionary</span>) s.CreateQuery(<span style="color: #a31515">"from ProductLine pl order by pl.Description"</span>).UniqueResult();<br />           models = (<span style="color: #2b91af">IList</span>) cars[<span style="color: #a31515">"Models"</span>];<br /><br />           <span style="color: #2b91af">Assert</span>.That(models.Count == 2);<br /><br />           s.Clear();<br /><br />           <span style="color: #2b91af">IList </span>list = s.CreateQuery(<span style="color: #a31515">"from Model m"</span>).List();<br />           <span style="color: blue">var </span>model = (<span style="color: #2b91af">IDictionary</span>) list[0];<br /><br />           <span style="color: #2b91af">Assert</span>.That(((<span style="color: #2b91af">IList</span>) ((<span style="color: #2b91af">IDictionary</span>) model[<span style="color: #a31515">"ProductLine"</span>])[<span style="color: #a31515">"Models"</span>]).Contains(model));<br /><br />           s.Clear();<br />           t.Commit();<br />       }<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   {<br />       <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>t = s.BeginTransaction())<br />       {<br />           cars = (<span style="color: #2b91af">IDictionary</span>) s.CreateQuery(<span style="color: #a31515">"from ProductLine pl order by pl.Description"</span>).UniqueResult();<br />           s.Delete(cars);<br />           t.Commit();<br />       }<br />   }<br />}</pre>
<p>
Take a look to <span style="font-family: courier new">s.Save(<span style="color: #006080">"ProductLine"</span>, cars);</span> the first parameter is the <span style="color: #ff0000">entity-name</span> I had used in the mapping, the second is the instance. 
</p>
<p>As you can see, I have wrote a complete persistence test without write a single entity-interface nor entity-implementation. All NH-session-API are working as expected, <em>lazy-loading</em> are working as expected and if you activate <em>NHibernate.SQL</em> logging you can see that all are working in the same way than when you have entities implemented. 
  </p>
<p><strong>End of the story!</strong> 
  </p>
<p>&hellip;&hellip; wait&hellip; wait&hellip;</p>
<p>let me wire some thoughts&hellip; 
  </p>
<ul>
<li>The <span style="color: #ff0000">entity-name</span> is a conceptual representation of an entity definition, I can use the <span style="color: #ff0000">entity-name</span> to work with NH without take care if the entity is represented by an interface, a class or a class with some generic type definition&hellip; 
    <br /></li>
<li>With NHibernate an entity have tree possible representations&hellip; 
    <br /></li>
<li>In this post I have a <span style="color: #0080ff">Dictionary</span>&lt;PropertyName, PropertyValue&gt; to represent the state of an entity&hellip; but in the <a href="/blogs/nhibernate/archive/2008/10/12/less-than-few-is-gof.aspx">previous post</a> I have the same representation in the <em>DataProxy</em>&hellip; 
    <br /></li>
<li><span style="color: #0080ff">Dictionary</span>&lt;K, V&gt; is serializable and if I join it with a string, to hold the entityName, I may have a generic <span style="color: #0080ff">DataContract</span><span style="color: #000000"> to send my entity state&hellip;</span> 
    <br /></li>
</ul>
<p>Material for some others posts. 
  </p>
<p><strong>To be continued&hellip;</strong></p>
