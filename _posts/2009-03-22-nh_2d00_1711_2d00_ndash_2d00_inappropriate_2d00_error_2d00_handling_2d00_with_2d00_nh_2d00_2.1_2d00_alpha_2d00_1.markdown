---
layout: post
title: "NH-1711 – Inappropriate error handling with NH 2.1 Alpha 1 when distributed transaction fails can cause application crashes"
date: 2009-03-22 14:23:22 +1300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["bugs"]
alias: ["/blogs/nhibernate/archive/2009/03/22/nh_2D00_1711_2D00_ndash_2D00_inappropriate_2D00_error_2D00_handling_2D00_with_2D00_nh_2D00_2.1_2D00_alpha_2D00_1.aspx", "/blogs/nhibernate/archive/2009/03/22/nh_2d00_1711_2d00_ndash_2d00_inappropriate_2d00_error_2d00_handling_2d00_with_2d00_nh_2d00_2.1_2d00_alpha_2d00_1.aspx"]
author: Ayende
gravatar: 730a9f9186e14b8da5a4e453aca2adfe
---
{% include imported_disclaimer.html %}
<p>The <a href="http://nhjira.koah.net/browse/NH-1711">actual problem</a> <em>has been fixed</em> and it will be part of NH 2.1 Alpha 2. That is why we call them alphas, after all :-)</p>  <p>The actual bug is pretty convulsed mess, to be frank. And it is no wonder that it slipped by me. Yes, I am the one responsible for that, so I guess I am making excuses. Let me tell you about the actual scenario. When you are using NHibernate 2.1 Alpha 1 (it does <em>not</em> affect NHibernate 2.0 or 2.0.1) with a System.Transaction.Transaction, there is a slightly different code path that we have to go through, because the actual work that has to be done is no longer controlled by NHibernate, but by the DTC infrastructure.</p>  <p>So far, so good. The problem is that <em>most</em> of the time, this is done on the same thread as the application that we are running on. There are cases, specifically, when using a DTC with multiple durable enlistments, that the actual work is done on a worker thread. The problem is that if there is an error during <em>that</em> phase, for example, if we are trying to execute invalid command, or run into transaction deadlock, NHibernate wouldn’t properly handle this error, and it would bubble up. The result of unhandled thread exception is, of course, an application crash.</p>  <p>That is considered to be a bad thing, I understand, so after being able to isolate the problem, I went ahead and fix this. You can get the trunk now and get the fix, or wait until Alpha 2 is released.</p>  <p><strong>Who is impacted by this? </strong></p>  <p>You have to use multiple different durable enlistments inside a distributed transaction for the error condition to even be applicable. The problem is that there is one very common scenario that will run into this every single time. The .NET Service Buses all wrap their processing in a TransactionScope, and then tend to have multiple durable enlistments (the DB and MSMQ). This means that if you are using NServiceBus, Rhino ServiceBus or MassTransit alongside with NHibernate 2.1 Alpha1, you are probably impacted by this issue.</p>  <p>As I mentioned, a fix has already been committed (r4149) and it will be part of NHibernate 2.1 Alpah2.</p>
