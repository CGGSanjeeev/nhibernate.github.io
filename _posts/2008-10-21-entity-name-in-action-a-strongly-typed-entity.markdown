---
layout: post
title: "entity-name in action: a strongly typed entity"
date: 2008-10-21 13:18:00 -0300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["NHibernate", "NH2.1", "Entity-Name", "auto propeties", "backfield"]
alias: ["/blogs/nhibernate/archive/2008/10/21/entity-name-in-action-a-strongly-typed-entity.aspx"]
author: fabiomaulo
gravatar: cd6db202ce94ed7e5f1fde30e702dc7f
---
{% include imported_disclaimer.html %}
<p>(<a href="http://www.fabiomaulo.blogspot.com/">my blog</a>)</p>
<p>The <span style="color: #ff0000">entity-name</span> is another powerful feature of NH2.1.</p>
<p>Part of the implementation was introduced in NH2.0 but it was not fully implemented even if it are working "under the cover" (if you read the SVN-log you saw <em>&ldquo;one more step to entity-name&rdquo;</em> many and many times).</p>
<p>As usual I start from domain:</p>
<pre class="code"><span style="color: blue">namespace </span>EntityNameInAction<br />{<br />   <span style="color: blue">public abstract class </span><span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br />       <span style="color: blue">public virtual string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br /><br />   <span style="color: blue">public class </span><span style="color: #2b91af">Reptile</span>: <span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual float </span>BodyTemperature { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br /><br />   <span style="color: blue">public class </span><span style="color: #2b91af">Human </span>: <span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual string </span>Name { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual string </span>NickName { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual </span><span style="color: #2b91af">DateTime </span>Birthdate { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br /><br />   <span style="color: blue">public class </span><span style="color: #2b91af">Family</span>&lt;T&gt; <span style="color: blue">where </span>T: <span style="color: #2b91af">Animal<br />   </span>{<br />       <span style="color: blue">public virtual int </span>Id { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }<br />       <span style="color: blue">public virtual </span>T Father { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual </span>T Mother { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />       <span style="color: blue">public virtual </span><span style="color: #2b91af">ISet</span>&lt;T&gt; Childs { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />   }<br />}</pre>
<p>In the DB representation I want each Animal in a different table so I&rsquo;m going to have tree different tables. At this point only one table for all &ldquo;kinds&rdquo; of Family is not enough basically because I can&rsquo;t have a ForeignKey pointing to two tables. What I need is a table for each strongly typed Family. The way to do it, using <strong>NHibernate</strong>, is the new tag: <strong><span style="color: #ff0000">entity-name</span></strong></p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-mapping </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-mapping-2.2</span>"<br />                  <span style="color: red">assembly</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction</span>"<br />                  <span style="color: red">namespace</span><span style="color: blue">=</span>"<span style="color: blue">EntityNameInAction</span>"<br />                  <span style="color: red">default-access</span><span style="color: blue">=</span>"<span style="color: blue">backfield</span>"<span style="color: blue">&gt;<br />  <br />   &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Animal</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />      <br />       &lt;</span><span style="color: #a31515">joined-subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">animalId</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">BodyTemperature</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">joined-subclass</span><span style="color: blue">&gt;<br />      <br />       &lt;</span><span style="color: #a31515">joined-subclass </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">animalId</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Name</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">NickName</span>"<span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Birthdate</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">Date</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">joined-subclass</span><span style="color: blue">&gt;       <br />   &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />   &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Family`1[[Reptile]]</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">ReptilesFamilies</span>"<br />          <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">ReptilesFamily</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Reptile</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />   &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br />  <br />   &lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Family`1[[Human]]</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">HumanFamilies</span>"<br />          <span style="color: red">entity-name</span><span style="color: blue">=</span>"<span style="color: blue">HumanFamily</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">hilo</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Father</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Mother</span>" <span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">/&gt;<br />       &lt;</span><span style="color: #a31515">set </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Childs</span>" <span style="color: red">generic</span><span style="color: blue">=</span>"<span style="color: blue">true</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />           &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">familyId</span>" <span style="color: blue">/&gt;<br />           &lt;</span><span style="color: #a31515">one-to-many </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">Human</span>"<span style="color: blue">/&gt;<br />       &lt;/</span><span style="color: #a31515">set</span><span style="color: blue">&gt;<br />   &lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;/</span><span style="color: #a31515">hibernate-mapping</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The new accessor "<strong>backfield</strong>" is another new feature but it don&rsquo;t play some special role here.</p>
<p>As you can see I have a class implementation for all &ldquo;kinds&rdquo; of families but two different strongly typed persistence mappings.</p>
<p>Well&hellip; that&rsquo;s all&hellip; ups&hellip; The test to demonstrate that it are working</p>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>EntityNameDemo()<br />{<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />       <span style="color: blue">var </span>rf = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rm = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rc1 = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rc2 = <span style="color: blue">new </span><span style="color: #2b91af">Reptile </span>{Description = <span style="color: #a31515">"Crocodile"</span>};<br />       <span style="color: blue">var </span>rfamily = <span style="color: blue">new </span><span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;<br />                         {<br />                             Father = rf,<br />                             Mother = rm,<br />                             Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">Reptile</span>&gt; {rc1, rc2}<br />                         };<br />       s.Save(<span style="color: #a31515">"ReptilesFamily"</span>, rfamily);<br />       tx.Commit();<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />           <span style="color: blue">var </span>hf = <span style="color: blue">new </span><span style="color: #2b91af">Human </span>{Description = <span style="color: #a31515">"Flinstone"</span>, Name = <span style="color: #a31515">"Fred"</span>};<br />           <span style="color: blue">var </span>hm = <span style="color: blue">new </span><span style="color: #2b91af">Human </span>{Description = <span style="color: #a31515">"Flinstone"</span>, Name = <span style="color: #a31515">"Wilma"</span>};<br />           <span style="color: blue">var </span>hc1 = <span style="color: blue">new </span><span style="color: #2b91af">Human </span>{Description = <span style="color: #a31515">"Flinstone"</span>, Name = <span style="color: #a31515">"Pebbles"</span>};<br />           <span style="color: blue">var </span>hfamily = <span style="color: blue">new </span><span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;<br />                             {<br />                                 Father = hf,<br />                                 Mother = hm,<br />                                 Childs = <span style="color: blue">new </span><span style="color: #2b91af">HashedSet</span>&lt;<span style="color: #2b91af">Human</span>&gt; {hc1}<br />                             };<br />           s.Save(<span style="color: #a31515">"HumanFamily"</span>, hfamily);<br />           tx.Commit();<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />       <span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;&gt; hf = s.CreateQuery(<span style="color: #a31515">"from HumanFamily"</span>).List&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Human</span>&gt;&gt;();<br />       <span style="color: #2b91af">Assert</span>.That(hf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />       <span style="color: #2b91af">Assert</span>.That(hf[0].Father.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Fred"</span>));<br />       <span style="color: #2b91af">Assert</span>.That(hf[0].Mother.Name, <span style="color: #2b91af">Is</span>.EqualTo(<span style="color: #a31515">"Wilma"</span>));<br />       <span style="color: #2b91af">Assert</span>.That(hf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br /><br />       <span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;&gt; rf = s.CreateQuery(<span style="color: #a31515">"from ReptilesFamily"</span>).List&lt;<span style="color: #2b91af">Family</span>&lt;<span style="color: #2b91af">Reptile</span>&gt;&gt;();<br />       <span style="color: #2b91af">Assert</span>.That(rf.Count, <span style="color: #2b91af">Is</span>.EqualTo(1));<br />       <span style="color: #2b91af">Assert</span>.That(rf[0].Childs.Count, <span style="color: #2b91af">Is</span>.EqualTo(2));<br /><br />       tx.Commit();<br />   }<br /><br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />   <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />   {<br />       s.Delete(<span style="color: #a31515">"from HumanFamily"</span>);<br />       s.Delete(<span style="color: #a31515">"from ReptilesFamily"</span>);<br />       tx.Commit();<br />   }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>As in &ldquo;<a href="http://fabiomaulo.blogspot.com/2008/10/less-than-gof-is-hbm.html">Less than GoF is hbm</a>&rdquo; I&rsquo;m using the overload of <strong>session.Save(string, object)</strong> method; the first parameter is the entity-name, I had used in the mapping, the second is the instance.</p>
<p>Now that&rsquo;s all (code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/EntityNameInAction/EntityNameInAction">here</a>).</p>
