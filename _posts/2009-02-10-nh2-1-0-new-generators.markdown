---
layout: post
title: "NH2.1.0: New generators"
date: 2009-02-10 00:12:00 +1300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["identity", "NH2.1", "generators"]
redirect_from: ["/blogs/nhibernate/archive/2009/02/09/nh2-1-0-new-generators.aspx/", "/blogs/nhibernate/archive/2009/02/09/nh2-1-0-new-generators.html"]
author: fabiomaulo
gravatar: cd6db202ce94ed7e5f1fde30e702dc7f
---
{% include imported_disclaimer.html %}
<p>This post is an recognition that we had lost the fight with Identity's fans. As you probably know <a href="http://fabiomaulo.blogspot.com/2008/12/identity-never-ending-story.html">I don&rsquo;t like Identity</a>, but as a NHibernate-developer I can&rsquo;t ignore ours users requests. </p>
<p>This is the complete list of <strong>POID</strong> (<strong>P</strong>ersistent <strong>O</strong>bject <strong>ID</strong>entifier) generators provided by NHibernate2.1.0:</p>
<ul>
<li>native </li>
<li>identity (<strong>improved</strong>) </li>
<li>sequence </li>
<li>hilo </li>
<li>seqhilo </li>
<li>assigned </li>
<li>guid </li>
<li>guid.comb </li>
<li>guid.native (<strong>new</strong>) </li>
<li>select (<strong>new</strong>) </li>
<li>sequence-identity (<strong>new</strong>) </li>
<li>trigger-identity (<strong>new</strong>) </li>
<li>uuid.hex </li>
<li>uuid.string </li>
<li>counter </li>
<li>increment </li>
<li>foreign </li>
</ul>
<h4>guid.native</h4>
<p>Is a new generator that allow to use the RDBMS native function to generate GUID. The behavior is similar to the &ldquo;sequence&rdquo; generator: when a new object is saved NH run two query; the first to retrieve the GUID value and the second to insert the entity using the Guid retrieved from RDBMS. The type in your entity is System.<span style="color: #2bafa5">Guid</span> and the SQLtype depend from the dialect (RAW(16) in Oracle, UniqueIdentifier in MsSQL for example).</p>
<p>Queries that runs in ORACLE are:</p>
<ol>
<li>select rawtohex(sys_guid()) from dual </li>
<li>INSERT INTO MyEntityTable (Id, Description) VALUES (:p0, :p1) </li>
</ol>
<p>The&nbsp; parameter &ldquo;:p0&rdquo; has the value retrieved in the first query.</p>
<h4>sequence-identity</h4>
<p>The &ldquo;sequence-identity&rdquo; is based on &ldquo;sequence&rdquo; but work as an &ldquo;identity&rdquo;. The POID values is retrieved with the INSERT query. The types, in your entity, maybe are System.<span style="color: #2bafa5">Int32</span> or System.<span style="color: #2bafa5">Int64</span> depending on your RDBMS sequence generator.</p>
<p>The query that run in ORACLE is:</p>
<p>INSERT INTO my_entity (id, name) VALUES (hibernate_sequence.nextval, :p0) returning id into :nhIdOutParam</p>
<p>The &ldquo;hibernate_sequence&rdquo; is the default name for a sequence where no alternative name is provided trough the mapping. As you can see, in this case, the &ldquo;sequence&rdquo; are working like &ldquo;identity&rdquo;, the value of the POID is retrieved immediately and the generator has the same problem of &ldquo;identity&rdquo;.</p>
<h4>trigger-identity</h4>
<p>The &ldquo;trigger-identity&rdquo; is a NHibernate specific feature where the POID is generated by the RDBMS at the INSERT query trough a BEFORE INSERT trigger. In this case you can use any supported type, including custom type, with the limitation of &ldquo;single-column&rdquo; (so far).</p>
<p>The query in ORACLE is:</p>
<p>INSERT INTO my_entity (Name) VALUES (:p0) returning Id into :nhIdOutParam</p>
<p>As you can see the query is very similar to the query used to work with &ldquo;identity&rdquo;; the &ldquo;Id&rdquo; field is not present in the FieldsNameList nor in VALUES list and the value of the POID is retrieved immediately. What the trigger are doing to generate the &ldquo;Id&rdquo; field value is out-side of NH scope.</p>
<h4>select</h4>
<p>The &ldquo;select&rdquo; generator is a deviation of the &ldquo;trigger-identity&rdquo;. This generator work together with <strong><a href="http://www.hibernate.org/hib_docs/v3/reference/en-US/html_single/#mapping-declaration-naturalid">natural-id</a></strong> feature. The difference &ldquo;trigger-identity&rdquo; is that the POID value is retrieved by a SELECT using the <strong>natural-id</strong> fields as filter. In practice giving</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">MyEntity</span>" <span style="color: red">table</span><span style="color: blue">=</span>"<span style="color: blue">my_entity</span>"<span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">id</span>"<span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">select</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />   &lt;</span><span style="color: #a31515">natural-id</span><span style="color: blue">&gt;<br />       &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">name</span>"<span style="color: blue">/&gt;<br />   &lt;/</span><span style="color: #a31515">natural-id</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>and having a trigger to generate the POID, the queries runs in ORACLE are:</p>
<ol>
<li>INSERT INTO my_entity (name) VALUES (:p0) </li>
<li>SELECT id FROM my_entity WHERE name = :p0 </li>
</ol>
<p>The POID still retrieved immediately.</p>
<h4>identity</h4>
<p>The &ldquo;identity&rdquo; generator is well known by NH&lt;-&gt;MsSQL users but, before NH2.1.0, can&rsquo;t be used for others RDBMS if the RDBMS don&rsquo;t support native identity-generator. What happen if you have one multi-RDBMS-application and your DBA want use an identity-style generator in each RDBMS ? Which is your work with mappings files for NHibernate ? Well&hellip; we have changed the meaning of &ldquo;identity&rdquo;. In NH2.1.0 defining &lt;generator class="identity"/&gt; your are saying : &ldquo;I want work with an identity-style generator; check my dialect to know which is the correct generator for identity&rdquo;.</p>
<p>By default, when you specify &ldquo;identity&rdquo;, NH run the follow:</p>
<pre class="code"><span style="color: blue">if </span>(SupportsIdentityColumns)<br />{<br /><span style="color: blue">return typeof</span>(<span style="color: #2b91af">IdentityGenerator</span>);<br />}<br /><span style="color: blue">else if </span>(SupportsSequences)<br />{<br /><span style="color: blue">return typeof</span>(<span style="color: #2b91af">SequenceIdentityGenerator</span>);<br />}<br /><span style="color: blue">else<br /></span>{<br /><span style="color: blue">return typeof</span>(<span style="color: #2b91af">TriggerIdentityGenerator</span>);<br />}</pre>
<p>If you need a different behavior you can inherit from the default dialect, for your RDBMS, and override the property <strong>IdentityStyleIdentifierGeneratorClass</strong>.</p>
<h4>Conclusion</h4>
<p>Now you have a more easy way to break the unit-of-work pattern, and to nullify the batcher, for all NH&rsquo;s supported dialects: specify &ldquo;identity&rdquo; as your identifier generator.</p>
