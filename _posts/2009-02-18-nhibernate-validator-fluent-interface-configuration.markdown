---
layout: post
title: "NHibernate.Validator: fluent-interface configuration"
date: 2009-02-18 15:00:00 +1300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["fluent configuration", "Validator"]
redirect_from: ["/blogs/nhibernate/archive/2009/02/18/nhibernate-validator-fluent-interface-configuration.aspx"]
author: fabiomaulo
gravatar: cd6db202ce94ed7e5f1fde30e702dc7f
---
{% include imported_disclaimer.html %}
<p>As announced in the <a href="http://fabiomaulo.blogspot.com/2009/02/nhvloquacious-fluent-configuration-for.html">this post</a> NHibernate.Validator (NHV for friends) has its own embedded configuration based on fluent-interface (<strong>Loquacious</strong> for friends). This new feature will be general-available with the next version <strong>NHV1.2.0</strong>.</p>
<h4>The NHV configuration</h4>
<p>As test and because the new configuration is &ldquo;Loquacious&rdquo; enough I&rsquo;m going to expose some examples without explication.</p>
<p>Example 1:</p>
<pre class="code"><span style="color: blue">var </span>configure = <span style="color: blue">new </span><span style="color: #2b91af">FluentConfiguration</span>();<br />configure.Register(<br />  <span style="color: #2b91af">Assembly</span>.GetExecutingAssembly().GetTypes()<br />      .Where(t =&gt; t.Namespace.Equals(<span style="color: #a31515">"Company.Product.YourNamespace"</span>))<br />      .ValidationDefinitions())<br />  .SetDefaultValidatorMode(<span style="color: #2b91af">ValidatorMode</span>.UseExternal);<br /><br />ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br />ve.Configure(configure);</pre>
<p>Example 2:</p>
<pre class="code"><span style="color: blue">var </span>configure = <span style="color: blue">new </span><span style="color: #2b91af">FluentConfiguration</span>();<br />configure.Register(<br />  <span style="color: #2b91af">Assembly</span>.Load(<span style="color: #a31515">"Company.Product"</span>)<br />  .ValidationDefinitions()<br />  .Where(t =&gt; t.Namespace.Equals(<span style="color: #a31515">"Company.Product.YourNamespace"</span>))<br />  )<br />.SetDefaultValidatorMode(<span style="color: #2b91af">ValidatorMode</span>.UseExternal)<br />.IntegrateWithNHibernate.ApplyingDDLConstraints().And.RegisteringListeners();<br /><br />ve = <span style="color: blue">new </span><span style="color: #2b91af">ValidatorEngine</span>();<br />ve.Configure(configure);</pre>
<p>The only thing you can&rsquo;t configure, using <span style="color: #2b91af">FluentConfiguration</span>, is the <em>SharedEngineProvider</em> because it is configurable only trough application config (by the way, from what I saw on the NET, an explication about what is the SharedEngineProvider is needed).</p>
<p>For the configuration, I have add two extensions methods, both named <em>ValidationDefinitions()</em>, to <span style="color: #2b91af">Assembly</span> and to <span style="color: #2b91af">IEnumerable</span>&lt;System.<span style="color: #2b91af">Type</span>&gt;.</p>
<h4>The configuration of class validation</h4>
<p>Example v1:</p>
<pre class="code"><span style="color: blue">public </span>AddressDef()<br />{<br />  Define(x =&gt; x.Country)<br />      .MaxLength(20).And<br />      .NotNullable();<br />  Define(x =&gt; x.floor)<br />      .IncludedBetween(-2, 50).WithMessage(<span style="color: #a31515">"{floor.out.of.range}"</span>);<br />  Define(x =&gt; x.Id)<br />      .IncludedBetween(1, 2000);<br />  Define(x =&gt; x.Line1)<br />      .NotNullable();<br />  Define(x =&gt; x.State)<br />      .NotNullable().And<br />      .MaxLength(3);<br />  Define(x =&gt; x.Zip)<br />      .NotNullable().And<br />      .MaxLength(5).WithMessage(<span style="color: #a31515">"{long}"</span>).And<br />      .MatchWith(<span style="color: #a31515">"[0-9]+"</span>);<br />  Define(x =&gt; x.InternalValid)<br />      .IsTrue();<br />}</pre>
<p>What happen at design-time ? Some images are more clear than 100 words&hellip;</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DateTimePropVS_5F00_55A70EE6.png"><img border="0" width="415" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DateTimePropVS_5F00_thumb_5F00_1570F56C.png" alt="DateTimePropVS" height="121" title="DateTimePropVS" /></a></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DateTimePropVS_5F00_55A70EE6.png"></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/IntegerPropVS_5F00_23433B67.png"><img border="0" width="472" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/IntegerPropVS_5F00_thumb_5F00_05D0EA5B.png" alt="IntegerPropVS" height="166" title="IntegerPropVS" /></a></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/IntegerPropVS_5F00_23433B67.png"></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DecimalPropVS_5F00_536D16DB.png"><img border="0" width="471" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DecimalPropVS_5F00_thumb_5F00_2109435C.png" alt="DecimalPropVS" height="167" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="DecimalPropVS" /></a></p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/DecimalPropVS_5F00_536D16DB.png"></a> <a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/StrPropVS_5F00_6EA56FDC.png"><img border="0" width="591" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/StrPropVS_5F00_thumb_5F00_07350D2D.png" alt="StrPropVS" height="201" title="StrPropVS" /></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EnumerablePropVS_5F00_62A37FA8.png"><img border="0" width="624" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EnumerablePropVS_5F00_thumb_5F00_10249F6C.png" alt="EnumerablePropVS" height="198" title="EnumerablePropVS" /></a><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EntityRelationPropVS_5F00_529741A2.png"><img border="0" width="591" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/EntityRelationPropVS_5F00_thumb_5F00_4458C8B2.png" alt="EntityRelationPropVS" height="120" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="EntityRelationPropVS" /></a>&nbsp;&nbsp;</p>
<p>The first advantage of fluent-interface-configuration appear clear: a very little example is that you <strong>can&rsquo;t</strong> define an integer property as not-nullable.</p>
<p>For instance validators here is the example using Attributes and its equivalent using fluent-configuration:</p>
<p>
Example v2: 
</p>
<pre class="code">[<span style="color: #2b91af">AssertAnimal</span>]<br /><span style="color: blue">public class </span><span style="color: #2b91af">Suricato<br /></span>{<br />}<br /><br /><span style="color: blue">public class </span><span style="color: #2b91af">SuricatoDef</span>:<span style="color: #2b91af">ValidationDef</span>&lt;<span style="color: #2b91af">Suricato</span>&gt;<br />{<br />  <span style="color: blue">public </span>SuricatoDef()<br />  {<br />      ValidateInstance.Using(<span style="color: blue">new </span><span style="color: #2b91af">AssertAnimalAttribute</span>());<br />  }<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>Extending constraints configuration</h4>
<p>Who know NHV know that we have some country-specific validators. Country-specific-validator is a clear example about how extend the framework.</p>
<p>The follow is the implementation of NHibernate.Validator.Specific.It (validators available for Italy):</p>
<pre class="code"><span style="color: blue">public static class </span><span style="color: #2b91af">ItLoquaciousExtensions<br /></span>{<br />  <span style="color: blue">public static </span><span style="color: #2b91af">IRuleArgsOptions </span>IsCodiceFiscale(<span style="color: blue">this </span><span style="color: #2b91af">IStringConstraints </span>definition)<br />  {<br />      <span style="color: blue">return </span>((<span style="color: #2b91af">IConstraints</span>)definition).AddWithFinalRuleArgOptions(<span style="color: blue">new </span><span style="color: #2b91af">CodiceFiscaleAttribute</span>());<br />  }<br /><br />  <span style="color: blue">public static </span><span style="color: #2b91af">IRuleArgsOptions </span>IsPartitaIva(<span style="color: blue">this </span><span style="color: #2b91af">IStringConstraints </span>definition)<br />  {<br />      <span style="color: blue">return </span>((<span style="color: #2b91af">IConstraints</span>)definition).AddWithFinalRuleArgOptions(<span style="color: blue">new </span><span style="color: #2b91af">PartitaIvaAttribute</span>());<br />  }<br /><br />  <span style="color: blue">public static </span><span style="color: #2b91af">IRuleArgsOptions </span>IsPartitaIva(<span style="color: blue">this </span><span style="color: #2b91af">IIntegerConstraints </span>definition)<br />  {<br />      <span style="color: blue">return </span>((<span style="color: #2b91af">IConstraints</span>)definition).AddWithFinalRuleArgOptions(<span style="color: blue">new </span><span style="color: #2b91af">PartitaIvaAttribute</span>());<br />  }<br />}</pre>
<p>And obviously, at design-time, it appear like this:</p>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/It_5F00_IntegerPropVS_5F00_26E677A6.png"><img border="0" width="517" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/It_5F00_IntegerPropVS_5F00_thumb_5F00_0D7E746C.png" alt="It_IntegerPropVS" height="181" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="It_IntegerPropVS" /></a> </p>
<h4>Conclusions</h4>
<p>Sometimes NHV is not so well know by NHibernate users (NHV has 5% of NH downloads). If you are using some other validation framework, in applications where you are using NHibernate, you should check if the validator are initializing collections and relations (proxy)&hellip; perhaps we should write something else about how NHV work together with NHibernate.</p>
