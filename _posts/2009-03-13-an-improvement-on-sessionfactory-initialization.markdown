---
layout: post
title: "An improvement on SessionFactory Initialization"
date: 2009-03-13 19:18:00 -0300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["NHibernate", "NH2.1"]
alias: ["/blogs/nhibernate/archive/2009/03/13/an-improvement-on-sessionfactory-initialization.aspx"]
author: tehlike
gravatar: c9c2937ea2b0d5472a33a23b5df78814
---
{% include imported_disclaimer.html %}
<div class="wlWriterEditableSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:3b4c0626-425a-42e1-8d34-4ea8a11191ad" style="padding-right: 0px; display: inline; padding-left: 0px; float: none; padding-bottom: 0px; margin: 0px; padding-top: 0px"><b>UPDATE: I have just committed the PersistentConfigurationBuilder for Castle NHibernate Facility. Thank you Jonathon Rossi for informing me!</b><a href="http://technorati.com/tags/nhibernate" rel="tag"></a></div>
<p>We have received several complaints about slowness of SessionFactory initialization when there&rsquo;s hundreds of entities, and <a href="http://ayende.com/Blog/" target="_blank">Ayende</a> has replied <a href="http://ayende.com/Blog/archive/2007/10/26/Real-World-NHibernate-Reducing-startup-times-for-large-amount-of.aspx" target="_blank">one of them here</a>. It even gets worse if you&rsquo;re using it in a web environment. You may think that it is not a problem since SessionFactory is initialized once in a web environment, but the major impact is not on production but development. Think how many times you start your application a day. </p>
<p>The problem is not really with NHibernate but with <b>xml validation</b> against the schema. Here are some profiler results for SessionFactory initialization with one thousand entities:</p>
<p><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_7E21FC61.png" border="0" width="627" height="191" /> </p>
<p>As you see, the adding XML resources takes the most time and the reason behind this is the schema validation. There is also an I/O cost involved (1040 resources should be read by NHibernate). There are several ways to get rid of it, one being the <b>serialization of configuration</b>. I spend 3 days (statics prevented me from spotting some bugs in the code) on this and I believe it pretty much works for every configuration. Another way of doing this is the merging of HBM files, which I believe faster than Serialization as Deserialization also takes some amount.</p>
<p>Now the results for the one using the Deserialized Configuration.</p>
<p><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_04953058.png" border="0" width="626" height="87" /> </p>
<p>A nice feature of dotTrace allows us to compare the performance improvements over the old way.</p>
<p><img title="image" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" alt="image" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_459389EF.png" border="0" width="630" height="192" /> </p>
<p>We got <b>10 seconds rescued!</b> Yay!</p>
<p>Now I am going to show how I used this feature in Castle NHibernate Facility. We have IConfigurationBuilder that is used to integrate various Configuration sources (such as FluentNHibernate). </p>
<p>First of all I must ensure that if any of the files that are used to create the Configuration change, we shouldn&rsquo;t use the serialized configuration, instead the Configuration should be re-created. </p>
<pre class="code"><span style="color: blue;">public override </span><span style="color: #2b91af;">Configuration </span>GetConfiguration(<span style="color: #2b91af;">IConfiguration </span>config)<br />{<br />    log.Debug(<span style="color: #a31515;">"Building the Configuration"</span>);<br /><br />    <span style="color: blue;">string </span>fileName = config.Attributes[<span style="color: #a31515;">"fileName"</span>];<br /><br />    <span style="color: #2b91af;">IConfiguration </span>dependsOn = config.Children[<span style="color: #a31515;">"dependsOn"</span>];<br />    <span style="color: #2b91af;">IList</span>&lt;<span style="color: blue;">string</span>&gt; list = <span style="color: blue;">new </span><span style="color: #2b91af;">List</span>&lt;<span style="color: blue;">string</span>&gt;();<br /><br />    <span style="color: blue;">foreach </span>(<span style="color: blue;">var </span>on <span style="color: blue;">in </span>dependsOn.Children)<br />        list.Add(on.Value);<br /><br />    <span style="color: #2b91af;">Configuration </span>cfg;<br />    <span style="color: blue;">if </span>(IsNewConfigurationRequired(fileName, list))<br />    {<br />        log.Debug(<span style="color: #a31515;">"Configuration is either old or some of the dependencies have changed"</span>);<br />        <span style="color: blue;">using</span>(<span style="color: blue;">var </span>fileStream = <span style="color: blue;">new </span><span style="color: #2b91af;">FileStream</span>(fileName, <span style="color: #2b91af;">FileMode</span>.OpenOrCreate))<br />        {<br />            cfg = <span style="color: blue;">base</span>.GetConfiguration(config);<br />            <span style="color: blue;">this</span>.WriteConfigurationToStream(fileStream, cfg);<br />        }<br />    }<br />    <span style="color: blue;">else<br />    </span>{<br />        <span style="color: blue;">using </span>(<span style="color: blue;">var </span>fileStream = <span style="color: blue;">new </span><span style="color: #2b91af;">FileStream</span>(fileName, <span style="color: #2b91af;">FileMode</span>.OpenOrCreate))<br />        {<br />            cfg = <span style="color: blue;">this</span>.GetConfigurationFromStream(fileStream);<br />        }<br />    }<br />    <span style="color: blue;">return </span>cfg;<br />}<br /><br /><br /><br /></pre>
<pre class="code"><span style="color: blue;">protected virtual bool </span>IsNewConfigurationRequired(<span style="color: blue;">string </span>fileName,<span style="color: #2b91af;">IList</span>&lt;<span style="color: blue;">string</span>&gt; dependencies)<br />{<br />    <span style="color: blue;">if </span>(!<span style="color: #2b91af;">File</span>.Exists(fileName))<br />        <span style="color: blue;">return true</span>;<br />    <span style="color: #2b91af;">FileInfo </span>fi = <span style="color: blue;">new </span><span style="color: #2b91af;">FileInfo</span>(fileName);<br />    <span style="color: #2b91af;">DateTime </span>lastModified = fi.LastWriteTime;<br />    <span style="color: blue;">bool </span>requiresNew=<span style="color: blue;">false</span>;<br />    <span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; dependencies.Count &amp;&amp; !requiresNew; i++)<br />    {<br />        <span style="color: #2b91af;">FileInfo </span>dependency = <span style="color: blue;">new </span><span style="color: #2b91af;">FileInfo</span>(dependencies[i]);<br />        <span style="color: #2b91af;">DateTime </span>dependencyLastModified = dependency.LastWriteTime;<br />        requiresNew |= dependencyLastModified &gt; lastModified;<br />    }<br />    <span style="color: blue;">return </span>requiresNew;<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a><a href="http://11011.net/software/vspaste"></a></p>
<p>&nbsp;</p>
<p>Code doesn&rsquo;t look really good, I guess, so I am open to any suggestions on improvement. The code is not yet in Castle Codebase, as our NH dependency on trunk is not the latest (and i am too lazy to update it). When I find time, I may update the dependency if others agree. 
  <br />
  <br /><b>There is one thing that you have to be careful about. You must be aware that if you&rsquo;re using IUserType, IInterceptor, ISqlFunction etc, all of those should be Serializable too!</b></p>
