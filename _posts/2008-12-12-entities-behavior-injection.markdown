---
layout: post
title: "Entities behavior injection"
date: 2008-12-12 11:50:00 +1300
comments: true
published: true
categories: ["blog", "archives"]
tags: ["NHibernate", "IoC"]
alias: ["/blogs/nhibernate/archive/2008/12/12/entities-behavior-injection.aspx"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>If you are working with NH you know that NH likes POCOs and you must have a default constructor without parameters. Starting from today that is the past.</p>
<h4>The domain</h4>
<p><a href="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_37CDC07C.png"><img border="0" width="471" src="/cfs-file.ashx/__key/CommunityServer.Blogs.Components.WeblogFiles/nhibernate/image_5F00_thumb_5F00_606C2C83.png" alt="image" height="480" style="border-top-width: 0px; display: inline; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" title="image" /></a> </p>
<p>The implementation of Invoice is:</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">Invoice </span>: <span style="color: #2b91af">IInvoice<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">IInvoiceTotalCalculator </span>calculator;<br /><br />  <span style="color: blue">public </span>Invoice(<span style="color: #2b91af">IInvoiceTotalCalculator </span>calculator)<br />  {<br />      <span style="color: blue">this</span>.calculator = calculator;<br />      Items = <span style="color: blue">new </span><span style="color: #2b91af">List</span>&lt;<span style="color: #2b91af">InvoiceItem</span>&gt;();<br />  }<br /><br />  <span style="color: blue">#region </span>IInvoice Members<br /><br />  <span style="color: blue">public string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public decimal </span>Tax { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br />  <span style="color: blue">public </span><span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">InvoiceItem</span>&gt; Items { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }<br /><br />  <span style="color: blue">public decimal </span>Total<br />  {<br />      <span style="color: blue">get </span>{ <span style="color: blue">return </span>calculator.GetTotal(<span style="color: blue">this</span>); }<br />  }<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">InvoiceItem </span>AddItem(<span style="color: #2b91af">Product </span>product, <span style="color: blue">int </span>quantity)<br />  {<br />      <span style="color: blue">var </span>result = <span style="color: blue">new </span><span style="color: #2b91af">InvoiceItem</span>(product, quantity);<br />      Items.Add(result);<br />      <span style="color: blue">return </span>result;<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>Are you observing something strange ?</p>
<ul>
<br />
<li>There is not a property for the Id </li>
<li>There is not a default constructor without parameter </li>
</ul>
<p>The Invoice entity are using an injectable behavior to calculate the total amount of the invoice; the implementation is not so important&hellip;</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">SumAndTaxTotalCalculator </span>: <span style="color: #2b91af">IInvoiceTotalCalculator<br /></span>{<br />  <span style="color: blue">#region </span>Implementation of IInvoiceTotalCalculator<br /><br />  <span style="color: blue">public decimal </span>GetTotal(<span style="color: #2b91af">IInvoice </span>invoice)<br />  {<br />      <span style="color: blue">decimal </span>result = invoice.Tax;<br />      <span style="color: blue">foreach </span>(<span style="color: #2b91af">InvoiceItem </span>item <span style="color: blue">in </span>invoice.Items)<br />      {<br />          result += item.Product.Price * item.Quantity;<br />      }<br />      <span style="color: blue">return </span>result;<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The full mapping:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Invoice</span>" <span style="color: red">proxy</span><span style="color: blue">=</span>"<span style="color: blue">IInvoice</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">id </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Tax</span>"<span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">list </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Items</span>" <span style="color: red">cascade</span><span style="color: blue">=</span>"<span style="color: blue">all</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">key </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">InvoiceId</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">list-index </span><span style="color: red">column</span><span style="color: blue">=</span>"<span style="color: blue">pos</span>"<span style="color: blue">/&gt;<br />      &lt;</span><span style="color: #a31515">composite-element </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">InvoiceItem</span>"<span style="color: blue">&gt;<br />          &lt;</span><span style="color: #a31515">many-to-one </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Product</span>"<span style="color: blue">/&gt;<br />          &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Quantity</span>"<span style="color: blue">/&gt;<br />      &lt;/</span><span style="color: #a31515">composite-element</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">list</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;<br /><br />&lt;</span><span style="color: #a31515">class </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Product</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">id </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Id</span>" <span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">generator </span><span style="color: red">class</span><span style="color: blue">=</span>"<span style="color: blue">guid</span>"<span style="color: blue">/&gt;<br />  &lt;/</span><span style="color: #a31515">id</span><span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Description</span>"<span style="color: blue">/&gt;<br />  &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">Price</span>"<span style="color: blue">/&gt;<br />&lt;/</span><span style="color: #a31515">class</span><span style="color: blue">&gt;</span></pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>The Test</h4>
<pre class="code">[<span style="color: #2b91af">Test</span>]<br /><span style="color: blue">public void </span>CRUD()<br />{<br />  <span style="color: #2b91af">Product </span>p1;<br />  <span style="color: #2b91af">Product </span>p2;<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />      {<br />          p1 = <span style="color: blue">new </span><span style="color: #2b91af">Product </span>{Description = <span style="color: #a31515">"P1"</span>, Price = 10};<br />          p2 = <span style="color: blue">new </span><span style="color: #2b91af">Product </span>{Description = <span style="color: #a31515">"P2"</span>, Price = 20};<br />          s.Save(p1);<br />          s.Save(p2);<br />          tx.Commit();<br />      }<br />  }<br /><br />  <span style="color: blue">var </span>invoice = <span style="color: #2b91af">DI</span>.Container.Resolve&lt;<span style="color: #2b91af">IInvoice</span>&gt;();<br />  invoice.Tax = 1000;<br />  invoice.AddItem(p1, 1);<br />  invoice.AddItem(p2, 2);<br />  <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br /><br />  <span style="color: blue">object </span>savedInvoice;<br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />      {<br />          savedInvoice = s.Save(invoice);<br />          tx.Commit();<br />      }<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      invoice = s.Get&lt;<span style="color: #2b91af">Invoice</span>&gt;(savedInvoice);<br />      <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      invoice = (<span style="color: #2b91af">IInvoice</span>) s.Load(<span style="color: blue">typeof </span>(<span style="color: #2b91af">Invoice</span>), savedInvoice);<br />      <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: #2b91af">IList</span>&lt;<span style="color: #2b91af">IInvoice</span>&gt; l = s.CreateQuery(<span style="color: #a31515">"from Invoice"</span>).List&lt;<span style="color: #2b91af">IInvoice</span>&gt;();<br />      invoice = l[0];<br />      <span style="color: #2b91af">Assert</span>.That(invoice.Total, <span style="color: #2b91af">Is</span>.EqualTo((<span style="color: blue">decimal</span>) (10 + 40 + 1000)));<br />  }<br /><br />  <span style="color: blue">using </span>(<span style="color: #2b91af">ISession </span>s = sessions.OpenSession())<br />  {<br />      <span style="color: blue">using </span>(<span style="color: #2b91af">ITransaction </span>tx = s.BeginTransaction())<br />      {<br />          s.Delete(<span style="color: #a31515">"from Invoice"</span>);<br />          s.Delete(<span style="color: #a31515">"from Product"</span>);<br />          tx.Commit();<br />      }<br />  }<br />}</pre>
<p>In the previous week I tried to pass the test without change NH&rsquo;s code-base. The first result was that I found a bug in NH and probably in Hibernate3.2.6, the second result was that it is completely possible to use NH with &ldquo;fat&rdquo; entities, without default constructor and using an IoC framework to inject behavior to an entity. After that work I realize that some little &ldquo;relax&rdquo; are needed in NH-code-base (<a href="http://jira.nhibernate.org/browse/NH-1587">NH-1587</a>,<a href="http://jira.nhibernate.org/browse/NH-1588">NH-1588</a>,<a href="http://jira.nhibernate.org/browse/NH-1589">NH-1589</a>).</p>
<h4>How pass the test</h4>
<p>A very simple solution, to use an IoC with NH, is write a custom implementation of <a href="/doc/nh/en/index.html#manipulatingdata-interceptors">IInterceptor</a> and use the <em><strong>Instantiate</strong></em> method to create an entity instance using an IoC container. The problem with this solution is that you still need a default constructor and&hellip; well&hellip; you must use the same interceptor for all sessions.</p>
<p>Another possible solution, for NH2.1 (trunk), is the use of a custom &lt;<span style="color: #ff0000">tuplizer</span>&gt; for <span style="color: #2b91af">EntityMode</span>.POCO. Probably I will write another blog-post about it.</p>
<p>If you are using the ReflectionOptimizer (used by default) there is a simple short-cut: I can write a <span style="color: #2b91af">IBytecodeProvider</span> implementation based on <a href="http://www.castleproject.org/container/index.html">Castle.Windsor</a> container. The BytecodeProvider is another injectable piece of NH, trough the NHibernate.Cfg.<span style="color: #2b91af">Environment</span>, before create the configuration. The BytecodeProvider has two responsibility: provide the ProxyFactoryFactory and provide the ReflectionOptimizer.</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">BytecodeProvider </span>: <span style="color: #2b91af">IBytecodeProvider<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">IWindsorContainer </span>container;<br /><br />  <span style="color: blue">public </span>BytecodeProvider(<span style="color: #2b91af">IWindsorContainer </span>container)<br />  {<br />      <span style="color: blue">this</span>.container = container;<br />  }<br /><br />  <span style="color: blue">#region </span>IBytecodeProvider Members<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">IReflectionOptimizer </span>GetReflectionOptimizer(<span style="color: #2b91af">Type </span>clazz, <span style="color: #2b91af">IGetter</span>[] getters, <span style="color: #2b91af">ISetter</span>[] setters)<br />  {<br />      <span style="color: blue">return new </span><span style="color: #2b91af">ReflectionOptimizer</span>(container, clazz, getters, setters);<br />  }<br /><br />  <span style="color: blue">public </span><span style="color: #2b91af">IProxyFactoryFactory </span>ProxyFactoryFactory<br />  {<br />      <span style="color: blue">get </span>{ <span style="color: blue">return new </span><span style="color: #2b91af">ProxyFactoryFactory</span>(); }<br />  }<br /><br />  <span style="color: blue">#endregion<br /></span>}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a>In this case, obviously, the ProxyFactoryFactory class is <a href="/blogs/nhibernate/archive/2008/11/09/nh2-1-0-bytecode-providers.aspx">NHibernate.ByteCode.Castle.ProxyFactoryFactory</a>.</p>
<p>Now the ReflectionOptimizer (using the fresh NH&rsquo;s trunk):</p>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">ReflectionOptimizer </span>: NHibernate.Bytecode.Lightweight.<span style="color: #2b91af">ReflectionOptimizer<br /></span>{<br />  <span style="color: blue">private readonly </span><span style="color: #2b91af">IWindsorContainer </span>container;<br /><br />  <span style="color: blue">public </span>ReflectionOptimizer(<span style="color: #2b91af">IWindsorContainer </span>container, <span style="color: #2b91af">Type </span>mappedType, <span style="color: #2b91af">IGetter</span>[] getters, <span style="color: #2b91af">ISetter</span>[] setters)<br />      : <span style="color: blue">base</span>(mappedType, getters, setters)<br />  {<br />      <span style="color: blue">this</span>.container = container;<br />  }<br /><br />  <span style="color: blue">public override object </span>CreateInstance()<br />  {<br />      <span style="color: blue">if </span>(container.Kernel.HasComponent(mappedType))<br />      {<br />          <span style="color: blue">return </span>container.Resolve(mappedType);<br />      }<br />      <span style="color: blue">else<br />      </span>{<br />          <span style="color: blue">return </span>container.Kernel.HasComponent(mappedType.FullName)<br />                     ? container.Resolve(mappedType.FullName)<br />                     : <span style="color: blue">base</span>.CreateInstance();<br />      }<br />  }<br /><br />  <span style="color: blue">protected override void </span>ThrowExceptionForNoDefaultCtor(<span style="color: #2b91af">Type </span>type)<br />  {<br />  }<br />}</pre>
<p>As last, a quick view to the configuration:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">hibernate-configuration </span><span style="color: red">xmlns</span><span style="color: blue">=</span>"<span style="color: blue">urn:nhibernate-configuration-2.2</span>"<span style="color: blue">&gt;<br />  &lt;</span><span style="color: #a31515">session-factory </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">EntitiesWithDI</span>"<span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.driver_class</span>"<span style="color: blue">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">dialect</span>"<span style="color: blue">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />      &lt;</span><span style="color: #a31515">property </span><span style="color: red">name</span><span style="color: blue">=</span>"<span style="color: blue">connection.connection_string</span>"<span style="color: blue">&gt;<br />          </span>Data Source=localhost\SQLEXPRESS;Initial Catalog=BlogSpot;Integrated Security=True<br />      <span style="color: blue">&lt;/</span><span style="color: #a31515">property</span><span style="color: blue">&gt;<br />  &lt;/</span><span style="color: #a31515">session-factory</span><span style="color: blue">&gt;<br />&lt;/</span><span style="color: #a31515">hibernate-configuration</span><span style="color: blue">&gt;</span></pre>
<p>As you can see the configuration is minimal and, in this case, I don&rsquo;t need to configure the &ldquo;<span style="color: #800000">proxyfactory.factory_class</span>&rdquo; property because I will inject the whole BytecodeProvider.</p>
<pre class="code">[<span style="color: #2b91af">TestFixtureSetUp</span>]<br /><span style="color: blue">public void </span>TestFixtureSetUp()<br />{<br />  ConfigureWindsorContainer();<br />  <span style="color: #2b91af">Environment</span>.BytecodeProvider = <span style="color: blue">new </span><span style="color: #2b91af">BytecodeProvider</span>(container);<br />  cfg = <span style="color: blue">new </span><span style="color: #2b91af">Configuration</span>();<br />  cfg.AddAssembly(<span style="color: #a31515">"EntitiesWithDI"</span>);<br />  cfg.Configure();<br />  cfg.Interceptor = <span style="color: blue">new </span><span style="color: #2b91af">WindsorInterceptor</span>(container);<br />  <span style="color: blue">new </span><span style="color: #2b91af">SchemaExport</span>(cfg).Create(<span style="color: blue">false</span>, <span style="color: blue">true</span>);<br />  sessions = (<span style="color: #2b91af">ISessionFactoryImplementor</span>) cfg.BuildSessionFactory();<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<p>The BytecodeProvider injection is the line after the configuration of Windsor container.</p>
<p>The configuration of the container is very simple:</p>
<pre class="code"><span style="color: blue">protected override void </span>ConfigureWindsorContainer()<br />{<br />  container.AddComponent&lt;<span style="color: #2b91af">IInvoiceTotalCalculator</span>, <span style="color: #2b91af">SumAndTaxTotalCalculator</span>&gt;();<br />  container.AddComponentLifeStyle(<span style="color: blue">typeof </span>(<span style="color: #2b91af">Invoice</span>).FullName,<br />      <span style="color: blue">typeof </span>(<span style="color: #2b91af">IInvoice</span>), <span style="color: blue">typeof </span>(<span style="color: #2b91af">Invoice</span>), <span style="color: #2b91af">LifestyleType</span>.Transient);<br />}</pre>
<p>
<a href="http://11011.net/software/vspaste"></a></p>
<h4>Conclusions</h4>
<ul>
<br />
<li>The default ctor without parameter constraint was removed. </li>
<li>Use an IoC to inject behavior to an entity is possible and easy. </li>
</ul>
<p><strong>NOTE</strong>: Even if is possible to write an entity without the Id, the feature <span style="text-decoration: underline;">is not fully supported</span>.</p>
<p>Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/EntitiesWithDI/EntitiesWithDI">here</a>.</p>
