---
layout: post
title: "How Test your mappings: the Ghostbuster"
date: 2008-10-20 13:48:00 +1300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["mapping", "NHibernate", "Tests"]
alias: ["/blogs/nhibernate/archive/2008/10/20/how-test-your-mappings-the-ghostbuster.aspx"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>In NHibernate, when you have the <span style="color: #2b91af;">FlushMode</span> configured to <b>AutoFlush</b>, session.Flush() is called when NH detects a dirty entity instance and when&nbsp;a query with&nbsp;an intersected <i>QuerySpace</i>&nbsp;is performed. (The <i>QuerySpace</i> is represented by all tables affected in a query.)</p>
<p>Example:</p>
<pre class="code">  <span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">class </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Animal</span>"<span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">id </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Id</span>"<span style="color: #0000ff;">&gt;<br />         &lt;</span><span style="color: #a31515;">generator </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">hilo</span>"<span style="color: #0000ff;">/&gt;<br />     &lt;/</span><span style="color: #a31515;">id</span><span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Description</span>"<span style="color: #0000ff;">/&gt;<br /><br />     &lt;</span><span style="color: #a31515;">joined-subclass </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Reptile</span>"<span style="color: #0000ff;">&gt;<br />         &lt;</span><span style="color: #a31515;">key </span><span style="color: #ff0000;">column</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">animalId</span>"<span style="color: #0000ff;">/&gt;<br />         &lt;</span><span style="color: #a31515;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">BodyTemperature</span>"<span style="color: #0000ff;">/&gt;<br />     &lt;/</span><span style="color: #a31515;">joined-subclass</span><span style="color: #0000ff;">&gt;<br /><br /> &lt;/</span><span style="color: #a31515;">class</span><span style="color: #0000ff;">&gt;<br /></span></pre>
<p>In the above domain, a query on the <span style="color: #2b91af;">Reptile</span> class in a opened session with a dirty instance of <span style="color: #2b91af;">Animal</span> would cause&nbsp;session.Flush() will be called.</p>
<p>After a <span style="font-family: courier new;">session.Get&lt;<span style="color: #2b91af;">Animal</span>&gt;(animalId)</span> we can be pretty sure that there is no dirty entities in the session, <b>sure ?</b></p>
<p><b>Don&rsquo;t be so sure!</b> The real answer is: <b><span style="text-decoration: underline;">It depends</span></b>.</p>
<p>For example try this domain:</p>
<pre class="code"><span style="color: #0000ff;">public enum </span><span style="color: #2b91af;">Sex<br /></span>{<br /> Unspecified,<br /> Male,<br /> Female<br />}<br /><span style="color: #0000ff;">public class </span><span style="color: #2b91af;">Person<br /></span>{<br /> <span style="color: #0000ff;">public virtual int </span>Id { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br /> <span style="color: #0000ff;">public virtual </span><span style="color: #2b91af;">Sex </span>Sex { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span>; }<br />}</pre>
<p>with this mapping:</p>
<pre class="code">  <span style="color: #0000ff;">&lt;</span><span style="color: #a31515;">class </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Person</span>"<span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">id </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Id</span>"<span style="color: #0000ff;">&gt;<br />         &lt;</span><span style="color: #a31515;">generator </span><span style="color: #ff0000;">class</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">hilo</span>"<span style="color: #0000ff;">/&gt;<br />     &lt;/</span><span style="color: #a31515;">id</span><span style="color: #0000ff;">&gt;<br />     &lt;</span><span style="color: #a31515;">property </span><span style="color: #ff0000;">name</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">Sex</span>" <span style="color: #ff0000;">type</span><span style="color: #0000ff;">=</span>"<span style="color: #0000ff;">int</span>"<span style="color: #0000ff;">/&gt;<br /> &lt;/</span><span style="color: #a31515;">class</span><span style="color: #0000ff;">&gt;<br /></span></pre>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>In the mapping I define the property Sex of type <span style="color: #0000ff;">int</span> but in the class the type is <span style="color: #2b91af;">Sex</span>; even if you don&rsquo;t receive an exception, because an <span style="color: #0000ff;">int</span> is convertible to <span style="color: #2b91af;">Sex</span> and viceversa, your persistence will have a unexpected&nbsp; behavior. NH will detect a modification, of your entity, &ldquo;immediately&rdquo; after session.Get because it having an <span style="color: #0000ff;">int</span> in the entity snap-shot (retrieved from DB) and a <span style="color: #2b91af;">Sex</span> in the actual state. The example are showing a very simple case of &ldquo;ghosts&rdquo; in your application. In a big environment, with a complex domain, find &ldquo;ghosts&rdquo; it is not so easy.</p>
<h3>The Ghostbusters</h3>
<pre class="code">[<span style="color: #2b91af;">TestFixtureSetUp</span>]<br /><span style="color: #0000ff;">public void </span>TestFixtureSetUp()<br />{<br /> <span style="color: #2b91af;">XmlConfigurator</span>.Configure();<br /> cfg = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">Configuration</span>();<br /> cfg.Configure();<br /> <span style="color: #0000ff;">new </span><span style="color: #2b91af;">SchemaExport</span>(cfg).Create(<span style="color: #0000ff;">false</span>, <span style="color: #0000ff;">true</span>);<br /> sessions = (<span style="color: #2b91af;">ISessionFactoryImplementor</span>) cfg.BuildSessionFactory();<br /> PopulateDb();<br />}</pre>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>Few words about the TestFixtureSetUp: </p>
<ul>
<br />
<li>if you are testing your domain persistence you can run the &ldquo;ghostbuster&rdquo; in each test. </li>
<li>if you are testing yours <a href="http://en.wikipedia.org/wiki/Data_Access_Object">DAO</a>s and you have an implementation of <a href="http://martinfowler.com/bliki/ObjectMother.html">ObjectMother</a> or <a href="http://nat.truemesh.com/archives/000714.html">TestDataBuilder</a> you can use it in the implementation of <i>PopulateDb()</i> method. </li>
<li>If you don&rsquo;t have tests you can leave the <i>PopulateDb()</i> method empty and configure NH to an existing copy of your DB. <br /></li>
</ul>
<pre class="code">[<span style="color: #2b91af;">Test</span>, <span style="color: #2b91af;">Explicit</span>]<br /><span style="color: #0000ff;">public void </span>UnexpectedUpdateDeleteOnFetch()<br />{<br /> PersistingMappings(<span style="color: #0000ff;">null</span>);<br />}<br /><br />[<span style="color: #2b91af;">Test</span>, <span style="color: #2b91af;">Explicit</span>]<br /><span style="color: #0000ff;">public void </span>UnexpectedUpdateDeleteOnFetchSpecific()<br />{<br /> <span style="color: #0000ff;">var </span>entitiesFilter = <span style="color: #0000ff;">new</span>[]<br />                          {<br />                              <span style="color: #a31515;">"Person"<br />                          </span>};<br /> PersistingMappings(entitiesFilter);<br />}</pre>
<p>In my experience the above two tests are needed. The first sound like <i>&ldquo;close your eyes and pray&rdquo;</i> the second allow you to analyze some specific entities.</p>
<p>To avoid breaking the test, on each unexpected DB-hit, I&rsquo;ll use the power of <a href="http://logging.apache.org/log4net/index.html">log4net</a> in the whole fixture.</p>
<p>To intercept unexpected <i>Flush </i>a possible, easy and quickly, way is an implementation of <span style="color: #2b91af;">IInterceptor</span>.</p>
<pre class="code"><span style="color: #0000ff;">private class </span><span style="color: #2b91af;">NoUpdateInterceptor </span>: <span style="color: #2b91af;">EmptyInterceptor<br /></span>{<br /> <span style="color: #0000ff;">private readonly </span><span style="color: #2b91af;">IList</span>&lt;<span style="color: #0000ff;">string</span>&gt; invalidUpdates;<br /><br /> <span style="color: #0000ff;">public </span>NoUpdateInterceptor(<span style="color: #2b91af;">IList</span>&lt;<span style="color: #0000ff;">string</span>&gt; invalidUpdates)<br /> {<br />     <span style="color: #0000ff;">this</span>.invalidUpdates = invalidUpdates;<br /> }<br /><br /> <span style="color: #0000ff;">public override bool </span>OnFlushDirty(<span style="color: #0000ff;">object </span>entity, <span style="color: #0000ff;">object </span>id, <span style="color: #0000ff;">object</span>[] currentState, <span style="color: #0000ff;">object</span>[] previousState, <span style="color: #0000ff;">string</span>[] propertyNames, <span style="color: #2b91af;">IType</span>[] types)<br /> {<br />     <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">" FlushDirty :" </span>+ entity.GetType().FullName;<br />     log.Debug(msg);<br />     invalidUpdates.Add(msg);<br />     <span style="color: #0000ff;">return false</span>;<br /> }<br /><br /> <span style="color: #0000ff;">public override bool </span>OnSave(<span style="color: #0000ff;">object </span>entity, <span style="color: #0000ff;">object </span>id, <span style="color: #0000ff;">object</span>[] state, <span style="color: #0000ff;">string</span>[] propertyNames, <span style="color: #2b91af;">IType</span>[] types)<br /> {<br />     <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">" Save       :" </span>+ entity.GetType().FullName;<br />     log.Debug(msg);<br />     invalidUpdates.Add(msg);<br />     <span style="color: #0000ff;">return false</span>;<br /> }<br /><br /> <span style="color: #0000ff;">public override void </span>OnDelete(<span style="color: #0000ff;">object </span>entity, <span style="color: #0000ff;">object </span>id, <span style="color: #0000ff;">object</span>[] state, <span style="color: #0000ff;">string</span>[] propertyNames, <span style="color: #2b91af;">IType</span>[] types)<br /> {<br />     <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">" Delete     :" </span>+ entity.GetType().FullName;<br />     log.Debug(msg);<br />     invalidUpdates.Add(msg);<br /> }<br />}</pre>
<p><a href="http://11011.net/software/vspaste"></a></p>
<p>As you can see I&rsquo;m interested in : unexpected <span style="text-decoration: underline;">Flush of dirty</span> instance, unexpected <span style="text-decoration: underline;">Saves</span> and unexpected <span style="text-decoration: underline;">Deletes</span>.</p>
<p>The <i>PersistingMappings</i> is my &ldquo;driver&rdquo; to test each entity. The responsibility of the method is iterate each persistent class known by the <i>SessionFactory</i> (or the selected in <i>UnexpectedUpdateDeleteOnFetchSpecific</i> methods), run the test of each entity and reports all issues found.</p>
<pre class="code"><span style="color: #0000ff;">private void </span>PersistingMappings(<span style="color: #2b91af;">ICollection</span>&lt;<span style="color: #0000ff;">string</span>&gt; entitiesFilter)<br />{<br /> <span style="color: #0000ff;">var </span>invalidUpdates = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">List</span>&lt;<span style="color: #0000ff;">string</span>&gt;();<br /> <span style="color: #0000ff;">var </span>nop = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">NoUpdateInterceptor</span>(invalidUpdates);<br /><br /> <span style="color: #2b91af;">IEnumerable</span>&lt;<span style="color: #0000ff;">string</span>&gt; entitiesToCheck;<br /> <span style="color: #0000ff;">if </span>(entitiesFilter == <span style="color: #0000ff;">null</span>)<br /> {<br />     entitiesToCheck = cfg.ClassMappings.Select(x =&gt; x.EntityName);<br /> }<br /> <span style="color: #0000ff;">else<br /> </span>{<br />     entitiesToCheck = <span style="color: #0000ff;">from </span>persistentClass <span style="color: #0000ff;">in </span>cfg.ClassMappings<br />                       <span style="color: #0000ff;">where </span>entitiesFilter.Contains(persistentClass.EntityName)<br />                       <span style="color: #0000ff;">select </span>persistentClass.EntityName;<br /> }<br /><br /> <span style="color: #0000ff;">foreach </span>(<span style="color: #0000ff;">var </span>entityName <span style="color: #0000ff;">in </span>entitiesToCheck)<br /> {<br />     EntityPersistenceTest(invalidUpdates, entityName, nop);<br /> }<br /><br /> <span style="color: #0000ff;">if </span>(invalidUpdates.Count &gt; 0)<br /> {<br />     <span style="color: #0000ff;">if </span>(logError.IsDebugEnabled)<br />     {<br />         logError.Debug(<span style="color: #a31515;">"  "</span>);<br />         logError.Debug(<span style="color: #a31515;">"------ INVALID UPDATES -------"</span>);<br />         invalidUpdates.ForEach(x =&gt; logError.Debug(x));<br />         logError.Debug(<span style="color: #a31515;">"------------------------------"</span>);<br />     }<br /> }<br /> <span style="color: #2b91af;">Assert</span>.AreEqual(0, invalidUpdates.Count, <span style="color: #a31515;">"Has unexpected updates."</span>);<br />}</pre>
<p>To check each persistent entity I&rsquo;m using the <span style="color: #2b91af;">Configuration</span>.ClassMappings collection and extracting the <i>EntityName</i> from the <span style="color: #2b91af;">PersistentClass</span>. The use of <i>EntityName</i> don&rsquo;t mean that I&rsquo;m using the tag <span style="color: #ff0000;">entity-name</span> (as you can see in the mapping above).</p>
<p>The real &ldquo;ghostbuster&rdquo; is:</p>
<pre class="code"><span style="color: #0000ff;">private void </span>EntityPersistenceTest(<span style="color: #2b91af;">ICollection</span>&lt;<span style="color: #0000ff;">string</span>&gt; invalidUpdates,<br /> <span style="color: #0000ff;">string </span>entityName, <span style="color: #2b91af;">IInterceptor </span>nop)<br />{<br /> <span style="color: #0000ff;">const string </span>queryTemplate = <span style="color: #a31515;">"select e.{0} from {1} e"</span>;<br /> <span style="color: #0000ff;">string </span>msg = <span style="color: #a31515;">"s--------" </span>+ entityName;<br /> log.Debug(msg);<br /><br /> <span style="color: #0000ff;">using </span>(<span style="color: #0000ff;">var </span>s = sessions.OpenSession(nop))<br /> <span style="color: #0000ff;">using </span>(<span style="color: #0000ff;">var </span>tx = s.BeginTransaction())<br /> {<br />     <span style="color: #2b91af;">IList </span>entityIds = <span style="color: #0000ff;">null</span>;<br />     <span style="color: #0000ff;">try<br />     </span>{<br />         <span style="color: #0000ff;">string </span>queryString = <span style="color: #0000ff;">string</span>.Format(queryTemplate, DefaultIdName, entityName);<br />         entityIds = s.CreateQuery(queryString).SetMaxResults(1).List();<br />     }<br />     <span style="color: #0000ff;">catch </span>(<span style="color: #2b91af;">Exception </span>e)<br />     {<br />         log.Debug(<span style="color: #a31515;">"Possible METEORITE:" </span>+ e.Message);<br />     }<br /><br />     <span style="color: #0000ff;">if </span>(entityIds != <span style="color: #0000ff;">null</span>)<br />     {<br />         <span style="color: #0000ff;">if </span>(entityIds.Count == 0 || entityIds[0] == <span style="color: #0000ff;">null</span>)<br />         {<br />             log.Debug(<span style="color: #a31515;">"No instances"</span>);<br />         }<br />         <span style="color: #0000ff;">else<br />         </span>{<br />             <span style="color: #0000ff;">if </span>(entityIds.Count &gt; 1)<br />             {<br />                 msg = <span style="color: #a31515;">"&gt;Has " </span>+ entityIds.Count + <span style="color: #a31515;">" subclasses"</span>;<br />                 log.Debug(msg);<br />             }<br />             <span style="color: #0000ff;">object </span>entityId = entityIds[0];<br />             <span style="color: #0000ff;">try<br />             </span>{<br />                 s.Get(entityName, entityId);<br />                 <span style="color: #0000ff;">try<br />                 </span>{<br />                     s.Flush();<br />                 }<br />                 <span style="color: #0000ff;">catch </span>(<span style="color: #2b91af;">Exception </span>ex)<br />                 {<br />                     <span style="color: #0000ff;">string </span>emsg = <span style="color: #0000ff;">string</span>.Format(<span style="color: #a31515;">"EXCEPTION - Flushing entity [#{0}]: {1}"</span>, entityId, ex.Message);<br />                     log.Debug(emsg);<br />                     invalidUpdates.Add(emsg);<br />                 }<br />             }<br />             <span style="color: #0000ff;">catch </span>(<span style="color: #2b91af;">Exception </span>ex)<br />             {<br />                 <span style="color: #0000ff;">string </span>emsg = <span style="color: #0000ff;">string</span>.Format(<span style="color: #a31515;">"EXCEPTION - Getting [#{0}]: {1}"</span>, entityId, ex.Message);<br />                 invalidUpdates.Add(emsg);<br />                 log.Debug(emsg);<br />             }<br />         }<br />         tx.Rollback();<br />     }<br /> }<br /> msg = <span style="color: #a31515;">"e--------" </span>+ entityName;<br /> log.Debug(msg);<br />}</pre>
<p>The core of the test is:</p>
<pre class="code">s.Get(entityName, entityId);<br />s.Flush();</pre>
<p>If I Get an entity, from a clear fresh session, without touch the state what I&rsquo;m expect is that the follow Flush don&rsquo;t&nbsp; make absolutely nothing but&hellip; you know&hellip; perhaps there is an ugly &ldquo;ghost&rdquo;. Each <span style="color: #0000ff;">try</span>-<span style="color: #0000ff;">catch</span><span style="color: #000000;"> are checking some special situation.</span></p>
<p>And now lets go to run the &ldquo;ghostbuster&rdquo; in your application. Code available <a href="http://code.google.com/p/unhaddins/source/browse/#svn/HunabKu/src/Ghostbusters/Ghostbusters">here</a>.</p>
