---
layout: post
title: "Using convention to resolve sequence names"
date: 2010-12-14 00:03:00 -0300
comments: true
published: true
categories: ["blogs", "nhibernate", "archive"]
tags: ["identifier"]
alias: ["/blogs/nhibernate/archive/2010/12/13/using-convention-to-resolve-sequence-names.aspx"]
author: jfromainello
gravatar: d1a7e0fbfb2c1d9a8b10fd03648da78f
---
{% include imported_disclaimer.html %}
<p>I&rsquo;m currently working in a project with a legacy database. The database use a convention, where every table has his own identifier (one-column) and it must be generated by a sequence.</p>
<p>The name of the sequence follows a convention, first 26 characters of the Table name + the subfix &ldquo;seq&rdquo;. For instance, the sequence for the table Nationality is NATIONALITY_SEQ.</p>
<p>I take advantage of the convention as follows:</p>
<ul>
<li>I&rsquo;ve mapped everything as &ldquo;native&rdquo;.</li>
<li>I wrote a new id generator as follows:</li>
</ul>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">SequenceByConvention </span>: <span style="color: #2b91af">SequenceGenerator
</span>{
    <span style="color: blue">public override void </span>Configure(<span style="color: #2b91af">IType </span>type, <span style="color: #2b91af">IDictionary</span>&lt;<span style="color: blue">string</span>, <span style="color: blue">string</span>&gt; parms, <span style="color: #2b91af">Dialect </span>dialect)
    {
        parms[<span style="color: #a31515">"sequence"</span>] = GetSequenceNameFromTableName(parms[<span style="color: #a31515">"target_table"</span>]);
        <span style="color: blue">base</span>.Configure(type, parms, dialect);
    }
    <span style="color: blue">private static string </span>GetSequenceNameFromTableName(<span style="color: blue">string </span>tableName)
    {
        <span style="color: blue">return </span>tableName.Substring(0, <span style="color: #2b91af">Math</span>.Min(26, tableName.Length)) + <span style="color: #a31515">"_SEQ"</span>;
    }
}</pre>
<ul>
<li>And finally this is the dialect for this project:</li>
</ul>
<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">MyDialect </span>: <span style="color: #2b91af">Oracle10gDialect
</span>{
    <span style="color: blue">public override </span>System.<span style="color: #2b91af">Type </span>NativeIdentifierGeneratorClass
    {
        <span style="color: blue">get </span>{ <span style="color: blue">return typeof </span>(<span style="color: #2b91af">SequenceByConvention</span>); }
    }
}</pre>
